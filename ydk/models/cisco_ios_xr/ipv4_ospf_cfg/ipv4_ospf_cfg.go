// This module contains a collection of YANG definitions
// for Cisco IOS-XR ipv4-ospf package configuration.
// 
// This module contains definitions
// for the following management objects:
//   ospf: OSPF configuration data
// 
// This YANG module augments the
//   Cisco-IOS-XR-snmp-agent-cfg
// module with configuration data.
// 
// Copyright (c) 2013-2017 by Cisco Systems, Inc.
// All rights reserved.
package ipv4_ospf_cfg

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package ipv4_ospf_cfg"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-ospf-cfg ospf}", reflect.TypeOf(Ospf{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-ospf-cfg:ospf", reflect.TypeOf(Ospf{}))
}

// OspfFastRerouteTiebreakers represents Ospf fast reroute tiebreakers
type OspfFastRerouteTiebreakers string

const (
    // Downstream
    OspfFastRerouteTiebreakers_downstream OspfFastRerouteTiebreakers = "downstream"

    // LC Disjoint
    OspfFastRerouteTiebreakers_line_card_disjoint OspfFastRerouteTiebreakers = "line-card-disjoint"

    // Lowest metric
    OspfFastRerouteTiebreakers_lowest_metric OspfFastRerouteTiebreakers = "lowest-metric"

    // Node protection
    OspfFastRerouteTiebreakers_node_protect OspfFastRerouteTiebreakers = "node-protect"

    // Primary path
    OspfFastRerouteTiebreakers_primary_path OspfFastRerouteTiebreakers = "primary-path"

    // Secondar path
    OspfFastRerouteTiebreakers_secondary_path OspfFastRerouteTiebreakers = "secondary-path"

    // SRLG
    OspfFastRerouteTiebreakers_srlg_disjoint OspfFastRerouteTiebreakers = "srlg-disjoint"
)

// OspfFastReroute represents Ospf fast reroute
type OspfFastReroute string

const (
    // None
    OspfFastReroute_none OspfFastReroute = "none"

    // Per link
    OspfFastReroute_per_link OspfFastReroute = "per-link"

    // Per prefix
    OspfFastReroute_per_prefix OspfFastReroute = "per-prefix"
)

// OspfTraceBufSize represents Ospf trace buf size
type OspfTraceBufSize string

const (
    // Disable trace
    OspfTraceBufSize_size0 OspfTraceBufSize = "size0"

    // Buffer size 256
    OspfTraceBufSize_size256 OspfTraceBufSize = "size256"

    // Buffer size 512
    OspfTraceBufSize_size512 OspfTraceBufSize = "size512"

    // Buffer size 1024
    OspfTraceBufSize_size1024 OspfTraceBufSize = "size1024"

    // Buffer size 2048
    OspfTraceBufSize_size2048 OspfTraceBufSize = "size2048"

    // Buffer size 4096
    OspfTraceBufSize_size4096 OspfTraceBufSize = "size4096"

    // Buffer size 8192
    OspfTraceBufSize_size8192 OspfTraceBufSize = "size8192"

    // Buffer size 16384
    OspfTraceBufSize_size16384 OspfTraceBufSize = "size16384"

    // Buffer size 32768
    OspfTraceBufSize_size32768 OspfTraceBufSize = "size32768"

    // Buffer size 65536
    OspfTraceBufSize_size65536 OspfTraceBufSize = "size65536"
)

// OspfRedistLsa represents Ospf redist lsa
type OspfRedistLsa string

const (
    // Type 3 (summary) LSA
    OspfRedistLsa_summary OspfRedistLsa = "summary"

    // Type 5 (external) LSA
    OspfRedistLsa_external OspfRedistLsa = "external"
)

// OspfIetfNsf represents Ospf ietf nsf
type OspfIetfNsf string

const (
    // Use IETF NSF in planned and unplanned cases
    OspfIetfNsf_all OspfIetfNsf = "all"
)

// BfdEnableMode represents Bfd enable mode
type BfdEnableMode string

const (
    // Disable Mode - Prevent inheritance
    BfdEnableMode_disable BfdEnableMode = "disable"

    // Default Mode - Default BFD behavior
    BfdEnableMode_default_ BfdEnableMode = "default"

    // Strict Mode - Hold down adj until BFD sesion up
    BfdEnableMode_strict BfdEnableMode = "strict"
)

// OspfFastReroutePriority represents Ospf fast reroute priority
type OspfFastReroutePriority string

const (
    // Critical
    OspfFastReroutePriority_critical OspfFastReroutePriority = "critical"

    // High
    OspfFastReroutePriority_high OspfFastReroutePriority = "high"

    // Medium
    OspfFastReroutePriority_medium OspfFastReroutePriority = "medium"

    // low
    OspfFastReroutePriority_low OspfFastReroutePriority = "low"
)

// OspfCiscoNsf represents Ospf cisco nsf
type OspfCiscoNsf string

const (
    // Do not require all neighbors to run NSF
    OspfCiscoNsf_always OspfCiscoNsf = "always"

    // Require all neighbors to run NSF
    OspfCiscoNsf_require_nsf_neighbors OspfCiscoNsf = "require-nsf-neighbors"
)

// OspfRedistProtocol represents Ospf redist protocol
type OspfRedistProtocol string

const (
    // Default
    OspfRedistProtocol_all OspfRedistProtocol = "all"

    // Connected Routes
    OspfRedistProtocol_connected OspfRedistProtocol = "connected"

    // Static Routes
    OspfRedistProtocol_static OspfRedistProtocol = "static"

    // BGP
    OspfRedistProtocol_bgp OspfRedistProtocol = "bgp"

    // RIP
    OspfRedistProtocol_rip OspfRedistProtocol = "rip"

    // ISIS
    OspfRedistProtocol_isis OspfRedistProtocol = "isis"

    // OSPF
    OspfRedistProtocol_ospf OspfRedistProtocol = "ospf"

    // EIGRP
    OspfRedistProtocol_eigrp OspfRedistProtocol = "eigrp"

    // DAGR
    OspfRedistProtocol_dagr OspfRedistProtocol = "dagr"

    // Subscriber Routes
    OspfRedistProtocol_subscriber OspfRedistProtocol = "subscriber"

    // Application Routes
    OspfRedistProtocol_application OspfRedistProtocol = "application"

    // Mobile Routes
    OspfRedistProtocol_mobile OspfRedistProtocol = "mobile"
)

// OspfSegmentRouting represents Ospf segment routing
type OspfSegmentRouting string

const (
    // Disable
    OspfSegmentRouting_disable OspfSegmentRouting = "disable"

    // Mpls
    OspfSegmentRouting_mpls OspfSegmentRouting = "mpls"
)

// OspfUloopAvoidance represents Ospf uloop avoidance
type OspfUloopAvoidance string

const (
    // Protected prefixes only
    OspfUloopAvoidance_protected OspfUloopAvoidance = "protected"

    // All prefixes
    OspfUloopAvoidance_all OspfUloopAvoidance = "all"

    // Microloop avoidance using Segment Routing
    OspfUloopAvoidance_segment_routing OspfUloopAvoidance = "segment-routing"
)

// OspfSegmentRoutingForwarding represents Ospf segment routing forwarding
type OspfSegmentRoutingForwarding string

const (
    // Disable
    OspfSegmentRoutingForwarding_disable OspfSegmentRoutingForwarding = "disable"

    // Mpls
    OspfSegmentRoutingForwarding_mpls OspfSegmentRoutingForwarding = "mpls"
)

// OspfAddressFamily represents Ospf address family
type OspfAddressFamily string

const (
    // IPv4
    OspfAddressFamily_ipv4 OspfAddressFamily = "ipv4"
)

// OspfProcFastReroute represents Ospf proc fast reroute
type OspfProcFastReroute string

const (
    // None
    OspfProcFastReroute_none OspfProcFastReroute = "none"

    // Per link
    OspfProcFastReroute_per_link OspfProcFastReroute = "per-link"

    // Per prefix
    OspfProcFastReroute_per_prefix OspfProcFastReroute = "per-prefix"
)

// OspfProcFrrRlfaTunnel represents Ospf proc frr rlfa tunnel
type OspfProcFrrRlfaTunnel string

const (
    // Disabled
    OspfProcFrrRlfaTunnel_none OspfProcFrrRlfaTunnel = "none"

    // MPLS LDP
    OspfProcFrrRlfaTunnel_mpls_ldp OspfProcFrrRlfaTunnel = "mpls-ldp"
)

// OspfIetfNsfSupport represents Ospf ietf nsf support
type OspfIetfNsfSupport string

const (
    // Do not perform IETF NSF helper role
    OspfIetfNsfSupport_never OspfIetfNsfSupport = "never"
)

// OspfLinkStateMetric represents Ospf link state metric
type OspfLinkStateMetric string

const (
    // Type 1 External
    OspfLinkStateMetric_type1 OspfLinkStateMetric = "type1"

    // Type 2 External
    OspfLinkStateMetric_type2 OspfLinkStateMetric = "type2"
)

// OspfAuthentication represents Ospf authentication
type OspfAuthentication string

const (
    // No Authentication
    OspfAuthentication_none OspfAuthentication = "none"

    // Plain Text Authentication
    OspfAuthentication_plain OspfAuthentication = "plain"

    // MD5 Message Digest
    OspfAuthentication_md5 OspfAuthentication = "md5"
)

// OspfLogAdj represents Ospf log adj
type OspfLogAdj string

const (
    // Limited output
    OspfLogAdj_brief OspfLogAdj = "brief"

    // Verbose output
    OspfLogAdj_detail OspfLogAdj = "detail"

    // No output
    OspfLogAdj_suppress OspfLogAdj = "suppress"
)

// OspfSubAddressFamily represents Ospf sub address family
type OspfSubAddressFamily string

const (
    // Unicast
    OspfSubAddressFamily_unicast OspfSubAddressFamily = "unicast"
)

// OspfDomainId represents Ospf domain id
type OspfDomainId string

const (
    // Type 0x0005
    OspfDomainId_type0005 OspfDomainId = "type0005"

    // Type 0x0105
    OspfDomainId_type0105 OspfDomainId = "type0105"

    // Type 0x0205
    OspfDomainId_type0205 OspfDomainId = "type0205"

    // Type 0x8005
    OspfDomainId_type8005 OspfDomainId = "type8005"
)

// OspfEigrpRoute represents Ospf eigrp route
type OspfEigrpRoute string

const (
    // EIGRP Internal Type
    OspfEigrpRoute_internal OspfEigrpRoute = "internal"

    // EIGRP External Type
    OspfEigrpRoute_external OspfEigrpRoute = "external"
)

// OspfSid represents Ospf sid
type OspfSid string

const (
    // Index
    OspfSid_index OspfSid = "index"

    // Absolute
    OspfSid_absolute OspfSid = "absolute"
)

// Nsr represents Nsr
type Nsr string

const (
    // Enable non-stop routing
    Nsr_true Nsr = "true"

    // Disable non-stop routing
    Nsr_false Nsr = "false"
)

// OspfFastRerouteTiebreakersIntf represents Ospf fast reroute tiebreakers intf
type OspfFastRerouteTiebreakersIntf string

const (
    // Downstream
    OspfFastRerouteTiebreakersIntf_downstream OspfFastRerouteTiebreakersIntf = "downstream"

    // LC Disjoint
    OspfFastRerouteTiebreakersIntf_line_card_disjoint OspfFastRerouteTiebreakersIntf = "line-card-disjoint"

    // Lowest metric
    OspfFastRerouteTiebreakersIntf_lowest_metric OspfFastRerouteTiebreakersIntf = "lowest-metric"

    // Node protection
    OspfFastRerouteTiebreakersIntf_node_protect OspfFastRerouteTiebreakersIntf = "node-protect"

    // Primary path
    OspfFastRerouteTiebreakersIntf_primary_path OspfFastRerouteTiebreakersIntf = "primary-path"

    // Secondar path
    OspfFastRerouteTiebreakersIntf_secondary_path OspfFastRerouteTiebreakersIntf = "secondary-path"

    // SRLG
    OspfFastRerouteTiebreakersIntf_srlg_disjoint OspfFastRerouteTiebreakersIntf = "srlg-disjoint"
)

// OspfDistListProtocol represents Ospf dist list protocol
type OspfDistListProtocol string

const (
    // Default
    OspfDistListProtocol_all OspfDistListProtocol = "all"

    // Connected Routes
    OspfDistListProtocol_connected OspfDistListProtocol = "connected"

    // Static Routes
    OspfDistListProtocol_static OspfDistListProtocol = "static"

    // BGP
    OspfDistListProtocol_bgp OspfDistListProtocol = "bgp"

    // OSPF
    OspfDistListProtocol_ospf OspfDistListProtocol = "ospf"

    // DAGR
    OspfDistListProtocol_dagr OspfDistListProtocol = "dagr"
)

// OspfRouteLevel represents Ospf route level
type OspfRouteLevel string

const (
    // Type 1 only
    OspfRouteLevel_type1 OspfRouteLevel = "type1"

    // Type 2 only
    OspfRouteLevel_type2 OspfRouteLevel = "type2"

    // Both Type 1 and Type 2
    OspfRouteLevel_type1_and2 OspfRouteLevel = "type1-and2"
)

// OspfNetwork represents Ospf network
type OspfNetwork string

const (
    // Broadcast
    OspfNetwork_broadcast OspfNetwork = "broadcast"

    // NonBroadcast
    OspfNetwork_non_broadcast OspfNetwork = "non-broadcast"

    // Point to Point
    OspfNetwork_point_to_point OspfNetwork = "point-to-point"

    // Point to Multipoint
    OspfNetwork_point_to_multipoint OspfNetwork = "point-to-multipoint"

    // NonBroadcast Point to Multipoint
    OspfNetwork_non_broadcast_point_to_multipoint OspfNetwork = "non-broadcast-point-to-multipoint"
)

// OspfFrrRlfaTunnel represents Ospf frr rlfa tunnel
type OspfFrrRlfaTunnel string

const (
    // Disabled
    OspfFrrRlfaTunnel_none OspfFrrRlfaTunnel = "none"

    // MPLS LDP
    OspfFrrRlfaTunnel_mpls_ldp OspfFrrRlfaTunnel = "mpls-ldp"
)

// OspfShutdown represents Ospf shutdown
type OspfShutdown string

const (
    // Full graceful shutdown
    OspfShutdown_full OspfShutdown = "full"

    // Enter host only mode
    OspfShutdown_hostmode OspfShutdown = "hostmode"

    // Full graceful shutdown post reload
    OspfShutdown_onreload OspfShutdown = "onreload"
)

// OspfKeychainAuth represents Ospf keychain auth
type OspfKeychainAuth string

const (
    // No Keychain Authentication
    OspfKeychainAuth_none OspfKeychainAuth = "none"

    // Keychain Authentication
    OspfKeychainAuth_keychain OspfKeychainAuth = "keychain"
)

// Ospf
// OSPF configuration data
type Ospf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Process related configuration.
    Processes Ospf_Processes

    // OSPF global configuration data.
    Global Ospf_Global
}

func (ospf *Ospf) GetFilter() yfilter.YFilter { return ospf.YFilter }

func (ospf *Ospf) SetFilter(yf yfilter.YFilter) { ospf.YFilter = yf }

func (ospf *Ospf) GetGoName(yname string) string {
    if yname == "processes" { return "Processes" }
    if yname == "global" { return "Global" }
    return ""
}

func (ospf *Ospf) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-ospf-cfg:ospf"
}

func (ospf *Ospf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "processes" {
        return &ospf.Processes
    }
    if childYangName == "global" {
        return &ospf.Global
    }
    return nil
}

func (ospf *Ospf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["processes"] = &ospf.Processes
    children["global"] = &ospf.Global
    return children
}

func (ospf *Ospf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ospf *Ospf) GetBundleName() string { return "cisco_ios_xr" }

func (ospf *Ospf) GetYangName() string { return "ospf" }

func (ospf *Ospf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ospf *Ospf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ospf *Ospf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ospf *Ospf) SetParent(parent types.Entity) { ospf.parent = parent }

func (ospf *Ospf) GetParent() types.Entity { return ospf.parent }

func (ospf *Ospf) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-ospf-cfg" }

// Ospf_Processes
// Process related configuration
type Ospf_Processes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configuration for a particular OSPF process and associated default VRF. The
    // type is slice of Ospf_Processes_Process.
    Process []Ospf_Processes_Process
}

func (processes *Ospf_Processes) GetFilter() yfilter.YFilter { return processes.YFilter }

func (processes *Ospf_Processes) SetFilter(yf yfilter.YFilter) { processes.YFilter = yf }

func (processes *Ospf_Processes) GetGoName(yname string) string {
    if yname == "process" { return "Process" }
    return ""
}

func (processes *Ospf_Processes) GetSegmentPath() string {
    return "processes"
}

func (processes *Ospf_Processes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "process" {
        for _, c := range processes.Process {
            if processes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process{}
        processes.Process = append(processes.Process, child)
        return &processes.Process[len(processes.Process)-1]
    }
    return nil
}

func (processes *Ospf_Processes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range processes.Process {
        children[processes.Process[i].GetSegmentPath()] = &processes.Process[i]
    }
    return children
}

func (processes *Ospf_Processes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (processes *Ospf_Processes) GetBundleName() string { return "cisco_ios_xr" }

func (processes *Ospf_Processes) GetYangName() string { return "processes" }

func (processes *Ospf_Processes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (processes *Ospf_Processes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (processes *Ospf_Processes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (processes *Ospf_Processes) SetParent(parent types.Entity) { processes.parent = parent }

func (processes *Ospf_Processes) GetParent() types.Entity { return processes.parent }

func (processes *Ospf_Processes) GetParentYangName() string { return "ospf" }

// Ospf_Processes_Process
// Configuration for a particular OSPF process and
// associated default VRF
type Ospf_Processes_Process struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name for this OSPF process. The type is string
    // with length: 1..32.
    ProcessName interface{}

    // Start OSPF configuration. The type is interface{}.
    Start interface{}

    // Enable non-stop routing. The type is Nsr. The default value is true.
    Nsr interface{}

    // Type of protocol shutdown. The type is OspfShutdown.
    ProtocolShutdown interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // OSPF SNMP configuration.
    Snmp Ospf_Processes_Process_Snmp

    // Enable distribution of link-state database services.
    Distribute Ospf_Processes_Process_Distribute

    // VRF related configuration.
    Vrfs Ospf_Processes_Process_Vrfs

    // Configuration to change size of trace buffer.
    TraceBufs Ospf_Processes_Process_TraceBufs

    // Adjust routing timers.
    GracefulShutdownTimers Ospf_Processes_Process_GracefulShutdownTimers

    // Default VRF related configuration.
    DefaultVrf Ospf_Processes_Process_DefaultVrf
}

func (process *Ospf_Processes_Process) GetFilter() yfilter.YFilter { return process.YFilter }

func (process *Ospf_Processes_Process) SetFilter(yf yfilter.YFilter) { process.YFilter = yf }

func (process *Ospf_Processes_Process) GetGoName(yname string) string {
    if yname == "process-name" { return "ProcessName" }
    if yname == "start" { return "Start" }
    if yname == "nsr" { return "Nsr" }
    if yname == "protocol-shutdown" { return "ProtocolShutdown" }
    if yname == "running" { return "Running" }
    if yname == "snmp" { return "Snmp" }
    if yname == "distribute" { return "Distribute" }
    if yname == "vrfs" { return "Vrfs" }
    if yname == "trace-bufs" { return "TraceBufs" }
    if yname == "graceful-shutdown-timers" { return "GracefulShutdownTimers" }
    if yname == "default-vrf" { return "DefaultVrf" }
    return ""
}

func (process *Ospf_Processes_Process) GetSegmentPath() string {
    return "process" + "[process-name='" + fmt.Sprintf("%v", process.ProcessName) + "']"
}

func (process *Ospf_Processes_Process) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "snmp" {
        return &process.Snmp
    }
    if childYangName == "distribute" {
        return &process.Distribute
    }
    if childYangName == "vrfs" {
        return &process.Vrfs
    }
    if childYangName == "trace-bufs" {
        return &process.TraceBufs
    }
    if childYangName == "graceful-shutdown-timers" {
        return &process.GracefulShutdownTimers
    }
    if childYangName == "default-vrf" {
        return &process.DefaultVrf
    }
    return nil
}

func (process *Ospf_Processes_Process) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["snmp"] = &process.Snmp
    children["distribute"] = &process.Distribute
    children["vrfs"] = &process.Vrfs
    children["trace-bufs"] = &process.TraceBufs
    children["graceful-shutdown-timers"] = &process.GracefulShutdownTimers
    children["default-vrf"] = &process.DefaultVrf
    return children
}

func (process *Ospf_Processes_Process) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["process-name"] = process.ProcessName
    leafs["start"] = process.Start
    leafs["nsr"] = process.Nsr
    leafs["protocol-shutdown"] = process.ProtocolShutdown
    leafs["running"] = process.Running
    return leafs
}

func (process *Ospf_Processes_Process) GetBundleName() string { return "cisco_ios_xr" }

func (process *Ospf_Processes_Process) GetYangName() string { return "process" }

func (process *Ospf_Processes_Process) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (process *Ospf_Processes_Process) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (process *Ospf_Processes_Process) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (process *Ospf_Processes_Process) SetParent(parent types.Entity) { process.parent = parent }

func (process *Ospf_Processes_Process) GetParent() types.Entity { return process.parent }

func (process *Ospf_Processes_Process) GetParentYangName() string { return "processes" }

// Ospf_Processes_Process_Snmp
// OSPF SNMP configuration
type Ospf_Processes_Process_Snmp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Per OSPF process SNMP trap rate-limit.
    TrapRateLimit Ospf_Processes_Process_Snmp_TrapRateLimit
}

func (snmp *Ospf_Processes_Process_Snmp) GetFilter() yfilter.YFilter { return snmp.YFilter }

func (snmp *Ospf_Processes_Process_Snmp) SetFilter(yf yfilter.YFilter) { snmp.YFilter = yf }

func (snmp *Ospf_Processes_Process_Snmp) GetGoName(yname string) string {
    if yname == "trap-rate-limit" { return "TrapRateLimit" }
    return ""
}

func (snmp *Ospf_Processes_Process_Snmp) GetSegmentPath() string {
    return "snmp"
}

func (snmp *Ospf_Processes_Process_Snmp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "trap-rate-limit" {
        return &snmp.TrapRateLimit
    }
    return nil
}

func (snmp *Ospf_Processes_Process_Snmp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["trap-rate-limit"] = &snmp.TrapRateLimit
    return children
}

func (snmp *Ospf_Processes_Process_Snmp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (snmp *Ospf_Processes_Process_Snmp) GetBundleName() string { return "cisco_ios_xr" }

func (snmp *Ospf_Processes_Process_Snmp) GetYangName() string { return "snmp" }

func (snmp *Ospf_Processes_Process_Snmp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snmp *Ospf_Processes_Process_Snmp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snmp *Ospf_Processes_Process_Snmp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snmp *Ospf_Processes_Process_Snmp) SetParent(parent types.Entity) { snmp.parent = parent }

func (snmp *Ospf_Processes_Process_Snmp) GetParent() types.Entity { return snmp.parent }

func (snmp *Ospf_Processes_Process_Snmp) GetParentYangName() string { return "process" }

// Ospf_Processes_Process_Snmp_TrapRateLimit
// Per OSPF process SNMP trap rate-limit
// This type is a presence type.
type Ospf_Processes_Process_Snmp_TrapRateLimit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Trap rate limit sliding window size. The type is interface{} with range:
    // 2..60. This attribute is mandatory.
    WindowSize interface{}

    // Max number of traps to send in window time. The type is interface{} with
    // range: 0..300. This attribute is mandatory.
    MaxWindowTraps interface{}
}

func (trapRateLimit *Ospf_Processes_Process_Snmp_TrapRateLimit) GetFilter() yfilter.YFilter { return trapRateLimit.YFilter }

func (trapRateLimit *Ospf_Processes_Process_Snmp_TrapRateLimit) SetFilter(yf yfilter.YFilter) { trapRateLimit.YFilter = yf }

func (trapRateLimit *Ospf_Processes_Process_Snmp_TrapRateLimit) GetGoName(yname string) string {
    if yname == "window-size" { return "WindowSize" }
    if yname == "max-window-traps" { return "MaxWindowTraps" }
    return ""
}

func (trapRateLimit *Ospf_Processes_Process_Snmp_TrapRateLimit) GetSegmentPath() string {
    return "trap-rate-limit"
}

func (trapRateLimit *Ospf_Processes_Process_Snmp_TrapRateLimit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (trapRateLimit *Ospf_Processes_Process_Snmp_TrapRateLimit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (trapRateLimit *Ospf_Processes_Process_Snmp_TrapRateLimit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["window-size"] = trapRateLimit.WindowSize
    leafs["max-window-traps"] = trapRateLimit.MaxWindowTraps
    return leafs
}

func (trapRateLimit *Ospf_Processes_Process_Snmp_TrapRateLimit) GetBundleName() string { return "cisco_ios_xr" }

func (trapRateLimit *Ospf_Processes_Process_Snmp_TrapRateLimit) GetYangName() string { return "trap-rate-limit" }

func (trapRateLimit *Ospf_Processes_Process_Snmp_TrapRateLimit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (trapRateLimit *Ospf_Processes_Process_Snmp_TrapRateLimit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (trapRateLimit *Ospf_Processes_Process_Snmp_TrapRateLimit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (trapRateLimit *Ospf_Processes_Process_Snmp_TrapRateLimit) SetParent(parent types.Entity) { trapRateLimit.parent = parent }

func (trapRateLimit *Ospf_Processes_Process_Snmp_TrapRateLimit) GetParent() types.Entity { return trapRateLimit.parent }

func (trapRateLimit *Ospf_Processes_Process_Snmp_TrapRateLimit) GetParentYangName() string { return "snmp" }

// Ospf_Processes_Process_Distribute
// Enable distribution of link-state database
// services
// This type is a presence type.
type Ospf_Processes_Process_Distribute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Seconds. The type is interface{} with range: 1..3600. Units are second.
    Throttle interface{}

    // Instance ID. The type is interface{} with range: 0..4294967295.
    InstanceId interface{}
}

func (distribute *Ospf_Processes_Process_Distribute) GetFilter() yfilter.YFilter { return distribute.YFilter }

func (distribute *Ospf_Processes_Process_Distribute) SetFilter(yf yfilter.YFilter) { distribute.YFilter = yf }

func (distribute *Ospf_Processes_Process_Distribute) GetGoName(yname string) string {
    if yname == "throttle" { return "Throttle" }
    if yname == "instance-id" { return "InstanceId" }
    return ""
}

func (distribute *Ospf_Processes_Process_Distribute) GetSegmentPath() string {
    return "distribute"
}

func (distribute *Ospf_Processes_Process_Distribute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (distribute *Ospf_Processes_Process_Distribute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (distribute *Ospf_Processes_Process_Distribute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["throttle"] = distribute.Throttle
    leafs["instance-id"] = distribute.InstanceId
    return leafs
}

func (distribute *Ospf_Processes_Process_Distribute) GetBundleName() string { return "cisco_ios_xr" }

func (distribute *Ospf_Processes_Process_Distribute) GetYangName() string { return "distribute" }

func (distribute *Ospf_Processes_Process_Distribute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distribute *Ospf_Processes_Process_Distribute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distribute *Ospf_Processes_Process_Distribute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distribute *Ospf_Processes_Process_Distribute) SetParent(parent types.Entity) { distribute.parent = parent }

func (distribute *Ospf_Processes_Process_Distribute) GetParent() types.Entity { return distribute.parent }

func (distribute *Ospf_Processes_Process_Distribute) GetParentYangName() string { return "process" }

// Ospf_Processes_Process_Vrfs
// VRF related configuration
type Ospf_Processes_Process_Vrfs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configuration for a particular OSPF vrf. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf.
    Vrf []Ospf_Processes_Process_Vrfs_Vrf
}

func (vrfs *Ospf_Processes_Process_Vrfs) GetFilter() yfilter.YFilter { return vrfs.YFilter }

func (vrfs *Ospf_Processes_Process_Vrfs) SetFilter(yf yfilter.YFilter) { vrfs.YFilter = yf }

func (vrfs *Ospf_Processes_Process_Vrfs) GetGoName(yname string) string {
    if yname == "vrf" { return "Vrf" }
    return ""
}

func (vrfs *Ospf_Processes_Process_Vrfs) GetSegmentPath() string {
    return "vrfs"
}

func (vrfs *Ospf_Processes_Process_Vrfs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vrf" {
        for _, c := range vrfs.Vrf {
            if vrfs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf{}
        vrfs.Vrf = append(vrfs.Vrf, child)
        return &vrfs.Vrf[len(vrfs.Vrf)-1]
    }
    return nil
}

func (vrfs *Ospf_Processes_Process_Vrfs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range vrfs.Vrf {
        children[vrfs.Vrf[i].GetSegmentPath()] = &vrfs.Vrf[i]
    }
    return children
}

func (vrfs *Ospf_Processes_Process_Vrfs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (vrfs *Ospf_Processes_Process_Vrfs) GetBundleName() string { return "cisco_ios_xr" }

func (vrfs *Ospf_Processes_Process_Vrfs) GetYangName() string { return "vrfs" }

func (vrfs *Ospf_Processes_Process_Vrfs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfs *Ospf_Processes_Process_Vrfs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfs *Ospf_Processes_Process_Vrfs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfs *Ospf_Processes_Process_Vrfs) SetParent(parent types.Entity) { vrfs.parent = parent }

func (vrfs *Ospf_Processes_Process_Vrfs) GetParent() types.Entity { return vrfs.parent }

func (vrfs *Ospf_Processes_Process_Vrfs) GetParentYangName() string { return "process" }

// Ospf_Processes_Process_Vrfs_Vrf
// Configuration for a particular OSPF vrf
type Ospf_Processes_Process_Vrfs_Vrf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name for this vrf. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Start OSPF VRF configuration. The type is interface{}.
    VrfStart interface{}

    // Enable/disable OSPF SNMP trap. The type is bool. The default value is
    // false.
    SnmpTrapEnabled interface{}

    // 32 bit Domain tag value. The type is interface{} with range: 1..4294967295.
    DomainTag interface{}

    // VRF lite capability. The type is interface{}.
    VrfLite interface{}

    // Disable DN bit check. The type is interface{}.
    DisableDnBitCheck interface{}

    // Ignore MOSPF (Type 6) LSAs. The type is interface{}.
    IgnoreMospf interface{}

    // Router ID for this OSPF process. Enter an IP Address. The type is string
    // with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouterId interface{}

    // Prefer type7 externals over type5. The type is interface{}.
    Type7 interface{}

    // OSPF SNMP context configuration. The type is string.
    SnmpContext interface{}

    // Max number of interfaces allowed to be configured. The type is interface{}
    // with range: 1..4294967295. The default value is 1024.
    MaximumInterfaces interface{}

    // Disable opaque LSAs. The type is interface{}.
    NoOpaque interface{}

    // Configure a route-policy for prioritizing RIB route install. The type is
    // string.
    SpfPrefixPriority interface{}

    // Forward packets over multiple paths (number of paths). The type is
    // interface{} with range: 1..64.
    MaximumPaths interface{}

    // Log changes in adjacency state. The type is OspfLogAdj.
    AdjacencyChanges interface{}

    // Set default metric of redistributed routes. The type is interface{} with
    // range: 1..16777214. The default value is 1.
    DefaultMetric interface{}

    // OSPF Domain ID.
    DomainId Ospf_Processes_Process_Vrfs_Vrf_DomainId

    // Microloop configuration.
    Microloop Ospf_Processes_Process_Vrfs_Vrf_Microloop

    // Maximum number of prefixes redistributed into OSPF.
    MaximumRedistributePrefix Ospf_Processes_Process_Vrfs_Vrf_MaximumRedistributePrefix

    // Control distribution of default information.
    DefaultInformation Ospf_Processes_Process_Vrfs_Vrf_DefaultInformation

    // OSPF address family.
    Af Ospf_Processes_Process_Vrfs_Vrf_Af

    // Adjust OSPF input queue sizes and processing quantums.
    Queue Ospf_Processes_Process_Vrfs_Vrf_Queue

    // Set maximum metric configuration.
    MaxMetric Ospf_Processes_Process_Vrfs_Vrf_MaxMetric

    // Non Stop Forwarding configuration.
    Nsf Ospf_Processes_Process_Vrfs_Vrf_Nsf

    // Process scope configuration.
    ProcessScope Ospf_Processes_Process_Vrfs_Vrf_ProcessScope

    // Redistribute configurations.
    Redistribution Ospf_Processes_Process_Vrfs_Vrf_Redistribution

    // Staggering OSPF adjacency bring up.
    AdjacencyStagger Ospf_Processes_Process_Vrfs_Vrf_AdjacencyStagger

    // Set max-lsa configuration.
    MaxLsa Ospf_Processes_Process_Vrfs_Vrf_MaxLsa

    // Controls automatic cost based on bandwidth.
    AutoCost Ospf_Processes_Process_Vrfs_Vrf_AutoCost

    // Unequal Cost Multi-ptah configuration.
    Ucmp Ospf_Processes_Process_Vrfs_Vrf_Ucmp

    // Fast-reroute instance scoped parameters.
    FastReroute Ospf_Processes_Process_Vrfs_Vrf_FastReroute

    // Configure IP prefix summary.
    SummaryPrefixes Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes

    // Filter outgoing routing updates.
    OutgoingRouteUpdates Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates

    // Administrative distance configuration.
    Distance Ospf_Processes_Process_Vrfs_Vrf_Distance

    // Area configuration.
    AreaAddresses Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses

    // Adjust routing timers.
    Timers Ospf_Processes_Process_Vrfs_Vrf_Timers
}

func (vrf *Ospf_Processes_Process_Vrfs_Vrf) GetFilter() yfilter.YFilter { return vrf.YFilter }

func (vrf *Ospf_Processes_Process_Vrfs_Vrf) SetFilter(yf yfilter.YFilter) { vrf.YFilter = yf }

func (vrf *Ospf_Processes_Process_Vrfs_Vrf) GetGoName(yname string) string {
    if yname == "vrf-name" { return "VrfName" }
    if yname == "vrf-start" { return "VrfStart" }
    if yname == "snmp-trap-enabled" { return "SnmpTrapEnabled" }
    if yname == "domain-tag" { return "DomainTag" }
    if yname == "vrf-lite" { return "VrfLite" }
    if yname == "disable-dn-bit-check" { return "DisableDnBitCheck" }
    if yname == "ignore-mospf" { return "IgnoreMospf" }
    if yname == "router-id" { return "RouterId" }
    if yname == "type7" { return "Type7" }
    if yname == "snmp-context" { return "SnmpContext" }
    if yname == "maximum-interfaces" { return "MaximumInterfaces" }
    if yname == "no-opaque" { return "NoOpaque" }
    if yname == "spf-prefix-priority" { return "SpfPrefixPriority" }
    if yname == "maximum-paths" { return "MaximumPaths" }
    if yname == "adjacency-changes" { return "AdjacencyChanges" }
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "domain-id" { return "DomainId" }
    if yname == "microloop" { return "Microloop" }
    if yname == "maximum-redistribute-prefix" { return "MaximumRedistributePrefix" }
    if yname == "default-information" { return "DefaultInformation" }
    if yname == "af" { return "Af" }
    if yname == "queue" { return "Queue" }
    if yname == "max-metric" { return "MaxMetric" }
    if yname == "nsf" { return "Nsf" }
    if yname == "process-scope" { return "ProcessScope" }
    if yname == "redistribution" { return "Redistribution" }
    if yname == "adjacency-stagger" { return "AdjacencyStagger" }
    if yname == "max-lsa" { return "MaxLsa" }
    if yname == "auto-cost" { return "AutoCost" }
    if yname == "ucmp" { return "Ucmp" }
    if yname == "fast-reroute" { return "FastReroute" }
    if yname == "summary-prefixes" { return "SummaryPrefixes" }
    if yname == "outgoing-route-updates" { return "OutgoingRouteUpdates" }
    if yname == "distance" { return "Distance" }
    if yname == "area-addresses" { return "AreaAddresses" }
    if yname == "timers" { return "Timers" }
    return ""
}

func (vrf *Ospf_Processes_Process_Vrfs_Vrf) GetSegmentPath() string {
    return "vrf" + "[vrf-name='" + fmt.Sprintf("%v", vrf.VrfName) + "']"
}

func (vrf *Ospf_Processes_Process_Vrfs_Vrf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "domain-id" {
        return &vrf.DomainId
    }
    if childYangName == "microloop" {
        return &vrf.Microloop
    }
    if childYangName == "maximum-redistribute-prefix" {
        return &vrf.MaximumRedistributePrefix
    }
    if childYangName == "default-information" {
        return &vrf.DefaultInformation
    }
    if childYangName == "af" {
        return &vrf.Af
    }
    if childYangName == "queue" {
        return &vrf.Queue
    }
    if childYangName == "max-metric" {
        return &vrf.MaxMetric
    }
    if childYangName == "nsf" {
        return &vrf.Nsf
    }
    if childYangName == "process-scope" {
        return &vrf.ProcessScope
    }
    if childYangName == "redistribution" {
        return &vrf.Redistribution
    }
    if childYangName == "adjacency-stagger" {
        return &vrf.AdjacencyStagger
    }
    if childYangName == "max-lsa" {
        return &vrf.MaxLsa
    }
    if childYangName == "auto-cost" {
        return &vrf.AutoCost
    }
    if childYangName == "ucmp" {
        return &vrf.Ucmp
    }
    if childYangName == "fast-reroute" {
        return &vrf.FastReroute
    }
    if childYangName == "summary-prefixes" {
        return &vrf.SummaryPrefixes
    }
    if childYangName == "outgoing-route-updates" {
        return &vrf.OutgoingRouteUpdates
    }
    if childYangName == "distance" {
        return &vrf.Distance
    }
    if childYangName == "area-addresses" {
        return &vrf.AreaAddresses
    }
    if childYangName == "timers" {
        return &vrf.Timers
    }
    return nil
}

func (vrf *Ospf_Processes_Process_Vrfs_Vrf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["domain-id"] = &vrf.DomainId
    children["microloop"] = &vrf.Microloop
    children["maximum-redistribute-prefix"] = &vrf.MaximumRedistributePrefix
    children["default-information"] = &vrf.DefaultInformation
    children["af"] = &vrf.Af
    children["queue"] = &vrf.Queue
    children["max-metric"] = &vrf.MaxMetric
    children["nsf"] = &vrf.Nsf
    children["process-scope"] = &vrf.ProcessScope
    children["redistribution"] = &vrf.Redistribution
    children["adjacency-stagger"] = &vrf.AdjacencyStagger
    children["max-lsa"] = &vrf.MaxLsa
    children["auto-cost"] = &vrf.AutoCost
    children["ucmp"] = &vrf.Ucmp
    children["fast-reroute"] = &vrf.FastReroute
    children["summary-prefixes"] = &vrf.SummaryPrefixes
    children["outgoing-route-updates"] = &vrf.OutgoingRouteUpdates
    children["distance"] = &vrf.Distance
    children["area-addresses"] = &vrf.AreaAddresses
    children["timers"] = &vrf.Timers
    return children
}

func (vrf *Ospf_Processes_Process_Vrfs_Vrf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-name"] = vrf.VrfName
    leafs["vrf-start"] = vrf.VrfStart
    leafs["snmp-trap-enabled"] = vrf.SnmpTrapEnabled
    leafs["domain-tag"] = vrf.DomainTag
    leafs["vrf-lite"] = vrf.VrfLite
    leafs["disable-dn-bit-check"] = vrf.DisableDnBitCheck
    leafs["ignore-mospf"] = vrf.IgnoreMospf
    leafs["router-id"] = vrf.RouterId
    leafs["type7"] = vrf.Type7
    leafs["snmp-context"] = vrf.SnmpContext
    leafs["maximum-interfaces"] = vrf.MaximumInterfaces
    leafs["no-opaque"] = vrf.NoOpaque
    leafs["spf-prefix-priority"] = vrf.SpfPrefixPriority
    leafs["maximum-paths"] = vrf.MaximumPaths
    leafs["adjacency-changes"] = vrf.AdjacencyChanges
    leafs["default-metric"] = vrf.DefaultMetric
    return leafs
}

func (vrf *Ospf_Processes_Process_Vrfs_Vrf) GetBundleName() string { return "cisco_ios_xr" }

func (vrf *Ospf_Processes_Process_Vrfs_Vrf) GetYangName() string { return "vrf" }

func (vrf *Ospf_Processes_Process_Vrfs_Vrf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrf *Ospf_Processes_Process_Vrfs_Vrf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrf *Ospf_Processes_Process_Vrfs_Vrf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrf *Ospf_Processes_Process_Vrfs_Vrf) SetParent(parent types.Entity) { vrf.parent = parent }

func (vrf *Ospf_Processes_Process_Vrfs_Vrf) GetParent() types.Entity { return vrf.parent }

func (vrf *Ospf_Processes_Process_Vrfs_Vrf) GetParentYangName() string { return "vrfs" }

// Ospf_Processes_Process_Vrfs_Vrf_DomainId
// OSPF Domain ID
type Ospf_Processes_Process_Vrfs_Vrf_DomainId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPF Primary domain ID.
    PrimaryDomainId Ospf_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId

    // Secondary domain ID Table.
    SecondaryDomainIds Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds
}

func (domainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId) GetFilter() yfilter.YFilter { return domainId.YFilter }

func (domainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId) SetFilter(yf yfilter.YFilter) { domainId.YFilter = yf }

func (domainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId) GetGoName(yname string) string {
    if yname == "primary-domain-id" { return "PrimaryDomainId" }
    if yname == "secondary-domain-ids" { return "SecondaryDomainIds" }
    return ""
}

func (domainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId) GetSegmentPath() string {
    return "domain-id"
}

func (domainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "primary-domain-id" {
        return &domainId.PrimaryDomainId
    }
    if childYangName == "secondary-domain-ids" {
        return &domainId.SecondaryDomainIds
    }
    return nil
}

func (domainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["primary-domain-id"] = &domainId.PrimaryDomainId
    children["secondary-domain-ids"] = &domainId.SecondaryDomainIds
    return children
}

func (domainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (domainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId) GetBundleName() string { return "cisco_ios_xr" }

func (domainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId) GetYangName() string { return "domain-id" }

func (domainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (domainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (domainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (domainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId) SetParent(parent types.Entity) { domainId.parent = parent }

func (domainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId) GetParent() types.Entity { return domainId.parent }

func (domainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId) GetParentYangName() string { return "vrf" }

// Ospf_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId
// OSPF Primary domain ID
type Ospf_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Primary domain ID type. The type is OspfDomainId.
    DomainIdType interface{}

    // Primary domain ID value. The type is string.
    DomainIdName interface{}
}

func (primaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId) GetFilter() yfilter.YFilter { return primaryDomainId.YFilter }

func (primaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId) SetFilter(yf yfilter.YFilter) { primaryDomainId.YFilter = yf }

func (primaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId) GetGoName(yname string) string {
    if yname == "domain-id-type" { return "DomainIdType" }
    if yname == "domain-id-name" { return "DomainIdName" }
    return ""
}

func (primaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId) GetSegmentPath() string {
    return "primary-domain-id"
}

func (primaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (primaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (primaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["domain-id-type"] = primaryDomainId.DomainIdType
    leafs["domain-id-name"] = primaryDomainId.DomainIdName
    return leafs
}

func (primaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId) GetBundleName() string { return "cisco_ios_xr" }

func (primaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId) GetYangName() string { return "primary-domain-id" }

func (primaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (primaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (primaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (primaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId) SetParent(parent types.Entity) { primaryDomainId.parent = parent }

func (primaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId) GetParent() types.Entity { return primaryDomainId.parent }

func (primaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId) GetParentYangName() string { return "domain-id" }

// Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds
// Secondary domain ID Table
type Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPF Secondary domain ID. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId.
    SecondaryDomainId []Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId
}

func (secondaryDomainIds *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds) GetFilter() yfilter.YFilter { return secondaryDomainIds.YFilter }

func (secondaryDomainIds *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds) SetFilter(yf yfilter.YFilter) { secondaryDomainIds.YFilter = yf }

func (secondaryDomainIds *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds) GetGoName(yname string) string {
    if yname == "secondary-domain-id" { return "SecondaryDomainId" }
    return ""
}

func (secondaryDomainIds *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds) GetSegmentPath() string {
    return "secondary-domain-ids"
}

func (secondaryDomainIds *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "secondary-domain-id" {
        for _, c := range secondaryDomainIds.SecondaryDomainId {
            if secondaryDomainIds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId{}
        secondaryDomainIds.SecondaryDomainId = append(secondaryDomainIds.SecondaryDomainId, child)
        return &secondaryDomainIds.SecondaryDomainId[len(secondaryDomainIds.SecondaryDomainId)-1]
    }
    return nil
}

func (secondaryDomainIds *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range secondaryDomainIds.SecondaryDomainId {
        children[secondaryDomainIds.SecondaryDomainId[i].GetSegmentPath()] = &secondaryDomainIds.SecondaryDomainId[i]
    }
    return children
}

func (secondaryDomainIds *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (secondaryDomainIds *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds) GetBundleName() string { return "cisco_ios_xr" }

func (secondaryDomainIds *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds) GetYangName() string { return "secondary-domain-ids" }

func (secondaryDomainIds *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (secondaryDomainIds *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (secondaryDomainIds *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (secondaryDomainIds *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds) SetParent(parent types.Entity) { secondaryDomainIds.parent = parent }

func (secondaryDomainIds *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds) GetParent() types.Entity { return secondaryDomainIds.parent }

func (secondaryDomainIds *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds) GetParentYangName() string { return "domain-id" }

// Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId
// OSPF Secondary domain ID
type Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Secondary domain ID type. The type is
    // OspfDomainId.
    DomainIdType interface{}

    // This attribute is a key. Secondary domain ID value. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    DomainIdName interface{}
}

func (secondaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId) GetFilter() yfilter.YFilter { return secondaryDomainId.YFilter }

func (secondaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId) SetFilter(yf yfilter.YFilter) { secondaryDomainId.YFilter = yf }

func (secondaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId) GetGoName(yname string) string {
    if yname == "domain-id-type" { return "DomainIdType" }
    if yname == "domain-id-name" { return "DomainIdName" }
    return ""
}

func (secondaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId) GetSegmentPath() string {
    return "secondary-domain-id" + "[domain-id-type='" + fmt.Sprintf("%v", secondaryDomainId.DomainIdType) + "']" + "[domain-id-name='" + fmt.Sprintf("%v", secondaryDomainId.DomainIdName) + "']"
}

func (secondaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (secondaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (secondaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["domain-id-type"] = secondaryDomainId.DomainIdType
    leafs["domain-id-name"] = secondaryDomainId.DomainIdName
    return leafs
}

func (secondaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId) GetBundleName() string { return "cisco_ios_xr" }

func (secondaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId) GetYangName() string { return "secondary-domain-id" }

func (secondaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (secondaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (secondaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (secondaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId) SetParent(parent types.Entity) { secondaryDomainId.parent = parent }

func (secondaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId) GetParent() types.Entity { return secondaryDomainId.parent }

func (secondaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId) GetParentYangName() string { return "secondary-domain-ids" }

// Ospf_Processes_Process_Vrfs_Vrf_Microloop
// Microloop configuration
type Ospf_Processes_Process_Vrfs_Vrf_Microloop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Microloop avoidance configuration.
    Avoidance Ospf_Processes_Process_Vrfs_Vrf_Microloop_Avoidance
}

func (microloop *Ospf_Processes_Process_Vrfs_Vrf_Microloop) GetFilter() yfilter.YFilter { return microloop.YFilter }

func (microloop *Ospf_Processes_Process_Vrfs_Vrf_Microloop) SetFilter(yf yfilter.YFilter) { microloop.YFilter = yf }

func (microloop *Ospf_Processes_Process_Vrfs_Vrf_Microloop) GetGoName(yname string) string {
    if yname == "avoidance" { return "Avoidance" }
    return ""
}

func (microloop *Ospf_Processes_Process_Vrfs_Vrf_Microloop) GetSegmentPath() string {
    return "microloop"
}

func (microloop *Ospf_Processes_Process_Vrfs_Vrf_Microloop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "avoidance" {
        return &microloop.Avoidance
    }
    return nil
}

func (microloop *Ospf_Processes_Process_Vrfs_Vrf_Microloop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["avoidance"] = &microloop.Avoidance
    return children
}

func (microloop *Ospf_Processes_Process_Vrfs_Vrf_Microloop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (microloop *Ospf_Processes_Process_Vrfs_Vrf_Microloop) GetBundleName() string { return "cisco_ios_xr" }

func (microloop *Ospf_Processes_Process_Vrfs_Vrf_Microloop) GetYangName() string { return "microloop" }

func (microloop *Ospf_Processes_Process_Vrfs_Vrf_Microloop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (microloop *Ospf_Processes_Process_Vrfs_Vrf_Microloop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (microloop *Ospf_Processes_Process_Vrfs_Vrf_Microloop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (microloop *Ospf_Processes_Process_Vrfs_Vrf_Microloop) SetParent(parent types.Entity) { microloop.parent = parent }

func (microloop *Ospf_Processes_Process_Vrfs_Vrf_Microloop) GetParent() types.Entity { return microloop.parent }

func (microloop *Ospf_Processes_Process_Vrfs_Vrf_Microloop) GetParentYangName() string { return "vrf" }

// Ospf_Processes_Process_Vrfs_Vrf_Microloop_Avoidance
// Microloop avoidance configuration
type Ospf_Processes_Process_Vrfs_Vrf_Microloop_Avoidance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MicroLoop avoidance feature enable configuration. The type is
    // OspfUloopAvoidance. The default value is all.
    Enable interface{}

    // Delay to introduce between SPF and RIB update in msecs. The type is
    // interface{} with range: 1..600000. Units are millisecond. The default value
    // is 5000.
    RibUpdateDelay interface{}
}

func (avoidance *Ospf_Processes_Process_Vrfs_Vrf_Microloop_Avoidance) GetFilter() yfilter.YFilter { return avoidance.YFilter }

func (avoidance *Ospf_Processes_Process_Vrfs_Vrf_Microloop_Avoidance) SetFilter(yf yfilter.YFilter) { avoidance.YFilter = yf }

func (avoidance *Ospf_Processes_Process_Vrfs_Vrf_Microloop_Avoidance) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "rib-update-delay" { return "RibUpdateDelay" }
    return ""
}

func (avoidance *Ospf_Processes_Process_Vrfs_Vrf_Microloop_Avoidance) GetSegmentPath() string {
    return "avoidance"
}

func (avoidance *Ospf_Processes_Process_Vrfs_Vrf_Microloop_Avoidance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (avoidance *Ospf_Processes_Process_Vrfs_Vrf_Microloop_Avoidance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (avoidance *Ospf_Processes_Process_Vrfs_Vrf_Microloop_Avoidance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = avoidance.Enable
    leafs["rib-update-delay"] = avoidance.RibUpdateDelay
    return leafs
}

func (avoidance *Ospf_Processes_Process_Vrfs_Vrf_Microloop_Avoidance) GetBundleName() string { return "cisco_ios_xr" }

func (avoidance *Ospf_Processes_Process_Vrfs_Vrf_Microloop_Avoidance) GetYangName() string { return "avoidance" }

func (avoidance *Ospf_Processes_Process_Vrfs_Vrf_Microloop_Avoidance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (avoidance *Ospf_Processes_Process_Vrfs_Vrf_Microloop_Avoidance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (avoidance *Ospf_Processes_Process_Vrfs_Vrf_Microloop_Avoidance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (avoidance *Ospf_Processes_Process_Vrfs_Vrf_Microloop_Avoidance) SetParent(parent types.Entity) { avoidance.parent = parent }

func (avoidance *Ospf_Processes_Process_Vrfs_Vrf_Microloop_Avoidance) GetParent() types.Entity { return avoidance.parent }

func (avoidance *Ospf_Processes_Process_Vrfs_Vrf_Microloop_Avoidance) GetParentYangName() string { return "microloop" }

// Ospf_Processes_Process_Vrfs_Vrf_MaximumRedistributePrefix
// Maximum number of prefixes redistributed into
// OSPF
type Ospf_Processes_Process_Vrfs_Vrf_MaximumRedistributePrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Maximum number of prefixes redistributed. The type is interface{} with
    // range: 1..4294967295.
    NumberOfPrefixes interface{}

    // Threshold value (%) at which to generate a warning msg. The type is
    // interface{} with range: 1..100.
    Threshold interface{}

    // Only give warning messsage when limit is exceeded. The type is bool.
    WarningOnly interface{}
}

func (maximumRedistributePrefix *Ospf_Processes_Process_Vrfs_Vrf_MaximumRedistributePrefix) GetFilter() yfilter.YFilter { return maximumRedistributePrefix.YFilter }

func (maximumRedistributePrefix *Ospf_Processes_Process_Vrfs_Vrf_MaximumRedistributePrefix) SetFilter(yf yfilter.YFilter) { maximumRedistributePrefix.YFilter = yf }

func (maximumRedistributePrefix *Ospf_Processes_Process_Vrfs_Vrf_MaximumRedistributePrefix) GetGoName(yname string) string {
    if yname == "number-of-prefixes" { return "NumberOfPrefixes" }
    if yname == "threshold" { return "Threshold" }
    if yname == "warning-only" { return "WarningOnly" }
    return ""
}

func (maximumRedistributePrefix *Ospf_Processes_Process_Vrfs_Vrf_MaximumRedistributePrefix) GetSegmentPath() string {
    return "maximum-redistribute-prefix"
}

func (maximumRedistributePrefix *Ospf_Processes_Process_Vrfs_Vrf_MaximumRedistributePrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maximumRedistributePrefix *Ospf_Processes_Process_Vrfs_Vrf_MaximumRedistributePrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maximumRedistributePrefix *Ospf_Processes_Process_Vrfs_Vrf_MaximumRedistributePrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number-of-prefixes"] = maximumRedistributePrefix.NumberOfPrefixes
    leafs["threshold"] = maximumRedistributePrefix.Threshold
    leafs["warning-only"] = maximumRedistributePrefix.WarningOnly
    return leafs
}

func (maximumRedistributePrefix *Ospf_Processes_Process_Vrfs_Vrf_MaximumRedistributePrefix) GetBundleName() string { return "cisco_ios_xr" }

func (maximumRedistributePrefix *Ospf_Processes_Process_Vrfs_Vrf_MaximumRedistributePrefix) GetYangName() string { return "maximum-redistribute-prefix" }

func (maximumRedistributePrefix *Ospf_Processes_Process_Vrfs_Vrf_MaximumRedistributePrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maximumRedistributePrefix *Ospf_Processes_Process_Vrfs_Vrf_MaximumRedistributePrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maximumRedistributePrefix *Ospf_Processes_Process_Vrfs_Vrf_MaximumRedistributePrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maximumRedistributePrefix *Ospf_Processes_Process_Vrfs_Vrf_MaximumRedistributePrefix) SetParent(parent types.Entity) { maximumRedistributePrefix.parent = parent }

func (maximumRedistributePrefix *Ospf_Processes_Process_Vrfs_Vrf_MaximumRedistributePrefix) GetParent() types.Entity { return maximumRedistributePrefix.parent }

func (maximumRedistributePrefix *Ospf_Processes_Process_Vrfs_Vrf_MaximumRedistributePrefix) GetParentYangName() string { return "vrf" }

// Ospf_Processes_Process_Vrfs_Vrf_DefaultInformation
// Control distribution of default information
type Ospf_Processes_Process_Vrfs_Vrf_DefaultInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Always advertise default route. The type is bool. The default value is
    // false.
    AlwaysAdvertise interface{}

    // OSPF metric. The type is interface{} with range: 1..16777214. The default
    // value is 1.
    Metric interface{}

    // OSPF External metric type. The type is OspfLinkStateMetric. The default
    // value is type2.
    MetricType interface{}

    // Routing policy name. The type is string.
    RoutePolicyName interface{}
}

func (defaultInformation *Ospf_Processes_Process_Vrfs_Vrf_DefaultInformation) GetFilter() yfilter.YFilter { return defaultInformation.YFilter }

func (defaultInformation *Ospf_Processes_Process_Vrfs_Vrf_DefaultInformation) SetFilter(yf yfilter.YFilter) { defaultInformation.YFilter = yf }

func (defaultInformation *Ospf_Processes_Process_Vrfs_Vrf_DefaultInformation) GetGoName(yname string) string {
    if yname == "always-advertise" { return "AlwaysAdvertise" }
    if yname == "metric" { return "Metric" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (defaultInformation *Ospf_Processes_Process_Vrfs_Vrf_DefaultInformation) GetSegmentPath() string {
    return "default-information"
}

func (defaultInformation *Ospf_Processes_Process_Vrfs_Vrf_DefaultInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (defaultInformation *Ospf_Processes_Process_Vrfs_Vrf_DefaultInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (defaultInformation *Ospf_Processes_Process_Vrfs_Vrf_DefaultInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["always-advertise"] = defaultInformation.AlwaysAdvertise
    leafs["metric"] = defaultInformation.Metric
    leafs["metric-type"] = defaultInformation.MetricType
    leafs["route-policy-name"] = defaultInformation.RoutePolicyName
    return leafs
}

func (defaultInformation *Ospf_Processes_Process_Vrfs_Vrf_DefaultInformation) GetBundleName() string { return "cisco_ios_xr" }

func (defaultInformation *Ospf_Processes_Process_Vrfs_Vrf_DefaultInformation) GetYangName() string { return "default-information" }

func (defaultInformation *Ospf_Processes_Process_Vrfs_Vrf_DefaultInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (defaultInformation *Ospf_Processes_Process_Vrfs_Vrf_DefaultInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (defaultInformation *Ospf_Processes_Process_Vrfs_Vrf_DefaultInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (defaultInformation *Ospf_Processes_Process_Vrfs_Vrf_DefaultInformation) SetParent(parent types.Entity) { defaultInformation.parent = parent }

func (defaultInformation *Ospf_Processes_Process_Vrfs_Vrf_DefaultInformation) GetParent() types.Entity { return defaultInformation.parent }

func (defaultInformation *Ospf_Processes_Process_Vrfs_Vrf_DefaultInformation) GetParentYangName() string { return "vrf" }

// Ospf_Processes_Process_Vrfs_Vrf_Af
// OSPF address family
// This type is a presence type.
type Ospf_Processes_Process_Vrfs_Vrf_Af struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is OspfAddressFamily. This attribute is mandatory.
    AfName interface{}

    // Sub-Address family. The type is OspfSubAddressFamily.
    SafName interface{}
}

func (af *Ospf_Processes_Process_Vrfs_Vrf_Af) GetFilter() yfilter.YFilter { return af.YFilter }

func (af *Ospf_Processes_Process_Vrfs_Vrf_Af) SetFilter(yf yfilter.YFilter) { af.YFilter = yf }

func (af *Ospf_Processes_Process_Vrfs_Vrf_Af) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "saf-name" { return "SafName" }
    return ""
}

func (af *Ospf_Processes_Process_Vrfs_Vrf_Af) GetSegmentPath() string {
    return "af"
}

func (af *Ospf_Processes_Process_Vrfs_Vrf_Af) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (af *Ospf_Processes_Process_Vrfs_Vrf_Af) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (af *Ospf_Processes_Process_Vrfs_Vrf_Af) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = af.AfName
    leafs["saf-name"] = af.SafName
    return leafs
}

func (af *Ospf_Processes_Process_Vrfs_Vrf_Af) GetBundleName() string { return "cisco_ios_xr" }

func (af *Ospf_Processes_Process_Vrfs_Vrf_Af) GetYangName() string { return "af" }

func (af *Ospf_Processes_Process_Vrfs_Vrf_Af) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (af *Ospf_Processes_Process_Vrfs_Vrf_Af) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (af *Ospf_Processes_Process_Vrfs_Vrf_Af) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (af *Ospf_Processes_Process_Vrfs_Vrf_Af) SetParent(parent types.Entity) { af.parent = parent }

func (af *Ospf_Processes_Process_Vrfs_Vrf_Af) GetParent() types.Entity { return af.parent }

func (af *Ospf_Processes_Process_Vrfs_Vrf_Af) GetParentYangName() string { return "vrf" }

// Ospf_Processes_Process_Vrfs_Vrf_Queue
// Adjust OSPF input queue sizes and processing
// quantums
type Ospf_Processes_Process_Vrfs_Vrf_Queue struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Maximum number of continuous rate-limited LSAs processed for FLUSH. The
    // type is interface{} with range: 30..3000. The default value is 150.
    DispatchRateLimitedFlush interface{}

    // Hello events are dropped when incoming event queue exceeds this. The type
    // is interface{} with range: 1000..30000. The default value is 9500.
    LimitHigh interface{}

    // Maximum number of continuous summary or external LSAs processed. The type
    // is interface{} with range: 30..3000. The default value is 150.
    DispatchSpfLsaLimit interface{}

    // DBDs/Updates are dropped when incoming event queue exceeds this. The type
    // is interface{} with range: 1000..30000. The default value is 8000.
    LimitLow interface{}

    // Maximum number of continuous rate-limited LSAs processed. The type is
    // interface{} with range: 30..3000. The default value is 150.
    DispatchRateLimited interface{}

    // LSA ACKs are dropped when incoming event queue exceeds this. The type is
    // interface{} with range: 1000..30000. The default value is 9000.
    LimitMedium interface{}

    // Maximum number of continuous incoming packet-related events processed. The
    // type is interface{} with range: 30..3000. The default value is 300.
    DispatchIncoming interface{}
}

func (queue *Ospf_Processes_Process_Vrfs_Vrf_Queue) GetFilter() yfilter.YFilter { return queue.YFilter }

func (queue *Ospf_Processes_Process_Vrfs_Vrf_Queue) SetFilter(yf yfilter.YFilter) { queue.YFilter = yf }

func (queue *Ospf_Processes_Process_Vrfs_Vrf_Queue) GetGoName(yname string) string {
    if yname == "dispatch-rate-limited-flush" { return "DispatchRateLimitedFlush" }
    if yname == "limit-high" { return "LimitHigh" }
    if yname == "dispatch-spf-lsa-limit" { return "DispatchSpfLsaLimit" }
    if yname == "limit-low" { return "LimitLow" }
    if yname == "dispatch-rate-limited" { return "DispatchRateLimited" }
    if yname == "limit-medium" { return "LimitMedium" }
    if yname == "dispatch-incoming" { return "DispatchIncoming" }
    return ""
}

func (queue *Ospf_Processes_Process_Vrfs_Vrf_Queue) GetSegmentPath() string {
    return "queue"
}

func (queue *Ospf_Processes_Process_Vrfs_Vrf_Queue) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (queue *Ospf_Processes_Process_Vrfs_Vrf_Queue) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (queue *Ospf_Processes_Process_Vrfs_Vrf_Queue) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dispatch-rate-limited-flush"] = queue.DispatchRateLimitedFlush
    leafs["limit-high"] = queue.LimitHigh
    leafs["dispatch-spf-lsa-limit"] = queue.DispatchSpfLsaLimit
    leafs["limit-low"] = queue.LimitLow
    leafs["dispatch-rate-limited"] = queue.DispatchRateLimited
    leafs["limit-medium"] = queue.LimitMedium
    leafs["dispatch-incoming"] = queue.DispatchIncoming
    return leafs
}

func (queue *Ospf_Processes_Process_Vrfs_Vrf_Queue) GetBundleName() string { return "cisco_ios_xr" }

func (queue *Ospf_Processes_Process_Vrfs_Vrf_Queue) GetYangName() string { return "queue" }

func (queue *Ospf_Processes_Process_Vrfs_Vrf_Queue) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (queue *Ospf_Processes_Process_Vrfs_Vrf_Queue) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (queue *Ospf_Processes_Process_Vrfs_Vrf_Queue) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (queue *Ospf_Processes_Process_Vrfs_Vrf_Queue) SetParent(parent types.Entity) { queue.parent = parent }

func (queue *Ospf_Processes_Process_Vrfs_Vrf_Queue) GetParent() types.Entity { return queue.parent }

func (queue *Ospf_Processes_Process_Vrfs_Vrf_Queue) GetParentYangName() string { return "vrf" }

// Ospf_Processes_Process_Vrfs_Vrf_MaxMetric
// Set maximum metric configuration
type Ospf_Processes_Process_Vrfs_Vrf_MaxMetric struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Block ABR-disable mode entry while in max-metric mode. The type is
    // interface{}.
    MaxMetricNoAbrOff interface{}

    // Set maximum metric on-proc-restart configuration.
    MaxMetricOnProcRestart Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcRestart

    // Set maximum metric on-startup configuration.
    MaxMetricOnStartup Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnStartup

    // Set maximum metric on-proc-migration configuration.
    MaxMetricOnProcMigration Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcMigration

    // Set maximum metric always configuration.
    MaxMetricAlways Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricAlways

    // Set maximum metric on-switchover configuration.
    MaxMetricOnSwitchover Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnSwitchover
}

func (maxMetric *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric) GetFilter() yfilter.YFilter { return maxMetric.YFilter }

func (maxMetric *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric) SetFilter(yf yfilter.YFilter) { maxMetric.YFilter = yf }

func (maxMetric *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric) GetGoName(yname string) string {
    if yname == "max-metric-no-abr-off" { return "MaxMetricNoAbrOff" }
    if yname == "max-metric-on-proc-restart" { return "MaxMetricOnProcRestart" }
    if yname == "max-metric-on-startup" { return "MaxMetricOnStartup" }
    if yname == "max-metric-on-proc-migration" { return "MaxMetricOnProcMigration" }
    if yname == "max-metric-always" { return "MaxMetricAlways" }
    if yname == "max-metric-on-switchover" { return "MaxMetricOnSwitchover" }
    return ""
}

func (maxMetric *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric) GetSegmentPath() string {
    return "max-metric"
}

func (maxMetric *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "max-metric-on-proc-restart" {
        return &maxMetric.MaxMetricOnProcRestart
    }
    if childYangName == "max-metric-on-startup" {
        return &maxMetric.MaxMetricOnStartup
    }
    if childYangName == "max-metric-on-proc-migration" {
        return &maxMetric.MaxMetricOnProcMigration
    }
    if childYangName == "max-metric-always" {
        return &maxMetric.MaxMetricAlways
    }
    if childYangName == "max-metric-on-switchover" {
        return &maxMetric.MaxMetricOnSwitchover
    }
    return nil
}

func (maxMetric *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["max-metric-on-proc-restart"] = &maxMetric.MaxMetricOnProcRestart
    children["max-metric-on-startup"] = &maxMetric.MaxMetricOnStartup
    children["max-metric-on-proc-migration"] = &maxMetric.MaxMetricOnProcMigration
    children["max-metric-always"] = &maxMetric.MaxMetricAlways
    children["max-metric-on-switchover"] = &maxMetric.MaxMetricOnSwitchover
    return children
}

func (maxMetric *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["max-metric-no-abr-off"] = maxMetric.MaxMetricNoAbrOff
    return leafs
}

func (maxMetric *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric) GetBundleName() string { return "cisco_ios_xr" }

func (maxMetric *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric) GetYangName() string { return "max-metric" }

func (maxMetric *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxMetric *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxMetric *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxMetric *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric) SetParent(parent types.Entity) { maxMetric.parent = parent }

func (maxMetric *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric) GetParent() types.Entity { return maxMetric.parent }

func (maxMetric *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric) GetParentYangName() string { return "vrf" }

// Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcRestart
// Set maximum metric on-proc-restart
// configuration
type Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcRestart struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Let BGP decide when to originate router-LSA with normal metric. The type is
    // bool. The default value is false.
    WaitForBgp interface{}

    // Time in seconds to originate router-LSA with max-metric. The type is
    // interface{} with range: 5..86400. Units are second.
    StartupMax interface{}

    // Set maximum metric for stub links in router-LSAs. The type is bool.
    IncludeStub interface{}

    // Override summary-lsa metric with max-metric value. The type is bool.
    SummaryLsa interface{}

    // Overriding metric in summary-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    SummaryLsaMaximumMetric interface{}

    // Override external-lsa metric with max-metric value. The type is bool.
    ExternalLsa interface{}

    // Overriding metric in external-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    ExternalLsaMaximumMetric interface{}
}

func (maxMetricOnProcRestart *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcRestart) GetFilter() yfilter.YFilter { return maxMetricOnProcRestart.YFilter }

func (maxMetricOnProcRestart *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcRestart) SetFilter(yf yfilter.YFilter) { maxMetricOnProcRestart.YFilter = yf }

func (maxMetricOnProcRestart *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcRestart) GetGoName(yname string) string {
    if yname == "wait-for-bgp" { return "WaitForBgp" }
    if yname == "startup-max" { return "StartupMax" }
    if yname == "include-stub" { return "IncludeStub" }
    if yname == "summary-lsa" { return "SummaryLsa" }
    if yname == "summary-lsa-maximum-metric" { return "SummaryLsaMaximumMetric" }
    if yname == "external-lsa" { return "ExternalLsa" }
    if yname == "external-lsa-maximum-metric" { return "ExternalLsaMaximumMetric" }
    return ""
}

func (maxMetricOnProcRestart *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcRestart) GetSegmentPath() string {
    return "max-metric-on-proc-restart"
}

func (maxMetricOnProcRestart *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcRestart) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maxMetricOnProcRestart *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcRestart) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maxMetricOnProcRestart *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcRestart) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["wait-for-bgp"] = maxMetricOnProcRestart.WaitForBgp
    leafs["startup-max"] = maxMetricOnProcRestart.StartupMax
    leafs["include-stub"] = maxMetricOnProcRestart.IncludeStub
    leafs["summary-lsa"] = maxMetricOnProcRestart.SummaryLsa
    leafs["summary-lsa-maximum-metric"] = maxMetricOnProcRestart.SummaryLsaMaximumMetric
    leafs["external-lsa"] = maxMetricOnProcRestart.ExternalLsa
    leafs["external-lsa-maximum-metric"] = maxMetricOnProcRestart.ExternalLsaMaximumMetric
    return leafs
}

func (maxMetricOnProcRestart *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcRestart) GetBundleName() string { return "cisco_ios_xr" }

func (maxMetricOnProcRestart *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcRestart) GetYangName() string { return "max-metric-on-proc-restart" }

func (maxMetricOnProcRestart *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcRestart) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxMetricOnProcRestart *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcRestart) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxMetricOnProcRestart *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcRestart) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxMetricOnProcRestart *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcRestart) SetParent(parent types.Entity) { maxMetricOnProcRestart.parent = parent }

func (maxMetricOnProcRestart *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcRestart) GetParent() types.Entity { return maxMetricOnProcRestart.parent }

func (maxMetricOnProcRestart *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcRestart) GetParentYangName() string { return "max-metric" }

// Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnStartup
// Set maximum metric on-startup configuration
type Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnStartup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Let BGP decide when to originate router-LSA with normal metric. The type is
    // bool. The default value is false.
    WaitForBgp interface{}

    // Time in seconds to originate router-LSA with max-metric. The type is
    // interface{} with range: 5..86400. Units are second.
    StartupMax interface{}

    // Set maximum metric for stub links in router-LSAs. The type is bool.
    IncludeStub interface{}

    // Override summary-lsa metric with max-metric value. The type is bool.
    SummaryLsa interface{}

    // Overriding metric in summary-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    SummaryLsaMaximumMetric interface{}

    // Override external-lsa metric with max-metric value. The type is bool.
    ExternalLsa interface{}

    // Overriding metric in external-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    ExternalLsaMaximumMetric interface{}
}

func (maxMetricOnStartup *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnStartup) GetFilter() yfilter.YFilter { return maxMetricOnStartup.YFilter }

func (maxMetricOnStartup *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnStartup) SetFilter(yf yfilter.YFilter) { maxMetricOnStartup.YFilter = yf }

func (maxMetricOnStartup *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnStartup) GetGoName(yname string) string {
    if yname == "wait-for-bgp" { return "WaitForBgp" }
    if yname == "startup-max" { return "StartupMax" }
    if yname == "include-stub" { return "IncludeStub" }
    if yname == "summary-lsa" { return "SummaryLsa" }
    if yname == "summary-lsa-maximum-metric" { return "SummaryLsaMaximumMetric" }
    if yname == "external-lsa" { return "ExternalLsa" }
    if yname == "external-lsa-maximum-metric" { return "ExternalLsaMaximumMetric" }
    return ""
}

func (maxMetricOnStartup *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnStartup) GetSegmentPath() string {
    return "max-metric-on-startup"
}

func (maxMetricOnStartup *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnStartup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maxMetricOnStartup *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnStartup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maxMetricOnStartup *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnStartup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["wait-for-bgp"] = maxMetricOnStartup.WaitForBgp
    leafs["startup-max"] = maxMetricOnStartup.StartupMax
    leafs["include-stub"] = maxMetricOnStartup.IncludeStub
    leafs["summary-lsa"] = maxMetricOnStartup.SummaryLsa
    leafs["summary-lsa-maximum-metric"] = maxMetricOnStartup.SummaryLsaMaximumMetric
    leafs["external-lsa"] = maxMetricOnStartup.ExternalLsa
    leafs["external-lsa-maximum-metric"] = maxMetricOnStartup.ExternalLsaMaximumMetric
    return leafs
}

func (maxMetricOnStartup *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnStartup) GetBundleName() string { return "cisco_ios_xr" }

func (maxMetricOnStartup *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnStartup) GetYangName() string { return "max-metric-on-startup" }

func (maxMetricOnStartup *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnStartup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxMetricOnStartup *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnStartup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxMetricOnStartup *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnStartup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxMetricOnStartup *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnStartup) SetParent(parent types.Entity) { maxMetricOnStartup.parent = parent }

func (maxMetricOnStartup *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnStartup) GetParent() types.Entity { return maxMetricOnStartup.parent }

func (maxMetricOnStartup *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnStartup) GetParentYangName() string { return "max-metric" }

// Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcMigration
// Set maximum metric on-proc-migration
// configuration
type Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcMigration struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Let BGP decide when to originate router-LSA with normal metric. The type is
    // bool. The default value is false.
    WaitForBgp interface{}

    // Time in seconds to originate router-LSA with max-metric. The type is
    // interface{} with range: 5..86400. Units are second.
    StartupMax interface{}

    // Set maximum metric for stub links in router-LSAs. The type is bool.
    IncludeStub interface{}

    // Override summary-lsa metric with max-metric value. The type is bool.
    SummaryLsa interface{}

    // Overriding metric in summary-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    SummaryLsaMaximumMetric interface{}

    // Override external-lsa metric with max-metric value. The type is bool.
    ExternalLsa interface{}

    // Overriding metric in external-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    ExternalLsaMaximumMetric interface{}
}

func (maxMetricOnProcMigration *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcMigration) GetFilter() yfilter.YFilter { return maxMetricOnProcMigration.YFilter }

func (maxMetricOnProcMigration *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcMigration) SetFilter(yf yfilter.YFilter) { maxMetricOnProcMigration.YFilter = yf }

func (maxMetricOnProcMigration *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcMigration) GetGoName(yname string) string {
    if yname == "wait-for-bgp" { return "WaitForBgp" }
    if yname == "startup-max" { return "StartupMax" }
    if yname == "include-stub" { return "IncludeStub" }
    if yname == "summary-lsa" { return "SummaryLsa" }
    if yname == "summary-lsa-maximum-metric" { return "SummaryLsaMaximumMetric" }
    if yname == "external-lsa" { return "ExternalLsa" }
    if yname == "external-lsa-maximum-metric" { return "ExternalLsaMaximumMetric" }
    return ""
}

func (maxMetricOnProcMigration *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcMigration) GetSegmentPath() string {
    return "max-metric-on-proc-migration"
}

func (maxMetricOnProcMigration *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcMigration) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maxMetricOnProcMigration *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcMigration) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maxMetricOnProcMigration *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcMigration) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["wait-for-bgp"] = maxMetricOnProcMigration.WaitForBgp
    leafs["startup-max"] = maxMetricOnProcMigration.StartupMax
    leafs["include-stub"] = maxMetricOnProcMigration.IncludeStub
    leafs["summary-lsa"] = maxMetricOnProcMigration.SummaryLsa
    leafs["summary-lsa-maximum-metric"] = maxMetricOnProcMigration.SummaryLsaMaximumMetric
    leafs["external-lsa"] = maxMetricOnProcMigration.ExternalLsa
    leafs["external-lsa-maximum-metric"] = maxMetricOnProcMigration.ExternalLsaMaximumMetric
    return leafs
}

func (maxMetricOnProcMigration *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcMigration) GetBundleName() string { return "cisco_ios_xr" }

func (maxMetricOnProcMigration *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcMigration) GetYangName() string { return "max-metric-on-proc-migration" }

func (maxMetricOnProcMigration *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcMigration) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxMetricOnProcMigration *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcMigration) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxMetricOnProcMigration *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcMigration) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxMetricOnProcMigration *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcMigration) SetParent(parent types.Entity) { maxMetricOnProcMigration.parent = parent }

func (maxMetricOnProcMigration *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcMigration) GetParent() types.Entity { return maxMetricOnProcMigration.parent }

func (maxMetricOnProcMigration *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcMigration) GetParentYangName() string { return "max-metric" }

// Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricAlways
// Set maximum metric always configuration
type Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricAlways struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Set maximum metric for stub links in router-LSAs. The type is bool. The
    // default value is false.
    IncludeStub interface{}

    // Override summary-lsa metric with max-metric value. The type is bool.
    SummaryLsa interface{}

    // Overriding metric in summary-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    SummaryLsaMaximumMetric interface{}

    // Override external-lsa metric with max-metric value. The type is bool.
    ExternalLsa interface{}

    // Overriding metric in external-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    ExternalLsaMaximumMetric interface{}
}

func (maxMetricAlways *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricAlways) GetFilter() yfilter.YFilter { return maxMetricAlways.YFilter }

func (maxMetricAlways *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricAlways) SetFilter(yf yfilter.YFilter) { maxMetricAlways.YFilter = yf }

func (maxMetricAlways *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricAlways) GetGoName(yname string) string {
    if yname == "include-stub" { return "IncludeStub" }
    if yname == "summary-lsa" { return "SummaryLsa" }
    if yname == "summary-lsa-maximum-metric" { return "SummaryLsaMaximumMetric" }
    if yname == "external-lsa" { return "ExternalLsa" }
    if yname == "external-lsa-maximum-metric" { return "ExternalLsaMaximumMetric" }
    return ""
}

func (maxMetricAlways *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricAlways) GetSegmentPath() string {
    return "max-metric-always"
}

func (maxMetricAlways *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricAlways) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maxMetricAlways *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricAlways) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maxMetricAlways *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricAlways) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["include-stub"] = maxMetricAlways.IncludeStub
    leafs["summary-lsa"] = maxMetricAlways.SummaryLsa
    leafs["summary-lsa-maximum-metric"] = maxMetricAlways.SummaryLsaMaximumMetric
    leafs["external-lsa"] = maxMetricAlways.ExternalLsa
    leafs["external-lsa-maximum-metric"] = maxMetricAlways.ExternalLsaMaximumMetric
    return leafs
}

func (maxMetricAlways *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricAlways) GetBundleName() string { return "cisco_ios_xr" }

func (maxMetricAlways *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricAlways) GetYangName() string { return "max-metric-always" }

func (maxMetricAlways *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricAlways) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxMetricAlways *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricAlways) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxMetricAlways *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricAlways) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxMetricAlways *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricAlways) SetParent(parent types.Entity) { maxMetricAlways.parent = parent }

func (maxMetricAlways *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricAlways) GetParent() types.Entity { return maxMetricAlways.parent }

func (maxMetricAlways *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricAlways) GetParentYangName() string { return "max-metric" }

// Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnSwitchover
// Set maximum metric on-switchover configuration
type Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnSwitchover struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Let BGP decide when to originate router-LSA with normal metric. The type is
    // bool. The default value is false.
    WaitForBgp interface{}

    // Time in seconds to originate router-LSA with max-metric. The type is
    // interface{} with range: 5..86400. Units are second.
    StartupMax interface{}

    // Set maximum metric for stub links in router-LSAs. The type is bool.
    IncludeStub interface{}

    // Override summary-lsa metric with max-metric value. The type is bool.
    SummaryLsa interface{}

    // Overriding metric in summary-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    SummaryLsaMaximumMetric interface{}

    // Override external-lsa metric with max-metric value. The type is bool.
    ExternalLsa interface{}

    // Overriding metric in external-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    ExternalLsaMaximumMetric interface{}
}

func (maxMetricOnSwitchover *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnSwitchover) GetFilter() yfilter.YFilter { return maxMetricOnSwitchover.YFilter }

func (maxMetricOnSwitchover *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnSwitchover) SetFilter(yf yfilter.YFilter) { maxMetricOnSwitchover.YFilter = yf }

func (maxMetricOnSwitchover *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnSwitchover) GetGoName(yname string) string {
    if yname == "wait-for-bgp" { return "WaitForBgp" }
    if yname == "startup-max" { return "StartupMax" }
    if yname == "include-stub" { return "IncludeStub" }
    if yname == "summary-lsa" { return "SummaryLsa" }
    if yname == "summary-lsa-maximum-metric" { return "SummaryLsaMaximumMetric" }
    if yname == "external-lsa" { return "ExternalLsa" }
    if yname == "external-lsa-maximum-metric" { return "ExternalLsaMaximumMetric" }
    return ""
}

func (maxMetricOnSwitchover *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnSwitchover) GetSegmentPath() string {
    return "max-metric-on-switchover"
}

func (maxMetricOnSwitchover *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnSwitchover) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maxMetricOnSwitchover *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnSwitchover) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maxMetricOnSwitchover *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnSwitchover) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["wait-for-bgp"] = maxMetricOnSwitchover.WaitForBgp
    leafs["startup-max"] = maxMetricOnSwitchover.StartupMax
    leafs["include-stub"] = maxMetricOnSwitchover.IncludeStub
    leafs["summary-lsa"] = maxMetricOnSwitchover.SummaryLsa
    leafs["summary-lsa-maximum-metric"] = maxMetricOnSwitchover.SummaryLsaMaximumMetric
    leafs["external-lsa"] = maxMetricOnSwitchover.ExternalLsa
    leafs["external-lsa-maximum-metric"] = maxMetricOnSwitchover.ExternalLsaMaximumMetric
    return leafs
}

func (maxMetricOnSwitchover *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnSwitchover) GetBundleName() string { return "cisco_ios_xr" }

func (maxMetricOnSwitchover *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnSwitchover) GetYangName() string { return "max-metric-on-switchover" }

func (maxMetricOnSwitchover *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnSwitchover) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxMetricOnSwitchover *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnSwitchover) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxMetricOnSwitchover *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnSwitchover) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxMetricOnSwitchover *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnSwitchover) SetParent(parent types.Entity) { maxMetricOnSwitchover.parent = parent }

func (maxMetricOnSwitchover *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnSwitchover) GetParent() types.Entity { return maxMetricOnSwitchover.parent }

func (maxMetricOnSwitchover *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnSwitchover) GetParentYangName() string { return "max-metric" }

// Ospf_Processes_Process_Vrfs_Vrf_Nsf
// Non Stop Forwarding configuration
type Ospf_Processes_Process_Vrfs_Vrf_Nsf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Maximum route lifetime following restart in seconds. The type is
    // interface{} with range: 90..1800. Units are second. The default value is
    // 90.
    Lifetime interface{}

    // Enable IETF Non Stop Forwarding. The type is OspfIetfNsf.
    Ietf interface{}

    // Disable helper support role for IETF Non Stop Forwarding. The type is
    // OspfIetfNsfSupport.
    IetfSupportRole interface{}

    // Enable Cisco Non Stop Forwarding. The type is OspfCiscoNsf.
    Cisco interface{}

    // Minimum interval between Non Stop Forwarding restarts in seconds. The type
    // is interface{} with range: 90..3600. Units are second. The default value is
    // 90.
    Interval interface{}

    // Maximum time allowed for external route learning (seconds). The type is
    // interface{} with range: 1..3600. Units are second. The default value is 60.
    FlushDelayTime interface{}

    // Enable Strict LSA checking of IETF NSF. The type is interface{}.
    IetfStrictLsaChecking interface{}
}

func (nsf *Ospf_Processes_Process_Vrfs_Vrf_Nsf) GetFilter() yfilter.YFilter { return nsf.YFilter }

func (nsf *Ospf_Processes_Process_Vrfs_Vrf_Nsf) SetFilter(yf yfilter.YFilter) { nsf.YFilter = yf }

func (nsf *Ospf_Processes_Process_Vrfs_Vrf_Nsf) GetGoName(yname string) string {
    if yname == "lifetime" { return "Lifetime" }
    if yname == "ietf" { return "Ietf" }
    if yname == "ietf-support-role" { return "IetfSupportRole" }
    if yname == "cisco" { return "Cisco" }
    if yname == "interval" { return "Interval" }
    if yname == "flush-delay-time" { return "FlushDelayTime" }
    if yname == "ietf-strict-lsa-checking" { return "IetfStrictLsaChecking" }
    return ""
}

func (nsf *Ospf_Processes_Process_Vrfs_Vrf_Nsf) GetSegmentPath() string {
    return "nsf"
}

func (nsf *Ospf_Processes_Process_Vrfs_Vrf_Nsf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nsf *Ospf_Processes_Process_Vrfs_Vrf_Nsf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nsf *Ospf_Processes_Process_Vrfs_Vrf_Nsf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lifetime"] = nsf.Lifetime
    leafs["ietf"] = nsf.Ietf
    leafs["ietf-support-role"] = nsf.IetfSupportRole
    leafs["cisco"] = nsf.Cisco
    leafs["interval"] = nsf.Interval
    leafs["flush-delay-time"] = nsf.FlushDelayTime
    leafs["ietf-strict-lsa-checking"] = nsf.IetfStrictLsaChecking
    return leafs
}

func (nsf *Ospf_Processes_Process_Vrfs_Vrf_Nsf) GetBundleName() string { return "cisco_ios_xr" }

func (nsf *Ospf_Processes_Process_Vrfs_Vrf_Nsf) GetYangName() string { return "nsf" }

func (nsf *Ospf_Processes_Process_Vrfs_Vrf_Nsf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nsf *Ospf_Processes_Process_Vrfs_Vrf_Nsf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nsf *Ospf_Processes_Process_Vrfs_Vrf_Nsf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nsf *Ospf_Processes_Process_Vrfs_Vrf_Nsf) SetParent(parent types.Entity) { nsf.parent = parent }

func (nsf *Ospf_Processes_Process_Vrfs_Vrf_Nsf) GetParent() types.Entity { return nsf.parent }

func (nsf *Ospf_Processes_Process_Vrfs_Vrf_Nsf) GetParentYangName() string { return "vrf" }

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope
// Process scope configuration
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Enable/Disable an OSPF area to advertise intra-area prefixes out of this
    // area as external. The type is bool.
    ExternalOut interface{}

    // Enable/Disable prefix suppression for primary addresses. The type is bool.
    // The default value is false.
    PrefixSuppressionPrimary interface{}

    // Enable/Disable ignoring of MTU in DBD packets. The type is bool. The
    // default value is false.
    MtuIgnore interface{}

    // Enable/Disable MPLS LDP sync for igp-shortcuts. The type is bool.
    LdpSyncIgpShortcuts interface{}

    // Enable MPLS LDP Auto Config. The type is interface{}.
    LdpAutoConfig interface{}

    // Enable/Disable an OSPF area to advertise external prefixes into this area
    // as summary. The type is bool.
    SummaryIn interface{}

    // Type of attached network. The type is OspfNetwork.
    NetworkType interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Enable/Disable advertising loopback as a stub network. The type is bool.
    // The default value is false.
    LoopbackStubNetwork interface{}

    // Enable/Disable prefix suppression for secondary addresses. The type is
    // bool. The default value is false.
    PrefixSuppressionSecondary interface{}

    // Enable/Disable OSPF demand circuit. The type is bool. The default value is
    // false.
    DemandCircuit interface{}

    // segment-routing configuration Applicable only in Default VRF. The type is
    // OspfSegmentRouting.
    SegmentRouting interface{}

    // When enabled, prevent sending HELLO packets over link. The type is bool.
    // The default value is false.
    Passive interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Customize size of OSPF packets upto MTU. The type is interface{} with
    // range: 576..10000.
    PacketSize interface{}

    // Enable/Disable MPLS LDP sync. The type is bool.
    LdpSync interface{}

    // Filter OSPF LSA during synchronization and flooding. The type is bool. The
    // default value is false.
    DatabaseFilter interface{}

    // Enable/Disable registration for early interface down notifications. The
    // type is bool. The default value is false.
    LinkDownFastDetect interface{}

    // segment-routing forwarding configuration Applicableonly in Default VRF. The
    // type is OspfSegmentRoutingForwarding.
    SegmentRoutingForwarding interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Router priority for DR and BDR election. The type is interface{} with
    // range: 0..255. The default value is 1.
    Priority interface{}

    // Enable/Disable OSPF flood reduction. The type is bool. The default value is
    // false.
    FloodReduction interface{}

    // Segment Routing Global Block configuration.
    Srgb Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Srgb

    // Fast-reroute configuration.
    FastReroute Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute

    // Filter networks intalled to RIB (disable as ACL name means filtering is
    // disabled).
    DistributeList Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DistributeList

    // BFD configuration.
    Bfd Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Bfd

    // Authentication.
    Authentication Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication

    // Container class for security related configuration parameters.
    Security Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DeadIntervalMinimal

    // Interface fallback cost.
    CostFallback Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_CostFallback
}

func (processScope *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope) GetFilter() yfilter.YFilter { return processScope.YFilter }

func (processScope *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope) SetFilter(yf yfilter.YFilter) { processScope.YFilter = yf }

func (processScope *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope) GetGoName(yname string) string {
    if yname == "cost" { return "Cost" }
    if yname == "external-out" { return "ExternalOut" }
    if yname == "prefix-suppression-primary" { return "PrefixSuppressionPrimary" }
    if yname == "mtu-ignore" { return "MtuIgnore" }
    if yname == "ldp-sync-igp-shortcuts" { return "LdpSyncIgpShortcuts" }
    if yname == "ldp-auto-config" { return "LdpAutoConfig" }
    if yname == "summary-in" { return "SummaryIn" }
    if yname == "network-type" { return "NetworkType" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "loopback-stub-network" { return "LoopbackStubNetwork" }
    if yname == "prefix-suppression-secondary" { return "PrefixSuppressionSecondary" }
    if yname == "demand-circuit" { return "DemandCircuit" }
    if yname == "segment-routing" { return "SegmentRouting" }
    if yname == "passive" { return "Passive" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "packet-size" { return "PacketSize" }
    if yname == "ldp-sync" { return "LdpSync" }
    if yname == "database-filter" { return "DatabaseFilter" }
    if yname == "link-down-fast-detect" { return "LinkDownFastDetect" }
    if yname == "segment-routing-forwarding" { return "SegmentRoutingForwarding" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "priority" { return "Priority" }
    if yname == "flood-reduction" { return "FloodReduction" }
    if yname == "srgb" { return "Srgb" }
    if yname == "fast-reroute" { return "FastReroute" }
    if yname == "distribute-list" { return "DistributeList" }
    if yname == "bfd" { return "Bfd" }
    if yname == "authentication" { return "Authentication" }
    if yname == "security" { return "Security" }
    if yname == "dead-interval-minimal" { return "DeadIntervalMinimal" }
    if yname == "cost-fallback" { return "CostFallback" }
    return ""
}

func (processScope *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope) GetSegmentPath() string {
    return "process-scope"
}

func (processScope *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "srgb" {
        return &processScope.Srgb
    }
    if childYangName == "fast-reroute" {
        return &processScope.FastReroute
    }
    if childYangName == "distribute-list" {
        return &processScope.DistributeList
    }
    if childYangName == "bfd" {
        return &processScope.Bfd
    }
    if childYangName == "authentication" {
        return &processScope.Authentication
    }
    if childYangName == "security" {
        return &processScope.Security
    }
    if childYangName == "dead-interval-minimal" {
        return &processScope.DeadIntervalMinimal
    }
    if childYangName == "cost-fallback" {
        return &processScope.CostFallback
    }
    return nil
}

func (processScope *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["srgb"] = &processScope.Srgb
    children["fast-reroute"] = &processScope.FastReroute
    children["distribute-list"] = &processScope.DistributeList
    children["bfd"] = &processScope.Bfd
    children["authentication"] = &processScope.Authentication
    children["security"] = &processScope.Security
    children["dead-interval-minimal"] = &processScope.DeadIntervalMinimal
    children["cost-fallback"] = &processScope.CostFallback
    return children
}

func (processScope *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cost"] = processScope.Cost
    leafs["external-out"] = processScope.ExternalOut
    leafs["prefix-suppression-primary"] = processScope.PrefixSuppressionPrimary
    leafs["mtu-ignore"] = processScope.MtuIgnore
    leafs["ldp-sync-igp-shortcuts"] = processScope.LdpSyncIgpShortcuts
    leafs["ldp-auto-config"] = processScope.LdpAutoConfig
    leafs["summary-in"] = processScope.SummaryIn
    leafs["network-type"] = processScope.NetworkType
    leafs["hello-interval"] = processScope.HelloInterval
    leafs["loopback-stub-network"] = processScope.LoopbackStubNetwork
    leafs["prefix-suppression-secondary"] = processScope.PrefixSuppressionSecondary
    leafs["demand-circuit"] = processScope.DemandCircuit
    leafs["segment-routing"] = processScope.SegmentRouting
    leafs["passive"] = processScope.Passive
    leafs["transmit-delay"] = processScope.TransmitDelay
    leafs["packet-size"] = processScope.PacketSize
    leafs["ldp-sync"] = processScope.LdpSync
    leafs["database-filter"] = processScope.DatabaseFilter
    leafs["link-down-fast-detect"] = processScope.LinkDownFastDetect
    leafs["segment-routing-forwarding"] = processScope.SegmentRoutingForwarding
    leafs["retransmit-interval"] = processScope.RetransmitInterval
    leafs["priority"] = processScope.Priority
    leafs["flood-reduction"] = processScope.FloodReduction
    return leafs
}

func (processScope *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope) GetBundleName() string { return "cisco_ios_xr" }

func (processScope *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope) GetYangName() string { return "process-scope" }

func (processScope *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (processScope *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (processScope *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (processScope *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope) SetParent(parent types.Entity) { processScope.parent = parent }

func (processScope *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope) GetParent() types.Entity { return processScope.parent }

func (processScope *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope) GetParentYangName() string { return "vrf" }

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Srgb
// Segment Routing Global Block configuration
// This type is a presence type.
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Srgb struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The lower bound of the SRGB. The type is interface{} with range:
    // 16000..1048575. This attribute is mandatory.
    LowerBound interface{}

    // The upper bound of the SRGB. The type is interface{} with range:
    // 16000..1048575. This attribute is mandatory.
    UpperBound interface{}
}

func (srgb *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Srgb) GetFilter() yfilter.YFilter { return srgb.YFilter }

func (srgb *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Srgb) SetFilter(yf yfilter.YFilter) { srgb.YFilter = yf }

func (srgb *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Srgb) GetGoName(yname string) string {
    if yname == "lower-bound" { return "LowerBound" }
    if yname == "upper-bound" { return "UpperBound" }
    return ""
}

func (srgb *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Srgb) GetSegmentPath() string {
    return "srgb"
}

func (srgb *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Srgb) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srgb *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Srgb) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srgb *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Srgb) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lower-bound"] = srgb.LowerBound
    leafs["upper-bound"] = srgb.UpperBound
    return leafs
}

func (srgb *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Srgb) GetBundleName() string { return "cisco_ios_xr" }

func (srgb *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Srgb) GetYangName() string { return "srgb" }

func (srgb *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Srgb) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srgb *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Srgb) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srgb *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Srgb) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srgb *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Srgb) SetParent(parent types.Entity) { srgb.parent = parent }

func (srgb *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Srgb) GetParent() types.Entity { return srgb.parent }

func (srgb *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Srgb) GetParentYangName() string { return "process-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute
// Fast-reroute configuration
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // OspfProcFastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink

    // Fast-reroute per-prefix configuration.
    PerPrefix Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute) GetGoName(yname string) string {
    if yname == "fast-reroute-enable" { return "FastRerouteEnable" }
    if yname == "per-link" { return "PerLink" }
    if yname == "per-prefix" { return "PerPrefix" }
    return ""
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "per-link" {
        return &fastReroute.PerLink
    }
    if childYangName == "per-prefix" {
        return &fastReroute.PerPrefix
    }
    return nil
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["per-link"] = &fastReroute.PerLink
    children["per-prefix"] = &fastReroute.PerPrefix
    return children
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-enable"] = fastReroute.FastRerouteEnable
    return leafs
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute) GetParentYangName() string { return "process-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink) GetFilter() yfilter.YFilter { return perLink.YFilter }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink) SetFilter(yf yfilter.YFilter) { perLink.YFilter = yf }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink) GetSegmentPath() string {
    return "per-link"
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perLink.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perLink.ExcludeInterfaces
    }
    return nil
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perLink.CandidateInterfaces
    children["exclude-interfaces"] = &perLink.ExcludeInterfaces
    return children
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perLink.FastRerouteUseCandidateOnly
    return leafs
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink) GetBundleName() string { return "cisco_ios_xr" }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink) GetYangName() string { return "per-link" }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink) SetParent(parent types.Entity) { perLink.parent = parent }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink) GetParent() types.Entity { return perLink.parent }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetParentYangName() string { return "per-link" }

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetParentYangName() string { return "per-link" }

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix
// Fast-reroute per-prefix configuration
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Topology Independet LFA configuration. The type is bool.
    TopologyIndependentLfa interface{}

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Remote LFA configuration.
    RemoteLfa Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix) GetFilter() yfilter.YFilter { return perPrefix.YFilter }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix) SetFilter(yf yfilter.YFilter) { perPrefix.YFilter = yf }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix) GetGoName(yname string) string {
    if yname == "topology-independent-lfa" { return "TopologyIndependentLfa" }
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "remote-lfa" { return "RemoteLfa" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix) GetSegmentPath() string {
    return "per-prefix"
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-lfa" {
        return &perPrefix.RemoteLfa
    }
    if childYangName == "candidate-interfaces" {
        return &perPrefix.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perPrefix.ExcludeInterfaces
    }
    return nil
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["remote-lfa"] = &perPrefix.RemoteLfa
    children["candidate-interfaces"] = &perPrefix.CandidateInterfaces
    children["exclude-interfaces"] = &perPrefix.ExcludeInterfaces
    return children
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["topology-independent-lfa"] = perPrefix.TopologyIndependentLfa
    leafs["fast-reroute-use-candidate-only"] = perPrefix.FastRerouteUseCandidateOnly
    return leafs
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix) GetYangName() string { return "per-prefix" }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix) SetParent(parent types.Entity) { perPrefix.parent = parent }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix) GetParent() types.Entity { return perPrefix.parent }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa
// Remote LFA configuration
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable remote LFA computation. The type is OspfProcFrrRlfaTunnel.
    Tunnel interface{}

    // Maximum path cost to remote LFA. The type is interface{} with range:
    // 1..4294967295.
    MaximumCost interface{}
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) GetFilter() yfilter.YFilter { return remoteLfa.YFilter }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) SetFilter(yf yfilter.YFilter) { remoteLfa.YFilter = yf }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) GetGoName(yname string) string {
    if yname == "tunnel" { return "Tunnel" }
    if yname == "maximum-cost" { return "MaximumCost" }
    return ""
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) GetSegmentPath() string {
    return "remote-lfa"
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel"] = remoteLfa.Tunnel
    leafs["maximum-cost"] = remoteLfa.MaximumCost
    return leafs
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) GetBundleName() string { return "cisco_ios_xr" }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) GetYangName() string { return "remote-lfa" }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) SetParent(parent types.Entity) { remoteLfa.parent = parent }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) GetParent() types.Entity { return remoteLfa.parent }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DistributeList
// Filter networks intalled to RIB (disable as ACL
// name means filtering is disabled)
// This type is a presence type.
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DistributeList struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Access Control List name. The type is string.
    AccessListName interface{}

    // Route Policy name. The type is string.
    RoutePolicyName interface{}
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DistributeList) GetFilter() yfilter.YFilter { return distributeList.YFilter }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DistributeList) SetFilter(yf yfilter.YFilter) { distributeList.YFilter = yf }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DistributeList) GetGoName(yname string) string {
    if yname == "access-list-name" { return "AccessListName" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DistributeList) GetSegmentPath() string {
    return "distribute-list"
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DistributeList) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DistributeList) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DistributeList) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["access-list-name"] = distributeList.AccessListName
    leafs["route-policy-name"] = distributeList.RoutePolicyName
    return leafs
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DistributeList) GetBundleName() string { return "cisco_ios_xr" }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DistributeList) GetYangName() string { return "distribute-list" }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DistributeList) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DistributeList) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DistributeList) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DistributeList) SetParent(parent types.Entity) { distributeList.parent = parent }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DistributeList) GetParent() types.Entity { return distributeList.parent }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DistributeList) GetParentYangName() string { return "process-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Bfd
// BFD configuration
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Bfd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hello interval for BFD sessions created by OSPF. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    Interval interface{}

    // Detection multiplier for BFD sessions created by OSPF. The type is
    // interface{} with range: 2..50.
    DetectionMultiplier interface{}

    // use of Bidirectional Forwarding Detection. The type is BfdEnableMode.
    FastDetectMode interface{}
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Bfd) GetFilter() yfilter.YFilter { return bfd.YFilter }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Bfd) SetFilter(yf yfilter.YFilter) { bfd.YFilter = yf }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Bfd) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "fast-detect-mode" { return "FastDetectMode" }
    return ""
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Bfd) GetSegmentPath() string {
    return "bfd"
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Bfd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Bfd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Bfd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = bfd.Interval
    leafs["detection-multiplier"] = bfd.DetectionMultiplier
    leafs["fast-detect-mode"] = bfd.FastDetectMode
    return leafs
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Bfd) GetBundleName() string { return "cisco_ios_xr" }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Bfd) GetYangName() string { return "bfd" }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Bfd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Bfd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Bfd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Bfd) SetParent(parent types.Entity) { bfd.parent = parent }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Bfd) GetParent() types.Entity { return bfd.parent }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Bfd) GetParentYangName() string { return "process-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication
// Authentication
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // (!.+)|([^!].+).
    Key interface{}

    // Authentication type.
    Type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication) GetGoName(yname string) string {
    if yname == "key" { return "Key" }
    if yname == "type" { return "Type" }
    if yname == "message-digest-keies" { return "MessageDigestKeies" }
    return ""
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "type" {
        return &authentication.Type
    }
    if childYangName == "message-digest-keies" {
        return &authentication.MessageDigestKeies
    }
    return nil
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["type"] = &authentication.Type
    children["message-digest-keies"] = &authentication.MessageDigestKeies
    return children
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key"] = authentication.Key
    return leafs
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication) GetParentYangName() string { return "process-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_Type struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_Type) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_Type) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_Type) GetGoName(yname string) string {
    if yname == "authen-type" { return "AuthenType" }
    if yname == "keychain-authen-type" { return "KeychainAuthenType" }
    if yname == "keychain-name" { return "KeychainName" }
    return ""
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_Type) GetSegmentPath() string {
    return "type"
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_Type) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_Type) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_Type) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["authen-type"] = self.AuthenType
    leafs["keychain-authen-type"] = self.KeychainAuthenType
    leafs["keychain-name"] = self.KeychainName
    return leafs
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_Type) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_Type) GetYangName() string { return "type" }

func (self *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_Type) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_Type) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_Type) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_Type) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_Type) GetParent() types.Entity { return self.parent }

func (self *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_Type) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies) GetFilter() yfilter.YFilter { return messageDigestKeies.YFilter }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies) SetFilter(yf yfilter.YFilter) { messageDigestKeies.YFilter = yf }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies) GetGoName(yname string) string {
    if yname == "message-digest-key" { return "MessageDigestKey" }
    return ""
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies) GetSegmentPath() string {
    return "message-digest-keies"
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "message-digest-key" {
        for _, c := range messageDigestKeies.MessageDigestKey {
            if messageDigestKeies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey{}
        messageDigestKeies.MessageDigestKey = append(messageDigestKeies.MessageDigestKey, child)
        return &messageDigestKeies.MessageDigestKey[len(messageDigestKeies.MessageDigestKey)-1]
    }
    return nil
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range messageDigestKeies.MessageDigestKey {
        children[messageDigestKeies.MessageDigestKey[i].GetSegmentPath()] = &messageDigestKeies.MessageDigestKey[i]
    }
    return children
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies) GetYangName() string { return "message-digest-keies" }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies) SetParent(parent types.Entity) { messageDigestKeies.parent = parent }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies) GetParent() types.Entity { return messageDigestKeies.parent }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: (!.+)|([^!].+). This attribute
    // is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) GetFilter() yfilter.YFilter { return messageDigestKey.YFilter }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) SetFilter(yf yfilter.YFilter) { messageDigestKey.YFilter = yf }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) GetGoName(yname string) string {
    if yname == "key-id" { return "KeyId" }
    if yname == "password" { return "Password" }
    return ""
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) GetSegmentPath() string {
    return "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key-id"] = messageDigestKey.KeyId
    leafs["password"] = messageDigestKey.Password
    return leafs
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) GetYangName() string { return "message-digest-key" }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) SetParent(parent types.Entity) { messageDigestKey.parent = parent }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParent() types.Entity { return messageDigestKey.parent }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParentYangName() string { return "message-digest-keies" }

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security
// Container class for security related
// configuration parameters
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enabling turns on TTL security.
    Ttl Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security_Ttl
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security) GetFilter() yfilter.YFilter { return security.YFilter }

func (security *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security) SetFilter(yf yfilter.YFilter) { security.YFilter = yf }

func (security *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security) GetGoName(yname string) string {
    if yname == "ttl" { return "Ttl" }
    return ""
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security) GetSegmentPath() string {
    return "security"
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ttl" {
        return &security.Ttl
    }
    return nil
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ttl"] = &security.Ttl
    return children
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security) GetBundleName() string { return "cisco_ios_xr" }

func (security *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security) GetYangName() string { return "security" }

func (security *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (security *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (security *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (security *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security) SetParent(parent types.Entity) { security.parent = parent }

func (security *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security) GetParent() types.Entity { return security.parent }

func (security *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security) GetParentYangName() string { return "process-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security_Ttl
// Enabling turns on TTL security
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security_Ttl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable TTL security. The type is bool.
    Enable interface{}

    // Hop count. The type is interface{} with range: 1..254.
    HopCount interface{}
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security_Ttl) GetFilter() yfilter.YFilter { return ttl.YFilter }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security_Ttl) SetFilter(yf yfilter.YFilter) { ttl.YFilter = yf }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security_Ttl) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "hop-count" { return "HopCount" }
    return ""
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security_Ttl) GetSegmentPath() string {
    return "ttl"
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security_Ttl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security_Ttl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security_Ttl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = ttl.Enable
    leafs["hop-count"] = ttl.HopCount
    return leafs
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security_Ttl) GetBundleName() string { return "cisco_ios_xr" }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security_Ttl) GetYangName() string { return "ttl" }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security_Ttl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security_Ttl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security_Ttl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security_Ttl) SetParent(parent types.Entity) { ttl.parent = parent }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security_Ttl) GetParent() types.Entity { return ttl.parent }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security_Ttl) GetParentYangName() string { return "security" }

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DeadIntervalMinimal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DeadIntervalMinimal) GetFilter() yfilter.YFilter { return deadIntervalMinimal.YFilter }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DeadIntervalMinimal) SetFilter(yf yfilter.YFilter) { deadIntervalMinimal.YFilter = yf }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DeadIntervalMinimal) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "multiplier" { return "Multiplier" }
    return ""
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DeadIntervalMinimal) GetSegmentPath() string {
    return "dead-interval-minimal"
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DeadIntervalMinimal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DeadIntervalMinimal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DeadIntervalMinimal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = deadIntervalMinimal.Interval
    leafs["multiplier"] = deadIntervalMinimal.Multiplier
    return leafs
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DeadIntervalMinimal) GetBundleName() string { return "cisco_ios_xr" }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DeadIntervalMinimal) GetYangName() string { return "dead-interval-minimal" }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DeadIntervalMinimal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DeadIntervalMinimal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DeadIntervalMinimal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DeadIntervalMinimal) SetParent(parent types.Entity) { deadIntervalMinimal.parent = parent }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DeadIntervalMinimal) GetParent() types.Entity { return deadIntervalMinimal.parent }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DeadIntervalMinimal) GetParentYangName() string { return "process-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_CostFallback
// Interface fallback cost
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_CostFallback struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fallback cost of link. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Bandwidth threshold. The type is interface{} with range: 1..4294967.
    Threshold interface{}
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_CostFallback) GetFilter() yfilter.YFilter { return costFallback.YFilter }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_CostFallback) SetFilter(yf yfilter.YFilter) { costFallback.YFilter = yf }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_CostFallback) GetGoName(yname string) string {
    if yname == "cost" { return "Cost" }
    if yname == "threshold" { return "Threshold" }
    return ""
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_CostFallback) GetSegmentPath() string {
    return "cost-fallback"
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_CostFallback) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_CostFallback) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_CostFallback) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cost"] = costFallback.Cost
    leafs["threshold"] = costFallback.Threshold
    return leafs
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_CostFallback) GetBundleName() string { return "cisco_ios_xr" }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_CostFallback) GetYangName() string { return "cost-fallback" }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_CostFallback) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_CostFallback) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_CostFallback) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_CostFallback) SetParent(parent types.Entity) { costFallback.parent = parent }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_CostFallback) GetParent() types.Entity { return costFallback.parent }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_CostFallback) GetParentYangName() string { return "process-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_Redistribution
// Redistribute configurations
type Ospf_Processes_Process_Vrfs_Vrf_Redistribution struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Redistribute information from another routing protocol.
    Redistributes Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes
}

func (redistribution *Ospf_Processes_Process_Vrfs_Vrf_Redistribution) GetFilter() yfilter.YFilter { return redistribution.YFilter }

func (redistribution *Ospf_Processes_Process_Vrfs_Vrf_Redistribution) SetFilter(yf yfilter.YFilter) { redistribution.YFilter = yf }

func (redistribution *Ospf_Processes_Process_Vrfs_Vrf_Redistribution) GetGoName(yname string) string {
    if yname == "redistributes" { return "Redistributes" }
    return ""
}

func (redistribution *Ospf_Processes_Process_Vrfs_Vrf_Redistribution) GetSegmentPath() string {
    return "redistribution"
}

func (redistribution *Ospf_Processes_Process_Vrfs_Vrf_Redistribution) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "redistributes" {
        return &redistribution.Redistributes
    }
    return nil
}

func (redistribution *Ospf_Processes_Process_Vrfs_Vrf_Redistribution) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["redistributes"] = &redistribution.Redistributes
    return children
}

func (redistribution *Ospf_Processes_Process_Vrfs_Vrf_Redistribution) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (redistribution *Ospf_Processes_Process_Vrfs_Vrf_Redistribution) GetBundleName() string { return "cisco_ios_xr" }

func (redistribution *Ospf_Processes_Process_Vrfs_Vrf_Redistribution) GetYangName() string { return "redistribution" }

func (redistribution *Ospf_Processes_Process_Vrfs_Vrf_Redistribution) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (redistribution *Ospf_Processes_Process_Vrfs_Vrf_Redistribution) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (redistribution *Ospf_Processes_Process_Vrfs_Vrf_Redistribution) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (redistribution *Ospf_Processes_Process_Vrfs_Vrf_Redistribution) SetParent(parent types.Entity) { redistribution.parent = parent }

func (redistribution *Ospf_Processes_Process_Vrfs_Vrf_Redistribution) GetParent() types.Entity { return redistribution.parent }

func (redistribution *Ospf_Processes_Process_Vrfs_Vrf_Redistribution) GetParentYangName() string { return "vrf" }

// Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes
// Redistribute information from another routing
// protocol
type Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Redistribute information from another routing protocol. The type is slice
    // of
    // Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute.
    Redistribute []Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute
}

func (redistributes *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes) GetFilter() yfilter.YFilter { return redistributes.YFilter }

func (redistributes *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes) SetFilter(yf yfilter.YFilter) { redistributes.YFilter = yf }

func (redistributes *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes) GetGoName(yname string) string {
    if yname == "redistribute" { return "Redistribute" }
    return ""
}

func (redistributes *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes) GetSegmentPath() string {
    return "redistributes"
}

func (redistributes *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "redistribute" {
        for _, c := range redistributes.Redistribute {
            if redistributes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute{}
        redistributes.Redistribute = append(redistributes.Redistribute, child)
        return &redistributes.Redistribute[len(redistributes.Redistribute)-1]
    }
    return nil
}

func (redistributes *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range redistributes.Redistribute {
        children[redistributes.Redistribute[i].GetSegmentPath()] = &redistributes.Redistribute[i]
    }
    return children
}

func (redistributes *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (redistributes *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes) GetBundleName() string { return "cisco_ios_xr" }

func (redistributes *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes) GetYangName() string { return "redistributes" }

func (redistributes *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (redistributes *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (redistributes *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (redistributes *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes) SetParent(parent types.Entity) { redistributes.parent = parent }

func (redistributes *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes) GetParent() types.Entity { return redistributes.parent }

func (redistributes *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes) GetParentYangName() string { return "redistribution" }

// Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute
// Redistribute information from another routing
// protocol
type Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Distribute list protocol type. The type is
    // OspfRedistProtocol.
    ProtocolName interface{}

    // connected or static or dagr or subscriber or mobile or rip.
    ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip

    // application or isis or ospf. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf.
    ApplicationOrIsisOrOspf []Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf

    // bgp. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Bgp.
    Bgp []Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Bgp

    // eigrp. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Eigrp.
    Eigrp []Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Eigrp
}

func (redistribute *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute) GetFilter() yfilter.YFilter { return redistribute.YFilter }

func (redistribute *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute) SetFilter(yf yfilter.YFilter) { redistribute.YFilter = yf }

func (redistribute *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute) GetGoName(yname string) string {
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "connected-or-static-or-dagr-or-subscriber-or-mobile-or-rip" { return "ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip" }
    if yname == "application-or-isis-or-ospf" { return "ApplicationOrIsisOrOspf" }
    if yname == "bgp" { return "Bgp" }
    if yname == "eigrp" { return "Eigrp" }
    return ""
}

func (redistribute *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute) GetSegmentPath() string {
    return "redistribute" + "[protocol-name='" + fmt.Sprintf("%v", redistribute.ProtocolName) + "']"
}

func (redistribute *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "connected-or-static-or-dagr-or-subscriber-or-mobile-or-rip" {
        return &redistribute.ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip
    }
    if childYangName == "application-or-isis-or-ospf" {
        for _, c := range redistribute.ApplicationOrIsisOrOspf {
            if redistribute.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf{}
        redistribute.ApplicationOrIsisOrOspf = append(redistribute.ApplicationOrIsisOrOspf, child)
        return &redistribute.ApplicationOrIsisOrOspf[len(redistribute.ApplicationOrIsisOrOspf)-1]
    }
    if childYangName == "bgp" {
        for _, c := range redistribute.Bgp {
            if redistribute.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Bgp{}
        redistribute.Bgp = append(redistribute.Bgp, child)
        return &redistribute.Bgp[len(redistribute.Bgp)-1]
    }
    if childYangName == "eigrp" {
        for _, c := range redistribute.Eigrp {
            if redistribute.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Eigrp{}
        redistribute.Eigrp = append(redistribute.Eigrp, child)
        return &redistribute.Eigrp[len(redistribute.Eigrp)-1]
    }
    return nil
}

func (redistribute *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["connected-or-static-or-dagr-or-subscriber-or-mobile-or-rip"] = &redistribute.ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip
    for i := range redistribute.ApplicationOrIsisOrOspf {
        children[redistribute.ApplicationOrIsisOrOspf[i].GetSegmentPath()] = &redistribute.ApplicationOrIsisOrOspf[i]
    }
    for i := range redistribute.Bgp {
        children[redistribute.Bgp[i].GetSegmentPath()] = &redistribute.Bgp[i]
    }
    for i := range redistribute.Eigrp {
        children[redistribute.Eigrp[i].GetSegmentPath()] = &redistribute.Eigrp[i]
    }
    return children
}

func (redistribute *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-name"] = redistribute.ProtocolName
    return leafs
}

func (redistribute *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute) GetBundleName() string { return "cisco_ios_xr" }

func (redistribute *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute) GetYangName() string { return "redistribute" }

func (redistribute *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (redistribute *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (redistribute *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (redistribute *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute) SetParent(parent types.Entity) { redistribute.parent = parent }

func (redistribute *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute) GetParent() types.Entity { return redistribute.parent }

func (redistribute *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute) GetParentYangName() string { return "redistributes" }

// Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip
// connected or static or dagr or subscriber or
// mobile or rip
// This type is a presence type.
type Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Disallow subnetting. The type is bool. The default value is false.
    Classful interface{}

    // Default metric for routes being redistributed into OSPF. The type is
    // interface{} with range: 1..16777214.
    DefaultRedistributedRouteMetric interface{}

    // Set tag for routes redistributed into OSPF. The type is interface{} with
    // range: 0..4294967295.
    Tag interface{}

    // Set OSPF External metric type. The type is OspfLinkStateMetric.
    MetricType interface{}

    // EIGRP route type. The type is OspfEigrpRoute.
    EigrpRouteType interface{}

    // Levels of ISIS routes. The type is OspfRouteLevel.
    IsisLevels interface{}

    // OSPF_Internal route type. The type is bool.
    OspfInternal interface{}

    // OSPF external route types. The type is OspfRouteLevel.
    OspfExternal interface{}

    // OSPF NSSA external route types. The type is OspfRouteLevel.
    OspfNssaLevel interface{}

    // Routing policy name. The type is string.
    RoutePolicyName interface{}

    // Preserve MED of BGP routes. The type is bool.
    BgpPreserveMed interface{}

    // Preserve Metric and Metric Type of BGP Default Route. The type is bool.
    BgpPreserveDefaultInfo interface{}

    // LSA type for redistributed routes. The type is OspfRedistLsa. The default
    // value is external.
    OspfRedistLsaType interface{}

    // Only redistribute to NSSA areas. The type is bool.
    OspfnssaOnly interface{}
}

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) GetFilter() yfilter.YFilter { return connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.YFilter }

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) SetFilter(yf yfilter.YFilter) { connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.YFilter = yf }

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) GetGoName(yname string) string {
    if yname == "classful" { return "Classful" }
    if yname == "default-redistributed-route-metric" { return "DefaultRedistributedRouteMetric" }
    if yname == "tag" { return "Tag" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "eigrp-route-type" { return "EigrpRouteType" }
    if yname == "isis-levels" { return "IsisLevels" }
    if yname == "ospf-internal" { return "OspfInternal" }
    if yname == "ospf-external" { return "OspfExternal" }
    if yname == "ospf-nssa-level" { return "OspfNssaLevel" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "bgp-preserve-med" { return "BgpPreserveMed" }
    if yname == "bgp-preserve-default-info" { return "BgpPreserveDefaultInfo" }
    if yname == "ospf-redist-lsa-type" { return "OspfRedistLsaType" }
    if yname == "ospfnssa-only" { return "OspfnssaOnly" }
    return ""
}

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) GetSegmentPath() string {
    return "connected-or-static-or-dagr-or-subscriber-or-mobile-or-rip"
}

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["classful"] = connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.Classful
    leafs["default-redistributed-route-metric"] = connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.DefaultRedistributedRouteMetric
    leafs["tag"] = connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.Tag
    leafs["metric-type"] = connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.MetricType
    leafs["eigrp-route-type"] = connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EigrpRouteType
    leafs["isis-levels"] = connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.IsisLevels
    leafs["ospf-internal"] = connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.OspfInternal
    leafs["ospf-external"] = connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.OspfExternal
    leafs["ospf-nssa-level"] = connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.OspfNssaLevel
    leafs["route-policy-name"] = connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.RoutePolicyName
    leafs["bgp-preserve-med"] = connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.BgpPreserveMed
    leafs["bgp-preserve-default-info"] = connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.BgpPreserveDefaultInfo
    leafs["ospf-redist-lsa-type"] = connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.OspfRedistLsaType
    leafs["ospfnssa-only"] = connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.OspfnssaOnly
    return leafs
}

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) GetBundleName() string { return "cisco_ios_xr" }

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) GetYangName() string { return "connected-or-static-or-dagr-or-subscriber-or-mobile-or-rip" }

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) SetParent(parent types.Entity) { connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.parent = parent }

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) GetParent() types.Entity { return connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.parent }

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) GetParentYangName() string { return "redistribute" }

// Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf
// application or isis or ospf
type Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. OSPF or ISIS process name or protocol name: bgp,
    // eigrp, connected. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    InstanceName interface{}

    // Disallow subnetting. The type is bool. The default value is false.
    Classful interface{}

    // Default metric for routes being redistributed into OSPF. The type is
    // interface{} with range: 1..16777214.
    DefaultRedistributedRouteMetric interface{}

    // Set tag for routes redistributed into OSPF. The type is interface{} with
    // range: 0..4294967295.
    Tag interface{}

    // Set OSPF External metric type. The type is OspfLinkStateMetric.
    MetricType interface{}

    // EIGRP route type. The type is OspfEigrpRoute.
    EigrpRouteType interface{}

    // Levels of ISIS routes. The type is OspfRouteLevel.
    IsisLevels interface{}

    // OSPF_Internal route type. The type is bool.
    OspfInternal interface{}

    // OSPF external route types. The type is OspfRouteLevel.
    OspfExternal interface{}

    // OSPF NSSA external route types. The type is OspfRouteLevel.
    OspfNssaLevel interface{}

    // Routing policy name. The type is string.
    RoutePolicyName interface{}

    // Preserve MED of BGP routes. The type is bool.
    BgpPreserveMed interface{}

    // Preserve Metric and Metric Type of BGP Default Route. The type is bool.
    BgpPreserveDefaultInfo interface{}

    // LSA type for redistributed routes. The type is OspfRedistLsa. The default
    // value is external.
    OspfRedistLsaType interface{}

    // Only redistribute to NSSA areas. The type is bool.
    OspfnssaOnly interface{}
}

func (applicationOrIsisOrOspf *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) GetFilter() yfilter.YFilter { return applicationOrIsisOrOspf.YFilter }

func (applicationOrIsisOrOspf *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) SetFilter(yf yfilter.YFilter) { applicationOrIsisOrOspf.YFilter = yf }

func (applicationOrIsisOrOspf *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "classful" { return "Classful" }
    if yname == "default-redistributed-route-metric" { return "DefaultRedistributedRouteMetric" }
    if yname == "tag" { return "Tag" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "eigrp-route-type" { return "EigrpRouteType" }
    if yname == "isis-levels" { return "IsisLevels" }
    if yname == "ospf-internal" { return "OspfInternal" }
    if yname == "ospf-external" { return "OspfExternal" }
    if yname == "ospf-nssa-level" { return "OspfNssaLevel" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "bgp-preserve-med" { return "BgpPreserveMed" }
    if yname == "bgp-preserve-default-info" { return "BgpPreserveDefaultInfo" }
    if yname == "ospf-redist-lsa-type" { return "OspfRedistLsaType" }
    if yname == "ospfnssa-only" { return "OspfnssaOnly" }
    return ""
}

func (applicationOrIsisOrOspf *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) GetSegmentPath() string {
    return "application-or-isis-or-ospf" + "[instance-name='" + fmt.Sprintf("%v", applicationOrIsisOrOspf.InstanceName) + "']"
}

func (applicationOrIsisOrOspf *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationOrIsisOrOspf *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationOrIsisOrOspf *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = applicationOrIsisOrOspf.InstanceName
    leafs["classful"] = applicationOrIsisOrOspf.Classful
    leafs["default-redistributed-route-metric"] = applicationOrIsisOrOspf.DefaultRedistributedRouteMetric
    leafs["tag"] = applicationOrIsisOrOspf.Tag
    leafs["metric-type"] = applicationOrIsisOrOspf.MetricType
    leafs["eigrp-route-type"] = applicationOrIsisOrOspf.EigrpRouteType
    leafs["isis-levels"] = applicationOrIsisOrOspf.IsisLevels
    leafs["ospf-internal"] = applicationOrIsisOrOspf.OspfInternal
    leafs["ospf-external"] = applicationOrIsisOrOspf.OspfExternal
    leafs["ospf-nssa-level"] = applicationOrIsisOrOspf.OspfNssaLevel
    leafs["route-policy-name"] = applicationOrIsisOrOspf.RoutePolicyName
    leafs["bgp-preserve-med"] = applicationOrIsisOrOspf.BgpPreserveMed
    leafs["bgp-preserve-default-info"] = applicationOrIsisOrOspf.BgpPreserveDefaultInfo
    leafs["ospf-redist-lsa-type"] = applicationOrIsisOrOspf.OspfRedistLsaType
    leafs["ospfnssa-only"] = applicationOrIsisOrOspf.OspfnssaOnly
    return leafs
}

func (applicationOrIsisOrOspf *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) GetBundleName() string { return "cisco_ios_xr" }

func (applicationOrIsisOrOspf *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) GetYangName() string { return "application-or-isis-or-ospf" }

func (applicationOrIsisOrOspf *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationOrIsisOrOspf *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationOrIsisOrOspf *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationOrIsisOrOspf *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) SetParent(parent types.Entity) { applicationOrIsisOrOspf.parent = parent }

func (applicationOrIsisOrOspf *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) GetParent() types.Entity { return applicationOrIsisOrOspf.parent }

func (applicationOrIsisOrOspf *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) GetParentYangName() string { return "redistribute" }

// Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Bgp
// bgp
type Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Bgp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. OSPF or ISIS process name or protocol name: bgp,
    // eigrp, connected. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    InstanceName interface{}

    // This attribute is a key. First half of BGP AS number in XX.YY format.
    // Mandatory if Protocol is BGP and must not be specified otherwise. Must be a
    // non-zero value if second half is zero. The type is interface{} with range:
    // 0..65535.
    AsXx interface{}

    // This attribute is a key. Second half of BGP AS number in XX.YY format .
    // Mandatory if Protocol is BGP or EIGRP and must not be specified otherwise.
    // Must be a non-zero value if first half is zero. The type is interface{}
    // with range: 0..4294967295.
    AsYy interface{}

    // Disallow subnetting. The type is bool. The default value is false.
    Classful interface{}

    // Default metric for routes being redistributed into OSPF. The type is
    // interface{} with range: 1..16777214.
    DefaultRedistributedRouteMetric interface{}

    // Set tag for routes redistributed into OSPF. The type is interface{} with
    // range: 0..4294967295.
    Tag interface{}

    // Set OSPF External metric type. The type is OspfLinkStateMetric.
    MetricType interface{}

    // EIGRP route type. The type is OspfEigrpRoute.
    EigrpRouteType interface{}

    // Levels of ISIS routes. The type is OspfRouteLevel.
    IsisLevels interface{}

    // OSPF_Internal route type. The type is bool.
    OspfInternal interface{}

    // OSPF external route types. The type is OspfRouteLevel.
    OspfExternal interface{}

    // OSPF NSSA external route types. The type is OspfRouteLevel.
    OspfNssaLevel interface{}

    // Routing policy name. The type is string.
    RoutePolicyName interface{}

    // Preserve MED of BGP routes. The type is bool.
    BgpPreserveMed interface{}

    // Preserve Metric and Metric Type of BGP Default Route. The type is bool.
    BgpPreserveDefaultInfo interface{}

    // LSA type for redistributed routes. The type is OspfRedistLsa. The default
    // value is external.
    OspfRedistLsaType interface{}

    // Only redistribute to NSSA areas. The type is bool.
    OspfnssaOnly interface{}
}

func (bgp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Bgp) GetFilter() yfilter.YFilter { return bgp.YFilter }

func (bgp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Bgp) SetFilter(yf yfilter.YFilter) { bgp.YFilter = yf }

func (bgp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Bgp) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "as-xx" { return "AsXx" }
    if yname == "as-yy" { return "AsYy" }
    if yname == "classful" { return "Classful" }
    if yname == "default-redistributed-route-metric" { return "DefaultRedistributedRouteMetric" }
    if yname == "tag" { return "Tag" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "eigrp-route-type" { return "EigrpRouteType" }
    if yname == "isis-levels" { return "IsisLevels" }
    if yname == "ospf-internal" { return "OspfInternal" }
    if yname == "ospf-external" { return "OspfExternal" }
    if yname == "ospf-nssa-level" { return "OspfNssaLevel" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "bgp-preserve-med" { return "BgpPreserveMed" }
    if yname == "bgp-preserve-default-info" { return "BgpPreserveDefaultInfo" }
    if yname == "ospf-redist-lsa-type" { return "OspfRedistLsaType" }
    if yname == "ospfnssa-only" { return "OspfnssaOnly" }
    return ""
}

func (bgp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Bgp) GetSegmentPath() string {
    return "bgp" + "[instance-name='" + fmt.Sprintf("%v", bgp.InstanceName) + "']" + "[as-xx='" + fmt.Sprintf("%v", bgp.AsXx) + "']" + "[as-yy='" + fmt.Sprintf("%v", bgp.AsYy) + "']"
}

func (bgp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Bgp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bgp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Bgp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bgp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Bgp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = bgp.InstanceName
    leafs["as-xx"] = bgp.AsXx
    leafs["as-yy"] = bgp.AsYy
    leafs["classful"] = bgp.Classful
    leafs["default-redistributed-route-metric"] = bgp.DefaultRedistributedRouteMetric
    leafs["tag"] = bgp.Tag
    leafs["metric-type"] = bgp.MetricType
    leafs["eigrp-route-type"] = bgp.EigrpRouteType
    leafs["isis-levels"] = bgp.IsisLevels
    leafs["ospf-internal"] = bgp.OspfInternal
    leafs["ospf-external"] = bgp.OspfExternal
    leafs["ospf-nssa-level"] = bgp.OspfNssaLevel
    leafs["route-policy-name"] = bgp.RoutePolicyName
    leafs["bgp-preserve-med"] = bgp.BgpPreserveMed
    leafs["bgp-preserve-default-info"] = bgp.BgpPreserveDefaultInfo
    leafs["ospf-redist-lsa-type"] = bgp.OspfRedistLsaType
    leafs["ospfnssa-only"] = bgp.OspfnssaOnly
    return leafs
}

func (bgp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Bgp) GetBundleName() string { return "cisco_ios_xr" }

func (bgp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Bgp) GetYangName() string { return "bgp" }

func (bgp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Bgp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bgp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Bgp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bgp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Bgp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bgp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Bgp) SetParent(parent types.Entity) { bgp.parent = parent }

func (bgp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Bgp) GetParent() types.Entity { return bgp.parent }

func (bgp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Bgp) GetParentYangName() string { return "redistribute" }

// Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Eigrp
// eigrp
type Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Eigrp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. OSPF or ISIS process name or protocol name: bgp,
    // eigrp, connected. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    InstanceName interface{}

    // This attribute is a key. First half of BGP AS number in XX.YY format.
    // Mandatory if Protocol is BGP and must not be specified otherwise. Must be a
    // non-zero value if second half is zero. The type is interface{} with range:
    // 0..65535.
    AsXx interface{}

    // Disallow subnetting. The type is bool. The default value is false.
    Classful interface{}

    // Default metric for routes being redistributed into OSPF. The type is
    // interface{} with range: 1..16777214.
    DefaultRedistributedRouteMetric interface{}

    // Set tag for routes redistributed into OSPF. The type is interface{} with
    // range: 0..4294967295.
    Tag interface{}

    // Set OSPF External metric type. The type is OspfLinkStateMetric.
    MetricType interface{}

    // EIGRP route type. The type is OspfEigrpRoute.
    EigrpRouteType interface{}

    // Levels of ISIS routes. The type is OspfRouteLevel.
    IsisLevels interface{}

    // OSPF_Internal route type. The type is bool.
    OspfInternal interface{}

    // OSPF external route types. The type is OspfRouteLevel.
    OspfExternal interface{}

    // OSPF NSSA external route types. The type is OspfRouteLevel.
    OspfNssaLevel interface{}

    // Routing policy name. The type is string.
    RoutePolicyName interface{}

    // Preserve MED of BGP routes. The type is bool.
    BgpPreserveMed interface{}

    // Preserve Metric and Metric Type of BGP Default Route. The type is bool.
    BgpPreserveDefaultInfo interface{}

    // LSA type for redistributed routes. The type is OspfRedistLsa. The default
    // value is external.
    OspfRedistLsaType interface{}

    // Only redistribute to NSSA areas. The type is bool.
    OspfnssaOnly interface{}
}

func (eigrp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Eigrp) GetFilter() yfilter.YFilter { return eigrp.YFilter }

func (eigrp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Eigrp) SetFilter(yf yfilter.YFilter) { eigrp.YFilter = yf }

func (eigrp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Eigrp) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "as-xx" { return "AsXx" }
    if yname == "classful" { return "Classful" }
    if yname == "default-redistributed-route-metric" { return "DefaultRedistributedRouteMetric" }
    if yname == "tag" { return "Tag" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "eigrp-route-type" { return "EigrpRouteType" }
    if yname == "isis-levels" { return "IsisLevels" }
    if yname == "ospf-internal" { return "OspfInternal" }
    if yname == "ospf-external" { return "OspfExternal" }
    if yname == "ospf-nssa-level" { return "OspfNssaLevel" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "bgp-preserve-med" { return "BgpPreserveMed" }
    if yname == "bgp-preserve-default-info" { return "BgpPreserveDefaultInfo" }
    if yname == "ospf-redist-lsa-type" { return "OspfRedistLsaType" }
    if yname == "ospfnssa-only" { return "OspfnssaOnly" }
    return ""
}

func (eigrp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Eigrp) GetSegmentPath() string {
    return "eigrp" + "[instance-name='" + fmt.Sprintf("%v", eigrp.InstanceName) + "']" + "[as-xx='" + fmt.Sprintf("%v", eigrp.AsXx) + "']"
}

func (eigrp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Eigrp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (eigrp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Eigrp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (eigrp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Eigrp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = eigrp.InstanceName
    leafs["as-xx"] = eigrp.AsXx
    leafs["classful"] = eigrp.Classful
    leafs["default-redistributed-route-metric"] = eigrp.DefaultRedistributedRouteMetric
    leafs["tag"] = eigrp.Tag
    leafs["metric-type"] = eigrp.MetricType
    leafs["eigrp-route-type"] = eigrp.EigrpRouteType
    leafs["isis-levels"] = eigrp.IsisLevels
    leafs["ospf-internal"] = eigrp.OspfInternal
    leafs["ospf-external"] = eigrp.OspfExternal
    leafs["ospf-nssa-level"] = eigrp.OspfNssaLevel
    leafs["route-policy-name"] = eigrp.RoutePolicyName
    leafs["bgp-preserve-med"] = eigrp.BgpPreserveMed
    leafs["bgp-preserve-default-info"] = eigrp.BgpPreserveDefaultInfo
    leafs["ospf-redist-lsa-type"] = eigrp.OspfRedistLsaType
    leafs["ospfnssa-only"] = eigrp.OspfnssaOnly
    return leafs
}

func (eigrp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Eigrp) GetBundleName() string { return "cisco_ios_xr" }

func (eigrp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Eigrp) GetYangName() string { return "eigrp" }

func (eigrp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Eigrp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eigrp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Eigrp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eigrp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Eigrp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eigrp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Eigrp) SetParent(parent types.Entity) { eigrp.parent = parent }

func (eigrp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Eigrp) GetParent() types.Entity { return eigrp.parent }

func (eigrp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Eigrp) GetParentYangName() string { return "redistribute" }

// Ospf_Processes_Process_Vrfs_Vrf_AdjacencyStagger
// Staggering OSPF adjacency bring up
type Ospf_Processes_Process_Vrfs_Vrf_AdjacencyStagger struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Disable OSPF adjacency stagger. The type is interface{}.
    Disable interface{}

    // Adjacency Stagger: Initial number of neighbors to bring up per area. The
    // type is interface{} with range: 1..65535. The default value is 2.
    InitialNbr interface{}

    // Adjacency Stagger: Subsequent simultaneous number of neighbors to bring up.
    // The type is interface{} with range: 1..65535. The default value is 64.
    MaxNbr interface{}
}

func (adjacencyStagger *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyStagger) GetFilter() yfilter.YFilter { return adjacencyStagger.YFilter }

func (adjacencyStagger *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyStagger) SetFilter(yf yfilter.YFilter) { adjacencyStagger.YFilter = yf }

func (adjacencyStagger *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyStagger) GetGoName(yname string) string {
    if yname == "disable" { return "Disable" }
    if yname == "initial-nbr" { return "InitialNbr" }
    if yname == "max-nbr" { return "MaxNbr" }
    return ""
}

func (adjacencyStagger *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyStagger) GetSegmentPath() string {
    return "adjacency-stagger"
}

func (adjacencyStagger *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyStagger) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (adjacencyStagger *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyStagger) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (adjacencyStagger *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyStagger) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["disable"] = adjacencyStagger.Disable
    leafs["initial-nbr"] = adjacencyStagger.InitialNbr
    leafs["max-nbr"] = adjacencyStagger.MaxNbr
    return leafs
}

func (adjacencyStagger *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyStagger) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencyStagger *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyStagger) GetYangName() string { return "adjacency-stagger" }

func (adjacencyStagger *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyStagger) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencyStagger *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyStagger) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencyStagger *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyStagger) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencyStagger *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyStagger) SetParent(parent types.Entity) { adjacencyStagger.parent = parent }

func (adjacencyStagger *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyStagger) GetParent() types.Entity { return adjacencyStagger.parent }

func (adjacencyStagger *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyStagger) GetParentYangName() string { return "vrf" }

// Ospf_Processes_Process_Vrfs_Vrf_MaxLsa
// Set max-lsa configuration
// This type is a presence type.
type Ospf_Processes_Process_Vrfs_Vrf_MaxLsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Set maximum number of non self-generated LSAs. The type is interface{} with
    // range: 1..4294967294. This attribute is mandatory.
    MaxLsaLimit interface{}

    // Set max-lsa threshold for generating a warning message. The type is
    // interface{} with range: 1..100.
    MaxLsaThreshold interface{}

    // Only give warning message when limit is exceeded. The type is bool.
    MaxLsaWarningOnly interface{}

    // Set time during which all adjacencies are suppressed. The type is
    // interface{} with range: 1..35791394.
    MaxLsaIgnoreTime interface{}

    // Set count on how many times adjacencies can be suppressed. The type is
    // interface{} with range: 1..4294967294.
    MaxLsaIgnoreCount interface{}

    // Set number of minutes after which ignore-count is reset to zero. The type
    // is interface{} with range: 2..71582788. Units are minute.
    MaxLsaResetTime interface{}
}

func (maxLsa *Ospf_Processes_Process_Vrfs_Vrf_MaxLsa) GetFilter() yfilter.YFilter { return maxLsa.YFilter }

func (maxLsa *Ospf_Processes_Process_Vrfs_Vrf_MaxLsa) SetFilter(yf yfilter.YFilter) { maxLsa.YFilter = yf }

func (maxLsa *Ospf_Processes_Process_Vrfs_Vrf_MaxLsa) GetGoName(yname string) string {
    if yname == "max-lsa-limit" { return "MaxLsaLimit" }
    if yname == "max-lsa-threshold" { return "MaxLsaThreshold" }
    if yname == "max-lsa-warning-only" { return "MaxLsaWarningOnly" }
    if yname == "max-lsa-ignore-time" { return "MaxLsaIgnoreTime" }
    if yname == "max-lsa-ignore-count" { return "MaxLsaIgnoreCount" }
    if yname == "max-lsa-reset-time" { return "MaxLsaResetTime" }
    return ""
}

func (maxLsa *Ospf_Processes_Process_Vrfs_Vrf_MaxLsa) GetSegmentPath() string {
    return "max-lsa"
}

func (maxLsa *Ospf_Processes_Process_Vrfs_Vrf_MaxLsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maxLsa *Ospf_Processes_Process_Vrfs_Vrf_MaxLsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maxLsa *Ospf_Processes_Process_Vrfs_Vrf_MaxLsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["max-lsa-limit"] = maxLsa.MaxLsaLimit
    leafs["max-lsa-threshold"] = maxLsa.MaxLsaThreshold
    leafs["max-lsa-warning-only"] = maxLsa.MaxLsaWarningOnly
    leafs["max-lsa-ignore-time"] = maxLsa.MaxLsaIgnoreTime
    leafs["max-lsa-ignore-count"] = maxLsa.MaxLsaIgnoreCount
    leafs["max-lsa-reset-time"] = maxLsa.MaxLsaResetTime
    return leafs
}

func (maxLsa *Ospf_Processes_Process_Vrfs_Vrf_MaxLsa) GetBundleName() string { return "cisco_ios_xr" }

func (maxLsa *Ospf_Processes_Process_Vrfs_Vrf_MaxLsa) GetYangName() string { return "max-lsa" }

func (maxLsa *Ospf_Processes_Process_Vrfs_Vrf_MaxLsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxLsa *Ospf_Processes_Process_Vrfs_Vrf_MaxLsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxLsa *Ospf_Processes_Process_Vrfs_Vrf_MaxLsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxLsa *Ospf_Processes_Process_Vrfs_Vrf_MaxLsa) SetParent(parent types.Entity) { maxLsa.parent = parent }

func (maxLsa *Ospf_Processes_Process_Vrfs_Vrf_MaxLsa) GetParent() types.Entity { return maxLsa.parent }

func (maxLsa *Ospf_Processes_Process_Vrfs_Vrf_MaxLsa) GetParentYangName() string { return "vrf" }

// Ospf_Processes_Process_Vrfs_Vrf_AutoCost
// Controls automatic cost based on bandwidth
type Ospf_Processes_Process_Vrfs_Vrf_AutoCost struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Disabling auto costing. The type is bool. The default value is false.
    Disable interface{}

    // The reference bandwidth in terms of Mbits per second. The type is
    // interface{} with range: 1..4294967. Units are Mbit/s. The default value is
    // 100.
    Bandwidth interface{}
}

func (autoCost *Ospf_Processes_Process_Vrfs_Vrf_AutoCost) GetFilter() yfilter.YFilter { return autoCost.YFilter }

func (autoCost *Ospf_Processes_Process_Vrfs_Vrf_AutoCost) SetFilter(yf yfilter.YFilter) { autoCost.YFilter = yf }

func (autoCost *Ospf_Processes_Process_Vrfs_Vrf_AutoCost) GetGoName(yname string) string {
    if yname == "disable" { return "Disable" }
    if yname == "bandwidth" { return "Bandwidth" }
    return ""
}

func (autoCost *Ospf_Processes_Process_Vrfs_Vrf_AutoCost) GetSegmentPath() string {
    return "auto-cost"
}

func (autoCost *Ospf_Processes_Process_Vrfs_Vrf_AutoCost) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (autoCost *Ospf_Processes_Process_Vrfs_Vrf_AutoCost) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (autoCost *Ospf_Processes_Process_Vrfs_Vrf_AutoCost) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["disable"] = autoCost.Disable
    leafs["bandwidth"] = autoCost.Bandwidth
    return leafs
}

func (autoCost *Ospf_Processes_Process_Vrfs_Vrf_AutoCost) GetBundleName() string { return "cisco_ios_xr" }

func (autoCost *Ospf_Processes_Process_Vrfs_Vrf_AutoCost) GetYangName() string { return "auto-cost" }

func (autoCost *Ospf_Processes_Process_Vrfs_Vrf_AutoCost) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (autoCost *Ospf_Processes_Process_Vrfs_Vrf_AutoCost) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (autoCost *Ospf_Processes_Process_Vrfs_Vrf_AutoCost) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (autoCost *Ospf_Processes_Process_Vrfs_Vrf_AutoCost) SetParent(parent types.Entity) { autoCost.parent = parent }

func (autoCost *Ospf_Processes_Process_Vrfs_Vrf_AutoCost) GetParent() types.Entity { return autoCost.parent }

func (autoCost *Ospf_Processes_Process_Vrfs_Vrf_AutoCost) GetParentYangName() string { return "vrf" }

// Ospf_Processes_Process_Vrfs_Vrf_Ucmp
// Unequal Cost Multi-ptah configuration
type Ospf_Processes_Process_Vrfs_Vrf_Ucmp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Delay in msecs between primary SPF and UCMP computation. The type is
    // interface{} with range: 1..5000. Units are millisecond. The default value
    // is 100.
    DelayInterval interface{}

    // UCMP feature enable configuration.
    Enable Ospf_Processes_Process_Vrfs_Vrf_Ucmp_Enable

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces
}

func (ucmp *Ospf_Processes_Process_Vrfs_Vrf_Ucmp) GetFilter() yfilter.YFilter { return ucmp.YFilter }

func (ucmp *Ospf_Processes_Process_Vrfs_Vrf_Ucmp) SetFilter(yf yfilter.YFilter) { ucmp.YFilter = yf }

func (ucmp *Ospf_Processes_Process_Vrfs_Vrf_Ucmp) GetGoName(yname string) string {
    if yname == "delay-interval" { return "DelayInterval" }
    if yname == "enable" { return "Enable" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (ucmp *Ospf_Processes_Process_Vrfs_Vrf_Ucmp) GetSegmentPath() string {
    return "ucmp"
}

func (ucmp *Ospf_Processes_Process_Vrfs_Vrf_Ucmp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "enable" {
        return &ucmp.Enable
    }
    if childYangName == "exclude-interfaces" {
        return &ucmp.ExcludeInterfaces
    }
    return nil
}

func (ucmp *Ospf_Processes_Process_Vrfs_Vrf_Ucmp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["enable"] = &ucmp.Enable
    children["exclude-interfaces"] = &ucmp.ExcludeInterfaces
    return children
}

func (ucmp *Ospf_Processes_Process_Vrfs_Vrf_Ucmp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["delay-interval"] = ucmp.DelayInterval
    return leafs
}

func (ucmp *Ospf_Processes_Process_Vrfs_Vrf_Ucmp) GetBundleName() string { return "cisco_ios_xr" }

func (ucmp *Ospf_Processes_Process_Vrfs_Vrf_Ucmp) GetYangName() string { return "ucmp" }

func (ucmp *Ospf_Processes_Process_Vrfs_Vrf_Ucmp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ucmp *Ospf_Processes_Process_Vrfs_Vrf_Ucmp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ucmp *Ospf_Processes_Process_Vrfs_Vrf_Ucmp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ucmp *Ospf_Processes_Process_Vrfs_Vrf_Ucmp) SetParent(parent types.Entity) { ucmp.parent = parent }

func (ucmp *Ospf_Processes_Process_Vrfs_Vrf_Ucmp) GetParent() types.Entity { return ucmp.parent }

func (ucmp *Ospf_Processes_Process_Vrfs_Vrf_Ucmp) GetParentYangName() string { return "vrf" }

// Ospf_Processes_Process_Vrfs_Vrf_Ucmp_Enable
// UCMP feature enable configuration
type Ospf_Processes_Process_Vrfs_Vrf_Ucmp_Enable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Value of variance. The type is interface{} with range: 101..10000. The
    // default value is 200.
    Variance interface{}

    // Name of the Prefix List. The type is string.
    PrefixListName interface{}
}

func (enable *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_Enable) GetFilter() yfilter.YFilter { return enable.YFilter }

func (enable *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_Enable) SetFilter(yf yfilter.YFilter) { enable.YFilter = yf }

func (enable *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_Enable) GetGoName(yname string) string {
    if yname == "variance" { return "Variance" }
    if yname == "prefix-list-name" { return "PrefixListName" }
    return ""
}

func (enable *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_Enable) GetSegmentPath() string {
    return "enable"
}

func (enable *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_Enable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (enable *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_Enable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (enable *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_Enable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["variance"] = enable.Variance
    leafs["prefix-list-name"] = enable.PrefixListName
    return leafs
}

func (enable *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_Enable) GetBundleName() string { return "cisco_ios_xr" }

func (enable *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_Enable) GetYangName() string { return "enable" }

func (enable *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_Enable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (enable *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_Enable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (enable *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_Enable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (enable *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_Enable) SetParent(parent types.Entity) { enable.parent = parent }

func (enable *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_Enable) GetParent() types.Entity { return enable.parent }

func (enable *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_Enable) GetParentYangName() string { return "ucmp" }

// Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces) GetParentYangName() string { return "ucmp" }

// Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospf_Processes_Process_Vrfs_Vrf_FastReroute
// Fast-reroute instance scoped parameters
type Ospf_Processes_Process_Vrfs_Vrf_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fast-reroute per-link global configuration.
    PerLink Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerLink

    // Fast-reroute per-prefix global configuration.
    PerPrefix Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_FastReroute) GetGoName(yname string) string {
    if yname == "per-link" { return "PerLink" }
    if yname == "per-prefix" { return "PerPrefix" }
    return ""
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "per-link" {
        return &fastReroute.PerLink
    }
    if childYangName == "per-prefix" {
        return &fastReroute.PerPrefix
    }
    return nil
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["per-link"] = &fastReroute.PerLink
    children["per-prefix"] = &fastReroute.PerPrefix
    return children
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_FastReroute) GetParentYangName() string { return "vrf" }

// Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerLink
// Fast-reroute per-link global configuration
type Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fast-reroute per-link/per-prefix priority-limit command. The type is
    // OspfFastReroutePriority.
    Priority interface{}
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerLink) GetFilter() yfilter.YFilter { return perLink.YFilter }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerLink) SetFilter(yf yfilter.YFilter) { perLink.YFilter = yf }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerLink) GetGoName(yname string) string {
    if yname == "priority" { return "Priority" }
    return ""
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerLink) GetSegmentPath() string {
    return "per-link"
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["priority"] = perLink.Priority
    return leafs
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerLink) GetBundleName() string { return "cisco_ios_xr" }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerLink) GetYangName() string { return "per-link" }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerLink) SetParent(parent types.Entity) { perLink.parent = parent }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerLink) GetParent() types.Entity { return perLink.parent }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerLink) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix
// Fast-reroute per-prefix global configuration
type Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Disable load sharing between multiple backups. The type is interface{}.
    LoadSharingDisable interface{}

    // Fast-reroute per-link/per-prefix priority-limit command. The type is
    // OspfFastReroutePriority.
    Priority interface{}

    // Fast-reroute tiebreakers configurations.
    Tiebreakers Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix) GetFilter() yfilter.YFilter { return perPrefix.YFilter }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix) SetFilter(yf yfilter.YFilter) { perPrefix.YFilter = yf }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix) GetGoName(yname string) string {
    if yname == "load-sharing-disable" { return "LoadSharingDisable" }
    if yname == "priority" { return "Priority" }
    if yname == "tiebreakers" { return "Tiebreakers" }
    return ""
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix) GetSegmentPath() string {
    return "per-prefix"
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tiebreakers" {
        return &perPrefix.Tiebreakers
    }
    return nil
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tiebreakers"] = &perPrefix.Tiebreakers
    return children
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["load-sharing-disable"] = perPrefix.LoadSharingDisable
    leafs["priority"] = perPrefix.Priority
    return leafs
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix) GetYangName() string { return "per-prefix" }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix) SetParent(parent types.Entity) { perPrefix.parent = parent }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix) GetParent() types.Entity { return perPrefix.parent }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers
// Fast-reroute tiebreakers configurations
type Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fast-reroute tiebreakers configuration. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker.
    Tiebreaker []Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers) GetFilter() yfilter.YFilter { return tiebreakers.YFilter }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers) SetFilter(yf yfilter.YFilter) { tiebreakers.YFilter = yf }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers) GetGoName(yname string) string {
    if yname == "tiebreaker" { return "Tiebreaker" }
    return ""
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers) GetSegmentPath() string {
    return "tiebreakers"
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tiebreaker" {
        for _, c := range tiebreakers.Tiebreaker {
            if tiebreakers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker{}
        tiebreakers.Tiebreaker = append(tiebreakers.Tiebreaker, child)
        return &tiebreakers.Tiebreaker[len(tiebreakers.Tiebreaker)-1]
    }
    return nil
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range tiebreakers.Tiebreaker {
        children[tiebreakers.Tiebreaker[i].GetSegmentPath()] = &tiebreakers.Tiebreaker[i]
    }
    return children
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers) GetYangName() string { return "tiebreakers" }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers) SetParent(parent types.Entity) { tiebreakers.parent = parent }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers) GetParent() types.Entity { return tiebreakers.parent }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
// Fast-reroute tiebreakers configuration
type Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Tiebreaker type. The type is
    // OspfFastRerouteTiebreakers.
    TiebreakerType interface{}

    // Index value for a tiebreaker, 0 to disable. The type is interface{} with
    // range: 0..255. This attribute is mandatory.
    TiebreakerIndex interface{}
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetFilter() yfilter.YFilter { return tiebreaker.YFilter }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetFilter(yf yfilter.YFilter) { tiebreaker.YFilter = yf }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetGoName(yname string) string {
    if yname == "tiebreaker-type" { return "TiebreakerType" }
    if yname == "tiebreaker-index" { return "TiebreakerIndex" }
    return ""
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetSegmentPath() string {
    return "tiebreaker" + "[tiebreaker-type='" + fmt.Sprintf("%v", tiebreaker.TiebreakerType) + "']"
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tiebreaker-type"] = tiebreaker.TiebreakerType
    leafs["tiebreaker-index"] = tiebreaker.TiebreakerIndex
    return leafs
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetYangName() string { return "tiebreaker" }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetParent(parent types.Entity) { tiebreaker.parent = parent }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParent() types.Entity { return tiebreaker.parent }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParentYangName() string { return "tiebreakers" }

// Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes
// Configure IP prefix summary
type Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Data container.
    SummaryPrefixData Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefixData

    // keys: prefix, netmask. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_PrefixAndNetmask.
    PrefixAndNetmask []Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_PrefixAndNetmask

    // keys: prefix. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Prefix.
    Prefix []Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Prefix

    // keys: netmask. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Netmask.
    Netmask []Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Netmask
}

func (summaryPrefixes *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetFilter() yfilter.YFilter { return summaryPrefixes.YFilter }

func (summaryPrefixes *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes) SetFilter(yf yfilter.YFilter) { summaryPrefixes.YFilter = yf }

func (summaryPrefixes *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetGoName(yname string) string {
    if yname == "summary-prefix-data" { return "SummaryPrefixData" }
    if yname == "prefix-and-netmask" { return "PrefixAndNetmask" }
    if yname == "prefix" { return "Prefix" }
    if yname == "netmask" { return "Netmask" }
    return ""
}

func (summaryPrefixes *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetSegmentPath() string {
    return "summary-prefixes"
}

func (summaryPrefixes *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary-prefix-data" {
        return &summaryPrefixes.SummaryPrefixData
    }
    if childYangName == "prefix-and-netmask" {
        for _, c := range summaryPrefixes.PrefixAndNetmask {
            if summaryPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_PrefixAndNetmask{}
        summaryPrefixes.PrefixAndNetmask = append(summaryPrefixes.PrefixAndNetmask, child)
        return &summaryPrefixes.PrefixAndNetmask[len(summaryPrefixes.PrefixAndNetmask)-1]
    }
    if childYangName == "prefix" {
        for _, c := range summaryPrefixes.Prefix {
            if summaryPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Prefix{}
        summaryPrefixes.Prefix = append(summaryPrefixes.Prefix, child)
        return &summaryPrefixes.Prefix[len(summaryPrefixes.Prefix)-1]
    }
    if childYangName == "netmask" {
        for _, c := range summaryPrefixes.Netmask {
            if summaryPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Netmask{}
        summaryPrefixes.Netmask = append(summaryPrefixes.Netmask, child)
        return &summaryPrefixes.Netmask[len(summaryPrefixes.Netmask)-1]
    }
    return nil
}

func (summaryPrefixes *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["summary-prefix-data"] = &summaryPrefixes.SummaryPrefixData
    for i := range summaryPrefixes.PrefixAndNetmask {
        children[summaryPrefixes.PrefixAndNetmask[i].GetSegmentPath()] = &summaryPrefixes.PrefixAndNetmask[i]
    }
    for i := range summaryPrefixes.Prefix {
        children[summaryPrefixes.Prefix[i].GetSegmentPath()] = &summaryPrefixes.Prefix[i]
    }
    for i := range summaryPrefixes.Netmask {
        children[summaryPrefixes.Netmask[i].GetSegmentPath()] = &summaryPrefixes.Netmask[i]
    }
    return children
}

func (summaryPrefixes *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (summaryPrefixes *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (summaryPrefixes *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetYangName() string { return "summary-prefixes" }

func (summaryPrefixes *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summaryPrefixes *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summaryPrefixes *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summaryPrefixes *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes) SetParent(parent types.Entity) { summaryPrefixes.parent = parent }

func (summaryPrefixes *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetParent() types.Entity { return summaryPrefixes.parent }

func (summaryPrefixes *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetParentYangName() string { return "vrf" }

// Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefixData
// Data container.
type Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefixData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Do not advertise when translating OSPF type-7 LSA. The type is bool. The
    // default value is false.
    NotAdvertise interface{}

    // 32-bit tag value. The type is interface{} with range: 0..4294967295.
    Tag interface{}
}

func (summaryPrefixData *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefixData) GetFilter() yfilter.YFilter { return summaryPrefixData.YFilter }

func (summaryPrefixData *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefixData) SetFilter(yf yfilter.YFilter) { summaryPrefixData.YFilter = yf }

func (summaryPrefixData *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefixData) GetGoName(yname string) string {
    if yname == "not-advertise" { return "NotAdvertise" }
    if yname == "tag" { return "Tag" }
    return ""
}

func (summaryPrefixData *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefixData) GetSegmentPath() string {
    return "summary-prefix-data"
}

func (summaryPrefixData *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefixData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (summaryPrefixData *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefixData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (summaryPrefixData *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefixData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["not-advertise"] = summaryPrefixData.NotAdvertise
    leafs["tag"] = summaryPrefixData.Tag
    return leafs
}

func (summaryPrefixData *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefixData) GetBundleName() string { return "cisco_ios_xr" }

func (summaryPrefixData *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefixData) GetYangName() string { return "summary-prefix-data" }

func (summaryPrefixData *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefixData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summaryPrefixData *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefixData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summaryPrefixData *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefixData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summaryPrefixData *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefixData) SetParent(parent types.Entity) { summaryPrefixData.parent = parent }

func (summaryPrefixData *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefixData) GetParent() types.Entity { return summaryPrefixData.parent }

func (summaryPrefixData *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefixData) GetParentYangName() string { return "summary-prefixes" }

// Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_PrefixAndNetmask
// keys: prefix, netmask
type Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_PrefixAndNetmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IP summary prefix. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // This attribute is a key. Summary netmask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Netmask interface{}

    // Do not advertise when translating OSPF type-7 LSA. The type is bool. The
    // default value is false.
    NotAdvertise interface{}

    // 32-bit tag value. The type is interface{} with range: 0..4294967295.
    Tag interface{}
}

func (prefixAndNetmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_PrefixAndNetmask) GetFilter() yfilter.YFilter { return prefixAndNetmask.YFilter }

func (prefixAndNetmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_PrefixAndNetmask) SetFilter(yf yfilter.YFilter) { prefixAndNetmask.YFilter = yf }

func (prefixAndNetmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_PrefixAndNetmask) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "netmask" { return "Netmask" }
    if yname == "not-advertise" { return "NotAdvertise" }
    if yname == "tag" { return "Tag" }
    return ""
}

func (prefixAndNetmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_PrefixAndNetmask) GetSegmentPath() string {
    return "prefix-and-netmask" + "[prefix='" + fmt.Sprintf("%v", prefixAndNetmask.Prefix) + "']" + "[netmask='" + fmt.Sprintf("%v", prefixAndNetmask.Netmask) + "']"
}

func (prefixAndNetmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_PrefixAndNetmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefixAndNetmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_PrefixAndNetmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefixAndNetmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_PrefixAndNetmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = prefixAndNetmask.Prefix
    leafs["netmask"] = prefixAndNetmask.Netmask
    leafs["not-advertise"] = prefixAndNetmask.NotAdvertise
    leafs["tag"] = prefixAndNetmask.Tag
    return leafs
}

func (prefixAndNetmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_PrefixAndNetmask) GetBundleName() string { return "cisco_ios_xr" }

func (prefixAndNetmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_PrefixAndNetmask) GetYangName() string { return "prefix-and-netmask" }

func (prefixAndNetmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_PrefixAndNetmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefixAndNetmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_PrefixAndNetmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefixAndNetmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_PrefixAndNetmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefixAndNetmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_PrefixAndNetmask) SetParent(parent types.Entity) { prefixAndNetmask.parent = parent }

func (prefixAndNetmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_PrefixAndNetmask) GetParent() types.Entity { return prefixAndNetmask.parent }

func (prefixAndNetmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_PrefixAndNetmask) GetParentYangName() string { return "summary-prefixes" }

// Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Prefix
// keys: prefix
type Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IP summary prefix. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Do not advertise when translating OSPF type-7 LSA. The type is bool. The
    // default value is false.
    NotAdvertise interface{}

    // 32-bit tag value. The type is interface{} with range: 0..4294967295.
    Tag interface{}
}

func (prefix *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Prefix) GetFilter() yfilter.YFilter { return prefix.YFilter }

func (prefix *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Prefix) SetFilter(yf yfilter.YFilter) { prefix.YFilter = yf }

func (prefix *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Prefix) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "not-advertise" { return "NotAdvertise" }
    if yname == "tag" { return "Tag" }
    return ""
}

func (prefix *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Prefix) GetSegmentPath() string {
    return "prefix" + "[prefix='" + fmt.Sprintf("%v", prefix.Prefix) + "']"
}

func (prefix *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefix *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefix *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = prefix.Prefix
    leafs["not-advertise"] = prefix.NotAdvertise
    leafs["tag"] = prefix.Tag
    return leafs
}

func (prefix *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (prefix *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Prefix) GetYangName() string { return "prefix" }

func (prefix *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefix *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefix *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefix *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Prefix) SetParent(parent types.Entity) { prefix.parent = parent }

func (prefix *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Prefix) GetParent() types.Entity { return prefix.parent }

func (prefix *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Prefix) GetParentYangName() string { return "summary-prefixes" }

// Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Netmask
// keys: netmask
type Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Netmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Summary netmask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Netmask interface{}

    // Do not advertise when translating OSPF type-7 LSA. The type is bool. The
    // default value is false.
    NotAdvertise interface{}

    // 32-bit tag value. The type is interface{} with range: 0..4294967295.
    Tag interface{}
}

func (netmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Netmask) GetFilter() yfilter.YFilter { return netmask.YFilter }

func (netmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Netmask) SetFilter(yf yfilter.YFilter) { netmask.YFilter = yf }

func (netmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Netmask) GetGoName(yname string) string {
    if yname == "netmask" { return "Netmask" }
    if yname == "not-advertise" { return "NotAdvertise" }
    if yname == "tag" { return "Tag" }
    return ""
}

func (netmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Netmask) GetSegmentPath() string {
    return "netmask" + "[netmask='" + fmt.Sprintf("%v", netmask.Netmask) + "']"
}

func (netmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Netmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (netmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Netmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (netmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Netmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["netmask"] = netmask.Netmask
    leafs["not-advertise"] = netmask.NotAdvertise
    leafs["tag"] = netmask.Tag
    return leafs
}

func (netmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Netmask) GetBundleName() string { return "cisco_ios_xr" }

func (netmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Netmask) GetYangName() string { return "netmask" }

func (netmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Netmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (netmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Netmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (netmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Netmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (netmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Netmask) SetParent(parent types.Entity) { netmask.parent = parent }

func (netmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Netmask) GetParent() types.Entity { return netmask.parent }

func (netmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Netmask) GetParentYangName() string { return "summary-prefixes" }

// Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates
// Filter outgoing routing updates
type Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Filter outgoing routing updates for a particular protocol. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates_OutgoingRouteUpdate.
    OutgoingRouteUpdate []Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates_OutgoingRouteUpdate
}

func (outgoingRouteUpdates *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates) GetFilter() yfilter.YFilter { return outgoingRouteUpdates.YFilter }

func (outgoingRouteUpdates *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates) SetFilter(yf yfilter.YFilter) { outgoingRouteUpdates.YFilter = yf }

func (outgoingRouteUpdates *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates) GetGoName(yname string) string {
    if yname == "outgoing-route-update" { return "OutgoingRouteUpdate" }
    return ""
}

func (outgoingRouteUpdates *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates) GetSegmentPath() string {
    return "outgoing-route-updates"
}

func (outgoingRouteUpdates *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "outgoing-route-update" {
        for _, c := range outgoingRouteUpdates.OutgoingRouteUpdate {
            if outgoingRouteUpdates.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates_OutgoingRouteUpdate{}
        outgoingRouteUpdates.OutgoingRouteUpdate = append(outgoingRouteUpdates.OutgoingRouteUpdate, child)
        return &outgoingRouteUpdates.OutgoingRouteUpdate[len(outgoingRouteUpdates.OutgoingRouteUpdate)-1]
    }
    return nil
}

func (outgoingRouteUpdates *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range outgoingRouteUpdates.OutgoingRouteUpdate {
        children[outgoingRouteUpdates.OutgoingRouteUpdate[i].GetSegmentPath()] = &outgoingRouteUpdates.OutgoingRouteUpdate[i]
    }
    return children
}

func (outgoingRouteUpdates *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (outgoingRouteUpdates *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates) GetBundleName() string { return "cisco_ios_xr" }

func (outgoingRouteUpdates *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates) GetYangName() string { return "outgoing-route-updates" }

func (outgoingRouteUpdates *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (outgoingRouteUpdates *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (outgoingRouteUpdates *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (outgoingRouteUpdates *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates) SetParent(parent types.Entity) { outgoingRouteUpdates.parent = parent }

func (outgoingRouteUpdates *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates) GetParent() types.Entity { return outgoingRouteUpdates.parent }

func (outgoingRouteUpdates *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates) GetParentYangName() string { return "vrf" }

// Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates_OutgoingRouteUpdate
// Filter outgoing routing updates for a
// particular protocol
type Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates_OutgoingRouteUpdate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Distribute list protocol type. The type is
    // OspfDistListProtocol.
    ProtocolName interface{}

    // Access Control List name. The type is string.
    AccessListName interface{}

    // First half of BGP AS number in XX.YY format.  Mandatory if Protocol is BGP
    // and must not be specified otherwise. Must be a non-zero value if second
    // half is zero. The type is interface{} with range: 0..65535.
    AsXx interface{}

    // Second half of BGP AS number in XX.YY format. Mandatory if Protocol is BGP
    // and must not be specified otherwise. Must be a non-zero value if first half
    // is zero. The type is interface{} with range: 0..4294967295.
    AsYy interface{}

    // OSPF process name. The type is string.
    OspfProcessName interface{}
}

func (outgoingRouteUpdate *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates_OutgoingRouteUpdate) GetFilter() yfilter.YFilter { return outgoingRouteUpdate.YFilter }

func (outgoingRouteUpdate *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates_OutgoingRouteUpdate) SetFilter(yf yfilter.YFilter) { outgoingRouteUpdate.YFilter = yf }

func (outgoingRouteUpdate *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates_OutgoingRouteUpdate) GetGoName(yname string) string {
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "access-list-name" { return "AccessListName" }
    if yname == "as-xx" { return "AsXx" }
    if yname == "as-yy" { return "AsYy" }
    if yname == "ospf-process-name" { return "OspfProcessName" }
    return ""
}

func (outgoingRouteUpdate *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates_OutgoingRouteUpdate) GetSegmentPath() string {
    return "outgoing-route-update" + "[protocol-name='" + fmt.Sprintf("%v", outgoingRouteUpdate.ProtocolName) + "']"
}

func (outgoingRouteUpdate *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates_OutgoingRouteUpdate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (outgoingRouteUpdate *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates_OutgoingRouteUpdate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (outgoingRouteUpdate *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates_OutgoingRouteUpdate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-name"] = outgoingRouteUpdate.ProtocolName
    leafs["access-list-name"] = outgoingRouteUpdate.AccessListName
    leafs["as-xx"] = outgoingRouteUpdate.AsXx
    leafs["as-yy"] = outgoingRouteUpdate.AsYy
    leafs["ospf-process-name"] = outgoingRouteUpdate.OspfProcessName
    return leafs
}

func (outgoingRouteUpdate *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates_OutgoingRouteUpdate) GetBundleName() string { return "cisco_ios_xr" }

func (outgoingRouteUpdate *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates_OutgoingRouteUpdate) GetYangName() string { return "outgoing-route-update" }

func (outgoingRouteUpdate *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates_OutgoingRouteUpdate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (outgoingRouteUpdate *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates_OutgoingRouteUpdate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (outgoingRouteUpdate *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates_OutgoingRouteUpdate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (outgoingRouteUpdate *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates_OutgoingRouteUpdate) SetParent(parent types.Entity) { outgoingRouteUpdate.parent = parent }

func (outgoingRouteUpdate *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates_OutgoingRouteUpdate) GetParent() types.Entity { return outgoingRouteUpdate.parent }

func (outgoingRouteUpdate *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates_OutgoingRouteUpdate) GetParentYangName() string { return "outgoing-route-updates" }

// Ospf_Processes_Process_Vrfs_Vrf_Distance
// Administrative distance configuration
type Ospf_Processes_Process_Vrfs_Vrf_Distance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Define an administrative distance. The type is interface{} with range:
    // 1..255. The default value is 110.
    AdminDistance interface{}

    // OSPF distance configuration.
    OspfDistance Ospf_Processes_Process_Vrfs_Vrf_Distance_OspfDistance

    // IP specific administrative distance configuration.
    IpDistances Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances
}

func (distance *Ospf_Processes_Process_Vrfs_Vrf_Distance) GetFilter() yfilter.YFilter { return distance.YFilter }

func (distance *Ospf_Processes_Process_Vrfs_Vrf_Distance) SetFilter(yf yfilter.YFilter) { distance.YFilter = yf }

func (distance *Ospf_Processes_Process_Vrfs_Vrf_Distance) GetGoName(yname string) string {
    if yname == "admin-distance" { return "AdminDistance" }
    if yname == "ospf-distance" { return "OspfDistance" }
    if yname == "ip-distances" { return "IpDistances" }
    return ""
}

func (distance *Ospf_Processes_Process_Vrfs_Vrf_Distance) GetSegmentPath() string {
    return "distance"
}

func (distance *Ospf_Processes_Process_Vrfs_Vrf_Distance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ospf-distance" {
        return &distance.OspfDistance
    }
    if childYangName == "ip-distances" {
        return &distance.IpDistances
    }
    return nil
}

func (distance *Ospf_Processes_Process_Vrfs_Vrf_Distance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ospf-distance"] = &distance.OspfDistance
    children["ip-distances"] = &distance.IpDistances
    return children
}

func (distance *Ospf_Processes_Process_Vrfs_Vrf_Distance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["admin-distance"] = distance.AdminDistance
    return leafs
}

func (distance *Ospf_Processes_Process_Vrfs_Vrf_Distance) GetBundleName() string { return "cisco_ios_xr" }

func (distance *Ospf_Processes_Process_Vrfs_Vrf_Distance) GetYangName() string { return "distance" }

func (distance *Ospf_Processes_Process_Vrfs_Vrf_Distance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distance *Ospf_Processes_Process_Vrfs_Vrf_Distance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distance *Ospf_Processes_Process_Vrfs_Vrf_Distance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distance *Ospf_Processes_Process_Vrfs_Vrf_Distance) SetParent(parent types.Entity) { distance.parent = parent }

func (distance *Ospf_Processes_Process_Vrfs_Vrf_Distance) GetParent() types.Entity { return distance.parent }

func (distance *Ospf_Processes_Process_Vrfs_Vrf_Distance) GetParentYangName() string { return "vrf" }

// Ospf_Processes_Process_Vrfs_Vrf_Distance_OspfDistance
// OSPF distance configuration
type Ospf_Processes_Process_Vrfs_Vrf_Distance_OspfDistance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Distance for intra-area routes. The type is interface{} with range: 1..255.
    // The default value is 110.
    IntraArea interface{}

    // Distance for inter-area routes. The type is interface{} with range: 1..255.
    // The default value is 110.
    InterArea interface{}

    // Distance for external type 5 and type 7 routes. The type is interface{}
    // with range: 1..255. The default value is 110.
    ExternalRoutes interface{}
}

func (ospfDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_OspfDistance) GetFilter() yfilter.YFilter { return ospfDistance.YFilter }

func (ospfDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_OspfDistance) SetFilter(yf yfilter.YFilter) { ospfDistance.YFilter = yf }

func (ospfDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_OspfDistance) GetGoName(yname string) string {
    if yname == "intra-area" { return "IntraArea" }
    if yname == "inter-area" { return "InterArea" }
    if yname == "external-routes" { return "ExternalRoutes" }
    return ""
}

func (ospfDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_OspfDistance) GetSegmentPath() string {
    return "ospf-distance"
}

func (ospfDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_OspfDistance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ospfDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_OspfDistance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ospfDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_OspfDistance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["intra-area"] = ospfDistance.IntraArea
    leafs["inter-area"] = ospfDistance.InterArea
    leafs["external-routes"] = ospfDistance.ExternalRoutes
    return leafs
}

func (ospfDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_OspfDistance) GetBundleName() string { return "cisco_ios_xr" }

func (ospfDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_OspfDistance) GetYangName() string { return "ospf-distance" }

func (ospfDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_OspfDistance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ospfDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_OspfDistance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ospfDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_OspfDistance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ospfDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_OspfDistance) SetParent(parent types.Entity) { ospfDistance.parent = parent }

func (ospfDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_OspfDistance) GetParent() types.Entity { return ospfDistance.parent }

func (ospfDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_OspfDistance) GetParentYangName() string { return "distance" }

// Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances
// IP specific administrative distance
// configuration
type Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Administrative distance configuration for a particular IP address. The type
    // is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances_IpDistance.
    IpDistance []Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances_IpDistance
}

func (ipDistances *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances) GetFilter() yfilter.YFilter { return ipDistances.YFilter }

func (ipDistances *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances) SetFilter(yf yfilter.YFilter) { ipDistances.YFilter = yf }

func (ipDistances *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances) GetGoName(yname string) string {
    if yname == "ip-distance" { return "IpDistance" }
    return ""
}

func (ipDistances *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances) GetSegmentPath() string {
    return "ip-distances"
}

func (ipDistances *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ip-distance" {
        for _, c := range ipDistances.IpDistance {
            if ipDistances.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances_IpDistance{}
        ipDistances.IpDistance = append(ipDistances.IpDistance, child)
        return &ipDistances.IpDistance[len(ipDistances.IpDistance)-1]
    }
    return nil
}

func (ipDistances *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipDistances.IpDistance {
        children[ipDistances.IpDistance[i].GetSegmentPath()] = &ipDistances.IpDistance[i]
    }
    return children
}

func (ipDistances *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipDistances *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances) GetBundleName() string { return "cisco_ios_xr" }

func (ipDistances *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances) GetYangName() string { return "ip-distances" }

func (ipDistances *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipDistances *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipDistances *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipDistances *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances) SetParent(parent types.Entity) { ipDistances.parent = parent }

func (ipDistances *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances) GetParent() types.Entity { return ipDistances.parent }

func (ipDistances *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances) GetParentYangName() string { return "distance" }

// Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances_IpDistance
// Administrative distance configuration for a
// particular IP address
type Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances_IpDistance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IP source address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // This attribute is a key. IP wild card bits -- inverted mask. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Wildcard interface{}

    // Administrative distance. The type is interface{} with range: 1..255. The
    // default value is 110.
    Distance interface{}

    // Access Control List name. The type is string.
    AccessListName interface{}
}

func (ipDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances_IpDistance) GetFilter() yfilter.YFilter { return ipDistance.YFilter }

func (ipDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances_IpDistance) SetFilter(yf yfilter.YFilter) { ipDistance.YFilter = yf }

func (ipDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances_IpDistance) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "wildcard" { return "Wildcard" }
    if yname == "distance" { return "Distance" }
    if yname == "access-list-name" { return "AccessListName" }
    return ""
}

func (ipDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances_IpDistance) GetSegmentPath() string {
    return "ip-distance" + "[address='" + fmt.Sprintf("%v", ipDistance.Address) + "']" + "[wildcard='" + fmt.Sprintf("%v", ipDistance.Wildcard) + "']"
}

func (ipDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances_IpDistance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances_IpDistance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances_IpDistance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipDistance.Address
    leafs["wildcard"] = ipDistance.Wildcard
    leafs["distance"] = ipDistance.Distance
    leafs["access-list-name"] = ipDistance.AccessListName
    return leafs
}

func (ipDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances_IpDistance) GetBundleName() string { return "cisco_ios_xr" }

func (ipDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances_IpDistance) GetYangName() string { return "ip-distance" }

func (ipDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances_IpDistance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances_IpDistance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances_IpDistance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances_IpDistance) SetParent(parent types.Entity) { ipDistance.parent = parent }

func (ipDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances_IpDistance) GetParent() types.Entity { return ipDistance.parent }

func (ipDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances_IpDistance) GetParentYangName() string { return "ip-distances" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses
// Area configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configuration for a particular area. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress.
    AreaAddress []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress

    // Configuration for a particular area. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId.
    AreaAreaId []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId
}

func (areaAddresses *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses) GetFilter() yfilter.YFilter { return areaAddresses.YFilter }

func (areaAddresses *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses) SetFilter(yf yfilter.YFilter) { areaAddresses.YFilter = yf }

func (areaAddresses *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses) GetGoName(yname string) string {
    if yname == "area-address" { return "AreaAddress" }
    if yname == "area-area-id" { return "AreaAreaId" }
    return ""
}

func (areaAddresses *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses) GetSegmentPath() string {
    return "area-addresses"
}

func (areaAddresses *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "area-address" {
        for _, c := range areaAddresses.AreaAddress {
            if areaAddresses.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress{}
        areaAddresses.AreaAddress = append(areaAddresses.AreaAddress, child)
        return &areaAddresses.AreaAddress[len(areaAddresses.AreaAddress)-1]
    }
    if childYangName == "area-area-id" {
        for _, c := range areaAddresses.AreaAreaId {
            if areaAddresses.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId{}
        areaAddresses.AreaAreaId = append(areaAddresses.AreaAreaId, child)
        return &areaAddresses.AreaAreaId[len(areaAddresses.AreaAreaId)-1]
    }
    return nil
}

func (areaAddresses *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range areaAddresses.AreaAddress {
        children[areaAddresses.AreaAddress[i].GetSegmentPath()] = &areaAddresses.AreaAddress[i]
    }
    for i := range areaAddresses.AreaAreaId {
        children[areaAddresses.AreaAreaId[i].GetSegmentPath()] = &areaAddresses.AreaAreaId[i]
    }
    return children
}

func (areaAddresses *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (areaAddresses *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses) GetBundleName() string { return "cisco_ios_xr" }

func (areaAddresses *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses) GetYangName() string { return "area-addresses" }

func (areaAddresses *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaAddresses *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaAddresses *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaAddresses *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses) SetParent(parent types.Entity) { areaAddresses.parent = parent }

func (areaAddresses *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses) GetParent() types.Entity { return areaAddresses.parent }

func (areaAddresses *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses) GetParentYangName() string { return "vrf" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress
// Configuration for a particular area
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Area ID if in IP address format. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Configure a route policy for inbound type-3 lsa filtering. The type is
    // string.
    RoutePolicyIn interface{}

    // Set the summary default-cost of a NSSA/stub area. The type is interface{}
    // with range: 1..16777215. The default value is 1.
    DefaultCost interface{}

    // Configure a route policy for outbound type-3 lsa filtering. The type is
    // string.
    RoutePolicyOut interface{}

    // Specify the area as a stub area (send summary LSA stub area). The type is
    // bool.
    Stub interface{}

    // Configure an OSPF area to run MPLS Traffic Engineering. The type is
    // interface{}.
    MplsTrafficEng interface{}

    // Enable/Disable an OSPF area to advertise intra-area prefixes out of this
    // area as external. The type is bool.
    ExternalOut interface{}

    // Enable/Disable an OSPF area to advertise external prefixes into this area
    // as summary. The type is bool.
    SummaryIn interface{}

    // segment-routing configuration Applicable only in Default VRF. The type is
    // OspfSegmentRouting.
    SegmentRouting interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Virtual Link scope configurations.
    VirtualLinkScopes Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes

    // Sham Link scope configurations.
    ShamLinkScopes Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes

    // Area scope configuration.
    AreaScope Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope

    // Name scope configurations.
    NameScopes Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes

    // Multi Area Interface scope configurations.
    MultiAreaInterfaceScopes Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes

    // Summarize routes matching address/mask (border routers only).
    AreaRanges Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges

    // Specify area as a NSSA area.
    Nssa Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa
}

func (areaAddress *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress) GetFilter() yfilter.YFilter { return areaAddress.YFilter }

func (areaAddress *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress) SetFilter(yf yfilter.YFilter) { areaAddress.YFilter = yf }

func (areaAddress *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "route-policy-in" { return "RoutePolicyIn" }
    if yname == "default-cost" { return "DefaultCost" }
    if yname == "route-policy-out" { return "RoutePolicyOut" }
    if yname == "stub" { return "Stub" }
    if yname == "mpls-traffic-eng" { return "MplsTrafficEng" }
    if yname == "external-out" { return "ExternalOut" }
    if yname == "summary-in" { return "SummaryIn" }
    if yname == "segment-routing" { return "SegmentRouting" }
    if yname == "running" { return "Running" }
    if yname == "virtual-link-scopes" { return "VirtualLinkScopes" }
    if yname == "sham-link-scopes" { return "ShamLinkScopes" }
    if yname == "area-scope" { return "AreaScope" }
    if yname == "name-scopes" { return "NameScopes" }
    if yname == "multi-area-interface-scopes" { return "MultiAreaInterfaceScopes" }
    if yname == "area-ranges" { return "AreaRanges" }
    if yname == "nssa" { return "Nssa" }
    return ""
}

func (areaAddress *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress) GetSegmentPath() string {
    return "area-address" + "[address='" + fmt.Sprintf("%v", areaAddress.Address) + "']"
}

func (areaAddress *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "virtual-link-scopes" {
        return &areaAddress.VirtualLinkScopes
    }
    if childYangName == "sham-link-scopes" {
        return &areaAddress.ShamLinkScopes
    }
    if childYangName == "area-scope" {
        return &areaAddress.AreaScope
    }
    if childYangName == "name-scopes" {
        return &areaAddress.NameScopes
    }
    if childYangName == "multi-area-interface-scopes" {
        return &areaAddress.MultiAreaInterfaceScopes
    }
    if childYangName == "area-ranges" {
        return &areaAddress.AreaRanges
    }
    if childYangName == "nssa" {
        return &areaAddress.Nssa
    }
    return nil
}

func (areaAddress *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["virtual-link-scopes"] = &areaAddress.VirtualLinkScopes
    children["sham-link-scopes"] = &areaAddress.ShamLinkScopes
    children["area-scope"] = &areaAddress.AreaScope
    children["name-scopes"] = &areaAddress.NameScopes
    children["multi-area-interface-scopes"] = &areaAddress.MultiAreaInterfaceScopes
    children["area-ranges"] = &areaAddress.AreaRanges
    children["nssa"] = &areaAddress.Nssa
    return children
}

func (areaAddress *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = areaAddress.Address
    leafs["route-policy-in"] = areaAddress.RoutePolicyIn
    leafs["default-cost"] = areaAddress.DefaultCost
    leafs["route-policy-out"] = areaAddress.RoutePolicyOut
    leafs["stub"] = areaAddress.Stub
    leafs["mpls-traffic-eng"] = areaAddress.MplsTrafficEng
    leafs["external-out"] = areaAddress.ExternalOut
    leafs["summary-in"] = areaAddress.SummaryIn
    leafs["segment-routing"] = areaAddress.SegmentRouting
    leafs["running"] = areaAddress.Running
    return leafs
}

func (areaAddress *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress) GetBundleName() string { return "cisco_ios_xr" }

func (areaAddress *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress) GetYangName() string { return "area-address" }

func (areaAddress *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaAddress *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaAddress *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaAddress *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress) SetParent(parent types.Entity) { areaAddress.parent = parent }

func (areaAddress *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress) GetParent() types.Entity { return areaAddress.parent }

func (areaAddress *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress) GetParentYangName() string { return "area-addresses" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes
// Virtual Link scope configurations
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Virtual Link configuration. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope.
    VirtualLinkScope []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope
}

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes) GetFilter() yfilter.YFilter { return virtualLinkScopes.YFilter }

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes) SetFilter(yf yfilter.YFilter) { virtualLinkScopes.YFilter = yf }

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes) GetGoName(yname string) string {
    if yname == "virtual-link-scope" { return "VirtualLinkScope" }
    return ""
}

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes) GetSegmentPath() string {
    return "virtual-link-scopes"
}

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "virtual-link-scope" {
        for _, c := range virtualLinkScopes.VirtualLinkScope {
            if virtualLinkScopes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope{}
        virtualLinkScopes.VirtualLinkScope = append(virtualLinkScopes.VirtualLinkScope, child)
        return &virtualLinkScopes.VirtualLinkScope[len(virtualLinkScopes.VirtualLinkScope)-1]
    }
    return nil
}

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range virtualLinkScopes.VirtualLinkScope {
        children[virtualLinkScopes.VirtualLinkScope[i].GetSegmentPath()] = &virtualLinkScopes.VirtualLinkScope[i]
    }
    return children
}

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes) GetBundleName() string { return "cisco_ios_xr" }

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes) GetYangName() string { return "virtual-link-scopes" }

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes) SetParent(parent types.Entity) { virtualLinkScopes.parent = parent }

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes) GetParent() types.Entity { return virtualLinkScopes.parent }

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes) GetParentYangName() string { return "area-address" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope
// Virtual Link configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Router ID of virtual link neighbor. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Authentication.
    Authentication Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal
}

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) GetFilter() yfilter.YFilter { return virtualLinkScope.YFilter }

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) SetFilter(yf yfilter.YFilter) { virtualLinkScope.YFilter = yf }

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "running" { return "Running" }
    if yname == "authentication" { return "Authentication" }
    if yname == "dead-interval-minimal" { return "DeadIntervalMinimal" }
    return ""
}

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) GetSegmentPath() string {
    return "virtual-link-scope" + "[address='" + fmt.Sprintf("%v", virtualLinkScope.Address) + "']"
}

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "authentication" {
        return &virtualLinkScope.Authentication
    }
    if childYangName == "dead-interval-minimal" {
        return &virtualLinkScope.DeadIntervalMinimal
    }
    return nil
}

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["authentication"] = &virtualLinkScope.Authentication
    children["dead-interval-minimal"] = &virtualLinkScope.DeadIntervalMinimal
    return children
}

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = virtualLinkScope.Address
    leafs["hello-interval"] = virtualLinkScope.HelloInterval
    leafs["transmit-delay"] = virtualLinkScope.TransmitDelay
    leafs["retransmit-interval"] = virtualLinkScope.RetransmitInterval
    leafs["running"] = virtualLinkScope.Running
    return leafs
}

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) GetBundleName() string { return "cisco_ios_xr" }

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) GetYangName() string { return "virtual-link-scope" }

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) SetParent(parent types.Entity) { virtualLinkScope.parent = parent }

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) GetParent() types.Entity { return virtualLinkScope.parent }

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) GetParentYangName() string { return "virtual-link-scopes" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication
// Authentication
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // (!.+)|([^!].+).
    Key interface{}

    // Authentication type.
    Type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) GetGoName(yname string) string {
    if yname == "key" { return "Key" }
    if yname == "type" { return "Type" }
    if yname == "message-digest-keies" { return "MessageDigestKeies" }
    return ""
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "type" {
        return &authentication.Type
    }
    if childYangName == "message-digest-keies" {
        return &authentication.MessageDigestKeies
    }
    return nil
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["type"] = &authentication.Type
    children["message-digest-keies"] = &authentication.MessageDigestKeies
    return children
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key"] = authentication.Key
    return leafs
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) GetParentYangName() string { return "virtual-link-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetGoName(yname string) string {
    if yname == "authen-type" { return "AuthenType" }
    if yname == "keychain-authen-type" { return "KeychainAuthenType" }
    if yname == "keychain-name" { return "KeychainName" }
    return ""
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetSegmentPath() string {
    return "type"
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["authen-type"] = self.AuthenType
    leafs["keychain-authen-type"] = self.KeychainAuthenType
    leafs["keychain-name"] = self.KeychainName
    return leafs
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetYangName() string { return "type" }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetParent() types.Entity { return self.parent }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetFilter() yfilter.YFilter { return messageDigestKeies.YFilter }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) SetFilter(yf yfilter.YFilter) { messageDigestKeies.YFilter = yf }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetGoName(yname string) string {
    if yname == "message-digest-key" { return "MessageDigestKey" }
    return ""
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetSegmentPath() string {
    return "message-digest-keies"
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "message-digest-key" {
        for _, c := range messageDigestKeies.MessageDigestKey {
            if messageDigestKeies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey{}
        messageDigestKeies.MessageDigestKey = append(messageDigestKeies.MessageDigestKey, child)
        return &messageDigestKeies.MessageDigestKey[len(messageDigestKeies.MessageDigestKey)-1]
    }
    return nil
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range messageDigestKeies.MessageDigestKey {
        children[messageDigestKeies.MessageDigestKey[i].GetSegmentPath()] = &messageDigestKeies.MessageDigestKey[i]
    }
    return children
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetYangName() string { return "message-digest-keies" }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) SetParent(parent types.Entity) { messageDigestKeies.parent = parent }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetParent() types.Entity { return messageDigestKeies.parent }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: (!.+)|([^!].+). This attribute
    // is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetFilter() yfilter.YFilter { return messageDigestKey.YFilter }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) SetFilter(yf yfilter.YFilter) { messageDigestKey.YFilter = yf }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetGoName(yname string) string {
    if yname == "key-id" { return "KeyId" }
    if yname == "password" { return "Password" }
    return ""
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetSegmentPath() string {
    return "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key-id"] = messageDigestKey.KeyId
    leafs["password"] = messageDigestKey.Password
    return leafs
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetYangName() string { return "message-digest-key" }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) SetParent(parent types.Entity) { messageDigestKey.parent = parent }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParent() types.Entity { return messageDigestKey.parent }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParentYangName() string { return "message-digest-keies" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetFilter() yfilter.YFilter { return deadIntervalMinimal.YFilter }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) SetFilter(yf yfilter.YFilter) { deadIntervalMinimal.YFilter = yf }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "multiplier" { return "Multiplier" }
    return ""
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetSegmentPath() string {
    return "dead-interval-minimal"
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = deadIntervalMinimal.Interval
    leafs["multiplier"] = deadIntervalMinimal.Multiplier
    return leafs
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetBundleName() string { return "cisco_ios_xr" }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetYangName() string { return "dead-interval-minimal" }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) SetParent(parent types.Entity) { deadIntervalMinimal.parent = parent }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetParent() types.Entity { return deadIntervalMinimal.parent }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetParentYangName() string { return "virtual-link-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes
// Sham Link scope configurations
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sham Link configuration. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope.
    ShamLinkScope []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope
}

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes) GetFilter() yfilter.YFilter { return shamLinkScopes.YFilter }

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes) SetFilter(yf yfilter.YFilter) { shamLinkScopes.YFilter = yf }

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes) GetGoName(yname string) string {
    if yname == "sham-link-scope" { return "ShamLinkScope" }
    return ""
}

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes) GetSegmentPath() string {
    return "sham-link-scopes"
}

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sham-link-scope" {
        for _, c := range shamLinkScopes.ShamLinkScope {
            if shamLinkScopes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope{}
        shamLinkScopes.ShamLinkScope = append(shamLinkScopes.ShamLinkScope, child)
        return &shamLinkScopes.ShamLinkScope[len(shamLinkScopes.ShamLinkScope)-1]
    }
    return nil
}

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range shamLinkScopes.ShamLinkScope {
        children[shamLinkScopes.ShamLinkScope[i].GetSegmentPath()] = &shamLinkScopes.ShamLinkScope[i]
    }
    return children
}

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes) GetBundleName() string { return "cisco_ios_xr" }

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes) GetYangName() string { return "sham-link-scopes" }

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes) SetParent(parent types.Entity) { shamLinkScopes.parent = parent }

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes) GetParent() types.Entity { return shamLinkScopes.parent }

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes) GetParentYangName() string { return "area-address" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope
// Sham Link configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Address of the local sham-link endpoint. The type
    // is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // This attribute is a key. Address of the remote sham-link endpoint. The type
    // is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Address of the local sham-link endpoint. Enter an IP Address. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Source interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Authentication.
    Authentication Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal
}

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) GetFilter() yfilter.YFilter { return shamLinkScope.YFilter }

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) SetFilter(yf yfilter.YFilter) { shamLinkScope.YFilter = yf }

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "source" { return "Source" }
    if yname == "cost" { return "Cost" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "running" { return "Running" }
    if yname == "authentication" { return "Authentication" }
    if yname == "dead-interval-minimal" { return "DeadIntervalMinimal" }
    return ""
}

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) GetSegmentPath() string {
    return "sham-link-scope" + "[source-address='" + fmt.Sprintf("%v", shamLinkScope.SourceAddress) + "']" + "[destination-address='" + fmt.Sprintf("%v", shamLinkScope.DestinationAddress) + "']"
}

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "authentication" {
        return &shamLinkScope.Authentication
    }
    if childYangName == "dead-interval-minimal" {
        return &shamLinkScope.DeadIntervalMinimal
    }
    return nil
}

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["authentication"] = &shamLinkScope.Authentication
    children["dead-interval-minimal"] = &shamLinkScope.DeadIntervalMinimal
    return children
}

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = shamLinkScope.SourceAddress
    leafs["destination-address"] = shamLinkScope.DestinationAddress
    leafs["source"] = shamLinkScope.Source
    leafs["cost"] = shamLinkScope.Cost
    leafs["hello-interval"] = shamLinkScope.HelloInterval
    leafs["transmit-delay"] = shamLinkScope.TransmitDelay
    leafs["retransmit-interval"] = shamLinkScope.RetransmitInterval
    leafs["running"] = shamLinkScope.Running
    return leafs
}

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) GetBundleName() string { return "cisco_ios_xr" }

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) GetYangName() string { return "sham-link-scope" }

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) SetParent(parent types.Entity) { shamLinkScope.parent = parent }

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) GetParent() types.Entity { return shamLinkScope.parent }

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) GetParentYangName() string { return "sham-link-scopes" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication
// Authentication
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // (!.+)|([^!].+).
    Key interface{}

    // Authentication type.
    Type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) GetGoName(yname string) string {
    if yname == "key" { return "Key" }
    if yname == "type" { return "Type" }
    if yname == "message-digest-keies" { return "MessageDigestKeies" }
    return ""
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "type" {
        return &authentication.Type
    }
    if childYangName == "message-digest-keies" {
        return &authentication.MessageDigestKeies
    }
    return nil
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["type"] = &authentication.Type
    children["message-digest-keies"] = &authentication.MessageDigestKeies
    return children
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key"] = authentication.Key
    return leafs
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) GetParentYangName() string { return "sham-link-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetGoName(yname string) string {
    if yname == "authen-type" { return "AuthenType" }
    if yname == "keychain-authen-type" { return "KeychainAuthenType" }
    if yname == "keychain-name" { return "KeychainName" }
    return ""
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetSegmentPath() string {
    return "type"
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["authen-type"] = self.AuthenType
    leafs["keychain-authen-type"] = self.KeychainAuthenType
    leafs["keychain-name"] = self.KeychainName
    return leafs
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetYangName() string { return "type" }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetParent() types.Entity { return self.parent }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetFilter() yfilter.YFilter { return messageDigestKeies.YFilter }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) SetFilter(yf yfilter.YFilter) { messageDigestKeies.YFilter = yf }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetGoName(yname string) string {
    if yname == "message-digest-key" { return "MessageDigestKey" }
    return ""
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetSegmentPath() string {
    return "message-digest-keies"
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "message-digest-key" {
        for _, c := range messageDigestKeies.MessageDigestKey {
            if messageDigestKeies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey{}
        messageDigestKeies.MessageDigestKey = append(messageDigestKeies.MessageDigestKey, child)
        return &messageDigestKeies.MessageDigestKey[len(messageDigestKeies.MessageDigestKey)-1]
    }
    return nil
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range messageDigestKeies.MessageDigestKey {
        children[messageDigestKeies.MessageDigestKey[i].GetSegmentPath()] = &messageDigestKeies.MessageDigestKey[i]
    }
    return children
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetYangName() string { return "message-digest-keies" }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) SetParent(parent types.Entity) { messageDigestKeies.parent = parent }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetParent() types.Entity { return messageDigestKeies.parent }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: (!.+)|([^!].+). This attribute
    // is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetFilter() yfilter.YFilter { return messageDigestKey.YFilter }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) SetFilter(yf yfilter.YFilter) { messageDigestKey.YFilter = yf }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetGoName(yname string) string {
    if yname == "key-id" { return "KeyId" }
    if yname == "password" { return "Password" }
    return ""
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetSegmentPath() string {
    return "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key-id"] = messageDigestKey.KeyId
    leafs["password"] = messageDigestKey.Password
    return leafs
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetYangName() string { return "message-digest-key" }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) SetParent(parent types.Entity) { messageDigestKey.parent = parent }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParent() types.Entity { return messageDigestKey.parent }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParentYangName() string { return "message-digest-keies" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetFilter() yfilter.YFilter { return deadIntervalMinimal.YFilter }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) SetFilter(yf yfilter.YFilter) { deadIntervalMinimal.YFilter = yf }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "multiplier" { return "Multiplier" }
    return ""
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetSegmentPath() string {
    return "dead-interval-minimal"
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = deadIntervalMinimal.Interval
    leafs["multiplier"] = deadIntervalMinimal.Multiplier
    return leafs
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetBundleName() string { return "cisco_ios_xr" }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetYangName() string { return "dead-interval-minimal" }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) SetParent(parent types.Entity) { deadIntervalMinimal.parent = parent }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetParent() types.Entity { return deadIntervalMinimal.parent }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetParentYangName() string { return "sham-link-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope
// Area scope configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Enable/Disable prefix suppression for primary addresses. The type is bool.
    // The default value is false.
    PrefixSuppressionPrimary interface{}

    // Enable/Disable ignoring of MTU in DBD packets. The type is bool. The
    // default value is false.
    MtuIgnore interface{}

    // Enable/Disable MPLS LDP sync for igp-shortcuts. The type is bool.
    LdpSyncIgpShortcuts interface{}

    // Enable MPLS LDP Auto Config. The type is interface{}.
    LdpAutoConfig interface{}

    // Type of attached network. The type is OspfNetwork.
    NetworkType interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Enable/Disable advertising loopback as a stub network. The type is bool.
    // The default value is false.
    LoopbackStubNetwork interface{}

    // Enable/Disable prefix suppression for secondary addresses. The type is
    // bool. The default value is false.
    PrefixSuppressionSecondary interface{}

    // Enable/Disable OSPF demand circuit. The type is bool. The default value is
    // false.
    DemandCircuit interface{}

    // When enabled, prevent sending HELLO packets over link. The type is bool.
    // The default value is false.
    Passive interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Customize size of OSPF packets upto MTU. The type is interface{} with
    // range: 576..10000.
    PacketSize interface{}

    // Enable/Disable MPLS LDP sync. The type is bool.
    LdpSync interface{}

    // Filter OSPF LSA during synchronization and flooding. The type is bool. The
    // default value is false.
    DatabaseFilter interface{}

    // Enable/Disable registration for early interface down notifications. The
    // type is bool. The default value is false.
    LinkDownFastDetect interface{}

    // segment-routing forwarding configuration Applicableonly in Default VRF. The
    // type is OspfSegmentRoutingForwarding.
    SegmentRoutingForwarding interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Router priority for DR and BDR election. The type is interface{} with
    // range: 0..255. The default value is 1.
    Priority interface{}

    // Enable/Disable OSPF flood reduction. The type is bool. The default value is
    // false.
    FloodReduction interface{}

    // Filter networks intalled to RIB (disable as ACL name means filtering is
    // disabled).
    DistributeList Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DistributeList

    // BFD configuration.
    Bfd Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Bfd

    // Authentication.
    Authentication Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication

    // Container class for security related configuration parameters.
    Security Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal

    // Fast-reroute configuration.
    FastReroute Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute

    // Interface fallback cost.
    CostFallback Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_CostFallback
}

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope) GetFilter() yfilter.YFilter { return areaScope.YFilter }

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope) SetFilter(yf yfilter.YFilter) { areaScope.YFilter = yf }

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope) GetGoName(yname string) string {
    if yname == "cost" { return "Cost" }
    if yname == "prefix-suppression-primary" { return "PrefixSuppressionPrimary" }
    if yname == "mtu-ignore" { return "MtuIgnore" }
    if yname == "ldp-sync-igp-shortcuts" { return "LdpSyncIgpShortcuts" }
    if yname == "ldp-auto-config" { return "LdpAutoConfig" }
    if yname == "network-type" { return "NetworkType" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "loopback-stub-network" { return "LoopbackStubNetwork" }
    if yname == "prefix-suppression-secondary" { return "PrefixSuppressionSecondary" }
    if yname == "demand-circuit" { return "DemandCircuit" }
    if yname == "passive" { return "Passive" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "packet-size" { return "PacketSize" }
    if yname == "ldp-sync" { return "LdpSync" }
    if yname == "database-filter" { return "DatabaseFilter" }
    if yname == "link-down-fast-detect" { return "LinkDownFastDetect" }
    if yname == "segment-routing-forwarding" { return "SegmentRoutingForwarding" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "priority" { return "Priority" }
    if yname == "flood-reduction" { return "FloodReduction" }
    if yname == "distribute-list" { return "DistributeList" }
    if yname == "bfd" { return "Bfd" }
    if yname == "authentication" { return "Authentication" }
    if yname == "security" { return "Security" }
    if yname == "dead-interval-minimal" { return "DeadIntervalMinimal" }
    if yname == "fast-reroute" { return "FastReroute" }
    if yname == "cost-fallback" { return "CostFallback" }
    return ""
}

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope) GetSegmentPath() string {
    return "area-scope"
}

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "distribute-list" {
        return &areaScope.DistributeList
    }
    if childYangName == "bfd" {
        return &areaScope.Bfd
    }
    if childYangName == "authentication" {
        return &areaScope.Authentication
    }
    if childYangName == "security" {
        return &areaScope.Security
    }
    if childYangName == "dead-interval-minimal" {
        return &areaScope.DeadIntervalMinimal
    }
    if childYangName == "fast-reroute" {
        return &areaScope.FastReroute
    }
    if childYangName == "cost-fallback" {
        return &areaScope.CostFallback
    }
    return nil
}

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["distribute-list"] = &areaScope.DistributeList
    children["bfd"] = &areaScope.Bfd
    children["authentication"] = &areaScope.Authentication
    children["security"] = &areaScope.Security
    children["dead-interval-minimal"] = &areaScope.DeadIntervalMinimal
    children["fast-reroute"] = &areaScope.FastReroute
    children["cost-fallback"] = &areaScope.CostFallback
    return children
}

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cost"] = areaScope.Cost
    leafs["prefix-suppression-primary"] = areaScope.PrefixSuppressionPrimary
    leafs["mtu-ignore"] = areaScope.MtuIgnore
    leafs["ldp-sync-igp-shortcuts"] = areaScope.LdpSyncIgpShortcuts
    leafs["ldp-auto-config"] = areaScope.LdpAutoConfig
    leafs["network-type"] = areaScope.NetworkType
    leafs["hello-interval"] = areaScope.HelloInterval
    leafs["loopback-stub-network"] = areaScope.LoopbackStubNetwork
    leafs["prefix-suppression-secondary"] = areaScope.PrefixSuppressionSecondary
    leafs["demand-circuit"] = areaScope.DemandCircuit
    leafs["passive"] = areaScope.Passive
    leafs["transmit-delay"] = areaScope.TransmitDelay
    leafs["packet-size"] = areaScope.PacketSize
    leafs["ldp-sync"] = areaScope.LdpSync
    leafs["database-filter"] = areaScope.DatabaseFilter
    leafs["link-down-fast-detect"] = areaScope.LinkDownFastDetect
    leafs["segment-routing-forwarding"] = areaScope.SegmentRoutingForwarding
    leafs["retransmit-interval"] = areaScope.RetransmitInterval
    leafs["priority"] = areaScope.Priority
    leafs["flood-reduction"] = areaScope.FloodReduction
    return leafs
}

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope) GetBundleName() string { return "cisco_ios_xr" }

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope) GetYangName() string { return "area-scope" }

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope) SetParent(parent types.Entity) { areaScope.parent = parent }

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope) GetParent() types.Entity { return areaScope.parent }

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope) GetParentYangName() string { return "area-address" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DistributeList
// Filter networks intalled to RIB (disable as ACL
// name means filtering is disabled)
// This type is a presence type.
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DistributeList struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Access Control List name. The type is string.
    AccessListName interface{}

    // Route Policy name. The type is string.
    RoutePolicyName interface{}
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) GetFilter() yfilter.YFilter { return distributeList.YFilter }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) SetFilter(yf yfilter.YFilter) { distributeList.YFilter = yf }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) GetGoName(yname string) string {
    if yname == "access-list-name" { return "AccessListName" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) GetSegmentPath() string {
    return "distribute-list"
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["access-list-name"] = distributeList.AccessListName
    leafs["route-policy-name"] = distributeList.RoutePolicyName
    return leafs
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) GetBundleName() string { return "cisco_ios_xr" }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) GetYangName() string { return "distribute-list" }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) SetParent(parent types.Entity) { distributeList.parent = parent }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) GetParent() types.Entity { return distributeList.parent }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) GetParentYangName() string { return "area-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Bfd
// BFD configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Bfd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hello interval for BFD sessions created by OSPF. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    Interval interface{}

    // Detection multiplier for BFD sessions created by OSPF. The type is
    // interface{} with range: 2..50.
    DetectionMultiplier interface{}

    // use of Bidirectional Forwarding Detection. The type is BfdEnableMode.
    FastDetectMode interface{}
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Bfd) GetFilter() yfilter.YFilter { return bfd.YFilter }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Bfd) SetFilter(yf yfilter.YFilter) { bfd.YFilter = yf }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Bfd) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "fast-detect-mode" { return "FastDetectMode" }
    return ""
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Bfd) GetSegmentPath() string {
    return "bfd"
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Bfd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Bfd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Bfd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = bfd.Interval
    leafs["detection-multiplier"] = bfd.DetectionMultiplier
    leafs["fast-detect-mode"] = bfd.FastDetectMode
    return leafs
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Bfd) GetBundleName() string { return "cisco_ios_xr" }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Bfd) GetYangName() string { return "bfd" }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Bfd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Bfd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Bfd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Bfd) SetParent(parent types.Entity) { bfd.parent = parent }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Bfd) GetParent() types.Entity { return bfd.parent }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Bfd) GetParentYangName() string { return "area-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication
// Authentication
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // (!.+)|([^!].+).
    Key interface{}

    // Authentication type.
    Type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication) GetGoName(yname string) string {
    if yname == "key" { return "Key" }
    if yname == "type" { return "Type" }
    if yname == "message-digest-keies" { return "MessageDigestKeies" }
    return ""
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "type" {
        return &authentication.Type
    }
    if childYangName == "message-digest-keies" {
        return &authentication.MessageDigestKeies
    }
    return nil
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["type"] = &authentication.Type
    children["message-digest-keies"] = &authentication.MessageDigestKeies
    return children
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key"] = authentication.Key
    return leafs
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication) GetParentYangName() string { return "area-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) GetGoName(yname string) string {
    if yname == "authen-type" { return "AuthenType" }
    if yname == "keychain-authen-type" { return "KeychainAuthenType" }
    if yname == "keychain-name" { return "KeychainName" }
    return ""
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) GetSegmentPath() string {
    return "type"
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["authen-type"] = self.AuthenType
    leafs["keychain-authen-type"] = self.KeychainAuthenType
    leafs["keychain-name"] = self.KeychainName
    return leafs
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) GetYangName() string { return "type" }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) GetParent() types.Entity { return self.parent }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) GetFilter() yfilter.YFilter { return messageDigestKeies.YFilter }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) SetFilter(yf yfilter.YFilter) { messageDigestKeies.YFilter = yf }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) GetGoName(yname string) string {
    if yname == "message-digest-key" { return "MessageDigestKey" }
    return ""
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) GetSegmentPath() string {
    return "message-digest-keies"
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "message-digest-key" {
        for _, c := range messageDigestKeies.MessageDigestKey {
            if messageDigestKeies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey{}
        messageDigestKeies.MessageDigestKey = append(messageDigestKeies.MessageDigestKey, child)
        return &messageDigestKeies.MessageDigestKey[len(messageDigestKeies.MessageDigestKey)-1]
    }
    return nil
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range messageDigestKeies.MessageDigestKey {
        children[messageDigestKeies.MessageDigestKey[i].GetSegmentPath()] = &messageDigestKeies.MessageDigestKey[i]
    }
    return children
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) GetYangName() string { return "message-digest-keies" }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) SetParent(parent types.Entity) { messageDigestKeies.parent = parent }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) GetParent() types.Entity { return messageDigestKeies.parent }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: (!.+)|([^!].+). This attribute
    // is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetFilter() yfilter.YFilter { return messageDigestKey.YFilter }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) SetFilter(yf yfilter.YFilter) { messageDigestKey.YFilter = yf }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetGoName(yname string) string {
    if yname == "key-id" { return "KeyId" }
    if yname == "password" { return "Password" }
    return ""
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetSegmentPath() string {
    return "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key-id"] = messageDigestKey.KeyId
    leafs["password"] = messageDigestKey.Password
    return leafs
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetYangName() string { return "message-digest-key" }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) SetParent(parent types.Entity) { messageDigestKey.parent = parent }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParent() types.Entity { return messageDigestKey.parent }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParentYangName() string { return "message-digest-keies" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security
// Container class for security related
// configuration parameters
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enabling turns on TTL security.
    Ttl Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security) GetFilter() yfilter.YFilter { return security.YFilter }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security) SetFilter(yf yfilter.YFilter) { security.YFilter = yf }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security) GetGoName(yname string) string {
    if yname == "ttl" { return "Ttl" }
    return ""
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security) GetSegmentPath() string {
    return "security"
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ttl" {
        return &security.Ttl
    }
    return nil
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ttl"] = &security.Ttl
    return children
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security) GetBundleName() string { return "cisco_ios_xr" }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security) GetYangName() string { return "security" }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security) SetParent(parent types.Entity) { security.parent = parent }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security) GetParent() types.Entity { return security.parent }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security) GetParentYangName() string { return "area-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl
// Enabling turns on TTL security
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable TTL security. The type is bool.
    Enable interface{}

    // Hop count. The type is interface{} with range: 1..254.
    HopCount interface{}
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) GetFilter() yfilter.YFilter { return ttl.YFilter }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) SetFilter(yf yfilter.YFilter) { ttl.YFilter = yf }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "hop-count" { return "HopCount" }
    return ""
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) GetSegmentPath() string {
    return "ttl"
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = ttl.Enable
    leafs["hop-count"] = ttl.HopCount
    return leafs
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) GetBundleName() string { return "cisco_ios_xr" }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) GetYangName() string { return "ttl" }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) SetParent(parent types.Entity) { ttl.parent = parent }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) GetParent() types.Entity { return ttl.parent }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) GetParentYangName() string { return "security" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) GetFilter() yfilter.YFilter { return deadIntervalMinimal.YFilter }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) SetFilter(yf yfilter.YFilter) { deadIntervalMinimal.YFilter = yf }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "multiplier" { return "Multiplier" }
    return ""
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) GetSegmentPath() string {
    return "dead-interval-minimal"
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = deadIntervalMinimal.Interval
    leafs["multiplier"] = deadIntervalMinimal.Multiplier
    return leafs
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) GetBundleName() string { return "cisco_ios_xr" }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) GetYangName() string { return "dead-interval-minimal" }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) SetParent(parent types.Entity) { deadIntervalMinimal.parent = parent }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) GetParent() types.Entity { return deadIntervalMinimal.parent }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) GetParentYangName() string { return "area-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute
// Fast-reroute configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // OspfFastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink

    // Fast-reroute per-prefix global configuration.
    PerPrefix Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetGoName(yname string) string {
    if yname == "fast-reroute-enable" { return "FastRerouteEnable" }
    if yname == "per-link" { return "PerLink" }
    if yname == "per-prefix" { return "PerPrefix" }
    return ""
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "per-link" {
        return &fastReroute.PerLink
    }
    if childYangName == "per-prefix" {
        return &fastReroute.PerPrefix
    }
    return nil
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["per-link"] = &fastReroute.PerLink
    children["per-prefix"] = &fastReroute.PerPrefix
    return children
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-enable"] = fastReroute.FastRerouteEnable
    return leafs
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetParentYangName() string { return "area-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetFilter() yfilter.YFilter { return perLink.YFilter }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) SetFilter(yf yfilter.YFilter) { perLink.YFilter = yf }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetSegmentPath() string {
    return "per-link"
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perLink.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perLink.ExcludeInterfaces
    }
    return nil
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perLink.CandidateInterfaces
    children["exclude-interfaces"] = &perLink.ExcludeInterfaces
    return children
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perLink.FastRerouteUseCandidateOnly
    return leafs
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetBundleName() string { return "cisco_ios_xr" }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetYangName() string { return "per-link" }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) SetParent(parent types.Entity) { perLink.parent = parent }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetParent() types.Entity { return perLink.parent }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetParentYangName() string { return "per-link" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetParentYangName() string { return "per-link" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix
// Fast-reroute per-prefix global configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Topology Independet LFA configuration. The type is bool.
    TopologyIndependentLfa interface{}

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Remote LFA configuration.
    RemoteLfa Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa

    // Fast-reroute tiebreakers configurations.
    Tiebreakers Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetFilter() yfilter.YFilter { return perPrefix.YFilter }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) SetFilter(yf yfilter.YFilter) { perPrefix.YFilter = yf }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetGoName(yname string) string {
    if yname == "topology-independent-lfa" { return "TopologyIndependentLfa" }
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "remote-lfa" { return "RemoteLfa" }
    if yname == "tiebreakers" { return "Tiebreakers" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetSegmentPath() string {
    return "per-prefix"
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-lfa" {
        return &perPrefix.RemoteLfa
    }
    if childYangName == "tiebreakers" {
        return &perPrefix.Tiebreakers
    }
    if childYangName == "candidate-interfaces" {
        return &perPrefix.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perPrefix.ExcludeInterfaces
    }
    return nil
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["remote-lfa"] = &perPrefix.RemoteLfa
    children["tiebreakers"] = &perPrefix.Tiebreakers
    children["candidate-interfaces"] = &perPrefix.CandidateInterfaces
    children["exclude-interfaces"] = &perPrefix.ExcludeInterfaces
    return children
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["topology-independent-lfa"] = perPrefix.TopologyIndependentLfa
    leafs["fast-reroute-use-candidate-only"] = perPrefix.FastRerouteUseCandidateOnly
    return leafs
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetYangName() string { return "per-prefix" }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) SetParent(parent types.Entity) { perPrefix.parent = parent }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetParent() types.Entity { return perPrefix.parent }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa
// Remote LFA configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable remote LFA computation. The type is OspfFrrRlfaTunnel.
    Tunnel interface{}

    // Maximum path cost to remote LFA. The type is interface{} with range:
    // 1..4294967295.
    MaximumCost interface{}
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetFilter() yfilter.YFilter { return remoteLfa.YFilter }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) SetFilter(yf yfilter.YFilter) { remoteLfa.YFilter = yf }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetGoName(yname string) string {
    if yname == "tunnel" { return "Tunnel" }
    if yname == "maximum-cost" { return "MaximumCost" }
    return ""
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetSegmentPath() string {
    return "remote-lfa"
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel"] = remoteLfa.Tunnel
    leafs["maximum-cost"] = remoteLfa.MaximumCost
    return leafs
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetBundleName() string { return "cisco_ios_xr" }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetYangName() string { return "remote-lfa" }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) SetParent(parent types.Entity) { remoteLfa.parent = parent }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetParent() types.Entity { return remoteLfa.parent }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers
// Fast-reroute tiebreakers configurations
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fast-reroute tiebreakers configuration. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker.
    Tiebreaker []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetFilter() yfilter.YFilter { return tiebreakers.YFilter }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) SetFilter(yf yfilter.YFilter) { tiebreakers.YFilter = yf }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetGoName(yname string) string {
    if yname == "tiebreaker" { return "Tiebreaker" }
    return ""
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetSegmentPath() string {
    return "tiebreakers"
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tiebreaker" {
        for _, c := range tiebreakers.Tiebreaker {
            if tiebreakers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker{}
        tiebreakers.Tiebreaker = append(tiebreakers.Tiebreaker, child)
        return &tiebreakers.Tiebreaker[len(tiebreakers.Tiebreaker)-1]
    }
    return nil
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range tiebreakers.Tiebreaker {
        children[tiebreakers.Tiebreaker[i].GetSegmentPath()] = &tiebreakers.Tiebreaker[i]
    }
    return children
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetYangName() string { return "tiebreakers" }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) SetParent(parent types.Entity) { tiebreakers.parent = parent }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetParent() types.Entity { return tiebreakers.parent }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
// Fast-reroute tiebreakers configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Tiebreaker type. The type is
    // OspfFastRerouteTiebreakersIntf.
    TiebreakerType interface{}

    // Index value for a tiebreaker, 0 to disable. The type is interface{} with
    // range: 0..255. This attribute is mandatory.
    TiebreakerIndex interface{}
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetFilter() yfilter.YFilter { return tiebreaker.YFilter }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetFilter(yf yfilter.YFilter) { tiebreaker.YFilter = yf }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetGoName(yname string) string {
    if yname == "tiebreaker-type" { return "TiebreakerType" }
    if yname == "tiebreaker-index" { return "TiebreakerIndex" }
    return ""
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetSegmentPath() string {
    return "tiebreaker" + "[tiebreaker-type='" + fmt.Sprintf("%v", tiebreaker.TiebreakerType) + "']"
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tiebreaker-type"] = tiebreaker.TiebreakerType
    leafs["tiebreaker-index"] = tiebreaker.TiebreakerIndex
    return leafs
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetYangName() string { return "tiebreaker" }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetParent(parent types.Entity) { tiebreaker.parent = parent }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParent() types.Entity { return tiebreaker.parent }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParentYangName() string { return "tiebreakers" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_CostFallback
// Interface fallback cost
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_CostFallback struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fallback cost of link. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Bandwidth threshold. The type is interface{} with range: 1..4294967.
    Threshold interface{}
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) GetFilter() yfilter.YFilter { return costFallback.YFilter }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) SetFilter(yf yfilter.YFilter) { costFallback.YFilter = yf }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) GetGoName(yname string) string {
    if yname == "cost" { return "Cost" }
    if yname == "threshold" { return "Threshold" }
    return ""
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) GetSegmentPath() string {
    return "cost-fallback"
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cost"] = costFallback.Cost
    leafs["threshold"] = costFallback.Threshold
    return leafs
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) GetBundleName() string { return "cisco_ios_xr" }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) GetYangName() string { return "cost-fallback" }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) SetParent(parent types.Entity) { costFallback.parent = parent }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) GetParent() types.Entity { return costFallback.parent }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) GetParentYangName() string { return "area-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes
// Name scope configurations
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name scope configuration. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope.
    NameScope []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope
}

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes) GetFilter() yfilter.YFilter { return nameScopes.YFilter }

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes) SetFilter(yf yfilter.YFilter) { nameScopes.YFilter = yf }

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes) GetGoName(yname string) string {
    if yname == "name-scope" { return "NameScope" }
    return ""
}

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes) GetSegmentPath() string {
    return "name-scopes"
}

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "name-scope" {
        for _, c := range nameScopes.NameScope {
            if nameScopes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope{}
        nameScopes.NameScope = append(nameScopes.NameScope, child)
        return &nameScopes.NameScope[len(nameScopes.NameScope)-1]
    }
    return nil
}

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nameScopes.NameScope {
        children[nameScopes.NameScope[i].GetSegmentPath()] = &nameScopes.NameScope[i]
    }
    return children
}

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes) GetBundleName() string { return "cisco_ios_xr" }

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes) GetYangName() string { return "name-scopes" }

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes) SetParent(parent types.Entity) { nameScopes.parent = parent }

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes) GetParent() types.Entity { return nameScopes.parent }

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes) GetParentYangName() string { return "area-address" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope
// Name scope configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of Interface to configure. The type is string
    // with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Enable/Disable prefix suppression for primary addresses. The type is bool.
    // The default value is false.
    PrefixSuppressionPrimary interface{}

    // Enable/Disable ignoring of MTU in DBD packets. The type is bool. The
    // default value is false.
    MtuIgnore interface{}

    // Enable/Disable MPLS LDP sync for igp-shortcuts. The type is bool.
    LdpSyncIgpShortcuts interface{}

    // Enable MPLS LDP Auto Config. The type is interface{}.
    LdpAutoConfig interface{}

    // Type of attached network. The type is OspfNetwork.
    NetworkType interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Enable/Disable advertising loopback as a stub network. The type is bool.
    // The default value is false.
    LoopbackStubNetwork interface{}

    // Enable/Disable prefix suppression for secondary addresses. The type is
    // bool. The default value is false.
    PrefixSuppressionSecondary interface{}

    // Enable/Disable OSPF demand circuit. The type is bool. The default value is
    // false.
    DemandCircuit interface{}

    // When enabled, prevent sending HELLO packets over link. The type is bool.
    // The default value is false.
    Passive interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Customize size of OSPF packets upto MTU. The type is interface{} with
    // range: 576..10000.
    PacketSize interface{}

    // Enable/Disable MPLS LDP sync. The type is bool.
    LdpSync interface{}

    // Filter OSPF LSA during synchronization and flooding. The type is bool. The
    // default value is false.
    DatabaseFilter interface{}

    // Enable/Disable registration for early interface down notifications. The
    // type is bool. The default value is false.
    LinkDownFastDetect interface{}

    // segment-routing forwarding configuration Applicableonly in Default VRF. The
    // type is OspfSegmentRoutingForwarding.
    SegmentRoutingForwarding interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Router priority for DR and BDR election. The type is interface{} with
    // range: 0..255. The default value is 1.
    Priority interface{}

    // Enable/Disable OSPF flood reduction. The type is bool. The default value is
    // false.
    FloodReduction interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Prefix SID.
    PrefixSid Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid

    // Strict Prefix SID.
    PrefixSidStrict Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict

    // Filter networks intalled to RIB (disable as ACL name means filtering is
    // disabled).
    DistributeList Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList

    // BFD configuration.
    Bfd Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd

    // Authentication.
    Authentication Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication

    // Container class for security related configuration parameters.
    Security Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security

    // Neighbor router configuration information.
    Neighbors Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal

    // Fast-reroute configuration.
    FastReroute Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute

    // Interface fallback cost.
    CostFallback Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback
}

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope) GetFilter() yfilter.YFilter { return nameScope.YFilter }

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope) SetFilter(yf yfilter.YFilter) { nameScope.YFilter = yf }

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "cost" { return "Cost" }
    if yname == "prefix-suppression-primary" { return "PrefixSuppressionPrimary" }
    if yname == "mtu-ignore" { return "MtuIgnore" }
    if yname == "ldp-sync-igp-shortcuts" { return "LdpSyncIgpShortcuts" }
    if yname == "ldp-auto-config" { return "LdpAutoConfig" }
    if yname == "network-type" { return "NetworkType" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "loopback-stub-network" { return "LoopbackStubNetwork" }
    if yname == "prefix-suppression-secondary" { return "PrefixSuppressionSecondary" }
    if yname == "demand-circuit" { return "DemandCircuit" }
    if yname == "passive" { return "Passive" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "packet-size" { return "PacketSize" }
    if yname == "ldp-sync" { return "LdpSync" }
    if yname == "database-filter" { return "DatabaseFilter" }
    if yname == "link-down-fast-detect" { return "LinkDownFastDetect" }
    if yname == "segment-routing-forwarding" { return "SegmentRoutingForwarding" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "priority" { return "Priority" }
    if yname == "flood-reduction" { return "FloodReduction" }
    if yname == "running" { return "Running" }
    if yname == "prefix-sid" { return "PrefixSid" }
    if yname == "prefix-sid-strict" { return "PrefixSidStrict" }
    if yname == "distribute-list" { return "DistributeList" }
    if yname == "bfd" { return "Bfd" }
    if yname == "authentication" { return "Authentication" }
    if yname == "security" { return "Security" }
    if yname == "neighbors" { return "Neighbors" }
    if yname == "dead-interval-minimal" { return "DeadIntervalMinimal" }
    if yname == "fast-reroute" { return "FastReroute" }
    if yname == "cost-fallback" { return "CostFallback" }
    return ""
}

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope) GetSegmentPath() string {
    return "name-scope" + "[interface-name='" + fmt.Sprintf("%v", nameScope.InterfaceName) + "']"
}

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "prefix-sid" {
        return &nameScope.PrefixSid
    }
    if childYangName == "prefix-sid-strict" {
        return &nameScope.PrefixSidStrict
    }
    if childYangName == "distribute-list" {
        return &nameScope.DistributeList
    }
    if childYangName == "bfd" {
        return &nameScope.Bfd
    }
    if childYangName == "authentication" {
        return &nameScope.Authentication
    }
    if childYangName == "security" {
        return &nameScope.Security
    }
    if childYangName == "neighbors" {
        return &nameScope.Neighbors
    }
    if childYangName == "dead-interval-minimal" {
        return &nameScope.DeadIntervalMinimal
    }
    if childYangName == "fast-reroute" {
        return &nameScope.FastReroute
    }
    if childYangName == "cost-fallback" {
        return &nameScope.CostFallback
    }
    return nil
}

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["prefix-sid"] = &nameScope.PrefixSid
    children["prefix-sid-strict"] = &nameScope.PrefixSidStrict
    children["distribute-list"] = &nameScope.DistributeList
    children["bfd"] = &nameScope.Bfd
    children["authentication"] = &nameScope.Authentication
    children["security"] = &nameScope.Security
    children["neighbors"] = &nameScope.Neighbors
    children["dead-interval-minimal"] = &nameScope.DeadIntervalMinimal
    children["fast-reroute"] = &nameScope.FastReroute
    children["cost-fallback"] = &nameScope.CostFallback
    return children
}

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = nameScope.InterfaceName
    leafs["cost"] = nameScope.Cost
    leafs["prefix-suppression-primary"] = nameScope.PrefixSuppressionPrimary
    leafs["mtu-ignore"] = nameScope.MtuIgnore
    leafs["ldp-sync-igp-shortcuts"] = nameScope.LdpSyncIgpShortcuts
    leafs["ldp-auto-config"] = nameScope.LdpAutoConfig
    leafs["network-type"] = nameScope.NetworkType
    leafs["hello-interval"] = nameScope.HelloInterval
    leafs["loopback-stub-network"] = nameScope.LoopbackStubNetwork
    leafs["prefix-suppression-secondary"] = nameScope.PrefixSuppressionSecondary
    leafs["demand-circuit"] = nameScope.DemandCircuit
    leafs["passive"] = nameScope.Passive
    leafs["transmit-delay"] = nameScope.TransmitDelay
    leafs["packet-size"] = nameScope.PacketSize
    leafs["ldp-sync"] = nameScope.LdpSync
    leafs["database-filter"] = nameScope.DatabaseFilter
    leafs["link-down-fast-detect"] = nameScope.LinkDownFastDetect
    leafs["segment-routing-forwarding"] = nameScope.SegmentRoutingForwarding
    leafs["retransmit-interval"] = nameScope.RetransmitInterval
    leafs["priority"] = nameScope.Priority
    leafs["flood-reduction"] = nameScope.FloodReduction
    leafs["running"] = nameScope.Running
    return leafs
}

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope) GetBundleName() string { return "cisco_ios_xr" }

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope) GetYangName() string { return "name-scope" }

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope) SetParent(parent types.Entity) { nameScope.parent = parent }

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope) GetParent() types.Entity { return nameScope.parent }

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope) GetParentYangName() string { return "name-scopes" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid
// Prefix SID
// This type is a presence type.
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SID value. The type is interface{} with range: 0..1048575. This attribute
    // is mandatory.
    SidValue interface{}

    // Force Penultimate Hop To Send Explicit-Null Label. The type is bool. The
    // default value is false.
    ExplicitNull interface{}

    // OSPF SID Type. The type is OspfSid. This attribute is mandatory.
    Type interface{}

    // Not a node SID. The type is bool. The default value is false.
    NFlagClear interface{}
}

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) GetFilter() yfilter.YFilter { return prefixSid.YFilter }

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) SetFilter(yf yfilter.YFilter) { prefixSid.YFilter = yf }

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) GetGoName(yname string) string {
    if yname == "sid-value" { return "SidValue" }
    if yname == "explicit-null" { return "ExplicitNull" }
    if yname == "type" { return "Type" }
    if yname == "n-flag-clear" { return "NFlagClear" }
    return ""
}

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) GetSegmentPath() string {
    return "prefix-sid"
}

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sid-value"] = prefixSid.SidValue
    leafs["explicit-null"] = prefixSid.ExplicitNull
    leafs["type"] = prefixSid.Type
    leafs["n-flag-clear"] = prefixSid.NFlagClear
    return leafs
}

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) GetBundleName() string { return "cisco_ios_xr" }

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) GetYangName() string { return "prefix-sid" }

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) SetParent(parent types.Entity) { prefixSid.parent = parent }

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) GetParent() types.Entity { return prefixSid.parent }

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict
// Strict Prefix SID
// This type is a presence type.
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SID value. The type is interface{} with range: 0..1048575. This attribute
    // is mandatory.
    SidValue interface{}

    // Force Penultimate Hop To Send Explicit-Null Label. The type is bool. The
    // default value is false.
    ExplicitNull interface{}

    // OSPF SID Type. The type is OspfSid. This attribute is mandatory.
    Type interface{}

    // Not a node SID. The type is bool. The default value is false.
    NFlagClear interface{}
}

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) GetFilter() yfilter.YFilter { return prefixSidStrict.YFilter }

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) SetFilter(yf yfilter.YFilter) { prefixSidStrict.YFilter = yf }

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) GetGoName(yname string) string {
    if yname == "sid-value" { return "SidValue" }
    if yname == "explicit-null" { return "ExplicitNull" }
    if yname == "type" { return "Type" }
    if yname == "n-flag-clear" { return "NFlagClear" }
    return ""
}

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) GetSegmentPath() string {
    return "prefix-sid-strict"
}

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sid-value"] = prefixSidStrict.SidValue
    leafs["explicit-null"] = prefixSidStrict.ExplicitNull
    leafs["type"] = prefixSidStrict.Type
    leafs["n-flag-clear"] = prefixSidStrict.NFlagClear
    return leafs
}

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) GetBundleName() string { return "cisco_ios_xr" }

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) GetYangName() string { return "prefix-sid-strict" }

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) SetParent(parent types.Entity) { prefixSidStrict.parent = parent }

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) GetParent() types.Entity { return prefixSidStrict.parent }

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList
// Filter networks intalled to RIB (disable as ACL
// name means filtering is disabled)
// This type is a presence type.
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Access Control List name. The type is string.
    AccessListName interface{}

    // Route Policy name. The type is string.
    RoutePolicyName interface{}
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) GetFilter() yfilter.YFilter { return distributeList.YFilter }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) SetFilter(yf yfilter.YFilter) { distributeList.YFilter = yf }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) GetGoName(yname string) string {
    if yname == "access-list-name" { return "AccessListName" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) GetSegmentPath() string {
    return "distribute-list"
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["access-list-name"] = distributeList.AccessListName
    leafs["route-policy-name"] = distributeList.RoutePolicyName
    return leafs
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) GetBundleName() string { return "cisco_ios_xr" }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) GetYangName() string { return "distribute-list" }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) SetParent(parent types.Entity) { distributeList.parent = parent }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) GetParent() types.Entity { return distributeList.parent }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd
// BFD configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hello interval for BFD sessions created by OSPF. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    Interval interface{}

    // Detection multiplier for BFD sessions created by OSPF. The type is
    // interface{} with range: 2..50.
    DetectionMultiplier interface{}

    // use of Bidirectional Forwarding Detection. The type is BfdEnableMode.
    FastDetectMode interface{}
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) GetFilter() yfilter.YFilter { return bfd.YFilter }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) SetFilter(yf yfilter.YFilter) { bfd.YFilter = yf }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "fast-detect-mode" { return "FastDetectMode" }
    return ""
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) GetSegmentPath() string {
    return "bfd"
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = bfd.Interval
    leafs["detection-multiplier"] = bfd.DetectionMultiplier
    leafs["fast-detect-mode"] = bfd.FastDetectMode
    return leafs
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) GetBundleName() string { return "cisco_ios_xr" }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) GetYangName() string { return "bfd" }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) SetParent(parent types.Entity) { bfd.parent = parent }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) GetParent() types.Entity { return bfd.parent }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication
// Authentication
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // (!.+)|([^!].+).
    Key interface{}

    // Authentication type.
    Type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) GetGoName(yname string) string {
    if yname == "key" { return "Key" }
    if yname == "type" { return "Type" }
    if yname == "message-digest-keies" { return "MessageDigestKeies" }
    return ""
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "type" {
        return &authentication.Type
    }
    if childYangName == "message-digest-keies" {
        return &authentication.MessageDigestKeies
    }
    return nil
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["type"] = &authentication.Type
    children["message-digest-keies"] = &authentication.MessageDigestKeies
    return children
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key"] = authentication.Key
    return leafs
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) GetGoName(yname string) string {
    if yname == "authen-type" { return "AuthenType" }
    if yname == "keychain-authen-type" { return "KeychainAuthenType" }
    if yname == "keychain-name" { return "KeychainName" }
    return ""
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) GetSegmentPath() string {
    return "type"
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["authen-type"] = self.AuthenType
    leafs["keychain-authen-type"] = self.KeychainAuthenType
    leafs["keychain-name"] = self.KeychainName
    return leafs
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) GetYangName() string { return "type" }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) GetParent() types.Entity { return self.parent }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) GetFilter() yfilter.YFilter { return messageDigestKeies.YFilter }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) SetFilter(yf yfilter.YFilter) { messageDigestKeies.YFilter = yf }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) GetGoName(yname string) string {
    if yname == "message-digest-key" { return "MessageDigestKey" }
    return ""
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) GetSegmentPath() string {
    return "message-digest-keies"
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "message-digest-key" {
        for _, c := range messageDigestKeies.MessageDigestKey {
            if messageDigestKeies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey{}
        messageDigestKeies.MessageDigestKey = append(messageDigestKeies.MessageDigestKey, child)
        return &messageDigestKeies.MessageDigestKey[len(messageDigestKeies.MessageDigestKey)-1]
    }
    return nil
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range messageDigestKeies.MessageDigestKey {
        children[messageDigestKeies.MessageDigestKey[i].GetSegmentPath()] = &messageDigestKeies.MessageDigestKey[i]
    }
    return children
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) GetYangName() string { return "message-digest-keies" }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) SetParent(parent types.Entity) { messageDigestKeies.parent = parent }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) GetParent() types.Entity { return messageDigestKeies.parent }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: (!.+)|([^!].+). This attribute
    // is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetFilter() yfilter.YFilter { return messageDigestKey.YFilter }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) SetFilter(yf yfilter.YFilter) { messageDigestKey.YFilter = yf }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetGoName(yname string) string {
    if yname == "key-id" { return "KeyId" }
    if yname == "password" { return "Password" }
    return ""
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetSegmentPath() string {
    return "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key-id"] = messageDigestKey.KeyId
    leafs["password"] = messageDigestKey.Password
    return leafs
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetYangName() string { return "message-digest-key" }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) SetParent(parent types.Entity) { messageDigestKey.parent = parent }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParent() types.Entity { return messageDigestKey.parent }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParentYangName() string { return "message-digest-keies" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security
// Container class for security related
// configuration parameters
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enabling turns on TTL security.
    Ttl Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) GetFilter() yfilter.YFilter { return security.YFilter }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) SetFilter(yf yfilter.YFilter) { security.YFilter = yf }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) GetGoName(yname string) string {
    if yname == "ttl" { return "Ttl" }
    return ""
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) GetSegmentPath() string {
    return "security"
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ttl" {
        return &security.Ttl
    }
    return nil
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ttl"] = &security.Ttl
    return children
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) GetBundleName() string { return "cisco_ios_xr" }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) GetYangName() string { return "security" }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) SetParent(parent types.Entity) { security.parent = parent }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) GetParent() types.Entity { return security.parent }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl
// Enabling turns on TTL security
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable TTL security. The type is bool.
    Enable interface{}

    // Hop count. The type is interface{} with range: 1..254.
    HopCount interface{}
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) GetFilter() yfilter.YFilter { return ttl.YFilter }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) SetFilter(yf yfilter.YFilter) { ttl.YFilter = yf }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "hop-count" { return "HopCount" }
    return ""
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) GetSegmentPath() string {
    return "ttl"
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = ttl.Enable
    leafs["hop-count"] = ttl.HopCount
    return leafs
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) GetBundleName() string { return "cisco_ios_xr" }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) GetYangName() string { return "ttl" }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) SetParent(parent types.Entity) { ttl.parent = parent }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) GetParent() types.Entity { return ttl.parent }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) GetParentYangName() string { return "security" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors
// Neighbor router configuration information
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router configuration information for a particular neighbor. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor.
    Neighbor []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor
}

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) GetFilter() yfilter.YFilter { return neighbors.YFilter }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) SetFilter(yf yfilter.YFilter) { neighbors.YFilter = yf }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) GetGoName(yname string) string {
    if yname == "neighbor" { return "Neighbor" }
    return ""
}

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) GetSegmentPath() string {
    return "neighbors"
}

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor" {
        for _, c := range neighbors.Neighbor {
            if neighbors.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor{}
        neighbors.Neighbor = append(neighbors.Neighbor, child)
        return &neighbors.Neighbor[len(neighbors.Neighbor)-1]
    }
    return nil
}

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range neighbors.Neighbor {
        children[neighbors.Neighbor[i].GetSegmentPath()] = &neighbors.Neighbor[i]
    }
    return children
}

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) GetBundleName() string { return "cisco_ios_xr" }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) GetYangName() string { return "neighbors" }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) SetParent(parent types.Entity) { neighbors.parent = parent }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) GetParent() types.Entity { return neighbors.parent }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor
// Router configuration information for a
// particular neighbor
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Neighbor IP address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // OSPF priority of non-broadcast neighbor. The type is interface{} with
    // range: 0..255. The default value is 0.
    Priority interface{}

    // OSPF dead router poll-interval in seconds. The type is interface{} with
    // range: 0..65535. Units are second. The default value is 40.
    PollInterval interface{}

    // OSPF cost for point-to-multipoint neighbor. The type is interface{} with
    // range: 1..65535. The default value is 1.
    Cost interface{}

    // Database filter: Filter OSPF LSA during synchronization and flooding for
    // point-to-multipoint. The type is bool. The default value is false.
    DatabaseFilter interface{}
}

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) GetFilter() yfilter.YFilter { return neighbor.YFilter }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) SetFilter(yf yfilter.YFilter) { neighbor.YFilter = yf }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) GetGoName(yname string) string {
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "priority" { return "Priority" }
    if yname == "poll-interval" { return "PollInterval" }
    if yname == "cost" { return "Cost" }
    if yname == "database-filter" { return "DatabaseFilter" }
    return ""
}

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) GetSegmentPath() string {
    return "neighbor" + "[neighbor-address='" + fmt.Sprintf("%v", neighbor.NeighborAddress) + "']"
}

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-address"] = neighbor.NeighborAddress
    leafs["priority"] = neighbor.Priority
    leafs["poll-interval"] = neighbor.PollInterval
    leafs["cost"] = neighbor.Cost
    leafs["database-filter"] = neighbor.DatabaseFilter
    return leafs
}

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) GetBundleName() string { return "cisco_ios_xr" }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) GetYangName() string { return "neighbor" }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) SetParent(parent types.Entity) { neighbor.parent = parent }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) GetParent() types.Entity { return neighbor.parent }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) GetParentYangName() string { return "neighbors" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) GetFilter() yfilter.YFilter { return deadIntervalMinimal.YFilter }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) SetFilter(yf yfilter.YFilter) { deadIntervalMinimal.YFilter = yf }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "multiplier" { return "Multiplier" }
    return ""
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) GetSegmentPath() string {
    return "dead-interval-minimal"
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = deadIntervalMinimal.Interval
    leafs["multiplier"] = deadIntervalMinimal.Multiplier
    return leafs
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) GetBundleName() string { return "cisco_ios_xr" }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) GetYangName() string { return "dead-interval-minimal" }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) SetParent(parent types.Entity) { deadIntervalMinimal.parent = parent }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) GetParent() types.Entity { return deadIntervalMinimal.parent }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute
// Fast-reroute configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // OspfFastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink

    // Fast-reroute per-prefix global configuration.
    PerPrefix Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) GetGoName(yname string) string {
    if yname == "fast-reroute-enable" { return "FastRerouteEnable" }
    if yname == "per-link" { return "PerLink" }
    if yname == "per-prefix" { return "PerPrefix" }
    return ""
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "per-link" {
        return &fastReroute.PerLink
    }
    if childYangName == "per-prefix" {
        return &fastReroute.PerPrefix
    }
    return nil
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["per-link"] = &fastReroute.PerLink
    children["per-prefix"] = &fastReroute.PerPrefix
    return children
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-enable"] = fastReroute.FastRerouteEnable
    return leafs
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) GetFilter() yfilter.YFilter { return perLink.YFilter }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) SetFilter(yf yfilter.YFilter) { perLink.YFilter = yf }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) GetSegmentPath() string {
    return "per-link"
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perLink.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perLink.ExcludeInterfaces
    }
    return nil
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perLink.CandidateInterfaces
    children["exclude-interfaces"] = &perLink.ExcludeInterfaces
    return children
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perLink.FastRerouteUseCandidateOnly
    return leafs
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) GetBundleName() string { return "cisco_ios_xr" }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) GetYangName() string { return "per-link" }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) SetParent(parent types.Entity) { perLink.parent = parent }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) GetParent() types.Entity { return perLink.parent }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetParentYangName() string { return "per-link" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetParentYangName() string { return "per-link" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix
// Fast-reroute per-prefix global configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Topology Independet LFA configuration. The type is bool.
    TopologyIndependentLfa interface{}

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Remote LFA configuration.
    RemoteLfa Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa

    // Fast-reroute tiebreakers configurations.
    Tiebreakers Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) GetFilter() yfilter.YFilter { return perPrefix.YFilter }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) SetFilter(yf yfilter.YFilter) { perPrefix.YFilter = yf }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) GetGoName(yname string) string {
    if yname == "topology-independent-lfa" { return "TopologyIndependentLfa" }
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "remote-lfa" { return "RemoteLfa" }
    if yname == "tiebreakers" { return "Tiebreakers" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) GetSegmentPath() string {
    return "per-prefix"
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-lfa" {
        return &perPrefix.RemoteLfa
    }
    if childYangName == "tiebreakers" {
        return &perPrefix.Tiebreakers
    }
    if childYangName == "candidate-interfaces" {
        return &perPrefix.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perPrefix.ExcludeInterfaces
    }
    return nil
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["remote-lfa"] = &perPrefix.RemoteLfa
    children["tiebreakers"] = &perPrefix.Tiebreakers
    children["candidate-interfaces"] = &perPrefix.CandidateInterfaces
    children["exclude-interfaces"] = &perPrefix.ExcludeInterfaces
    return children
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["topology-independent-lfa"] = perPrefix.TopologyIndependentLfa
    leafs["fast-reroute-use-candidate-only"] = perPrefix.FastRerouteUseCandidateOnly
    return leafs
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) GetYangName() string { return "per-prefix" }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) SetParent(parent types.Entity) { perPrefix.parent = parent }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) GetParent() types.Entity { return perPrefix.parent }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa
// Remote LFA configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable remote LFA computation. The type is OspfFrrRlfaTunnel.
    Tunnel interface{}

    // Maximum path cost to remote LFA. The type is interface{} with range:
    // 1..4294967295.
    MaximumCost interface{}
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetFilter() yfilter.YFilter { return remoteLfa.YFilter }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) SetFilter(yf yfilter.YFilter) { remoteLfa.YFilter = yf }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetGoName(yname string) string {
    if yname == "tunnel" { return "Tunnel" }
    if yname == "maximum-cost" { return "MaximumCost" }
    return ""
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetSegmentPath() string {
    return "remote-lfa"
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel"] = remoteLfa.Tunnel
    leafs["maximum-cost"] = remoteLfa.MaximumCost
    return leafs
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetBundleName() string { return "cisco_ios_xr" }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetYangName() string { return "remote-lfa" }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) SetParent(parent types.Entity) { remoteLfa.parent = parent }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetParent() types.Entity { return remoteLfa.parent }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers
// Fast-reroute tiebreakers configurations
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fast-reroute tiebreakers configuration. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker.
    Tiebreaker []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetFilter() yfilter.YFilter { return tiebreakers.YFilter }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) SetFilter(yf yfilter.YFilter) { tiebreakers.YFilter = yf }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetGoName(yname string) string {
    if yname == "tiebreaker" { return "Tiebreaker" }
    return ""
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetSegmentPath() string {
    return "tiebreakers"
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tiebreaker" {
        for _, c := range tiebreakers.Tiebreaker {
            if tiebreakers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker{}
        tiebreakers.Tiebreaker = append(tiebreakers.Tiebreaker, child)
        return &tiebreakers.Tiebreaker[len(tiebreakers.Tiebreaker)-1]
    }
    return nil
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range tiebreakers.Tiebreaker {
        children[tiebreakers.Tiebreaker[i].GetSegmentPath()] = &tiebreakers.Tiebreaker[i]
    }
    return children
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetYangName() string { return "tiebreakers" }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) SetParent(parent types.Entity) { tiebreakers.parent = parent }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetParent() types.Entity { return tiebreakers.parent }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
// Fast-reroute tiebreakers configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Tiebreaker type. The type is
    // OspfFastRerouteTiebreakersIntf.
    TiebreakerType interface{}

    // Index value for a tiebreaker, 0 to disable. The type is interface{} with
    // range: 0..255. This attribute is mandatory.
    TiebreakerIndex interface{}
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetFilter() yfilter.YFilter { return tiebreaker.YFilter }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetFilter(yf yfilter.YFilter) { tiebreaker.YFilter = yf }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetGoName(yname string) string {
    if yname == "tiebreaker-type" { return "TiebreakerType" }
    if yname == "tiebreaker-index" { return "TiebreakerIndex" }
    return ""
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetSegmentPath() string {
    return "tiebreaker" + "[tiebreaker-type='" + fmt.Sprintf("%v", tiebreaker.TiebreakerType) + "']"
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tiebreaker-type"] = tiebreaker.TiebreakerType
    leafs["tiebreaker-index"] = tiebreaker.TiebreakerIndex
    return leafs
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetYangName() string { return "tiebreaker" }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetParent(parent types.Entity) { tiebreaker.parent = parent }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParent() types.Entity { return tiebreaker.parent }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParentYangName() string { return "tiebreakers" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback
// Interface fallback cost
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fallback cost of link. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Bandwidth threshold. The type is interface{} with range: 1..4294967.
    Threshold interface{}
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) GetFilter() yfilter.YFilter { return costFallback.YFilter }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) SetFilter(yf yfilter.YFilter) { costFallback.YFilter = yf }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) GetGoName(yname string) string {
    if yname == "cost" { return "Cost" }
    if yname == "threshold" { return "Threshold" }
    return ""
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) GetSegmentPath() string {
    return "cost-fallback"
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cost"] = costFallback.Cost
    leafs["threshold"] = costFallback.Threshold
    return leafs
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) GetBundleName() string { return "cisco_ios_xr" }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) GetYangName() string { return "cost-fallback" }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) SetParent(parent types.Entity) { costFallback.parent = parent }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) GetParent() types.Entity { return costFallback.parent }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes
// Multi Area Interface scope configurations
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Multi Area Interface configuration. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope.
    MultiAreaInterfaceScope []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope
}

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) GetFilter() yfilter.YFilter { return multiAreaInterfaceScopes.YFilter }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) SetFilter(yf yfilter.YFilter) { multiAreaInterfaceScopes.YFilter = yf }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) GetGoName(yname string) string {
    if yname == "multi-area-interface-scope" { return "MultiAreaInterfaceScope" }
    return ""
}

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) GetSegmentPath() string {
    return "multi-area-interface-scopes"
}

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "multi-area-interface-scope" {
        for _, c := range multiAreaInterfaceScopes.MultiAreaInterfaceScope {
            if multiAreaInterfaceScopes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope{}
        multiAreaInterfaceScopes.MultiAreaInterfaceScope = append(multiAreaInterfaceScopes.MultiAreaInterfaceScope, child)
        return &multiAreaInterfaceScopes.MultiAreaInterfaceScope[len(multiAreaInterfaceScopes.MultiAreaInterfaceScope)-1]
    }
    return nil
}

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range multiAreaInterfaceScopes.MultiAreaInterfaceScope {
        children[multiAreaInterfaceScopes.MultiAreaInterfaceScope[i].GetSegmentPath()] = &multiAreaInterfaceScopes.MultiAreaInterfaceScope[i]
    }
    return children
}

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) GetBundleName() string { return "cisco_ios_xr" }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) GetYangName() string { return "multi-area-interface-scopes" }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) SetParent(parent types.Entity) { multiAreaInterfaceScopes.parent = parent }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) GetParent() types.Entity { return multiAreaInterfaceScopes.parent }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) GetParentYangName() string { return "area-address" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope
// Multi Area Interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of Multi Area Interface to configure. The
    // type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Enable/Disable ignoring of MTU in DBD packets. The type is bool. The
    // default value is false.
    MtuIgnore interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // When enabled, prevent sending HELLO packets over link. The type is bool.
    // The default value is false.
    Passive interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Customize size of OSPF packets upto MTU. The type is interface{} with
    // range: 576..10000.
    PacketSize interface{}

    // Filter OSPF LSA during synchronization and flooding. The type is bool. The
    // default value is false.
    DatabaseFilter interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Filter networks intalled to RIB (disable as ACL name means filtering is
    // disabled).
    DistributeList Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList

    // Authentication.
    Authentication Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication

    // Neighbor router configuration information.
    Neighbors Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal

    // Fast-reroute configuration.
    FastReroute Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute

    // Interface fallback cost.
    CostFallback Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback
}

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetFilter() yfilter.YFilter { return multiAreaInterfaceScope.YFilter }

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) SetFilter(yf yfilter.YFilter) { multiAreaInterfaceScope.YFilter = yf }

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "cost" { return "Cost" }
    if yname == "mtu-ignore" { return "MtuIgnore" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "passive" { return "Passive" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "packet-size" { return "PacketSize" }
    if yname == "database-filter" { return "DatabaseFilter" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "running" { return "Running" }
    if yname == "distribute-list" { return "DistributeList" }
    if yname == "authentication" { return "Authentication" }
    if yname == "neighbors" { return "Neighbors" }
    if yname == "dead-interval-minimal" { return "DeadIntervalMinimal" }
    if yname == "fast-reroute" { return "FastReroute" }
    if yname == "cost-fallback" { return "CostFallback" }
    return ""
}

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetSegmentPath() string {
    return "multi-area-interface-scope" + "[interface-name='" + fmt.Sprintf("%v", multiAreaInterfaceScope.InterfaceName) + "']"
}

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "distribute-list" {
        return &multiAreaInterfaceScope.DistributeList
    }
    if childYangName == "authentication" {
        return &multiAreaInterfaceScope.Authentication
    }
    if childYangName == "neighbors" {
        return &multiAreaInterfaceScope.Neighbors
    }
    if childYangName == "dead-interval-minimal" {
        return &multiAreaInterfaceScope.DeadIntervalMinimal
    }
    if childYangName == "fast-reroute" {
        return &multiAreaInterfaceScope.FastReroute
    }
    if childYangName == "cost-fallback" {
        return &multiAreaInterfaceScope.CostFallback
    }
    return nil
}

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["distribute-list"] = &multiAreaInterfaceScope.DistributeList
    children["authentication"] = &multiAreaInterfaceScope.Authentication
    children["neighbors"] = &multiAreaInterfaceScope.Neighbors
    children["dead-interval-minimal"] = &multiAreaInterfaceScope.DeadIntervalMinimal
    children["fast-reroute"] = &multiAreaInterfaceScope.FastReroute
    children["cost-fallback"] = &multiAreaInterfaceScope.CostFallback
    return children
}

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = multiAreaInterfaceScope.InterfaceName
    leafs["cost"] = multiAreaInterfaceScope.Cost
    leafs["mtu-ignore"] = multiAreaInterfaceScope.MtuIgnore
    leafs["hello-interval"] = multiAreaInterfaceScope.HelloInterval
    leafs["passive"] = multiAreaInterfaceScope.Passive
    leafs["transmit-delay"] = multiAreaInterfaceScope.TransmitDelay
    leafs["packet-size"] = multiAreaInterfaceScope.PacketSize
    leafs["database-filter"] = multiAreaInterfaceScope.DatabaseFilter
    leafs["retransmit-interval"] = multiAreaInterfaceScope.RetransmitInterval
    leafs["running"] = multiAreaInterfaceScope.Running
    return leafs
}

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetBundleName() string { return "cisco_ios_xr" }

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetYangName() string { return "multi-area-interface-scope" }

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) SetParent(parent types.Entity) { multiAreaInterfaceScope.parent = parent }

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetParent() types.Entity { return multiAreaInterfaceScope.parent }

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetParentYangName() string { return "multi-area-interface-scopes" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList
// Filter networks intalled to RIB (disable as ACL
// name means filtering is disabled)
// This type is a presence type.
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Access Control List name. The type is string.
    AccessListName interface{}

    // Route Policy name. The type is string.
    RoutePolicyName interface{}
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetFilter() yfilter.YFilter { return distributeList.YFilter }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) SetFilter(yf yfilter.YFilter) { distributeList.YFilter = yf }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetGoName(yname string) string {
    if yname == "access-list-name" { return "AccessListName" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetSegmentPath() string {
    return "distribute-list"
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["access-list-name"] = distributeList.AccessListName
    leafs["route-policy-name"] = distributeList.RoutePolicyName
    return leafs
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetBundleName() string { return "cisco_ios_xr" }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetYangName() string { return "distribute-list" }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) SetParent(parent types.Entity) { distributeList.parent = parent }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetParent() types.Entity { return distributeList.parent }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetParentYangName() string { return "multi-area-interface-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication
// Authentication
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // (!.+)|([^!].+).
    Key interface{}

    // Authentication type.
    Type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetGoName(yname string) string {
    if yname == "key" { return "Key" }
    if yname == "type" { return "Type" }
    if yname == "message-digest-keies" { return "MessageDigestKeies" }
    return ""
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "type" {
        return &authentication.Type
    }
    if childYangName == "message-digest-keies" {
        return &authentication.MessageDigestKeies
    }
    return nil
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["type"] = &authentication.Type
    children["message-digest-keies"] = &authentication.MessageDigestKeies
    return children
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key"] = authentication.Key
    return leafs
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetParentYangName() string { return "multi-area-interface-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetGoName(yname string) string {
    if yname == "authen-type" { return "AuthenType" }
    if yname == "keychain-authen-type" { return "KeychainAuthenType" }
    if yname == "keychain-name" { return "KeychainName" }
    return ""
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetSegmentPath() string {
    return "type"
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["authen-type"] = self.AuthenType
    leafs["keychain-authen-type"] = self.KeychainAuthenType
    leafs["keychain-name"] = self.KeychainName
    return leafs
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetYangName() string { return "type" }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetParent() types.Entity { return self.parent }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetFilter() yfilter.YFilter { return messageDigestKeies.YFilter }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) SetFilter(yf yfilter.YFilter) { messageDigestKeies.YFilter = yf }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetGoName(yname string) string {
    if yname == "message-digest-key" { return "MessageDigestKey" }
    return ""
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetSegmentPath() string {
    return "message-digest-keies"
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "message-digest-key" {
        for _, c := range messageDigestKeies.MessageDigestKey {
            if messageDigestKeies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey{}
        messageDigestKeies.MessageDigestKey = append(messageDigestKeies.MessageDigestKey, child)
        return &messageDigestKeies.MessageDigestKey[len(messageDigestKeies.MessageDigestKey)-1]
    }
    return nil
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range messageDigestKeies.MessageDigestKey {
        children[messageDigestKeies.MessageDigestKey[i].GetSegmentPath()] = &messageDigestKeies.MessageDigestKey[i]
    }
    return children
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetYangName() string { return "message-digest-keies" }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) SetParent(parent types.Entity) { messageDigestKeies.parent = parent }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetParent() types.Entity { return messageDigestKeies.parent }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: (!.+)|([^!].+). This attribute
    // is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetFilter() yfilter.YFilter { return messageDigestKey.YFilter }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) SetFilter(yf yfilter.YFilter) { messageDigestKey.YFilter = yf }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetGoName(yname string) string {
    if yname == "key-id" { return "KeyId" }
    if yname == "password" { return "Password" }
    return ""
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetSegmentPath() string {
    return "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key-id"] = messageDigestKey.KeyId
    leafs["password"] = messageDigestKey.Password
    return leafs
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetYangName() string { return "message-digest-key" }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) SetParent(parent types.Entity) { messageDigestKey.parent = parent }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParent() types.Entity { return messageDigestKey.parent }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParentYangName() string { return "message-digest-keies" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors
// Neighbor router configuration information
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router configuration information for a particular neighbor. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor.
    Neighbor []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor
}

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetFilter() yfilter.YFilter { return neighbors.YFilter }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) SetFilter(yf yfilter.YFilter) { neighbors.YFilter = yf }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetGoName(yname string) string {
    if yname == "neighbor" { return "Neighbor" }
    return ""
}

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetSegmentPath() string {
    return "neighbors"
}

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor" {
        for _, c := range neighbors.Neighbor {
            if neighbors.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor{}
        neighbors.Neighbor = append(neighbors.Neighbor, child)
        return &neighbors.Neighbor[len(neighbors.Neighbor)-1]
    }
    return nil
}

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range neighbors.Neighbor {
        children[neighbors.Neighbor[i].GetSegmentPath()] = &neighbors.Neighbor[i]
    }
    return children
}

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetBundleName() string { return "cisco_ios_xr" }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetYangName() string { return "neighbors" }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) SetParent(parent types.Entity) { neighbors.parent = parent }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetParent() types.Entity { return neighbors.parent }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetParentYangName() string { return "multi-area-interface-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor
// Router configuration information for a
// particular neighbor
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Neighbor IP address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // OSPF priority of non-broadcast neighbor. The type is interface{} with
    // range: 0..255. The default value is 0.
    Priority interface{}

    // OSPF dead router poll-interval in seconds. The type is interface{} with
    // range: 0..65535. Units are second. The default value is 40.
    PollInterval interface{}

    // OSPF cost for point-to-multipoint neighbor. The type is interface{} with
    // range: 1..65535. The default value is 1.
    Cost interface{}

    // Database filter: Filter OSPF LSA during synchronization and flooding for
    // point-to-multipoint. The type is bool. The default value is false.
    DatabaseFilter interface{}
}

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetFilter() yfilter.YFilter { return neighbor.YFilter }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) SetFilter(yf yfilter.YFilter) { neighbor.YFilter = yf }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetGoName(yname string) string {
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "priority" { return "Priority" }
    if yname == "poll-interval" { return "PollInterval" }
    if yname == "cost" { return "Cost" }
    if yname == "database-filter" { return "DatabaseFilter" }
    return ""
}

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetSegmentPath() string {
    return "neighbor" + "[neighbor-address='" + fmt.Sprintf("%v", neighbor.NeighborAddress) + "']"
}

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-address"] = neighbor.NeighborAddress
    leafs["priority"] = neighbor.Priority
    leafs["poll-interval"] = neighbor.PollInterval
    leafs["cost"] = neighbor.Cost
    leafs["database-filter"] = neighbor.DatabaseFilter
    return leafs
}

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetBundleName() string { return "cisco_ios_xr" }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetYangName() string { return "neighbor" }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) SetParent(parent types.Entity) { neighbor.parent = parent }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetParent() types.Entity { return neighbor.parent }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetParentYangName() string { return "neighbors" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetFilter() yfilter.YFilter { return deadIntervalMinimal.YFilter }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) SetFilter(yf yfilter.YFilter) { deadIntervalMinimal.YFilter = yf }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "multiplier" { return "Multiplier" }
    return ""
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetSegmentPath() string {
    return "dead-interval-minimal"
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = deadIntervalMinimal.Interval
    leafs["multiplier"] = deadIntervalMinimal.Multiplier
    return leafs
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetBundleName() string { return "cisco_ios_xr" }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetYangName() string { return "dead-interval-minimal" }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) SetParent(parent types.Entity) { deadIntervalMinimal.parent = parent }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetParent() types.Entity { return deadIntervalMinimal.parent }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetParentYangName() string { return "multi-area-interface-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute
// Fast-reroute configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // OspfFastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink

    // Fast-reroute per-prefix global configuration.
    PerPrefix Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetGoName(yname string) string {
    if yname == "fast-reroute-enable" { return "FastRerouteEnable" }
    if yname == "per-link" { return "PerLink" }
    if yname == "per-prefix" { return "PerPrefix" }
    return ""
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "per-link" {
        return &fastReroute.PerLink
    }
    if childYangName == "per-prefix" {
        return &fastReroute.PerPrefix
    }
    return nil
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["per-link"] = &fastReroute.PerLink
    children["per-prefix"] = &fastReroute.PerPrefix
    return children
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-enable"] = fastReroute.FastRerouteEnable
    return leafs
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetParentYangName() string { return "multi-area-interface-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetFilter() yfilter.YFilter { return perLink.YFilter }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) SetFilter(yf yfilter.YFilter) { perLink.YFilter = yf }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetSegmentPath() string {
    return "per-link"
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perLink.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perLink.ExcludeInterfaces
    }
    return nil
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perLink.CandidateInterfaces
    children["exclude-interfaces"] = &perLink.ExcludeInterfaces
    return children
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perLink.FastRerouteUseCandidateOnly
    return leafs
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetBundleName() string { return "cisco_ios_xr" }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetYangName() string { return "per-link" }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) SetParent(parent types.Entity) { perLink.parent = parent }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetParent() types.Entity { return perLink.parent }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetParentYangName() string { return "per-link" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetParentYangName() string { return "per-link" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix
// Fast-reroute per-prefix global configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Topology Independet LFA configuration. The type is bool.
    TopologyIndependentLfa interface{}

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Remote LFA configuration.
    RemoteLfa Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa

    // Fast-reroute tiebreakers configurations.
    Tiebreakers Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetFilter() yfilter.YFilter { return perPrefix.YFilter }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) SetFilter(yf yfilter.YFilter) { perPrefix.YFilter = yf }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetGoName(yname string) string {
    if yname == "topology-independent-lfa" { return "TopologyIndependentLfa" }
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "remote-lfa" { return "RemoteLfa" }
    if yname == "tiebreakers" { return "Tiebreakers" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetSegmentPath() string {
    return "per-prefix"
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-lfa" {
        return &perPrefix.RemoteLfa
    }
    if childYangName == "tiebreakers" {
        return &perPrefix.Tiebreakers
    }
    if childYangName == "candidate-interfaces" {
        return &perPrefix.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perPrefix.ExcludeInterfaces
    }
    return nil
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["remote-lfa"] = &perPrefix.RemoteLfa
    children["tiebreakers"] = &perPrefix.Tiebreakers
    children["candidate-interfaces"] = &perPrefix.CandidateInterfaces
    children["exclude-interfaces"] = &perPrefix.ExcludeInterfaces
    return children
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["topology-independent-lfa"] = perPrefix.TopologyIndependentLfa
    leafs["fast-reroute-use-candidate-only"] = perPrefix.FastRerouteUseCandidateOnly
    return leafs
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetYangName() string { return "per-prefix" }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) SetParent(parent types.Entity) { perPrefix.parent = parent }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetParent() types.Entity { return perPrefix.parent }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa
// Remote LFA configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable remote LFA computation. The type is OspfFrrRlfaTunnel.
    Tunnel interface{}

    // Maximum path cost to remote LFA. The type is interface{} with range:
    // 1..4294967295.
    MaximumCost interface{}
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetFilter() yfilter.YFilter { return remoteLfa.YFilter }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) SetFilter(yf yfilter.YFilter) { remoteLfa.YFilter = yf }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetGoName(yname string) string {
    if yname == "tunnel" { return "Tunnel" }
    if yname == "maximum-cost" { return "MaximumCost" }
    return ""
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetSegmentPath() string {
    return "remote-lfa"
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel"] = remoteLfa.Tunnel
    leafs["maximum-cost"] = remoteLfa.MaximumCost
    return leafs
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetBundleName() string { return "cisco_ios_xr" }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetYangName() string { return "remote-lfa" }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) SetParent(parent types.Entity) { remoteLfa.parent = parent }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetParent() types.Entity { return remoteLfa.parent }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers
// Fast-reroute tiebreakers configurations
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fast-reroute tiebreakers configuration. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker.
    Tiebreaker []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetFilter() yfilter.YFilter { return tiebreakers.YFilter }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) SetFilter(yf yfilter.YFilter) { tiebreakers.YFilter = yf }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetGoName(yname string) string {
    if yname == "tiebreaker" { return "Tiebreaker" }
    return ""
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetSegmentPath() string {
    return "tiebreakers"
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tiebreaker" {
        for _, c := range tiebreakers.Tiebreaker {
            if tiebreakers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker{}
        tiebreakers.Tiebreaker = append(tiebreakers.Tiebreaker, child)
        return &tiebreakers.Tiebreaker[len(tiebreakers.Tiebreaker)-1]
    }
    return nil
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range tiebreakers.Tiebreaker {
        children[tiebreakers.Tiebreaker[i].GetSegmentPath()] = &tiebreakers.Tiebreaker[i]
    }
    return children
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetYangName() string { return "tiebreakers" }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) SetParent(parent types.Entity) { tiebreakers.parent = parent }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetParent() types.Entity { return tiebreakers.parent }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
// Fast-reroute tiebreakers configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Tiebreaker type. The type is
    // OspfFastRerouteTiebreakersIntf.
    TiebreakerType interface{}

    // Index value for a tiebreaker, 0 to disable. The type is interface{} with
    // range: 0..255. This attribute is mandatory.
    TiebreakerIndex interface{}
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetFilter() yfilter.YFilter { return tiebreaker.YFilter }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetFilter(yf yfilter.YFilter) { tiebreaker.YFilter = yf }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetGoName(yname string) string {
    if yname == "tiebreaker-type" { return "TiebreakerType" }
    if yname == "tiebreaker-index" { return "TiebreakerIndex" }
    return ""
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetSegmentPath() string {
    return "tiebreaker" + "[tiebreaker-type='" + fmt.Sprintf("%v", tiebreaker.TiebreakerType) + "']"
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tiebreaker-type"] = tiebreaker.TiebreakerType
    leafs["tiebreaker-index"] = tiebreaker.TiebreakerIndex
    return leafs
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetYangName() string { return "tiebreaker" }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetParent(parent types.Entity) { tiebreaker.parent = parent }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParent() types.Entity { return tiebreaker.parent }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParentYangName() string { return "tiebreakers" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback
// Interface fallback cost
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fallback cost of link. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Bandwidth threshold. The type is interface{} with range: 1..4294967.
    Threshold interface{}
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetFilter() yfilter.YFilter { return costFallback.YFilter }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) SetFilter(yf yfilter.YFilter) { costFallback.YFilter = yf }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetGoName(yname string) string {
    if yname == "cost" { return "Cost" }
    if yname == "threshold" { return "Threshold" }
    return ""
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetSegmentPath() string {
    return "cost-fallback"
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cost"] = costFallback.Cost
    leafs["threshold"] = costFallback.Threshold
    return leafs
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetBundleName() string { return "cisco_ios_xr" }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetYangName() string { return "cost-fallback" }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) SetParent(parent types.Entity) { costFallback.parent = parent }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetParent() types.Entity { return costFallback.parent }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetParentYangName() string { return "multi-area-interface-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges
// Summarize routes matching address/mask (border
// routers only)
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Ordering index. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange.
    AreaRange []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange
}

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges) GetFilter() yfilter.YFilter { return areaRanges.YFilter }

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges) SetFilter(yf yfilter.YFilter) { areaRanges.YFilter = yf }

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges) GetGoName(yname string) string {
    if yname == "area-range" { return "AreaRange" }
    return ""
}

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges) GetSegmentPath() string {
    return "area-ranges"
}

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "area-range" {
        for _, c := range areaRanges.AreaRange {
            if areaRanges.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange{}
        areaRanges.AreaRange = append(areaRanges.AreaRange, child)
        return &areaRanges.AreaRange[len(areaRanges.AreaRange)-1]
    }
    return nil
}

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range areaRanges.AreaRange {
        children[areaRanges.AreaRange[i].GetSegmentPath()] = &areaRanges.AreaRange[i]
    }
    return children
}

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges) GetBundleName() string { return "cisco_ios_xr" }

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges) GetYangName() string { return "area-ranges" }

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges) SetParent(parent types.Entity) { areaRanges.parent = parent }

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges) GetParent() types.Entity { return areaRanges.parent }

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges) GetParentYangName() string { return "area-address" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange
// Ordering index
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IP address to match. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // This attribute is a key. IP netmask for address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Netmask interface{}

    // Do not advertise this range. The type is bool.
    NotAdvertise interface{}
}

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) GetFilter() yfilter.YFilter { return areaRange.YFilter }

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) SetFilter(yf yfilter.YFilter) { areaRange.YFilter = yf }

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "netmask" { return "Netmask" }
    if yname == "not-advertise" { return "NotAdvertise" }
    return ""
}

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) GetSegmentPath() string {
    return "area-range" + "[address='" + fmt.Sprintf("%v", areaRange.Address) + "']" + "[netmask='" + fmt.Sprintf("%v", areaRange.Netmask) + "']"
}

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = areaRange.Address
    leafs["netmask"] = areaRange.Netmask
    leafs["not-advertise"] = areaRange.NotAdvertise
    return leafs
}

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) GetBundleName() string { return "cisco_ios_xr" }

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) GetYangName() string { return "area-range" }

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) SetParent(parent types.Entity) { areaRange.parent = parent }

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) GetParent() types.Entity { return areaRange.parent }

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) GetParentYangName() string { return "area-ranges" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa
// Specify area as a NSSA area
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // No redistribution into this NSSA area. The type is bool. The default value
    // is false.
    NoRedistribution interface{}

    // Originate Type 7 default into NSSA area. The type is bool. The default
    // value is false.
    DefaultInfoOriginate interface{}

    // Do not send summary LSA into NSSA. The type is bool. The default value is
    // false.
    NoSummary interface{}

    // OSPF default metric. The type is interface{} with range: 1..16777214.
    NssaDefMetric interface{}

    // OSPF External metric type. The type is OspfLinkStateMetric. The default
    // value is type2.
    MetricType interface{}
}

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa) GetFilter() yfilter.YFilter { return nssa.YFilter }

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa) SetFilter(yf yfilter.YFilter) { nssa.YFilter = yf }

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa) GetGoName(yname string) string {
    if yname == "no-redistribution" { return "NoRedistribution" }
    if yname == "default-info-originate" { return "DefaultInfoOriginate" }
    if yname == "no-summary" { return "NoSummary" }
    if yname == "nssa-def-metric" { return "NssaDefMetric" }
    if yname == "metric-type" { return "MetricType" }
    return ""
}

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa) GetSegmentPath() string {
    return "nssa"
}

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["no-redistribution"] = nssa.NoRedistribution
    leafs["default-info-originate"] = nssa.DefaultInfoOriginate
    leafs["no-summary"] = nssa.NoSummary
    leafs["nssa-def-metric"] = nssa.NssaDefMetric
    leafs["metric-type"] = nssa.MetricType
    return leafs
}

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa) GetBundleName() string { return "cisco_ios_xr" }

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa) GetYangName() string { return "nssa" }

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa) SetParent(parent types.Entity) { nssa.parent = parent }

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa) GetParent() types.Entity { return nssa.parent }

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa) GetParentYangName() string { return "area-address" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId
// Configuration for a particular area
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Area ID if in integer format. The type is
    // interface{} with range: 0..4294967295.
    AreaId interface{}

    // Configure a route policy for inbound type-3 lsa filtering. The type is
    // string.
    RoutePolicyIn interface{}

    // Set the summary default-cost of a NSSA/stub area. The type is interface{}
    // with range: 1..16777215. The default value is 1.
    DefaultCost interface{}

    // Configure a route policy for outbound type-3 lsa filtering. The type is
    // string.
    RoutePolicyOut interface{}

    // Specify the area as a stub area (send summary LSA stub area). The type is
    // bool.
    Stub interface{}

    // Configure an OSPF area to run MPLS Traffic Engineering. The type is
    // interface{}.
    MplsTrafficEng interface{}

    // Enable/Disable an OSPF area to advertise intra-area prefixes out of this
    // area as external. The type is bool.
    ExternalOut interface{}

    // Enable/Disable an OSPF area to advertise external prefixes into this area
    // as summary. The type is bool.
    SummaryIn interface{}

    // segment-routing configuration Applicable only in Default VRF. The type is
    // OspfSegmentRouting.
    SegmentRouting interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Virtual Link scope configurations.
    VirtualLinkScopes Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes

    // Sham Link scope configurations.
    ShamLinkScopes Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes

    // Area scope configuration.
    AreaScope Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope

    // Name scope configurations.
    NameScopes Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes

    // Multi Area Interface scope configurations.
    MultiAreaInterfaceScopes Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes

    // Summarize routes matching address/mask (border routers only).
    AreaRanges Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges

    // Specify area as a NSSA area.
    Nssa Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa
}

func (areaAreaId *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId) GetFilter() yfilter.YFilter { return areaAreaId.YFilter }

func (areaAreaId *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId) SetFilter(yf yfilter.YFilter) { areaAreaId.YFilter = yf }

func (areaAreaId *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId) GetGoName(yname string) string {
    if yname == "area-id" { return "AreaId" }
    if yname == "route-policy-in" { return "RoutePolicyIn" }
    if yname == "default-cost" { return "DefaultCost" }
    if yname == "route-policy-out" { return "RoutePolicyOut" }
    if yname == "stub" { return "Stub" }
    if yname == "mpls-traffic-eng" { return "MplsTrafficEng" }
    if yname == "external-out" { return "ExternalOut" }
    if yname == "summary-in" { return "SummaryIn" }
    if yname == "segment-routing" { return "SegmentRouting" }
    if yname == "running" { return "Running" }
    if yname == "virtual-link-scopes" { return "VirtualLinkScopes" }
    if yname == "sham-link-scopes" { return "ShamLinkScopes" }
    if yname == "area-scope" { return "AreaScope" }
    if yname == "name-scopes" { return "NameScopes" }
    if yname == "multi-area-interface-scopes" { return "MultiAreaInterfaceScopes" }
    if yname == "area-ranges" { return "AreaRanges" }
    if yname == "nssa" { return "Nssa" }
    return ""
}

func (areaAreaId *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId) GetSegmentPath() string {
    return "area-area-id" + "[area-id='" + fmt.Sprintf("%v", areaAreaId.AreaId) + "']"
}

func (areaAreaId *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "virtual-link-scopes" {
        return &areaAreaId.VirtualLinkScopes
    }
    if childYangName == "sham-link-scopes" {
        return &areaAreaId.ShamLinkScopes
    }
    if childYangName == "area-scope" {
        return &areaAreaId.AreaScope
    }
    if childYangName == "name-scopes" {
        return &areaAreaId.NameScopes
    }
    if childYangName == "multi-area-interface-scopes" {
        return &areaAreaId.MultiAreaInterfaceScopes
    }
    if childYangName == "area-ranges" {
        return &areaAreaId.AreaRanges
    }
    if childYangName == "nssa" {
        return &areaAreaId.Nssa
    }
    return nil
}

func (areaAreaId *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["virtual-link-scopes"] = &areaAreaId.VirtualLinkScopes
    children["sham-link-scopes"] = &areaAreaId.ShamLinkScopes
    children["area-scope"] = &areaAreaId.AreaScope
    children["name-scopes"] = &areaAreaId.NameScopes
    children["multi-area-interface-scopes"] = &areaAreaId.MultiAreaInterfaceScopes
    children["area-ranges"] = &areaAreaId.AreaRanges
    children["nssa"] = &areaAreaId.Nssa
    return children
}

func (areaAreaId *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["area-id"] = areaAreaId.AreaId
    leafs["route-policy-in"] = areaAreaId.RoutePolicyIn
    leafs["default-cost"] = areaAreaId.DefaultCost
    leafs["route-policy-out"] = areaAreaId.RoutePolicyOut
    leafs["stub"] = areaAreaId.Stub
    leafs["mpls-traffic-eng"] = areaAreaId.MplsTrafficEng
    leafs["external-out"] = areaAreaId.ExternalOut
    leafs["summary-in"] = areaAreaId.SummaryIn
    leafs["segment-routing"] = areaAreaId.SegmentRouting
    leafs["running"] = areaAreaId.Running
    return leafs
}

func (areaAreaId *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId) GetBundleName() string { return "cisco_ios_xr" }

func (areaAreaId *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId) GetYangName() string { return "area-area-id" }

func (areaAreaId *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaAreaId *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaAreaId *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaAreaId *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId) SetParent(parent types.Entity) { areaAreaId.parent = parent }

func (areaAreaId *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId) GetParent() types.Entity { return areaAreaId.parent }

func (areaAreaId *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId) GetParentYangName() string { return "area-addresses" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes
// Virtual Link scope configurations
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Virtual Link configuration. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope.
    VirtualLinkScope []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope
}

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) GetFilter() yfilter.YFilter { return virtualLinkScopes.YFilter }

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) SetFilter(yf yfilter.YFilter) { virtualLinkScopes.YFilter = yf }

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) GetGoName(yname string) string {
    if yname == "virtual-link-scope" { return "VirtualLinkScope" }
    return ""
}

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) GetSegmentPath() string {
    return "virtual-link-scopes"
}

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "virtual-link-scope" {
        for _, c := range virtualLinkScopes.VirtualLinkScope {
            if virtualLinkScopes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope{}
        virtualLinkScopes.VirtualLinkScope = append(virtualLinkScopes.VirtualLinkScope, child)
        return &virtualLinkScopes.VirtualLinkScope[len(virtualLinkScopes.VirtualLinkScope)-1]
    }
    return nil
}

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range virtualLinkScopes.VirtualLinkScope {
        children[virtualLinkScopes.VirtualLinkScope[i].GetSegmentPath()] = &virtualLinkScopes.VirtualLinkScope[i]
    }
    return children
}

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) GetBundleName() string { return "cisco_ios_xr" }

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) GetYangName() string { return "virtual-link-scopes" }

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) SetParent(parent types.Entity) { virtualLinkScopes.parent = parent }

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) GetParent() types.Entity { return virtualLinkScopes.parent }

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) GetParentYangName() string { return "area-area-id" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope
// Virtual Link configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Router ID of virtual link neighbor. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Authentication.
    Authentication Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal
}

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) GetFilter() yfilter.YFilter { return virtualLinkScope.YFilter }

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) SetFilter(yf yfilter.YFilter) { virtualLinkScope.YFilter = yf }

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "running" { return "Running" }
    if yname == "authentication" { return "Authentication" }
    if yname == "dead-interval-minimal" { return "DeadIntervalMinimal" }
    return ""
}

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) GetSegmentPath() string {
    return "virtual-link-scope" + "[address='" + fmt.Sprintf("%v", virtualLinkScope.Address) + "']"
}

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "authentication" {
        return &virtualLinkScope.Authentication
    }
    if childYangName == "dead-interval-minimal" {
        return &virtualLinkScope.DeadIntervalMinimal
    }
    return nil
}

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["authentication"] = &virtualLinkScope.Authentication
    children["dead-interval-minimal"] = &virtualLinkScope.DeadIntervalMinimal
    return children
}

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = virtualLinkScope.Address
    leafs["hello-interval"] = virtualLinkScope.HelloInterval
    leafs["transmit-delay"] = virtualLinkScope.TransmitDelay
    leafs["retransmit-interval"] = virtualLinkScope.RetransmitInterval
    leafs["running"] = virtualLinkScope.Running
    return leafs
}

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) GetBundleName() string { return "cisco_ios_xr" }

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) GetYangName() string { return "virtual-link-scope" }

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) SetParent(parent types.Entity) { virtualLinkScope.parent = parent }

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) GetParent() types.Entity { return virtualLinkScope.parent }

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) GetParentYangName() string { return "virtual-link-scopes" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication
// Authentication
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // (!.+)|([^!].+).
    Key interface{}

    // Authentication type.
    Type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) GetGoName(yname string) string {
    if yname == "key" { return "Key" }
    if yname == "type" { return "Type" }
    if yname == "message-digest-keies" { return "MessageDigestKeies" }
    return ""
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "type" {
        return &authentication.Type
    }
    if childYangName == "message-digest-keies" {
        return &authentication.MessageDigestKeies
    }
    return nil
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["type"] = &authentication.Type
    children["message-digest-keies"] = &authentication.MessageDigestKeies
    return children
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key"] = authentication.Key
    return leafs
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) GetParentYangName() string { return "virtual-link-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetGoName(yname string) string {
    if yname == "authen-type" { return "AuthenType" }
    if yname == "keychain-authen-type" { return "KeychainAuthenType" }
    if yname == "keychain-name" { return "KeychainName" }
    return ""
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetSegmentPath() string {
    return "type"
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["authen-type"] = self.AuthenType
    leafs["keychain-authen-type"] = self.KeychainAuthenType
    leafs["keychain-name"] = self.KeychainName
    return leafs
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetYangName() string { return "type" }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetParent() types.Entity { return self.parent }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetFilter() yfilter.YFilter { return messageDigestKeies.YFilter }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) SetFilter(yf yfilter.YFilter) { messageDigestKeies.YFilter = yf }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetGoName(yname string) string {
    if yname == "message-digest-key" { return "MessageDigestKey" }
    return ""
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetSegmentPath() string {
    return "message-digest-keies"
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "message-digest-key" {
        for _, c := range messageDigestKeies.MessageDigestKey {
            if messageDigestKeies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey{}
        messageDigestKeies.MessageDigestKey = append(messageDigestKeies.MessageDigestKey, child)
        return &messageDigestKeies.MessageDigestKey[len(messageDigestKeies.MessageDigestKey)-1]
    }
    return nil
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range messageDigestKeies.MessageDigestKey {
        children[messageDigestKeies.MessageDigestKey[i].GetSegmentPath()] = &messageDigestKeies.MessageDigestKey[i]
    }
    return children
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetYangName() string { return "message-digest-keies" }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) SetParent(parent types.Entity) { messageDigestKeies.parent = parent }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetParent() types.Entity { return messageDigestKeies.parent }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: (!.+)|([^!].+). This attribute
    // is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetFilter() yfilter.YFilter { return messageDigestKey.YFilter }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) SetFilter(yf yfilter.YFilter) { messageDigestKey.YFilter = yf }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetGoName(yname string) string {
    if yname == "key-id" { return "KeyId" }
    if yname == "password" { return "Password" }
    return ""
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetSegmentPath() string {
    return "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key-id"] = messageDigestKey.KeyId
    leafs["password"] = messageDigestKey.Password
    return leafs
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetYangName() string { return "message-digest-key" }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) SetParent(parent types.Entity) { messageDigestKey.parent = parent }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParent() types.Entity { return messageDigestKey.parent }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParentYangName() string { return "message-digest-keies" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetFilter() yfilter.YFilter { return deadIntervalMinimal.YFilter }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) SetFilter(yf yfilter.YFilter) { deadIntervalMinimal.YFilter = yf }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "multiplier" { return "Multiplier" }
    return ""
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetSegmentPath() string {
    return "dead-interval-minimal"
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = deadIntervalMinimal.Interval
    leafs["multiplier"] = deadIntervalMinimal.Multiplier
    return leafs
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetBundleName() string { return "cisco_ios_xr" }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetYangName() string { return "dead-interval-minimal" }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) SetParent(parent types.Entity) { deadIntervalMinimal.parent = parent }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetParent() types.Entity { return deadIntervalMinimal.parent }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetParentYangName() string { return "virtual-link-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes
// Sham Link scope configurations
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sham Link configuration. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope.
    ShamLinkScope []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope
}

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes) GetFilter() yfilter.YFilter { return shamLinkScopes.YFilter }

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes) SetFilter(yf yfilter.YFilter) { shamLinkScopes.YFilter = yf }

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes) GetGoName(yname string) string {
    if yname == "sham-link-scope" { return "ShamLinkScope" }
    return ""
}

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes) GetSegmentPath() string {
    return "sham-link-scopes"
}

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sham-link-scope" {
        for _, c := range shamLinkScopes.ShamLinkScope {
            if shamLinkScopes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope{}
        shamLinkScopes.ShamLinkScope = append(shamLinkScopes.ShamLinkScope, child)
        return &shamLinkScopes.ShamLinkScope[len(shamLinkScopes.ShamLinkScope)-1]
    }
    return nil
}

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range shamLinkScopes.ShamLinkScope {
        children[shamLinkScopes.ShamLinkScope[i].GetSegmentPath()] = &shamLinkScopes.ShamLinkScope[i]
    }
    return children
}

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes) GetBundleName() string { return "cisco_ios_xr" }

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes) GetYangName() string { return "sham-link-scopes" }

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes) SetParent(parent types.Entity) { shamLinkScopes.parent = parent }

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes) GetParent() types.Entity { return shamLinkScopes.parent }

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes) GetParentYangName() string { return "area-area-id" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope
// Sham Link configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Address of the local sham-link endpoint. The type
    // is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // This attribute is a key. Address of the remote sham-link endpoint. The type
    // is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Address of the local sham-link endpoint. Enter an IP Address. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Source interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Authentication.
    Authentication Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal
}

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) GetFilter() yfilter.YFilter { return shamLinkScope.YFilter }

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) SetFilter(yf yfilter.YFilter) { shamLinkScope.YFilter = yf }

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "source" { return "Source" }
    if yname == "cost" { return "Cost" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "running" { return "Running" }
    if yname == "authentication" { return "Authentication" }
    if yname == "dead-interval-minimal" { return "DeadIntervalMinimal" }
    return ""
}

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) GetSegmentPath() string {
    return "sham-link-scope" + "[source-address='" + fmt.Sprintf("%v", shamLinkScope.SourceAddress) + "']" + "[destination-address='" + fmt.Sprintf("%v", shamLinkScope.DestinationAddress) + "']"
}

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "authentication" {
        return &shamLinkScope.Authentication
    }
    if childYangName == "dead-interval-minimal" {
        return &shamLinkScope.DeadIntervalMinimal
    }
    return nil
}

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["authentication"] = &shamLinkScope.Authentication
    children["dead-interval-minimal"] = &shamLinkScope.DeadIntervalMinimal
    return children
}

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = shamLinkScope.SourceAddress
    leafs["destination-address"] = shamLinkScope.DestinationAddress
    leafs["source"] = shamLinkScope.Source
    leafs["cost"] = shamLinkScope.Cost
    leafs["hello-interval"] = shamLinkScope.HelloInterval
    leafs["transmit-delay"] = shamLinkScope.TransmitDelay
    leafs["retransmit-interval"] = shamLinkScope.RetransmitInterval
    leafs["running"] = shamLinkScope.Running
    return leafs
}

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) GetBundleName() string { return "cisco_ios_xr" }

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) GetYangName() string { return "sham-link-scope" }

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) SetParent(parent types.Entity) { shamLinkScope.parent = parent }

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) GetParent() types.Entity { return shamLinkScope.parent }

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) GetParentYangName() string { return "sham-link-scopes" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication
// Authentication
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // (!.+)|([^!].+).
    Key interface{}

    // Authentication type.
    Type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) GetGoName(yname string) string {
    if yname == "key" { return "Key" }
    if yname == "type" { return "Type" }
    if yname == "message-digest-keies" { return "MessageDigestKeies" }
    return ""
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "type" {
        return &authentication.Type
    }
    if childYangName == "message-digest-keies" {
        return &authentication.MessageDigestKeies
    }
    return nil
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["type"] = &authentication.Type
    children["message-digest-keies"] = &authentication.MessageDigestKeies
    return children
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key"] = authentication.Key
    return leafs
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) GetParentYangName() string { return "sham-link-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetGoName(yname string) string {
    if yname == "authen-type" { return "AuthenType" }
    if yname == "keychain-authen-type" { return "KeychainAuthenType" }
    if yname == "keychain-name" { return "KeychainName" }
    return ""
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetSegmentPath() string {
    return "type"
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["authen-type"] = self.AuthenType
    leafs["keychain-authen-type"] = self.KeychainAuthenType
    leafs["keychain-name"] = self.KeychainName
    return leafs
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetYangName() string { return "type" }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetParent() types.Entity { return self.parent }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetFilter() yfilter.YFilter { return messageDigestKeies.YFilter }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) SetFilter(yf yfilter.YFilter) { messageDigestKeies.YFilter = yf }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetGoName(yname string) string {
    if yname == "message-digest-key" { return "MessageDigestKey" }
    return ""
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetSegmentPath() string {
    return "message-digest-keies"
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "message-digest-key" {
        for _, c := range messageDigestKeies.MessageDigestKey {
            if messageDigestKeies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey{}
        messageDigestKeies.MessageDigestKey = append(messageDigestKeies.MessageDigestKey, child)
        return &messageDigestKeies.MessageDigestKey[len(messageDigestKeies.MessageDigestKey)-1]
    }
    return nil
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range messageDigestKeies.MessageDigestKey {
        children[messageDigestKeies.MessageDigestKey[i].GetSegmentPath()] = &messageDigestKeies.MessageDigestKey[i]
    }
    return children
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetYangName() string { return "message-digest-keies" }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) SetParent(parent types.Entity) { messageDigestKeies.parent = parent }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetParent() types.Entity { return messageDigestKeies.parent }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: (!.+)|([^!].+). This attribute
    // is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetFilter() yfilter.YFilter { return messageDigestKey.YFilter }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) SetFilter(yf yfilter.YFilter) { messageDigestKey.YFilter = yf }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetGoName(yname string) string {
    if yname == "key-id" { return "KeyId" }
    if yname == "password" { return "Password" }
    return ""
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetSegmentPath() string {
    return "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key-id"] = messageDigestKey.KeyId
    leafs["password"] = messageDigestKey.Password
    return leafs
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetYangName() string { return "message-digest-key" }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) SetParent(parent types.Entity) { messageDigestKey.parent = parent }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParent() types.Entity { return messageDigestKey.parent }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParentYangName() string { return "message-digest-keies" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetFilter() yfilter.YFilter { return deadIntervalMinimal.YFilter }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) SetFilter(yf yfilter.YFilter) { deadIntervalMinimal.YFilter = yf }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "multiplier" { return "Multiplier" }
    return ""
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetSegmentPath() string {
    return "dead-interval-minimal"
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = deadIntervalMinimal.Interval
    leafs["multiplier"] = deadIntervalMinimal.Multiplier
    return leafs
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetBundleName() string { return "cisco_ios_xr" }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetYangName() string { return "dead-interval-minimal" }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) SetParent(parent types.Entity) { deadIntervalMinimal.parent = parent }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetParent() types.Entity { return deadIntervalMinimal.parent }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetParentYangName() string { return "sham-link-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope
// Area scope configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Enable/Disable prefix suppression for primary addresses. The type is bool.
    // The default value is false.
    PrefixSuppressionPrimary interface{}

    // Enable/Disable ignoring of MTU in DBD packets. The type is bool. The
    // default value is false.
    MtuIgnore interface{}

    // Enable/Disable MPLS LDP sync for igp-shortcuts. The type is bool.
    LdpSyncIgpShortcuts interface{}

    // Enable MPLS LDP Auto Config. The type is interface{}.
    LdpAutoConfig interface{}

    // Type of attached network. The type is OspfNetwork.
    NetworkType interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Enable/Disable advertising loopback as a stub network. The type is bool.
    // The default value is false.
    LoopbackStubNetwork interface{}

    // Enable/Disable prefix suppression for secondary addresses. The type is
    // bool. The default value is false.
    PrefixSuppressionSecondary interface{}

    // Enable/Disable OSPF demand circuit. The type is bool. The default value is
    // false.
    DemandCircuit interface{}

    // When enabled, prevent sending HELLO packets over link. The type is bool.
    // The default value is false.
    Passive interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Customize size of OSPF packets upto MTU. The type is interface{} with
    // range: 576..10000.
    PacketSize interface{}

    // Enable/Disable MPLS LDP sync. The type is bool.
    LdpSync interface{}

    // Filter OSPF LSA during synchronization and flooding. The type is bool. The
    // default value is false.
    DatabaseFilter interface{}

    // Enable/Disable registration for early interface down notifications. The
    // type is bool. The default value is false.
    LinkDownFastDetect interface{}

    // segment-routing forwarding configuration Applicableonly in Default VRF. The
    // type is OspfSegmentRoutingForwarding.
    SegmentRoutingForwarding interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Router priority for DR and BDR election. The type is interface{} with
    // range: 0..255. The default value is 1.
    Priority interface{}

    // Enable/Disable OSPF flood reduction. The type is bool. The default value is
    // false.
    FloodReduction interface{}

    // Filter networks intalled to RIB (disable as ACL name means filtering is
    // disabled).
    DistributeList Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList

    // BFD configuration.
    Bfd Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Bfd

    // Authentication.
    Authentication Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication

    // Container class for security related configuration parameters.
    Security Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal

    // Fast-reroute configuration.
    FastReroute Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute

    // Interface fallback cost.
    CostFallback Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback
}

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope) GetFilter() yfilter.YFilter { return areaScope.YFilter }

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope) SetFilter(yf yfilter.YFilter) { areaScope.YFilter = yf }

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope) GetGoName(yname string) string {
    if yname == "cost" { return "Cost" }
    if yname == "prefix-suppression-primary" { return "PrefixSuppressionPrimary" }
    if yname == "mtu-ignore" { return "MtuIgnore" }
    if yname == "ldp-sync-igp-shortcuts" { return "LdpSyncIgpShortcuts" }
    if yname == "ldp-auto-config" { return "LdpAutoConfig" }
    if yname == "network-type" { return "NetworkType" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "loopback-stub-network" { return "LoopbackStubNetwork" }
    if yname == "prefix-suppression-secondary" { return "PrefixSuppressionSecondary" }
    if yname == "demand-circuit" { return "DemandCircuit" }
    if yname == "passive" { return "Passive" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "packet-size" { return "PacketSize" }
    if yname == "ldp-sync" { return "LdpSync" }
    if yname == "database-filter" { return "DatabaseFilter" }
    if yname == "link-down-fast-detect" { return "LinkDownFastDetect" }
    if yname == "segment-routing-forwarding" { return "SegmentRoutingForwarding" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "priority" { return "Priority" }
    if yname == "flood-reduction" { return "FloodReduction" }
    if yname == "distribute-list" { return "DistributeList" }
    if yname == "bfd" { return "Bfd" }
    if yname == "authentication" { return "Authentication" }
    if yname == "security" { return "Security" }
    if yname == "dead-interval-minimal" { return "DeadIntervalMinimal" }
    if yname == "fast-reroute" { return "FastReroute" }
    if yname == "cost-fallback" { return "CostFallback" }
    return ""
}

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope) GetSegmentPath() string {
    return "area-scope"
}

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "distribute-list" {
        return &areaScope.DistributeList
    }
    if childYangName == "bfd" {
        return &areaScope.Bfd
    }
    if childYangName == "authentication" {
        return &areaScope.Authentication
    }
    if childYangName == "security" {
        return &areaScope.Security
    }
    if childYangName == "dead-interval-minimal" {
        return &areaScope.DeadIntervalMinimal
    }
    if childYangName == "fast-reroute" {
        return &areaScope.FastReroute
    }
    if childYangName == "cost-fallback" {
        return &areaScope.CostFallback
    }
    return nil
}

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["distribute-list"] = &areaScope.DistributeList
    children["bfd"] = &areaScope.Bfd
    children["authentication"] = &areaScope.Authentication
    children["security"] = &areaScope.Security
    children["dead-interval-minimal"] = &areaScope.DeadIntervalMinimal
    children["fast-reroute"] = &areaScope.FastReroute
    children["cost-fallback"] = &areaScope.CostFallback
    return children
}

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cost"] = areaScope.Cost
    leafs["prefix-suppression-primary"] = areaScope.PrefixSuppressionPrimary
    leafs["mtu-ignore"] = areaScope.MtuIgnore
    leafs["ldp-sync-igp-shortcuts"] = areaScope.LdpSyncIgpShortcuts
    leafs["ldp-auto-config"] = areaScope.LdpAutoConfig
    leafs["network-type"] = areaScope.NetworkType
    leafs["hello-interval"] = areaScope.HelloInterval
    leafs["loopback-stub-network"] = areaScope.LoopbackStubNetwork
    leafs["prefix-suppression-secondary"] = areaScope.PrefixSuppressionSecondary
    leafs["demand-circuit"] = areaScope.DemandCircuit
    leafs["passive"] = areaScope.Passive
    leafs["transmit-delay"] = areaScope.TransmitDelay
    leafs["packet-size"] = areaScope.PacketSize
    leafs["ldp-sync"] = areaScope.LdpSync
    leafs["database-filter"] = areaScope.DatabaseFilter
    leafs["link-down-fast-detect"] = areaScope.LinkDownFastDetect
    leafs["segment-routing-forwarding"] = areaScope.SegmentRoutingForwarding
    leafs["retransmit-interval"] = areaScope.RetransmitInterval
    leafs["priority"] = areaScope.Priority
    leafs["flood-reduction"] = areaScope.FloodReduction
    return leafs
}

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope) GetBundleName() string { return "cisco_ios_xr" }

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope) GetYangName() string { return "area-scope" }

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope) SetParent(parent types.Entity) { areaScope.parent = parent }

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope) GetParent() types.Entity { return areaScope.parent }

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope) GetParentYangName() string { return "area-area-id" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList
// Filter networks intalled to RIB (disable as ACL
// name means filtering is disabled)
// This type is a presence type.
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Access Control List name. The type is string.
    AccessListName interface{}

    // Route Policy name. The type is string.
    RoutePolicyName interface{}
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) GetFilter() yfilter.YFilter { return distributeList.YFilter }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) SetFilter(yf yfilter.YFilter) { distributeList.YFilter = yf }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) GetGoName(yname string) string {
    if yname == "access-list-name" { return "AccessListName" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) GetSegmentPath() string {
    return "distribute-list"
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["access-list-name"] = distributeList.AccessListName
    leafs["route-policy-name"] = distributeList.RoutePolicyName
    return leafs
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) GetBundleName() string { return "cisco_ios_xr" }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) GetYangName() string { return "distribute-list" }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) SetParent(parent types.Entity) { distributeList.parent = parent }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) GetParent() types.Entity { return distributeList.parent }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) GetParentYangName() string { return "area-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Bfd
// BFD configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Bfd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hello interval for BFD sessions created by OSPF. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    Interval interface{}

    // Detection multiplier for BFD sessions created by OSPF. The type is
    // interface{} with range: 2..50.
    DetectionMultiplier interface{}

    // use of Bidirectional Forwarding Detection. The type is BfdEnableMode.
    FastDetectMode interface{}
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) GetFilter() yfilter.YFilter { return bfd.YFilter }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) SetFilter(yf yfilter.YFilter) { bfd.YFilter = yf }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "fast-detect-mode" { return "FastDetectMode" }
    return ""
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) GetSegmentPath() string {
    return "bfd"
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = bfd.Interval
    leafs["detection-multiplier"] = bfd.DetectionMultiplier
    leafs["fast-detect-mode"] = bfd.FastDetectMode
    return leafs
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) GetBundleName() string { return "cisco_ios_xr" }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) GetYangName() string { return "bfd" }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) SetParent(parent types.Entity) { bfd.parent = parent }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) GetParent() types.Entity { return bfd.parent }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) GetParentYangName() string { return "area-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication
// Authentication
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // (!.+)|([^!].+).
    Key interface{}

    // Authentication type.
    Type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) GetGoName(yname string) string {
    if yname == "key" { return "Key" }
    if yname == "type" { return "Type" }
    if yname == "message-digest-keies" { return "MessageDigestKeies" }
    return ""
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "type" {
        return &authentication.Type
    }
    if childYangName == "message-digest-keies" {
        return &authentication.MessageDigestKeies
    }
    return nil
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["type"] = &authentication.Type
    children["message-digest-keies"] = &authentication.MessageDigestKeies
    return children
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key"] = authentication.Key
    return leafs
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) GetParentYangName() string { return "area-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) GetGoName(yname string) string {
    if yname == "authen-type" { return "AuthenType" }
    if yname == "keychain-authen-type" { return "KeychainAuthenType" }
    if yname == "keychain-name" { return "KeychainName" }
    return ""
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) GetSegmentPath() string {
    return "type"
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["authen-type"] = self.AuthenType
    leafs["keychain-authen-type"] = self.KeychainAuthenType
    leafs["keychain-name"] = self.KeychainName
    return leafs
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) GetYangName() string { return "type" }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) GetParent() types.Entity { return self.parent }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) GetFilter() yfilter.YFilter { return messageDigestKeies.YFilter }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) SetFilter(yf yfilter.YFilter) { messageDigestKeies.YFilter = yf }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) GetGoName(yname string) string {
    if yname == "message-digest-key" { return "MessageDigestKey" }
    return ""
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) GetSegmentPath() string {
    return "message-digest-keies"
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "message-digest-key" {
        for _, c := range messageDigestKeies.MessageDigestKey {
            if messageDigestKeies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey{}
        messageDigestKeies.MessageDigestKey = append(messageDigestKeies.MessageDigestKey, child)
        return &messageDigestKeies.MessageDigestKey[len(messageDigestKeies.MessageDigestKey)-1]
    }
    return nil
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range messageDigestKeies.MessageDigestKey {
        children[messageDigestKeies.MessageDigestKey[i].GetSegmentPath()] = &messageDigestKeies.MessageDigestKey[i]
    }
    return children
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) GetYangName() string { return "message-digest-keies" }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) SetParent(parent types.Entity) { messageDigestKeies.parent = parent }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) GetParent() types.Entity { return messageDigestKeies.parent }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: (!.+)|([^!].+). This attribute
    // is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetFilter() yfilter.YFilter { return messageDigestKey.YFilter }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) SetFilter(yf yfilter.YFilter) { messageDigestKey.YFilter = yf }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetGoName(yname string) string {
    if yname == "key-id" { return "KeyId" }
    if yname == "password" { return "Password" }
    return ""
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetSegmentPath() string {
    return "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key-id"] = messageDigestKey.KeyId
    leafs["password"] = messageDigestKey.Password
    return leafs
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetYangName() string { return "message-digest-key" }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) SetParent(parent types.Entity) { messageDigestKey.parent = parent }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParent() types.Entity { return messageDigestKey.parent }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParentYangName() string { return "message-digest-keies" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security
// Container class for security related
// configuration parameters
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enabling turns on TTL security.
    Ttl Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security) GetFilter() yfilter.YFilter { return security.YFilter }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security) SetFilter(yf yfilter.YFilter) { security.YFilter = yf }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security) GetGoName(yname string) string {
    if yname == "ttl" { return "Ttl" }
    return ""
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security) GetSegmentPath() string {
    return "security"
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ttl" {
        return &security.Ttl
    }
    return nil
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ttl"] = &security.Ttl
    return children
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security) GetBundleName() string { return "cisco_ios_xr" }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security) GetYangName() string { return "security" }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security) SetParent(parent types.Entity) { security.parent = parent }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security) GetParent() types.Entity { return security.parent }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security) GetParentYangName() string { return "area-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl
// Enabling turns on TTL security
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable TTL security. The type is bool.
    Enable interface{}

    // Hop count. The type is interface{} with range: 1..254.
    HopCount interface{}
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) GetFilter() yfilter.YFilter { return ttl.YFilter }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) SetFilter(yf yfilter.YFilter) { ttl.YFilter = yf }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "hop-count" { return "HopCount" }
    return ""
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) GetSegmentPath() string {
    return "ttl"
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = ttl.Enable
    leafs["hop-count"] = ttl.HopCount
    return leafs
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) GetBundleName() string { return "cisco_ios_xr" }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) GetYangName() string { return "ttl" }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) SetParent(parent types.Entity) { ttl.parent = parent }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) GetParent() types.Entity { return ttl.parent }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) GetParentYangName() string { return "security" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) GetFilter() yfilter.YFilter { return deadIntervalMinimal.YFilter }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) SetFilter(yf yfilter.YFilter) { deadIntervalMinimal.YFilter = yf }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "multiplier" { return "Multiplier" }
    return ""
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) GetSegmentPath() string {
    return "dead-interval-minimal"
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = deadIntervalMinimal.Interval
    leafs["multiplier"] = deadIntervalMinimal.Multiplier
    return leafs
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) GetBundleName() string { return "cisco_ios_xr" }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) GetYangName() string { return "dead-interval-minimal" }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) SetParent(parent types.Entity) { deadIntervalMinimal.parent = parent }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) GetParent() types.Entity { return deadIntervalMinimal.parent }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) GetParentYangName() string { return "area-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute
// Fast-reroute configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // OspfFastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink

    // Fast-reroute per-prefix global configuration.
    PerPrefix Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetGoName(yname string) string {
    if yname == "fast-reroute-enable" { return "FastRerouteEnable" }
    if yname == "per-link" { return "PerLink" }
    if yname == "per-prefix" { return "PerPrefix" }
    return ""
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "per-link" {
        return &fastReroute.PerLink
    }
    if childYangName == "per-prefix" {
        return &fastReroute.PerPrefix
    }
    return nil
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["per-link"] = &fastReroute.PerLink
    children["per-prefix"] = &fastReroute.PerPrefix
    return children
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-enable"] = fastReroute.FastRerouteEnable
    return leafs
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetParentYangName() string { return "area-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetFilter() yfilter.YFilter { return perLink.YFilter }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) SetFilter(yf yfilter.YFilter) { perLink.YFilter = yf }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetSegmentPath() string {
    return "per-link"
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perLink.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perLink.ExcludeInterfaces
    }
    return nil
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perLink.CandidateInterfaces
    children["exclude-interfaces"] = &perLink.ExcludeInterfaces
    return children
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perLink.FastRerouteUseCandidateOnly
    return leafs
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetBundleName() string { return "cisco_ios_xr" }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetYangName() string { return "per-link" }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) SetParent(parent types.Entity) { perLink.parent = parent }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetParent() types.Entity { return perLink.parent }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetParentYangName() string { return "per-link" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetParentYangName() string { return "per-link" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix
// Fast-reroute per-prefix global configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Topology Independet LFA configuration. The type is bool.
    TopologyIndependentLfa interface{}

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Remote LFA configuration.
    RemoteLfa Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa

    // Fast-reroute tiebreakers configurations.
    Tiebreakers Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetFilter() yfilter.YFilter { return perPrefix.YFilter }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) SetFilter(yf yfilter.YFilter) { perPrefix.YFilter = yf }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetGoName(yname string) string {
    if yname == "topology-independent-lfa" { return "TopologyIndependentLfa" }
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "remote-lfa" { return "RemoteLfa" }
    if yname == "tiebreakers" { return "Tiebreakers" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetSegmentPath() string {
    return "per-prefix"
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-lfa" {
        return &perPrefix.RemoteLfa
    }
    if childYangName == "tiebreakers" {
        return &perPrefix.Tiebreakers
    }
    if childYangName == "candidate-interfaces" {
        return &perPrefix.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perPrefix.ExcludeInterfaces
    }
    return nil
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["remote-lfa"] = &perPrefix.RemoteLfa
    children["tiebreakers"] = &perPrefix.Tiebreakers
    children["candidate-interfaces"] = &perPrefix.CandidateInterfaces
    children["exclude-interfaces"] = &perPrefix.ExcludeInterfaces
    return children
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["topology-independent-lfa"] = perPrefix.TopologyIndependentLfa
    leafs["fast-reroute-use-candidate-only"] = perPrefix.FastRerouteUseCandidateOnly
    return leafs
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetYangName() string { return "per-prefix" }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) SetParent(parent types.Entity) { perPrefix.parent = parent }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetParent() types.Entity { return perPrefix.parent }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa
// Remote LFA configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable remote LFA computation. The type is OspfFrrRlfaTunnel.
    Tunnel interface{}

    // Maximum path cost to remote LFA. The type is interface{} with range:
    // 1..4294967295.
    MaximumCost interface{}
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetFilter() yfilter.YFilter { return remoteLfa.YFilter }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) SetFilter(yf yfilter.YFilter) { remoteLfa.YFilter = yf }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetGoName(yname string) string {
    if yname == "tunnel" { return "Tunnel" }
    if yname == "maximum-cost" { return "MaximumCost" }
    return ""
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetSegmentPath() string {
    return "remote-lfa"
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel"] = remoteLfa.Tunnel
    leafs["maximum-cost"] = remoteLfa.MaximumCost
    return leafs
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetBundleName() string { return "cisco_ios_xr" }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetYangName() string { return "remote-lfa" }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) SetParent(parent types.Entity) { remoteLfa.parent = parent }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetParent() types.Entity { return remoteLfa.parent }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers
// Fast-reroute tiebreakers configurations
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fast-reroute tiebreakers configuration. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker.
    Tiebreaker []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetFilter() yfilter.YFilter { return tiebreakers.YFilter }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) SetFilter(yf yfilter.YFilter) { tiebreakers.YFilter = yf }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetGoName(yname string) string {
    if yname == "tiebreaker" { return "Tiebreaker" }
    return ""
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetSegmentPath() string {
    return "tiebreakers"
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tiebreaker" {
        for _, c := range tiebreakers.Tiebreaker {
            if tiebreakers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker{}
        tiebreakers.Tiebreaker = append(tiebreakers.Tiebreaker, child)
        return &tiebreakers.Tiebreaker[len(tiebreakers.Tiebreaker)-1]
    }
    return nil
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range tiebreakers.Tiebreaker {
        children[tiebreakers.Tiebreaker[i].GetSegmentPath()] = &tiebreakers.Tiebreaker[i]
    }
    return children
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetYangName() string { return "tiebreakers" }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) SetParent(parent types.Entity) { tiebreakers.parent = parent }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetParent() types.Entity { return tiebreakers.parent }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
// Fast-reroute tiebreakers configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Tiebreaker type. The type is
    // OspfFastRerouteTiebreakersIntf.
    TiebreakerType interface{}

    // Index value for a tiebreaker, 0 to disable. The type is interface{} with
    // range: 0..255. This attribute is mandatory.
    TiebreakerIndex interface{}
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetFilter() yfilter.YFilter { return tiebreaker.YFilter }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetFilter(yf yfilter.YFilter) { tiebreaker.YFilter = yf }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetGoName(yname string) string {
    if yname == "tiebreaker-type" { return "TiebreakerType" }
    if yname == "tiebreaker-index" { return "TiebreakerIndex" }
    return ""
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetSegmentPath() string {
    return "tiebreaker" + "[tiebreaker-type='" + fmt.Sprintf("%v", tiebreaker.TiebreakerType) + "']"
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tiebreaker-type"] = tiebreaker.TiebreakerType
    leafs["tiebreaker-index"] = tiebreaker.TiebreakerIndex
    return leafs
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetYangName() string { return "tiebreaker" }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetParent(parent types.Entity) { tiebreaker.parent = parent }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParent() types.Entity { return tiebreaker.parent }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParentYangName() string { return "tiebreakers" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback
// Interface fallback cost
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fallback cost of link. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Bandwidth threshold. The type is interface{} with range: 1..4294967.
    Threshold interface{}
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) GetFilter() yfilter.YFilter { return costFallback.YFilter }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) SetFilter(yf yfilter.YFilter) { costFallback.YFilter = yf }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) GetGoName(yname string) string {
    if yname == "cost" { return "Cost" }
    if yname == "threshold" { return "Threshold" }
    return ""
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) GetSegmentPath() string {
    return "cost-fallback"
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cost"] = costFallback.Cost
    leafs["threshold"] = costFallback.Threshold
    return leafs
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) GetBundleName() string { return "cisco_ios_xr" }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) GetYangName() string { return "cost-fallback" }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) SetParent(parent types.Entity) { costFallback.parent = parent }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) GetParent() types.Entity { return costFallback.parent }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) GetParentYangName() string { return "area-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes
// Name scope configurations
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name scope configuration. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope.
    NameScope []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope
}

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes) GetFilter() yfilter.YFilter { return nameScopes.YFilter }

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes) SetFilter(yf yfilter.YFilter) { nameScopes.YFilter = yf }

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes) GetGoName(yname string) string {
    if yname == "name-scope" { return "NameScope" }
    return ""
}

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes) GetSegmentPath() string {
    return "name-scopes"
}

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "name-scope" {
        for _, c := range nameScopes.NameScope {
            if nameScopes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope{}
        nameScopes.NameScope = append(nameScopes.NameScope, child)
        return &nameScopes.NameScope[len(nameScopes.NameScope)-1]
    }
    return nil
}

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nameScopes.NameScope {
        children[nameScopes.NameScope[i].GetSegmentPath()] = &nameScopes.NameScope[i]
    }
    return children
}

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes) GetBundleName() string { return "cisco_ios_xr" }

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes) GetYangName() string { return "name-scopes" }

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes) SetParent(parent types.Entity) { nameScopes.parent = parent }

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes) GetParent() types.Entity { return nameScopes.parent }

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes) GetParentYangName() string { return "area-area-id" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope
// Name scope configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of Interface to configure. The type is string
    // with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Enable/Disable prefix suppression for primary addresses. The type is bool.
    // The default value is false.
    PrefixSuppressionPrimary interface{}

    // Enable/Disable ignoring of MTU in DBD packets. The type is bool. The
    // default value is false.
    MtuIgnore interface{}

    // Enable/Disable MPLS LDP sync for igp-shortcuts. The type is bool.
    LdpSyncIgpShortcuts interface{}

    // Enable MPLS LDP Auto Config. The type is interface{}.
    LdpAutoConfig interface{}

    // Type of attached network. The type is OspfNetwork.
    NetworkType interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Enable/Disable advertising loopback as a stub network. The type is bool.
    // The default value is false.
    LoopbackStubNetwork interface{}

    // Enable/Disable prefix suppression for secondary addresses. The type is
    // bool. The default value is false.
    PrefixSuppressionSecondary interface{}

    // Enable/Disable OSPF demand circuit. The type is bool. The default value is
    // false.
    DemandCircuit interface{}

    // When enabled, prevent sending HELLO packets over link. The type is bool.
    // The default value is false.
    Passive interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Customize size of OSPF packets upto MTU. The type is interface{} with
    // range: 576..10000.
    PacketSize interface{}

    // Enable/Disable MPLS LDP sync. The type is bool.
    LdpSync interface{}

    // Filter OSPF LSA during synchronization and flooding. The type is bool. The
    // default value is false.
    DatabaseFilter interface{}

    // Enable/Disable registration for early interface down notifications. The
    // type is bool. The default value is false.
    LinkDownFastDetect interface{}

    // segment-routing forwarding configuration Applicableonly in Default VRF. The
    // type is OspfSegmentRoutingForwarding.
    SegmentRoutingForwarding interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Router priority for DR and BDR election. The type is interface{} with
    // range: 0..255. The default value is 1.
    Priority interface{}

    // Enable/Disable OSPF flood reduction. The type is bool. The default value is
    // false.
    FloodReduction interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Prefix SID.
    PrefixSid Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid

    // Strict Prefix SID.
    PrefixSidStrict Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict

    // Filter networks intalled to RIB (disable as ACL name means filtering is
    // disabled).
    DistributeList Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList

    // BFD configuration.
    Bfd Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd

    // Authentication.
    Authentication Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication

    // Container class for security related configuration parameters.
    Security Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security

    // Neighbor router configuration information.
    Neighbors Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal

    // Fast-reroute configuration.
    FastReroute Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute

    // Interface fallback cost.
    CostFallback Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback
}

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) GetFilter() yfilter.YFilter { return nameScope.YFilter }

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) SetFilter(yf yfilter.YFilter) { nameScope.YFilter = yf }

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "cost" { return "Cost" }
    if yname == "prefix-suppression-primary" { return "PrefixSuppressionPrimary" }
    if yname == "mtu-ignore" { return "MtuIgnore" }
    if yname == "ldp-sync-igp-shortcuts" { return "LdpSyncIgpShortcuts" }
    if yname == "ldp-auto-config" { return "LdpAutoConfig" }
    if yname == "network-type" { return "NetworkType" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "loopback-stub-network" { return "LoopbackStubNetwork" }
    if yname == "prefix-suppression-secondary" { return "PrefixSuppressionSecondary" }
    if yname == "demand-circuit" { return "DemandCircuit" }
    if yname == "passive" { return "Passive" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "packet-size" { return "PacketSize" }
    if yname == "ldp-sync" { return "LdpSync" }
    if yname == "database-filter" { return "DatabaseFilter" }
    if yname == "link-down-fast-detect" { return "LinkDownFastDetect" }
    if yname == "segment-routing-forwarding" { return "SegmentRoutingForwarding" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "priority" { return "Priority" }
    if yname == "flood-reduction" { return "FloodReduction" }
    if yname == "running" { return "Running" }
    if yname == "prefix-sid" { return "PrefixSid" }
    if yname == "prefix-sid-strict" { return "PrefixSidStrict" }
    if yname == "distribute-list" { return "DistributeList" }
    if yname == "bfd" { return "Bfd" }
    if yname == "authentication" { return "Authentication" }
    if yname == "security" { return "Security" }
    if yname == "neighbors" { return "Neighbors" }
    if yname == "dead-interval-minimal" { return "DeadIntervalMinimal" }
    if yname == "fast-reroute" { return "FastReroute" }
    if yname == "cost-fallback" { return "CostFallback" }
    return ""
}

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) GetSegmentPath() string {
    return "name-scope" + "[interface-name='" + fmt.Sprintf("%v", nameScope.InterfaceName) + "']"
}

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "prefix-sid" {
        return &nameScope.PrefixSid
    }
    if childYangName == "prefix-sid-strict" {
        return &nameScope.PrefixSidStrict
    }
    if childYangName == "distribute-list" {
        return &nameScope.DistributeList
    }
    if childYangName == "bfd" {
        return &nameScope.Bfd
    }
    if childYangName == "authentication" {
        return &nameScope.Authentication
    }
    if childYangName == "security" {
        return &nameScope.Security
    }
    if childYangName == "neighbors" {
        return &nameScope.Neighbors
    }
    if childYangName == "dead-interval-minimal" {
        return &nameScope.DeadIntervalMinimal
    }
    if childYangName == "fast-reroute" {
        return &nameScope.FastReroute
    }
    if childYangName == "cost-fallback" {
        return &nameScope.CostFallback
    }
    return nil
}

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["prefix-sid"] = &nameScope.PrefixSid
    children["prefix-sid-strict"] = &nameScope.PrefixSidStrict
    children["distribute-list"] = &nameScope.DistributeList
    children["bfd"] = &nameScope.Bfd
    children["authentication"] = &nameScope.Authentication
    children["security"] = &nameScope.Security
    children["neighbors"] = &nameScope.Neighbors
    children["dead-interval-minimal"] = &nameScope.DeadIntervalMinimal
    children["fast-reroute"] = &nameScope.FastReroute
    children["cost-fallback"] = &nameScope.CostFallback
    return children
}

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = nameScope.InterfaceName
    leafs["cost"] = nameScope.Cost
    leafs["prefix-suppression-primary"] = nameScope.PrefixSuppressionPrimary
    leafs["mtu-ignore"] = nameScope.MtuIgnore
    leafs["ldp-sync-igp-shortcuts"] = nameScope.LdpSyncIgpShortcuts
    leafs["ldp-auto-config"] = nameScope.LdpAutoConfig
    leafs["network-type"] = nameScope.NetworkType
    leafs["hello-interval"] = nameScope.HelloInterval
    leafs["loopback-stub-network"] = nameScope.LoopbackStubNetwork
    leafs["prefix-suppression-secondary"] = nameScope.PrefixSuppressionSecondary
    leafs["demand-circuit"] = nameScope.DemandCircuit
    leafs["passive"] = nameScope.Passive
    leafs["transmit-delay"] = nameScope.TransmitDelay
    leafs["packet-size"] = nameScope.PacketSize
    leafs["ldp-sync"] = nameScope.LdpSync
    leafs["database-filter"] = nameScope.DatabaseFilter
    leafs["link-down-fast-detect"] = nameScope.LinkDownFastDetect
    leafs["segment-routing-forwarding"] = nameScope.SegmentRoutingForwarding
    leafs["retransmit-interval"] = nameScope.RetransmitInterval
    leafs["priority"] = nameScope.Priority
    leafs["flood-reduction"] = nameScope.FloodReduction
    leafs["running"] = nameScope.Running
    return leafs
}

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) GetBundleName() string { return "cisco_ios_xr" }

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) GetYangName() string { return "name-scope" }

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) SetParent(parent types.Entity) { nameScope.parent = parent }

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) GetParent() types.Entity { return nameScope.parent }

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) GetParentYangName() string { return "name-scopes" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid
// Prefix SID
// This type is a presence type.
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SID value. The type is interface{} with range: 0..1048575. This attribute
    // is mandatory.
    SidValue interface{}

    // Force Penultimate Hop To Send Explicit-Null Label. The type is bool. The
    // default value is false.
    ExplicitNull interface{}

    // OSPF SID Type. The type is OspfSid. This attribute is mandatory.
    Type interface{}

    // Not a node SID. The type is bool. The default value is false.
    NFlagClear interface{}
}

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) GetFilter() yfilter.YFilter { return prefixSid.YFilter }

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) SetFilter(yf yfilter.YFilter) { prefixSid.YFilter = yf }

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) GetGoName(yname string) string {
    if yname == "sid-value" { return "SidValue" }
    if yname == "explicit-null" { return "ExplicitNull" }
    if yname == "type" { return "Type" }
    if yname == "n-flag-clear" { return "NFlagClear" }
    return ""
}

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) GetSegmentPath() string {
    return "prefix-sid"
}

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sid-value"] = prefixSid.SidValue
    leafs["explicit-null"] = prefixSid.ExplicitNull
    leafs["type"] = prefixSid.Type
    leafs["n-flag-clear"] = prefixSid.NFlagClear
    return leafs
}

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) GetBundleName() string { return "cisco_ios_xr" }

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) GetYangName() string { return "prefix-sid" }

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) SetParent(parent types.Entity) { prefixSid.parent = parent }

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) GetParent() types.Entity { return prefixSid.parent }

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict
// Strict Prefix SID
// This type is a presence type.
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SID value. The type is interface{} with range: 0..1048575. This attribute
    // is mandatory.
    SidValue interface{}

    // Force Penultimate Hop To Send Explicit-Null Label. The type is bool. The
    // default value is false.
    ExplicitNull interface{}

    // OSPF SID Type. The type is OspfSid. This attribute is mandatory.
    Type interface{}

    // Not a node SID. The type is bool. The default value is false.
    NFlagClear interface{}
}

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) GetFilter() yfilter.YFilter { return prefixSidStrict.YFilter }

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) SetFilter(yf yfilter.YFilter) { prefixSidStrict.YFilter = yf }

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) GetGoName(yname string) string {
    if yname == "sid-value" { return "SidValue" }
    if yname == "explicit-null" { return "ExplicitNull" }
    if yname == "type" { return "Type" }
    if yname == "n-flag-clear" { return "NFlagClear" }
    return ""
}

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) GetSegmentPath() string {
    return "prefix-sid-strict"
}

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sid-value"] = prefixSidStrict.SidValue
    leafs["explicit-null"] = prefixSidStrict.ExplicitNull
    leafs["type"] = prefixSidStrict.Type
    leafs["n-flag-clear"] = prefixSidStrict.NFlagClear
    return leafs
}

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) GetBundleName() string { return "cisco_ios_xr" }

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) GetYangName() string { return "prefix-sid-strict" }

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) SetParent(parent types.Entity) { prefixSidStrict.parent = parent }

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) GetParent() types.Entity { return prefixSidStrict.parent }

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList
// Filter networks intalled to RIB (disable as ACL
// name means filtering is disabled)
// This type is a presence type.
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Access Control List name. The type is string.
    AccessListName interface{}

    // Route Policy name. The type is string.
    RoutePolicyName interface{}
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) GetFilter() yfilter.YFilter { return distributeList.YFilter }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) SetFilter(yf yfilter.YFilter) { distributeList.YFilter = yf }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) GetGoName(yname string) string {
    if yname == "access-list-name" { return "AccessListName" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) GetSegmentPath() string {
    return "distribute-list"
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["access-list-name"] = distributeList.AccessListName
    leafs["route-policy-name"] = distributeList.RoutePolicyName
    return leafs
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) GetBundleName() string { return "cisco_ios_xr" }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) GetYangName() string { return "distribute-list" }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) SetParent(parent types.Entity) { distributeList.parent = parent }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) GetParent() types.Entity { return distributeList.parent }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd
// BFD configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hello interval for BFD sessions created by OSPF. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    Interval interface{}

    // Detection multiplier for BFD sessions created by OSPF. The type is
    // interface{} with range: 2..50.
    DetectionMultiplier interface{}

    // use of Bidirectional Forwarding Detection. The type is BfdEnableMode.
    FastDetectMode interface{}
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) GetFilter() yfilter.YFilter { return bfd.YFilter }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) SetFilter(yf yfilter.YFilter) { bfd.YFilter = yf }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "fast-detect-mode" { return "FastDetectMode" }
    return ""
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) GetSegmentPath() string {
    return "bfd"
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = bfd.Interval
    leafs["detection-multiplier"] = bfd.DetectionMultiplier
    leafs["fast-detect-mode"] = bfd.FastDetectMode
    return leafs
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) GetBundleName() string { return "cisco_ios_xr" }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) GetYangName() string { return "bfd" }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) SetParent(parent types.Entity) { bfd.parent = parent }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) GetParent() types.Entity { return bfd.parent }

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication
// Authentication
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // (!.+)|([^!].+).
    Key interface{}

    // Authentication type.
    Type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) GetGoName(yname string) string {
    if yname == "key" { return "Key" }
    if yname == "type" { return "Type" }
    if yname == "message-digest-keies" { return "MessageDigestKeies" }
    return ""
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "type" {
        return &authentication.Type
    }
    if childYangName == "message-digest-keies" {
        return &authentication.MessageDigestKeies
    }
    return nil
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["type"] = &authentication.Type
    children["message-digest-keies"] = &authentication.MessageDigestKeies
    return children
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key"] = authentication.Key
    return leafs
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) GetGoName(yname string) string {
    if yname == "authen-type" { return "AuthenType" }
    if yname == "keychain-authen-type" { return "KeychainAuthenType" }
    if yname == "keychain-name" { return "KeychainName" }
    return ""
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) GetSegmentPath() string {
    return "type"
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["authen-type"] = self.AuthenType
    leafs["keychain-authen-type"] = self.KeychainAuthenType
    leafs["keychain-name"] = self.KeychainName
    return leafs
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) GetYangName() string { return "type" }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) GetParent() types.Entity { return self.parent }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) GetFilter() yfilter.YFilter { return messageDigestKeies.YFilter }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) SetFilter(yf yfilter.YFilter) { messageDigestKeies.YFilter = yf }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) GetGoName(yname string) string {
    if yname == "message-digest-key" { return "MessageDigestKey" }
    return ""
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) GetSegmentPath() string {
    return "message-digest-keies"
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "message-digest-key" {
        for _, c := range messageDigestKeies.MessageDigestKey {
            if messageDigestKeies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey{}
        messageDigestKeies.MessageDigestKey = append(messageDigestKeies.MessageDigestKey, child)
        return &messageDigestKeies.MessageDigestKey[len(messageDigestKeies.MessageDigestKey)-1]
    }
    return nil
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range messageDigestKeies.MessageDigestKey {
        children[messageDigestKeies.MessageDigestKey[i].GetSegmentPath()] = &messageDigestKeies.MessageDigestKey[i]
    }
    return children
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) GetYangName() string { return "message-digest-keies" }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) SetParent(parent types.Entity) { messageDigestKeies.parent = parent }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) GetParent() types.Entity { return messageDigestKeies.parent }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: (!.+)|([^!].+). This attribute
    // is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetFilter() yfilter.YFilter { return messageDigestKey.YFilter }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) SetFilter(yf yfilter.YFilter) { messageDigestKey.YFilter = yf }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetGoName(yname string) string {
    if yname == "key-id" { return "KeyId" }
    if yname == "password" { return "Password" }
    return ""
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetSegmentPath() string {
    return "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key-id"] = messageDigestKey.KeyId
    leafs["password"] = messageDigestKey.Password
    return leafs
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetYangName() string { return "message-digest-key" }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) SetParent(parent types.Entity) { messageDigestKey.parent = parent }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParent() types.Entity { return messageDigestKey.parent }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParentYangName() string { return "message-digest-keies" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security
// Container class for security related
// configuration parameters
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enabling turns on TTL security.
    Ttl Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) GetFilter() yfilter.YFilter { return security.YFilter }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) SetFilter(yf yfilter.YFilter) { security.YFilter = yf }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) GetGoName(yname string) string {
    if yname == "ttl" { return "Ttl" }
    return ""
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) GetSegmentPath() string {
    return "security"
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ttl" {
        return &security.Ttl
    }
    return nil
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ttl"] = &security.Ttl
    return children
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) GetBundleName() string { return "cisco_ios_xr" }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) GetYangName() string { return "security" }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) SetParent(parent types.Entity) { security.parent = parent }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) GetParent() types.Entity { return security.parent }

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl
// Enabling turns on TTL security
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable TTL security. The type is bool.
    Enable interface{}

    // Hop count. The type is interface{} with range: 1..254.
    HopCount interface{}
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) GetFilter() yfilter.YFilter { return ttl.YFilter }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) SetFilter(yf yfilter.YFilter) { ttl.YFilter = yf }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "hop-count" { return "HopCount" }
    return ""
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) GetSegmentPath() string {
    return "ttl"
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = ttl.Enable
    leafs["hop-count"] = ttl.HopCount
    return leafs
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) GetBundleName() string { return "cisco_ios_xr" }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) GetYangName() string { return "ttl" }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) SetParent(parent types.Entity) { ttl.parent = parent }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) GetParent() types.Entity { return ttl.parent }

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) GetParentYangName() string { return "security" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors
// Neighbor router configuration information
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router configuration information for a particular neighbor. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor.
    Neighbor []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor
}

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) GetFilter() yfilter.YFilter { return neighbors.YFilter }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) SetFilter(yf yfilter.YFilter) { neighbors.YFilter = yf }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) GetGoName(yname string) string {
    if yname == "neighbor" { return "Neighbor" }
    return ""
}

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) GetSegmentPath() string {
    return "neighbors"
}

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor" {
        for _, c := range neighbors.Neighbor {
            if neighbors.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor{}
        neighbors.Neighbor = append(neighbors.Neighbor, child)
        return &neighbors.Neighbor[len(neighbors.Neighbor)-1]
    }
    return nil
}

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range neighbors.Neighbor {
        children[neighbors.Neighbor[i].GetSegmentPath()] = &neighbors.Neighbor[i]
    }
    return children
}

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) GetBundleName() string { return "cisco_ios_xr" }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) GetYangName() string { return "neighbors" }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) SetParent(parent types.Entity) { neighbors.parent = parent }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) GetParent() types.Entity { return neighbors.parent }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor
// Router configuration information for a
// particular neighbor
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Neighbor IP address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // OSPF priority of non-broadcast neighbor. The type is interface{} with
    // range: 0..255. The default value is 0.
    Priority interface{}

    // OSPF dead router poll-interval in seconds. The type is interface{} with
    // range: 0..65535. Units are second. The default value is 40.
    PollInterval interface{}

    // OSPF cost for point-to-multipoint neighbor. The type is interface{} with
    // range: 1..65535. The default value is 1.
    Cost interface{}

    // Database filter: Filter OSPF LSA during synchronization and flooding for
    // point-to-multipoint. The type is bool. The default value is false.
    DatabaseFilter interface{}
}

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) GetFilter() yfilter.YFilter { return neighbor.YFilter }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) SetFilter(yf yfilter.YFilter) { neighbor.YFilter = yf }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) GetGoName(yname string) string {
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "priority" { return "Priority" }
    if yname == "poll-interval" { return "PollInterval" }
    if yname == "cost" { return "Cost" }
    if yname == "database-filter" { return "DatabaseFilter" }
    return ""
}

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) GetSegmentPath() string {
    return "neighbor" + "[neighbor-address='" + fmt.Sprintf("%v", neighbor.NeighborAddress) + "']"
}

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-address"] = neighbor.NeighborAddress
    leafs["priority"] = neighbor.Priority
    leafs["poll-interval"] = neighbor.PollInterval
    leafs["cost"] = neighbor.Cost
    leafs["database-filter"] = neighbor.DatabaseFilter
    return leafs
}

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) GetBundleName() string { return "cisco_ios_xr" }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) GetYangName() string { return "neighbor" }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) SetParent(parent types.Entity) { neighbor.parent = parent }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) GetParent() types.Entity { return neighbor.parent }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) GetParentYangName() string { return "neighbors" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) GetFilter() yfilter.YFilter { return deadIntervalMinimal.YFilter }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) SetFilter(yf yfilter.YFilter) { deadIntervalMinimal.YFilter = yf }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "multiplier" { return "Multiplier" }
    return ""
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) GetSegmentPath() string {
    return "dead-interval-minimal"
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = deadIntervalMinimal.Interval
    leafs["multiplier"] = deadIntervalMinimal.Multiplier
    return leafs
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) GetBundleName() string { return "cisco_ios_xr" }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) GetYangName() string { return "dead-interval-minimal" }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) SetParent(parent types.Entity) { deadIntervalMinimal.parent = parent }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) GetParent() types.Entity { return deadIntervalMinimal.parent }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute
// Fast-reroute configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // OspfFastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink

    // Fast-reroute per-prefix global configuration.
    PerPrefix Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) GetGoName(yname string) string {
    if yname == "fast-reroute-enable" { return "FastRerouteEnable" }
    if yname == "per-link" { return "PerLink" }
    if yname == "per-prefix" { return "PerPrefix" }
    return ""
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "per-link" {
        return &fastReroute.PerLink
    }
    if childYangName == "per-prefix" {
        return &fastReroute.PerPrefix
    }
    return nil
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["per-link"] = &fastReroute.PerLink
    children["per-prefix"] = &fastReroute.PerPrefix
    return children
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-enable"] = fastReroute.FastRerouteEnable
    return leafs
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) GetFilter() yfilter.YFilter { return perLink.YFilter }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) SetFilter(yf yfilter.YFilter) { perLink.YFilter = yf }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) GetSegmentPath() string {
    return "per-link"
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perLink.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perLink.ExcludeInterfaces
    }
    return nil
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perLink.CandidateInterfaces
    children["exclude-interfaces"] = &perLink.ExcludeInterfaces
    return children
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perLink.FastRerouteUseCandidateOnly
    return leafs
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) GetBundleName() string { return "cisco_ios_xr" }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) GetYangName() string { return "per-link" }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) SetParent(parent types.Entity) { perLink.parent = parent }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) GetParent() types.Entity { return perLink.parent }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetParentYangName() string { return "per-link" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetParentYangName() string { return "per-link" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix
// Fast-reroute per-prefix global configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Topology Independet LFA configuration. The type is bool.
    TopologyIndependentLfa interface{}

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Remote LFA configuration.
    RemoteLfa Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa

    // Fast-reroute tiebreakers configurations.
    Tiebreakers Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) GetFilter() yfilter.YFilter { return perPrefix.YFilter }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) SetFilter(yf yfilter.YFilter) { perPrefix.YFilter = yf }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) GetGoName(yname string) string {
    if yname == "topology-independent-lfa" { return "TopologyIndependentLfa" }
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "remote-lfa" { return "RemoteLfa" }
    if yname == "tiebreakers" { return "Tiebreakers" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) GetSegmentPath() string {
    return "per-prefix"
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-lfa" {
        return &perPrefix.RemoteLfa
    }
    if childYangName == "tiebreakers" {
        return &perPrefix.Tiebreakers
    }
    if childYangName == "candidate-interfaces" {
        return &perPrefix.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perPrefix.ExcludeInterfaces
    }
    return nil
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["remote-lfa"] = &perPrefix.RemoteLfa
    children["tiebreakers"] = &perPrefix.Tiebreakers
    children["candidate-interfaces"] = &perPrefix.CandidateInterfaces
    children["exclude-interfaces"] = &perPrefix.ExcludeInterfaces
    return children
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["topology-independent-lfa"] = perPrefix.TopologyIndependentLfa
    leafs["fast-reroute-use-candidate-only"] = perPrefix.FastRerouteUseCandidateOnly
    return leafs
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) GetYangName() string { return "per-prefix" }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) SetParent(parent types.Entity) { perPrefix.parent = parent }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) GetParent() types.Entity { return perPrefix.parent }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa
// Remote LFA configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable remote LFA computation. The type is OspfFrrRlfaTunnel.
    Tunnel interface{}

    // Maximum path cost to remote LFA. The type is interface{} with range:
    // 1..4294967295.
    MaximumCost interface{}
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetFilter() yfilter.YFilter { return remoteLfa.YFilter }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) SetFilter(yf yfilter.YFilter) { remoteLfa.YFilter = yf }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetGoName(yname string) string {
    if yname == "tunnel" { return "Tunnel" }
    if yname == "maximum-cost" { return "MaximumCost" }
    return ""
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetSegmentPath() string {
    return "remote-lfa"
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel"] = remoteLfa.Tunnel
    leafs["maximum-cost"] = remoteLfa.MaximumCost
    return leafs
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetBundleName() string { return "cisco_ios_xr" }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetYangName() string { return "remote-lfa" }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) SetParent(parent types.Entity) { remoteLfa.parent = parent }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetParent() types.Entity { return remoteLfa.parent }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers
// Fast-reroute tiebreakers configurations
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fast-reroute tiebreakers configuration. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker.
    Tiebreaker []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetFilter() yfilter.YFilter { return tiebreakers.YFilter }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) SetFilter(yf yfilter.YFilter) { tiebreakers.YFilter = yf }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetGoName(yname string) string {
    if yname == "tiebreaker" { return "Tiebreaker" }
    return ""
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetSegmentPath() string {
    return "tiebreakers"
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tiebreaker" {
        for _, c := range tiebreakers.Tiebreaker {
            if tiebreakers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker{}
        tiebreakers.Tiebreaker = append(tiebreakers.Tiebreaker, child)
        return &tiebreakers.Tiebreaker[len(tiebreakers.Tiebreaker)-1]
    }
    return nil
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range tiebreakers.Tiebreaker {
        children[tiebreakers.Tiebreaker[i].GetSegmentPath()] = &tiebreakers.Tiebreaker[i]
    }
    return children
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetYangName() string { return "tiebreakers" }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) SetParent(parent types.Entity) { tiebreakers.parent = parent }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetParent() types.Entity { return tiebreakers.parent }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
// Fast-reroute tiebreakers configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Tiebreaker type. The type is
    // OspfFastRerouteTiebreakersIntf.
    TiebreakerType interface{}

    // Index value for a tiebreaker, 0 to disable. The type is interface{} with
    // range: 0..255. This attribute is mandatory.
    TiebreakerIndex interface{}
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetFilter() yfilter.YFilter { return tiebreaker.YFilter }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetFilter(yf yfilter.YFilter) { tiebreaker.YFilter = yf }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetGoName(yname string) string {
    if yname == "tiebreaker-type" { return "TiebreakerType" }
    if yname == "tiebreaker-index" { return "TiebreakerIndex" }
    return ""
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetSegmentPath() string {
    return "tiebreaker" + "[tiebreaker-type='" + fmt.Sprintf("%v", tiebreaker.TiebreakerType) + "']"
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tiebreaker-type"] = tiebreaker.TiebreakerType
    leafs["tiebreaker-index"] = tiebreaker.TiebreakerIndex
    return leafs
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetYangName() string { return "tiebreaker" }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetParent(parent types.Entity) { tiebreaker.parent = parent }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParent() types.Entity { return tiebreaker.parent }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParentYangName() string { return "tiebreakers" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback
// Interface fallback cost
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fallback cost of link. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Bandwidth threshold. The type is interface{} with range: 1..4294967.
    Threshold interface{}
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) GetFilter() yfilter.YFilter { return costFallback.YFilter }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) SetFilter(yf yfilter.YFilter) { costFallback.YFilter = yf }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) GetGoName(yname string) string {
    if yname == "cost" { return "Cost" }
    if yname == "threshold" { return "Threshold" }
    return ""
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) GetSegmentPath() string {
    return "cost-fallback"
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cost"] = costFallback.Cost
    leafs["threshold"] = costFallback.Threshold
    return leafs
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) GetBundleName() string { return "cisco_ios_xr" }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) GetYangName() string { return "cost-fallback" }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) SetParent(parent types.Entity) { costFallback.parent = parent }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) GetParent() types.Entity { return costFallback.parent }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes
// Multi Area Interface scope configurations
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Multi Area Interface configuration. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope.
    MultiAreaInterfaceScope []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope
}

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) GetFilter() yfilter.YFilter { return multiAreaInterfaceScopes.YFilter }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) SetFilter(yf yfilter.YFilter) { multiAreaInterfaceScopes.YFilter = yf }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) GetGoName(yname string) string {
    if yname == "multi-area-interface-scope" { return "MultiAreaInterfaceScope" }
    return ""
}

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) GetSegmentPath() string {
    return "multi-area-interface-scopes"
}

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "multi-area-interface-scope" {
        for _, c := range multiAreaInterfaceScopes.MultiAreaInterfaceScope {
            if multiAreaInterfaceScopes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope{}
        multiAreaInterfaceScopes.MultiAreaInterfaceScope = append(multiAreaInterfaceScopes.MultiAreaInterfaceScope, child)
        return &multiAreaInterfaceScopes.MultiAreaInterfaceScope[len(multiAreaInterfaceScopes.MultiAreaInterfaceScope)-1]
    }
    return nil
}

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range multiAreaInterfaceScopes.MultiAreaInterfaceScope {
        children[multiAreaInterfaceScopes.MultiAreaInterfaceScope[i].GetSegmentPath()] = &multiAreaInterfaceScopes.MultiAreaInterfaceScope[i]
    }
    return children
}

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) GetBundleName() string { return "cisco_ios_xr" }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) GetYangName() string { return "multi-area-interface-scopes" }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) SetParent(parent types.Entity) { multiAreaInterfaceScopes.parent = parent }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) GetParent() types.Entity { return multiAreaInterfaceScopes.parent }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) GetParentYangName() string { return "area-area-id" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope
// Multi Area Interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of Multi Area Interface to configure. The
    // type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Enable/Disable ignoring of MTU in DBD packets. The type is bool. The
    // default value is false.
    MtuIgnore interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // When enabled, prevent sending HELLO packets over link. The type is bool.
    // The default value is false.
    Passive interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Customize size of OSPF packets upto MTU. The type is interface{} with
    // range: 576..10000.
    PacketSize interface{}

    // Filter OSPF LSA during synchronization and flooding. The type is bool. The
    // default value is false.
    DatabaseFilter interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Filter networks intalled to RIB (disable as ACL name means filtering is
    // disabled).
    DistributeList Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList

    // Authentication.
    Authentication Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication

    // Neighbor router configuration information.
    Neighbors Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal

    // Fast-reroute configuration.
    FastReroute Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute

    // Interface fallback cost.
    CostFallback Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback
}

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetFilter() yfilter.YFilter { return multiAreaInterfaceScope.YFilter }

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) SetFilter(yf yfilter.YFilter) { multiAreaInterfaceScope.YFilter = yf }

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "cost" { return "Cost" }
    if yname == "mtu-ignore" { return "MtuIgnore" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "passive" { return "Passive" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "packet-size" { return "PacketSize" }
    if yname == "database-filter" { return "DatabaseFilter" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "running" { return "Running" }
    if yname == "distribute-list" { return "DistributeList" }
    if yname == "authentication" { return "Authentication" }
    if yname == "neighbors" { return "Neighbors" }
    if yname == "dead-interval-minimal" { return "DeadIntervalMinimal" }
    if yname == "fast-reroute" { return "FastReroute" }
    if yname == "cost-fallback" { return "CostFallback" }
    return ""
}

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetSegmentPath() string {
    return "multi-area-interface-scope" + "[interface-name='" + fmt.Sprintf("%v", multiAreaInterfaceScope.InterfaceName) + "']"
}

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "distribute-list" {
        return &multiAreaInterfaceScope.DistributeList
    }
    if childYangName == "authentication" {
        return &multiAreaInterfaceScope.Authentication
    }
    if childYangName == "neighbors" {
        return &multiAreaInterfaceScope.Neighbors
    }
    if childYangName == "dead-interval-minimal" {
        return &multiAreaInterfaceScope.DeadIntervalMinimal
    }
    if childYangName == "fast-reroute" {
        return &multiAreaInterfaceScope.FastReroute
    }
    if childYangName == "cost-fallback" {
        return &multiAreaInterfaceScope.CostFallback
    }
    return nil
}

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["distribute-list"] = &multiAreaInterfaceScope.DistributeList
    children["authentication"] = &multiAreaInterfaceScope.Authentication
    children["neighbors"] = &multiAreaInterfaceScope.Neighbors
    children["dead-interval-minimal"] = &multiAreaInterfaceScope.DeadIntervalMinimal
    children["fast-reroute"] = &multiAreaInterfaceScope.FastReroute
    children["cost-fallback"] = &multiAreaInterfaceScope.CostFallback
    return children
}

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = multiAreaInterfaceScope.InterfaceName
    leafs["cost"] = multiAreaInterfaceScope.Cost
    leafs["mtu-ignore"] = multiAreaInterfaceScope.MtuIgnore
    leafs["hello-interval"] = multiAreaInterfaceScope.HelloInterval
    leafs["passive"] = multiAreaInterfaceScope.Passive
    leafs["transmit-delay"] = multiAreaInterfaceScope.TransmitDelay
    leafs["packet-size"] = multiAreaInterfaceScope.PacketSize
    leafs["database-filter"] = multiAreaInterfaceScope.DatabaseFilter
    leafs["retransmit-interval"] = multiAreaInterfaceScope.RetransmitInterval
    leafs["running"] = multiAreaInterfaceScope.Running
    return leafs
}

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetBundleName() string { return "cisco_ios_xr" }

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetYangName() string { return "multi-area-interface-scope" }

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) SetParent(parent types.Entity) { multiAreaInterfaceScope.parent = parent }

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetParent() types.Entity { return multiAreaInterfaceScope.parent }

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetParentYangName() string { return "multi-area-interface-scopes" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList
// Filter networks intalled to RIB (disable as ACL
// name means filtering is disabled)
// This type is a presence type.
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Access Control List name. The type is string.
    AccessListName interface{}

    // Route Policy name. The type is string.
    RoutePolicyName interface{}
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetFilter() yfilter.YFilter { return distributeList.YFilter }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) SetFilter(yf yfilter.YFilter) { distributeList.YFilter = yf }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetGoName(yname string) string {
    if yname == "access-list-name" { return "AccessListName" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetSegmentPath() string {
    return "distribute-list"
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["access-list-name"] = distributeList.AccessListName
    leafs["route-policy-name"] = distributeList.RoutePolicyName
    return leafs
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetBundleName() string { return "cisco_ios_xr" }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetYangName() string { return "distribute-list" }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) SetParent(parent types.Entity) { distributeList.parent = parent }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetParent() types.Entity { return distributeList.parent }

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetParentYangName() string { return "multi-area-interface-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication
// Authentication
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // (!.+)|([^!].+).
    Key interface{}

    // Authentication type.
    Type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetGoName(yname string) string {
    if yname == "key" { return "Key" }
    if yname == "type" { return "Type" }
    if yname == "message-digest-keies" { return "MessageDigestKeies" }
    return ""
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "type" {
        return &authentication.Type
    }
    if childYangName == "message-digest-keies" {
        return &authentication.MessageDigestKeies
    }
    return nil
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["type"] = &authentication.Type
    children["message-digest-keies"] = &authentication.MessageDigestKeies
    return children
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key"] = authentication.Key
    return leafs
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetParentYangName() string { return "multi-area-interface-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetGoName(yname string) string {
    if yname == "authen-type" { return "AuthenType" }
    if yname == "keychain-authen-type" { return "KeychainAuthenType" }
    if yname == "keychain-name" { return "KeychainName" }
    return ""
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetSegmentPath() string {
    return "type"
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["authen-type"] = self.AuthenType
    leafs["keychain-authen-type"] = self.KeychainAuthenType
    leafs["keychain-name"] = self.KeychainName
    return leafs
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetYangName() string { return "type" }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetParent() types.Entity { return self.parent }

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetFilter() yfilter.YFilter { return messageDigestKeies.YFilter }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) SetFilter(yf yfilter.YFilter) { messageDigestKeies.YFilter = yf }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetGoName(yname string) string {
    if yname == "message-digest-key" { return "MessageDigestKey" }
    return ""
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetSegmentPath() string {
    return "message-digest-keies"
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "message-digest-key" {
        for _, c := range messageDigestKeies.MessageDigestKey {
            if messageDigestKeies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey{}
        messageDigestKeies.MessageDigestKey = append(messageDigestKeies.MessageDigestKey, child)
        return &messageDigestKeies.MessageDigestKey[len(messageDigestKeies.MessageDigestKey)-1]
    }
    return nil
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range messageDigestKeies.MessageDigestKey {
        children[messageDigestKeies.MessageDigestKey[i].GetSegmentPath()] = &messageDigestKeies.MessageDigestKey[i]
    }
    return children
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetYangName() string { return "message-digest-keies" }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) SetParent(parent types.Entity) { messageDigestKeies.parent = parent }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetParent() types.Entity { return messageDigestKeies.parent }

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: (!.+)|([^!].+). This attribute
    // is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetFilter() yfilter.YFilter { return messageDigestKey.YFilter }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) SetFilter(yf yfilter.YFilter) { messageDigestKey.YFilter = yf }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetGoName(yname string) string {
    if yname == "key-id" { return "KeyId" }
    if yname == "password" { return "Password" }
    return ""
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetSegmentPath() string {
    return "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key-id"] = messageDigestKey.KeyId
    leafs["password"] = messageDigestKey.Password
    return leafs
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetYangName() string { return "message-digest-key" }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) SetParent(parent types.Entity) { messageDigestKey.parent = parent }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParent() types.Entity { return messageDigestKey.parent }

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParentYangName() string { return "message-digest-keies" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors
// Neighbor router configuration information
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router configuration information for a particular neighbor. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor.
    Neighbor []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor
}

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetFilter() yfilter.YFilter { return neighbors.YFilter }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) SetFilter(yf yfilter.YFilter) { neighbors.YFilter = yf }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetGoName(yname string) string {
    if yname == "neighbor" { return "Neighbor" }
    return ""
}

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetSegmentPath() string {
    return "neighbors"
}

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor" {
        for _, c := range neighbors.Neighbor {
            if neighbors.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor{}
        neighbors.Neighbor = append(neighbors.Neighbor, child)
        return &neighbors.Neighbor[len(neighbors.Neighbor)-1]
    }
    return nil
}

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range neighbors.Neighbor {
        children[neighbors.Neighbor[i].GetSegmentPath()] = &neighbors.Neighbor[i]
    }
    return children
}

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetBundleName() string { return "cisco_ios_xr" }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetYangName() string { return "neighbors" }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) SetParent(parent types.Entity) { neighbors.parent = parent }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetParent() types.Entity { return neighbors.parent }

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetParentYangName() string { return "multi-area-interface-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor
// Router configuration information for a
// particular neighbor
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Neighbor IP address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // OSPF priority of non-broadcast neighbor. The type is interface{} with
    // range: 0..255. The default value is 0.
    Priority interface{}

    // OSPF dead router poll-interval in seconds. The type is interface{} with
    // range: 0..65535. Units are second. The default value is 40.
    PollInterval interface{}

    // OSPF cost for point-to-multipoint neighbor. The type is interface{} with
    // range: 1..65535. The default value is 1.
    Cost interface{}

    // Database filter: Filter OSPF LSA during synchronization and flooding for
    // point-to-multipoint. The type is bool. The default value is false.
    DatabaseFilter interface{}
}

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetFilter() yfilter.YFilter { return neighbor.YFilter }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) SetFilter(yf yfilter.YFilter) { neighbor.YFilter = yf }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetGoName(yname string) string {
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "priority" { return "Priority" }
    if yname == "poll-interval" { return "PollInterval" }
    if yname == "cost" { return "Cost" }
    if yname == "database-filter" { return "DatabaseFilter" }
    return ""
}

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetSegmentPath() string {
    return "neighbor" + "[neighbor-address='" + fmt.Sprintf("%v", neighbor.NeighborAddress) + "']"
}

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-address"] = neighbor.NeighborAddress
    leafs["priority"] = neighbor.Priority
    leafs["poll-interval"] = neighbor.PollInterval
    leafs["cost"] = neighbor.Cost
    leafs["database-filter"] = neighbor.DatabaseFilter
    return leafs
}

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetBundleName() string { return "cisco_ios_xr" }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetYangName() string { return "neighbor" }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) SetParent(parent types.Entity) { neighbor.parent = parent }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetParent() types.Entity { return neighbor.parent }

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetParentYangName() string { return "neighbors" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetFilter() yfilter.YFilter { return deadIntervalMinimal.YFilter }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) SetFilter(yf yfilter.YFilter) { deadIntervalMinimal.YFilter = yf }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "multiplier" { return "Multiplier" }
    return ""
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetSegmentPath() string {
    return "dead-interval-minimal"
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = deadIntervalMinimal.Interval
    leafs["multiplier"] = deadIntervalMinimal.Multiplier
    return leafs
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetBundleName() string { return "cisco_ios_xr" }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetYangName() string { return "dead-interval-minimal" }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) SetParent(parent types.Entity) { deadIntervalMinimal.parent = parent }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetParent() types.Entity { return deadIntervalMinimal.parent }

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetParentYangName() string { return "multi-area-interface-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute
// Fast-reroute configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // OspfFastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink

    // Fast-reroute per-prefix global configuration.
    PerPrefix Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetGoName(yname string) string {
    if yname == "fast-reroute-enable" { return "FastRerouteEnable" }
    if yname == "per-link" { return "PerLink" }
    if yname == "per-prefix" { return "PerPrefix" }
    return ""
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "per-link" {
        return &fastReroute.PerLink
    }
    if childYangName == "per-prefix" {
        return &fastReroute.PerPrefix
    }
    return nil
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["per-link"] = &fastReroute.PerLink
    children["per-prefix"] = &fastReroute.PerPrefix
    return children
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-enable"] = fastReroute.FastRerouteEnable
    return leafs
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetParentYangName() string { return "multi-area-interface-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetFilter() yfilter.YFilter { return perLink.YFilter }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) SetFilter(yf yfilter.YFilter) { perLink.YFilter = yf }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetSegmentPath() string {
    return "per-link"
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perLink.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perLink.ExcludeInterfaces
    }
    return nil
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perLink.CandidateInterfaces
    children["exclude-interfaces"] = &perLink.ExcludeInterfaces
    return children
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perLink.FastRerouteUseCandidateOnly
    return leafs
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetBundleName() string { return "cisco_ios_xr" }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetYangName() string { return "per-link" }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) SetParent(parent types.Entity) { perLink.parent = parent }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetParent() types.Entity { return perLink.parent }

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetParentYangName() string { return "per-link" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetParentYangName() string { return "per-link" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix
// Fast-reroute per-prefix global configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Topology Independet LFA configuration. The type is bool.
    TopologyIndependentLfa interface{}

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Remote LFA configuration.
    RemoteLfa Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa

    // Fast-reroute tiebreakers configurations.
    Tiebreakers Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetFilter() yfilter.YFilter { return perPrefix.YFilter }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) SetFilter(yf yfilter.YFilter) { perPrefix.YFilter = yf }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetGoName(yname string) string {
    if yname == "topology-independent-lfa" { return "TopologyIndependentLfa" }
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "remote-lfa" { return "RemoteLfa" }
    if yname == "tiebreakers" { return "Tiebreakers" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetSegmentPath() string {
    return "per-prefix"
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-lfa" {
        return &perPrefix.RemoteLfa
    }
    if childYangName == "tiebreakers" {
        return &perPrefix.Tiebreakers
    }
    if childYangName == "candidate-interfaces" {
        return &perPrefix.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perPrefix.ExcludeInterfaces
    }
    return nil
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["remote-lfa"] = &perPrefix.RemoteLfa
    children["tiebreakers"] = &perPrefix.Tiebreakers
    children["candidate-interfaces"] = &perPrefix.CandidateInterfaces
    children["exclude-interfaces"] = &perPrefix.ExcludeInterfaces
    return children
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["topology-independent-lfa"] = perPrefix.TopologyIndependentLfa
    leafs["fast-reroute-use-candidate-only"] = perPrefix.FastRerouteUseCandidateOnly
    return leafs
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetYangName() string { return "per-prefix" }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) SetParent(parent types.Entity) { perPrefix.parent = parent }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetParent() types.Entity { return perPrefix.parent }

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa
// Remote LFA configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable remote LFA computation. The type is OspfFrrRlfaTunnel.
    Tunnel interface{}

    // Maximum path cost to remote LFA. The type is interface{} with range:
    // 1..4294967295.
    MaximumCost interface{}
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetFilter() yfilter.YFilter { return remoteLfa.YFilter }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) SetFilter(yf yfilter.YFilter) { remoteLfa.YFilter = yf }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetGoName(yname string) string {
    if yname == "tunnel" { return "Tunnel" }
    if yname == "maximum-cost" { return "MaximumCost" }
    return ""
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetSegmentPath() string {
    return "remote-lfa"
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel"] = remoteLfa.Tunnel
    leafs["maximum-cost"] = remoteLfa.MaximumCost
    return leafs
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetBundleName() string { return "cisco_ios_xr" }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetYangName() string { return "remote-lfa" }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) SetParent(parent types.Entity) { remoteLfa.parent = parent }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetParent() types.Entity { return remoteLfa.parent }

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers
// Fast-reroute tiebreakers configurations
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fast-reroute tiebreakers configuration. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker.
    Tiebreaker []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetFilter() yfilter.YFilter { return tiebreakers.YFilter }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) SetFilter(yf yfilter.YFilter) { tiebreakers.YFilter = yf }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetGoName(yname string) string {
    if yname == "tiebreaker" { return "Tiebreaker" }
    return ""
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetSegmentPath() string {
    return "tiebreakers"
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tiebreaker" {
        for _, c := range tiebreakers.Tiebreaker {
            if tiebreakers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker{}
        tiebreakers.Tiebreaker = append(tiebreakers.Tiebreaker, child)
        return &tiebreakers.Tiebreaker[len(tiebreakers.Tiebreaker)-1]
    }
    return nil
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range tiebreakers.Tiebreaker {
        children[tiebreakers.Tiebreaker[i].GetSegmentPath()] = &tiebreakers.Tiebreaker[i]
    }
    return children
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetYangName() string { return "tiebreakers" }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) SetParent(parent types.Entity) { tiebreakers.parent = parent }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetParent() types.Entity { return tiebreakers.parent }

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
// Fast-reroute tiebreakers configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Tiebreaker type. The type is
    // OspfFastRerouteTiebreakersIntf.
    TiebreakerType interface{}

    // Index value for a tiebreaker, 0 to disable. The type is interface{} with
    // range: 0..255. This attribute is mandatory.
    TiebreakerIndex interface{}
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetFilter() yfilter.YFilter { return tiebreaker.YFilter }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetFilter(yf yfilter.YFilter) { tiebreaker.YFilter = yf }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetGoName(yname string) string {
    if yname == "tiebreaker-type" { return "TiebreakerType" }
    if yname == "tiebreaker-index" { return "TiebreakerIndex" }
    return ""
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetSegmentPath() string {
    return "tiebreaker" + "[tiebreaker-type='" + fmt.Sprintf("%v", tiebreaker.TiebreakerType) + "']"
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tiebreaker-type"] = tiebreaker.TiebreakerType
    leafs["tiebreaker-index"] = tiebreaker.TiebreakerIndex
    return leafs
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetYangName() string { return "tiebreaker" }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetParent(parent types.Entity) { tiebreaker.parent = parent }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParent() types.Entity { return tiebreaker.parent }

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParentYangName() string { return "tiebreakers" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback
// Interface fallback cost
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fallback cost of link. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Bandwidth threshold. The type is interface{} with range: 1..4294967.
    Threshold interface{}
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetFilter() yfilter.YFilter { return costFallback.YFilter }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) SetFilter(yf yfilter.YFilter) { costFallback.YFilter = yf }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetGoName(yname string) string {
    if yname == "cost" { return "Cost" }
    if yname == "threshold" { return "Threshold" }
    return ""
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetSegmentPath() string {
    return "cost-fallback"
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cost"] = costFallback.Cost
    leafs["threshold"] = costFallback.Threshold
    return leafs
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetBundleName() string { return "cisco_ios_xr" }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetYangName() string { return "cost-fallback" }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) SetParent(parent types.Entity) { costFallback.parent = parent }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetParent() types.Entity { return costFallback.parent }

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetParentYangName() string { return "multi-area-interface-scope" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges
// Summarize routes matching address/mask (border
// routers only)
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Ordering index. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange.
    AreaRange []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange
}

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges) GetFilter() yfilter.YFilter { return areaRanges.YFilter }

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges) SetFilter(yf yfilter.YFilter) { areaRanges.YFilter = yf }

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges) GetGoName(yname string) string {
    if yname == "area-range" { return "AreaRange" }
    return ""
}

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges) GetSegmentPath() string {
    return "area-ranges"
}

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "area-range" {
        for _, c := range areaRanges.AreaRange {
            if areaRanges.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange{}
        areaRanges.AreaRange = append(areaRanges.AreaRange, child)
        return &areaRanges.AreaRange[len(areaRanges.AreaRange)-1]
    }
    return nil
}

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range areaRanges.AreaRange {
        children[areaRanges.AreaRange[i].GetSegmentPath()] = &areaRanges.AreaRange[i]
    }
    return children
}

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges) GetBundleName() string { return "cisco_ios_xr" }

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges) GetYangName() string { return "area-ranges" }

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges) SetParent(parent types.Entity) { areaRanges.parent = parent }

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges) GetParent() types.Entity { return areaRanges.parent }

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges) GetParentYangName() string { return "area-area-id" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange
// Ordering index
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IP address to match. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // This attribute is a key. IP netmask for address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Netmask interface{}

    // Do not advertise this range. The type is bool.
    NotAdvertise interface{}
}

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) GetFilter() yfilter.YFilter { return areaRange.YFilter }

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) SetFilter(yf yfilter.YFilter) { areaRange.YFilter = yf }

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "netmask" { return "Netmask" }
    if yname == "not-advertise" { return "NotAdvertise" }
    return ""
}

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) GetSegmentPath() string {
    return "area-range" + "[address='" + fmt.Sprintf("%v", areaRange.Address) + "']" + "[netmask='" + fmt.Sprintf("%v", areaRange.Netmask) + "']"
}

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = areaRange.Address
    leafs["netmask"] = areaRange.Netmask
    leafs["not-advertise"] = areaRange.NotAdvertise
    return leafs
}

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) GetBundleName() string { return "cisco_ios_xr" }

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) GetYangName() string { return "area-range" }

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) SetParent(parent types.Entity) { areaRange.parent = parent }

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) GetParent() types.Entity { return areaRange.parent }

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) GetParentYangName() string { return "area-ranges" }

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa
// Specify area as a NSSA area
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // No redistribution into this NSSA area. The type is bool. The default value
    // is false.
    NoRedistribution interface{}

    // Originate Type 7 default into NSSA area. The type is bool. The default
    // value is false.
    DefaultInfoOriginate interface{}

    // Do not send summary LSA into NSSA. The type is bool. The default value is
    // false.
    NoSummary interface{}

    // OSPF default metric. The type is interface{} with range: 1..16777214.
    NssaDefMetric interface{}

    // OSPF External metric type. The type is OspfLinkStateMetric. The default
    // value is type2.
    MetricType interface{}
}

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa) GetFilter() yfilter.YFilter { return nssa.YFilter }

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa) SetFilter(yf yfilter.YFilter) { nssa.YFilter = yf }

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa) GetGoName(yname string) string {
    if yname == "no-redistribution" { return "NoRedistribution" }
    if yname == "default-info-originate" { return "DefaultInfoOriginate" }
    if yname == "no-summary" { return "NoSummary" }
    if yname == "nssa-def-metric" { return "NssaDefMetric" }
    if yname == "metric-type" { return "MetricType" }
    return ""
}

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa) GetSegmentPath() string {
    return "nssa"
}

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["no-redistribution"] = nssa.NoRedistribution
    leafs["default-info-originate"] = nssa.DefaultInfoOriginate
    leafs["no-summary"] = nssa.NoSummary
    leafs["nssa-def-metric"] = nssa.NssaDefMetric
    leafs["metric-type"] = nssa.MetricType
    return leafs
}

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa) GetBundleName() string { return "cisco_ios_xr" }

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa) GetYangName() string { return "nssa" }

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa) SetParent(parent types.Entity) { nssa.parent = parent }

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa) GetParent() types.Entity { return nssa.parent }

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa) GetParentYangName() string { return "area-area-id" }

// Ospf_Processes_Process_Vrfs_Vrf_Timers
// Adjust routing timers
type Ospf_Processes_Process_Vrfs_Vrf_Timers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Seconds between group of LSAs being refreshed or maxaged. The type is
    // interface{} with range: 5..100. Units are second.
    LsaPacingFlood interface{}

    // Number of ms between end of SPF and start of IPFRR computation. The type is
    // interface{} with range: 50..600000. Units are millisecond. The default
    // value is 500.
    FastRerouteTimer interface{}

    // How often self-originated LSAs should be refreshed. The type is interface{}
    // with range: 1800..2700. Units are second. The default value is 1800.
    LsaRefresh interface{}

    // LSA group pacing timer (Seconds between group of LSAs being refreshed or
    // maxaged). The type is interface{} with range: 10..1800. Units are second.
    // The default value is 240.
    LsaGroupPacing interface{}

    // MinLSArrival timer (minimum interval in milliseconds between accepting the
    // same LSA). The type is interface{} with range: 0..600000. Units are
    // millisecond. The default value is 100.
    LsaMinArrival interface{}

    // OSPF SPF timers (in milliseconds).
    SpfTimer Ospf_Processes_Process_Vrfs_Vrf_Timers_SpfTimer

    // OSPF LSA timers (in milliseconds).
    LsaGenerationTimer Ospf_Processes_Process_Vrfs_Vrf_Timers_LsaGenerationTimer
}

func (timers *Ospf_Processes_Process_Vrfs_Vrf_Timers) GetFilter() yfilter.YFilter { return timers.YFilter }

func (timers *Ospf_Processes_Process_Vrfs_Vrf_Timers) SetFilter(yf yfilter.YFilter) { timers.YFilter = yf }

func (timers *Ospf_Processes_Process_Vrfs_Vrf_Timers) GetGoName(yname string) string {
    if yname == "lsa-pacing-flood" { return "LsaPacingFlood" }
    if yname == "fast-reroute-timer" { return "FastRerouteTimer" }
    if yname == "lsa-refresh" { return "LsaRefresh" }
    if yname == "lsa-group-pacing" { return "LsaGroupPacing" }
    if yname == "lsa-min-arrival" { return "LsaMinArrival" }
    if yname == "spf-timer" { return "SpfTimer" }
    if yname == "lsa-generation-timer" { return "LsaGenerationTimer" }
    return ""
}

func (timers *Ospf_Processes_Process_Vrfs_Vrf_Timers) GetSegmentPath() string {
    return "timers"
}

func (timers *Ospf_Processes_Process_Vrfs_Vrf_Timers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "spf-timer" {
        return &timers.SpfTimer
    }
    if childYangName == "lsa-generation-timer" {
        return &timers.LsaGenerationTimer
    }
    return nil
}

func (timers *Ospf_Processes_Process_Vrfs_Vrf_Timers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["spf-timer"] = &timers.SpfTimer
    children["lsa-generation-timer"] = &timers.LsaGenerationTimer
    return children
}

func (timers *Ospf_Processes_Process_Vrfs_Vrf_Timers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-pacing-flood"] = timers.LsaPacingFlood
    leafs["fast-reroute-timer"] = timers.FastRerouteTimer
    leafs["lsa-refresh"] = timers.LsaRefresh
    leafs["lsa-group-pacing"] = timers.LsaGroupPacing
    leafs["lsa-min-arrival"] = timers.LsaMinArrival
    return leafs
}

func (timers *Ospf_Processes_Process_Vrfs_Vrf_Timers) GetBundleName() string { return "cisco_ios_xr" }

func (timers *Ospf_Processes_Process_Vrfs_Vrf_Timers) GetYangName() string { return "timers" }

func (timers *Ospf_Processes_Process_Vrfs_Vrf_Timers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timers *Ospf_Processes_Process_Vrfs_Vrf_Timers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timers *Ospf_Processes_Process_Vrfs_Vrf_Timers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timers *Ospf_Processes_Process_Vrfs_Vrf_Timers) SetParent(parent types.Entity) { timers.parent = parent }

func (timers *Ospf_Processes_Process_Vrfs_Vrf_Timers) GetParent() types.Entity { return timers.parent }

func (timers *Ospf_Processes_Process_Vrfs_Vrf_Timers) GetParentYangName() string { return "vrf" }

// Ospf_Processes_Process_Vrfs_Vrf_Timers_SpfTimer
// OSPF SPF timers (in milliseconds)
type Ospf_Processes_Process_Vrfs_Vrf_Timers_SpfTimer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of milliseconds before first SPF run. The type is interface{} with
    // range: 1..600000. Units are millisecond. The default value is 5000.
    InitialDelay interface{}

    // Number of milliseconds delay between successive SPF runs. The type is
    // interface{} with range: 1..600000. Units are millisecond. The default value
    // is 10000.
    BackoffIncrement interface{}

    // Max number of milliseconds between consecutive SPF calculations. The type
    // is interface{} with range: 1..600000. Units are millisecond. The default
    // value is 10000.
    MaxDelay interface{}
}

func (spfTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_SpfTimer) GetFilter() yfilter.YFilter { return spfTimer.YFilter }

func (spfTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_SpfTimer) SetFilter(yf yfilter.YFilter) { spfTimer.YFilter = yf }

func (spfTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_SpfTimer) GetGoName(yname string) string {
    if yname == "initial-delay" { return "InitialDelay" }
    if yname == "backoff-increment" { return "BackoffIncrement" }
    if yname == "max-delay" { return "MaxDelay" }
    return ""
}

func (spfTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_SpfTimer) GetSegmentPath() string {
    return "spf-timer"
}

func (spfTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_SpfTimer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (spfTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_SpfTimer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (spfTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_SpfTimer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initial-delay"] = spfTimer.InitialDelay
    leafs["backoff-increment"] = spfTimer.BackoffIncrement
    leafs["max-delay"] = spfTimer.MaxDelay
    return leafs
}

func (spfTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_SpfTimer) GetBundleName() string { return "cisco_ios_xr" }

func (spfTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_SpfTimer) GetYangName() string { return "spf-timer" }

func (spfTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_SpfTimer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spfTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_SpfTimer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spfTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_SpfTimer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spfTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_SpfTimer) SetParent(parent types.Entity) { spfTimer.parent = parent }

func (spfTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_SpfTimer) GetParent() types.Entity { return spfTimer.parent }

func (spfTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_SpfTimer) GetParentYangName() string { return "timers" }

// Ospf_Processes_Process_Vrfs_Vrf_Timers_LsaGenerationTimer
// OSPF LSA timers (in milliseconds)
type Ospf_Processes_Process_Vrfs_Vrf_Timers_LsaGenerationTimer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of milliseconds before generating first LSA. The type is interface{}
    // with range: 0..600000. Units are millisecond. The default value is 50.
    InitialDelay interface{}

    // Number of milliseconds delay between successive LSA builds. The type is
    // interface{} with range: 1..600000. Units are millisecond. The default value
    // is 200.
    BackoffIncrement interface{}

    // Max number of milliseconds between consecutive LSA builds . The type is
    // interface{} with range: 1..600000. Units are millisecond. The default value
    // is 200.
    MaxDelay interface{}
}

func (lsaGenerationTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_LsaGenerationTimer) GetFilter() yfilter.YFilter { return lsaGenerationTimer.YFilter }

func (lsaGenerationTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_LsaGenerationTimer) SetFilter(yf yfilter.YFilter) { lsaGenerationTimer.YFilter = yf }

func (lsaGenerationTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_LsaGenerationTimer) GetGoName(yname string) string {
    if yname == "initial-delay" { return "InitialDelay" }
    if yname == "backoff-increment" { return "BackoffIncrement" }
    if yname == "max-delay" { return "MaxDelay" }
    return ""
}

func (lsaGenerationTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_LsaGenerationTimer) GetSegmentPath() string {
    return "lsa-generation-timer"
}

func (lsaGenerationTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_LsaGenerationTimer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaGenerationTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_LsaGenerationTimer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaGenerationTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_LsaGenerationTimer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initial-delay"] = lsaGenerationTimer.InitialDelay
    leafs["backoff-increment"] = lsaGenerationTimer.BackoffIncrement
    leafs["max-delay"] = lsaGenerationTimer.MaxDelay
    return leafs
}

func (lsaGenerationTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_LsaGenerationTimer) GetBundleName() string { return "cisco_ios_xr" }

func (lsaGenerationTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_LsaGenerationTimer) GetYangName() string { return "lsa-generation-timer" }

func (lsaGenerationTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_LsaGenerationTimer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaGenerationTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_LsaGenerationTimer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaGenerationTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_LsaGenerationTimer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaGenerationTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_LsaGenerationTimer) SetParent(parent types.Entity) { lsaGenerationTimer.parent = parent }

func (lsaGenerationTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_LsaGenerationTimer) GetParent() types.Entity { return lsaGenerationTimer.parent }

func (lsaGenerationTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_LsaGenerationTimer) GetParentYangName() string { return "timers" }

// Ospf_Processes_Process_TraceBufs
// Configuration to change size of trace buffer
type Ospf_Processes_Process_TraceBufs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Changes the size of the specified trace buffer. The type is slice of
    // Ospf_Processes_Process_TraceBufs_TraceBuf.
    TraceBuf []Ospf_Processes_Process_TraceBufs_TraceBuf
}

func (traceBufs *Ospf_Processes_Process_TraceBufs) GetFilter() yfilter.YFilter { return traceBufs.YFilter }

func (traceBufs *Ospf_Processes_Process_TraceBufs) SetFilter(yf yfilter.YFilter) { traceBufs.YFilter = yf }

func (traceBufs *Ospf_Processes_Process_TraceBufs) GetGoName(yname string) string {
    if yname == "trace-buf" { return "TraceBuf" }
    return ""
}

func (traceBufs *Ospf_Processes_Process_TraceBufs) GetSegmentPath() string {
    return "trace-bufs"
}

func (traceBufs *Ospf_Processes_Process_TraceBufs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "trace-buf" {
        for _, c := range traceBufs.TraceBuf {
            if traceBufs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_TraceBufs_TraceBuf{}
        traceBufs.TraceBuf = append(traceBufs.TraceBuf, child)
        return &traceBufs.TraceBuf[len(traceBufs.TraceBuf)-1]
    }
    return nil
}

func (traceBufs *Ospf_Processes_Process_TraceBufs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range traceBufs.TraceBuf {
        children[traceBufs.TraceBuf[i].GetSegmentPath()] = &traceBufs.TraceBuf[i]
    }
    return children
}

func (traceBufs *Ospf_Processes_Process_TraceBufs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (traceBufs *Ospf_Processes_Process_TraceBufs) GetBundleName() string { return "cisco_ios_xr" }

func (traceBufs *Ospf_Processes_Process_TraceBufs) GetYangName() string { return "trace-bufs" }

func (traceBufs *Ospf_Processes_Process_TraceBufs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (traceBufs *Ospf_Processes_Process_TraceBufs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (traceBufs *Ospf_Processes_Process_TraceBufs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (traceBufs *Ospf_Processes_Process_TraceBufs) SetParent(parent types.Entity) { traceBufs.parent = parent }

func (traceBufs *Ospf_Processes_Process_TraceBufs) GetParent() types.Entity { return traceBufs.parent }

func (traceBufs *Ospf_Processes_Process_TraceBufs) GetParentYangName() string { return "process" }

// Ospf_Processes_Process_TraceBufs_TraceBuf
// Changes the size of the specified trace
// buffer
type Ospf_Processes_Process_TraceBufs_TraceBuf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name for this trace buffer. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    TraceBufName interface{}

    // Buffer size. The type is OspfTraceBufSize. This attribute is mandatory.
    Bufsize interface{}
}

func (traceBuf *Ospf_Processes_Process_TraceBufs_TraceBuf) GetFilter() yfilter.YFilter { return traceBuf.YFilter }

func (traceBuf *Ospf_Processes_Process_TraceBufs_TraceBuf) SetFilter(yf yfilter.YFilter) { traceBuf.YFilter = yf }

func (traceBuf *Ospf_Processes_Process_TraceBufs_TraceBuf) GetGoName(yname string) string {
    if yname == "trace-buf-name" { return "TraceBufName" }
    if yname == "bufsize" { return "Bufsize" }
    return ""
}

func (traceBuf *Ospf_Processes_Process_TraceBufs_TraceBuf) GetSegmentPath() string {
    return "trace-buf" + "[trace-buf-name='" + fmt.Sprintf("%v", traceBuf.TraceBufName) + "']"
}

func (traceBuf *Ospf_Processes_Process_TraceBufs_TraceBuf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (traceBuf *Ospf_Processes_Process_TraceBufs_TraceBuf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (traceBuf *Ospf_Processes_Process_TraceBufs_TraceBuf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["trace-buf-name"] = traceBuf.TraceBufName
    leafs["bufsize"] = traceBuf.Bufsize
    return leafs
}

func (traceBuf *Ospf_Processes_Process_TraceBufs_TraceBuf) GetBundleName() string { return "cisco_ios_xr" }

func (traceBuf *Ospf_Processes_Process_TraceBufs_TraceBuf) GetYangName() string { return "trace-buf" }

func (traceBuf *Ospf_Processes_Process_TraceBufs_TraceBuf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (traceBuf *Ospf_Processes_Process_TraceBufs_TraceBuf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (traceBuf *Ospf_Processes_Process_TraceBufs_TraceBuf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (traceBuf *Ospf_Processes_Process_TraceBufs_TraceBuf) SetParent(parent types.Entity) { traceBuf.parent = parent }

func (traceBuf *Ospf_Processes_Process_TraceBufs_TraceBuf) GetParent() types.Entity { return traceBuf.parent }

func (traceBuf *Ospf_Processes_Process_TraceBufs_TraceBuf) GetParentYangName() string { return "trace-bufs" }

// Ospf_Processes_Process_GracefulShutdownTimers
// Adjust routing timers
type Ospf_Processes_Process_GracefulShutdownTimers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time to keep OSPF routes active after graceful shutdown(in seconds). The
    // type is interface{} with range: 0..90. Units are second. The default value
    // is 5.
    GracefulShutdownRetainRoutes interface{}

    // Number of seconds to delay before beginning graceful shutdown. The type is
    // interface{} with range: 0..90. Units are second. The default value is 5.
    GracefulShutdownInitialDelay interface{}
}

func (gracefulShutdownTimers *Ospf_Processes_Process_GracefulShutdownTimers) GetFilter() yfilter.YFilter { return gracefulShutdownTimers.YFilter }

func (gracefulShutdownTimers *Ospf_Processes_Process_GracefulShutdownTimers) SetFilter(yf yfilter.YFilter) { gracefulShutdownTimers.YFilter = yf }

func (gracefulShutdownTimers *Ospf_Processes_Process_GracefulShutdownTimers) GetGoName(yname string) string {
    if yname == "graceful-shutdown-retain-routes" { return "GracefulShutdownRetainRoutes" }
    if yname == "graceful-shutdown-initial-delay" { return "GracefulShutdownInitialDelay" }
    return ""
}

func (gracefulShutdownTimers *Ospf_Processes_Process_GracefulShutdownTimers) GetSegmentPath() string {
    return "graceful-shutdown-timers"
}

func (gracefulShutdownTimers *Ospf_Processes_Process_GracefulShutdownTimers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (gracefulShutdownTimers *Ospf_Processes_Process_GracefulShutdownTimers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (gracefulShutdownTimers *Ospf_Processes_Process_GracefulShutdownTimers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["graceful-shutdown-retain-routes"] = gracefulShutdownTimers.GracefulShutdownRetainRoutes
    leafs["graceful-shutdown-initial-delay"] = gracefulShutdownTimers.GracefulShutdownInitialDelay
    return leafs
}

func (gracefulShutdownTimers *Ospf_Processes_Process_GracefulShutdownTimers) GetBundleName() string { return "cisco_ios_xr" }

func (gracefulShutdownTimers *Ospf_Processes_Process_GracefulShutdownTimers) GetYangName() string { return "graceful-shutdown-timers" }

func (gracefulShutdownTimers *Ospf_Processes_Process_GracefulShutdownTimers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (gracefulShutdownTimers *Ospf_Processes_Process_GracefulShutdownTimers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (gracefulShutdownTimers *Ospf_Processes_Process_GracefulShutdownTimers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (gracefulShutdownTimers *Ospf_Processes_Process_GracefulShutdownTimers) SetParent(parent types.Entity) { gracefulShutdownTimers.parent = parent }

func (gracefulShutdownTimers *Ospf_Processes_Process_GracefulShutdownTimers) GetParent() types.Entity { return gracefulShutdownTimers.parent }

func (gracefulShutdownTimers *Ospf_Processes_Process_GracefulShutdownTimers) GetParentYangName() string { return "process" }

// Ospf_Processes_Process_DefaultVrf
// Default VRF related configuration
type Ospf_Processes_Process_DefaultVrf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Ignore MOSPF (Type 6) LSAs. The type is interface{}.
    IgnoreMospf interface{}

    // Router ID for this OSPF process. Enter an IP Address. The type is string
    // with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouterId interface{}

    // Prefer type7 externals over type5. The type is interface{}.
    Type7 interface{}

    // OSPF SNMP context configuration. The type is string.
    SnmpContext interface{}

    // Max number of interfaces allowed to be configured. The type is interface{}
    // with range: 1..4294967295. The default value is 1024.
    MaximumInterfaces interface{}

    // Disable opaque LSAs. The type is interface{}.
    NoOpaque interface{}

    // Configure a route-policy for prioritizing RIB route install. The type is
    // string.
    SpfPrefixPriority interface{}

    // Forward packets over multiple paths (number of paths). The type is
    // interface{} with range: 1..64.
    MaximumPaths interface{}

    // Log changes in adjacency state. The type is OspfLogAdj.
    AdjacencyChanges interface{}

    // Set default metric of redistributed routes. The type is interface{} with
    // range: 1..16777214. The default value is 1.
    DefaultMetric interface{}

    // Enable convergence monitoring.
    MonitorConvergence Ospf_Processes_Process_DefaultVrf_MonitorConvergence

    // Segment Routing instance scoped parameters.
    SegmentRouting Ospf_Processes_Process_DefaultVrf_SegmentRouting

    // Configure MPLS routing protocol parameters.
    Mpls Ospf_Processes_Process_DefaultVrf_Mpls

    // Microloop configuration.
    Microloop Ospf_Processes_Process_DefaultVrf_Microloop

    // Maximum number of prefixes redistributed into OSPF.
    MaximumRedistributePrefix Ospf_Processes_Process_DefaultVrf_MaximumRedistributePrefix

    // Control distribution of default information.
    DefaultInformation Ospf_Processes_Process_DefaultVrf_DefaultInformation

    // OSPF address family.
    Af Ospf_Processes_Process_DefaultVrf_Af

    // Adjust OSPF input queue sizes and processing quantums.
    Queue Ospf_Processes_Process_DefaultVrf_Queue

    // Set maximum metric configuration.
    MaxMetric Ospf_Processes_Process_DefaultVrf_MaxMetric

    // Non Stop Forwarding configuration.
    Nsf Ospf_Processes_Process_DefaultVrf_Nsf

    // Process scope configuration.
    ProcessScope Ospf_Processes_Process_DefaultVrf_ProcessScope

    // Redistribute configurations.
    Redistribution Ospf_Processes_Process_DefaultVrf_Redistribution

    // Staggering OSPF adjacency bring up.
    AdjacencyStagger Ospf_Processes_Process_DefaultVrf_AdjacencyStagger

    // Set max-lsa configuration.
    MaxLsa Ospf_Processes_Process_DefaultVrf_MaxLsa

    // Controls automatic cost based on bandwidth.
    AutoCost Ospf_Processes_Process_DefaultVrf_AutoCost

    // Unequal Cost Multi-ptah configuration.
    Ucmp Ospf_Processes_Process_DefaultVrf_Ucmp

    // Fast-reroute instance scoped parameters.
    FastReroute Ospf_Processes_Process_DefaultVrf_FastReroute

    // Configure IP prefix summary.
    SummaryPrefixes Ospf_Processes_Process_DefaultVrf_SummaryPrefixes

    // Filter outgoing routing updates.
    OutgoingRouteUpdates Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates

    // Administrative distance configuration.
    Distance Ospf_Processes_Process_DefaultVrf_Distance

    // Area configuration.
    AreaAddresses Ospf_Processes_Process_DefaultVrf_AreaAddresses

    // Adjust routing timers.
    Timers Ospf_Processes_Process_DefaultVrf_Timers
}

func (defaultVrf *Ospf_Processes_Process_DefaultVrf) GetFilter() yfilter.YFilter { return defaultVrf.YFilter }

func (defaultVrf *Ospf_Processes_Process_DefaultVrf) SetFilter(yf yfilter.YFilter) { defaultVrf.YFilter = yf }

func (defaultVrf *Ospf_Processes_Process_DefaultVrf) GetGoName(yname string) string {
    if yname == "ignore-mospf" { return "IgnoreMospf" }
    if yname == "router-id" { return "RouterId" }
    if yname == "type7" { return "Type7" }
    if yname == "snmp-context" { return "SnmpContext" }
    if yname == "maximum-interfaces" { return "MaximumInterfaces" }
    if yname == "no-opaque" { return "NoOpaque" }
    if yname == "spf-prefix-priority" { return "SpfPrefixPriority" }
    if yname == "maximum-paths" { return "MaximumPaths" }
    if yname == "adjacency-changes" { return "AdjacencyChanges" }
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "monitor-convergence" { return "MonitorConvergence" }
    if yname == "segment-routing" { return "SegmentRouting" }
    if yname == "mpls" { return "Mpls" }
    if yname == "microloop" { return "Microloop" }
    if yname == "maximum-redistribute-prefix" { return "MaximumRedistributePrefix" }
    if yname == "default-information" { return "DefaultInformation" }
    if yname == "af" { return "Af" }
    if yname == "queue" { return "Queue" }
    if yname == "max-metric" { return "MaxMetric" }
    if yname == "nsf" { return "Nsf" }
    if yname == "process-scope" { return "ProcessScope" }
    if yname == "redistribution" { return "Redistribution" }
    if yname == "adjacency-stagger" { return "AdjacencyStagger" }
    if yname == "max-lsa" { return "MaxLsa" }
    if yname == "auto-cost" { return "AutoCost" }
    if yname == "ucmp" { return "Ucmp" }
    if yname == "fast-reroute" { return "FastReroute" }
    if yname == "summary-prefixes" { return "SummaryPrefixes" }
    if yname == "outgoing-route-updates" { return "OutgoingRouteUpdates" }
    if yname == "distance" { return "Distance" }
    if yname == "area-addresses" { return "AreaAddresses" }
    if yname == "timers" { return "Timers" }
    return ""
}

func (defaultVrf *Ospf_Processes_Process_DefaultVrf) GetSegmentPath() string {
    return "default-vrf"
}

func (defaultVrf *Ospf_Processes_Process_DefaultVrf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "monitor-convergence" {
        return &defaultVrf.MonitorConvergence
    }
    if childYangName == "segment-routing" {
        return &defaultVrf.SegmentRouting
    }
    if childYangName == "mpls" {
        return &defaultVrf.Mpls
    }
    if childYangName == "microloop" {
        return &defaultVrf.Microloop
    }
    if childYangName == "maximum-redistribute-prefix" {
        return &defaultVrf.MaximumRedistributePrefix
    }
    if childYangName == "default-information" {
        return &defaultVrf.DefaultInformation
    }
    if childYangName == "af" {
        return &defaultVrf.Af
    }
    if childYangName == "queue" {
        return &defaultVrf.Queue
    }
    if childYangName == "max-metric" {
        return &defaultVrf.MaxMetric
    }
    if childYangName == "nsf" {
        return &defaultVrf.Nsf
    }
    if childYangName == "process-scope" {
        return &defaultVrf.ProcessScope
    }
    if childYangName == "redistribution" {
        return &defaultVrf.Redistribution
    }
    if childYangName == "adjacency-stagger" {
        return &defaultVrf.AdjacencyStagger
    }
    if childYangName == "max-lsa" {
        return &defaultVrf.MaxLsa
    }
    if childYangName == "auto-cost" {
        return &defaultVrf.AutoCost
    }
    if childYangName == "ucmp" {
        return &defaultVrf.Ucmp
    }
    if childYangName == "fast-reroute" {
        return &defaultVrf.FastReroute
    }
    if childYangName == "summary-prefixes" {
        return &defaultVrf.SummaryPrefixes
    }
    if childYangName == "outgoing-route-updates" {
        return &defaultVrf.OutgoingRouteUpdates
    }
    if childYangName == "distance" {
        return &defaultVrf.Distance
    }
    if childYangName == "area-addresses" {
        return &defaultVrf.AreaAddresses
    }
    if childYangName == "timers" {
        return &defaultVrf.Timers
    }
    return nil
}

func (defaultVrf *Ospf_Processes_Process_DefaultVrf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["monitor-convergence"] = &defaultVrf.MonitorConvergence
    children["segment-routing"] = &defaultVrf.SegmentRouting
    children["mpls"] = &defaultVrf.Mpls
    children["microloop"] = &defaultVrf.Microloop
    children["maximum-redistribute-prefix"] = &defaultVrf.MaximumRedistributePrefix
    children["default-information"] = &defaultVrf.DefaultInformation
    children["af"] = &defaultVrf.Af
    children["queue"] = &defaultVrf.Queue
    children["max-metric"] = &defaultVrf.MaxMetric
    children["nsf"] = &defaultVrf.Nsf
    children["process-scope"] = &defaultVrf.ProcessScope
    children["redistribution"] = &defaultVrf.Redistribution
    children["adjacency-stagger"] = &defaultVrf.AdjacencyStagger
    children["max-lsa"] = &defaultVrf.MaxLsa
    children["auto-cost"] = &defaultVrf.AutoCost
    children["ucmp"] = &defaultVrf.Ucmp
    children["fast-reroute"] = &defaultVrf.FastReroute
    children["summary-prefixes"] = &defaultVrf.SummaryPrefixes
    children["outgoing-route-updates"] = &defaultVrf.OutgoingRouteUpdates
    children["distance"] = &defaultVrf.Distance
    children["area-addresses"] = &defaultVrf.AreaAddresses
    children["timers"] = &defaultVrf.Timers
    return children
}

func (defaultVrf *Ospf_Processes_Process_DefaultVrf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ignore-mospf"] = defaultVrf.IgnoreMospf
    leafs["router-id"] = defaultVrf.RouterId
    leafs["type7"] = defaultVrf.Type7
    leafs["snmp-context"] = defaultVrf.SnmpContext
    leafs["maximum-interfaces"] = defaultVrf.MaximumInterfaces
    leafs["no-opaque"] = defaultVrf.NoOpaque
    leafs["spf-prefix-priority"] = defaultVrf.SpfPrefixPriority
    leafs["maximum-paths"] = defaultVrf.MaximumPaths
    leafs["adjacency-changes"] = defaultVrf.AdjacencyChanges
    leafs["default-metric"] = defaultVrf.DefaultMetric
    return leafs
}

func (defaultVrf *Ospf_Processes_Process_DefaultVrf) GetBundleName() string { return "cisco_ios_xr" }

func (defaultVrf *Ospf_Processes_Process_DefaultVrf) GetYangName() string { return "default-vrf" }

func (defaultVrf *Ospf_Processes_Process_DefaultVrf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (defaultVrf *Ospf_Processes_Process_DefaultVrf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (defaultVrf *Ospf_Processes_Process_DefaultVrf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (defaultVrf *Ospf_Processes_Process_DefaultVrf) SetParent(parent types.Entity) { defaultVrf.parent = parent }

func (defaultVrf *Ospf_Processes_Process_DefaultVrf) GetParent() types.Entity { return defaultVrf.parent }

func (defaultVrf *Ospf_Processes_Process_DefaultVrf) GetParentYangName() string { return "process" }

// Ospf_Processes_Process_DefaultVrf_MonitorConvergence
// Enable convergence monitoring
type Ospf_Processes_Process_DefaultVrf_MonitorConvergence struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable convergence monitoring. The type is interface{}.
    Enable interface{}

    // Enable the monitoring of individual prefixes (prefix list name). The type
    // is string.
    PrefixList interface{}

    // Enable the Tracking of IP-Frr Convergence. The type is interface{}.
    TrackIpFrr interface{}

    // Enable the monitoring of External routes. The type is interface{}.
    TrackExternalRoutes interface{}

    // Enable the monitoring of Summary routes. The type is interface{}.
    TrackSummaryRoutes interface{}
}

func (monitorConvergence *Ospf_Processes_Process_DefaultVrf_MonitorConvergence) GetFilter() yfilter.YFilter { return monitorConvergence.YFilter }

func (monitorConvergence *Ospf_Processes_Process_DefaultVrf_MonitorConvergence) SetFilter(yf yfilter.YFilter) { monitorConvergence.YFilter = yf }

func (monitorConvergence *Ospf_Processes_Process_DefaultVrf_MonitorConvergence) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "prefix-list" { return "PrefixList" }
    if yname == "track-ip-frr" { return "TrackIpFrr" }
    if yname == "track-external-routes" { return "TrackExternalRoutes" }
    if yname == "track-summary-routes" { return "TrackSummaryRoutes" }
    return ""
}

func (monitorConvergence *Ospf_Processes_Process_DefaultVrf_MonitorConvergence) GetSegmentPath() string {
    return "monitor-convergence"
}

func (monitorConvergence *Ospf_Processes_Process_DefaultVrf_MonitorConvergence) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (monitorConvergence *Ospf_Processes_Process_DefaultVrf_MonitorConvergence) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (monitorConvergence *Ospf_Processes_Process_DefaultVrf_MonitorConvergence) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = monitorConvergence.Enable
    leafs["prefix-list"] = monitorConvergence.PrefixList
    leafs["track-ip-frr"] = monitorConvergence.TrackIpFrr
    leafs["track-external-routes"] = monitorConvergence.TrackExternalRoutes
    leafs["track-summary-routes"] = monitorConvergence.TrackSummaryRoutes
    return leafs
}

func (monitorConvergence *Ospf_Processes_Process_DefaultVrf_MonitorConvergence) GetBundleName() string { return "cisco_ios_xr" }

func (monitorConvergence *Ospf_Processes_Process_DefaultVrf_MonitorConvergence) GetYangName() string { return "monitor-convergence" }

func (monitorConvergence *Ospf_Processes_Process_DefaultVrf_MonitorConvergence) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (monitorConvergence *Ospf_Processes_Process_DefaultVrf_MonitorConvergence) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (monitorConvergence *Ospf_Processes_Process_DefaultVrf_MonitorConvergence) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (monitorConvergence *Ospf_Processes_Process_DefaultVrf_MonitorConvergence) SetParent(parent types.Entity) { monitorConvergence.parent = parent }

func (monitorConvergence *Ospf_Processes_Process_DefaultVrf_MonitorConvergence) GetParent() types.Entity { return monitorConvergence.parent }

func (monitorConvergence *Ospf_Processes_Process_DefaultVrf_MonitorConvergence) GetParentYangName() string { return "default-vrf" }

// Ospf_Processes_Process_DefaultVrf_SegmentRouting
// Segment Routing instance scoped parameters
type Ospf_Processes_Process_DefaultVrf_SegmentRouting struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Disable prefix-SID mapping client. The type is interface{}.
    PrefixSidMapReceiveDisable interface{}

    // Enable advertisement of local SRMS entries. The type is interface{}.
    PrefixSidMapAdvertiseLocal interface{}

    // Strict-SPF support and SID advertisement. The type is interface{}.
    StrictSpfDisable interface{}

    // Prefer segment routing labels over LDP labels.
    SrPrefer Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrPrefer
}

func (segmentRouting *Ospf_Processes_Process_DefaultVrf_SegmentRouting) GetFilter() yfilter.YFilter { return segmentRouting.YFilter }

func (segmentRouting *Ospf_Processes_Process_DefaultVrf_SegmentRouting) SetFilter(yf yfilter.YFilter) { segmentRouting.YFilter = yf }

func (segmentRouting *Ospf_Processes_Process_DefaultVrf_SegmentRouting) GetGoName(yname string) string {
    if yname == "prefix-sid-map-receive-disable" { return "PrefixSidMapReceiveDisable" }
    if yname == "prefix-sid-map-advertise-local" { return "PrefixSidMapAdvertiseLocal" }
    if yname == "strict-spf-disable" { return "StrictSpfDisable" }
    if yname == "sr-prefer" { return "SrPrefer" }
    return ""
}

func (segmentRouting *Ospf_Processes_Process_DefaultVrf_SegmentRouting) GetSegmentPath() string {
    return "segment-routing"
}

func (segmentRouting *Ospf_Processes_Process_DefaultVrf_SegmentRouting) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sr-prefer" {
        return &segmentRouting.SrPrefer
    }
    return nil
}

func (segmentRouting *Ospf_Processes_Process_DefaultVrf_SegmentRouting) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["sr-prefer"] = &segmentRouting.SrPrefer
    return children
}

func (segmentRouting *Ospf_Processes_Process_DefaultVrf_SegmentRouting) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix-sid-map-receive-disable"] = segmentRouting.PrefixSidMapReceiveDisable
    leafs["prefix-sid-map-advertise-local"] = segmentRouting.PrefixSidMapAdvertiseLocal
    leafs["strict-spf-disable"] = segmentRouting.StrictSpfDisable
    return leafs
}

func (segmentRouting *Ospf_Processes_Process_DefaultVrf_SegmentRouting) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRouting *Ospf_Processes_Process_DefaultVrf_SegmentRouting) GetYangName() string { return "segment-routing" }

func (segmentRouting *Ospf_Processes_Process_DefaultVrf_SegmentRouting) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRouting *Ospf_Processes_Process_DefaultVrf_SegmentRouting) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRouting *Ospf_Processes_Process_DefaultVrf_SegmentRouting) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRouting *Ospf_Processes_Process_DefaultVrf_SegmentRouting) SetParent(parent types.Entity) { segmentRouting.parent = parent }

func (segmentRouting *Ospf_Processes_Process_DefaultVrf_SegmentRouting) GetParent() types.Entity { return segmentRouting.parent }

func (segmentRouting *Ospf_Processes_Process_DefaultVrf_SegmentRouting) GetParentYangName() string { return "default-vrf" }

// Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrPrefer
// Prefer segment routing labels over LDP
// labels
type Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrPrefer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable SR labels to be preferred over LDP labels. The type is bool.
    Enable interface{}

    // Name of the Prefix List. The type is string.
    PrefixListName interface{}
}

func (srPrefer *Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrPrefer) GetFilter() yfilter.YFilter { return srPrefer.YFilter }

func (srPrefer *Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrPrefer) SetFilter(yf yfilter.YFilter) { srPrefer.YFilter = yf }

func (srPrefer *Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrPrefer) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "prefix-list-name" { return "PrefixListName" }
    return ""
}

func (srPrefer *Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrPrefer) GetSegmentPath() string {
    return "sr-prefer"
}

func (srPrefer *Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrPrefer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srPrefer *Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrPrefer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srPrefer *Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrPrefer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = srPrefer.Enable
    leafs["prefix-list-name"] = srPrefer.PrefixListName
    return leafs
}

func (srPrefer *Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrPrefer) GetBundleName() string { return "cisco_ios_xr" }

func (srPrefer *Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrPrefer) GetYangName() string { return "sr-prefer" }

func (srPrefer *Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrPrefer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srPrefer *Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrPrefer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srPrefer *Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrPrefer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srPrefer *Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrPrefer) SetParent(parent types.Entity) { srPrefer.parent = parent }

func (srPrefer *Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrPrefer) GetParent() types.Entity { return srPrefer.parent }

func (srPrefer *Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrPrefer) GetParentYangName() string { return "segment-routing" }

// Ospf_Processes_Process_DefaultVrf_Mpls
// Configure MPLS routing protocol parameters
type Ospf_Processes_Process_DefaultVrf_Mpls struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable igp-intact mode in OSPF. The type is interface{}.
    IgpIntact interface{}

    // Enable LDP sync induced metric propagation. The type is interface{}.
    LdpSyncUpdate interface{}

    // Enable multicast-intact mode in OSPF. The type is interface{}.
    MulticastIntact interface{}

    // Exclude IP destinations from using TE tunnels. The type is string.
    AutorouteExclude interface{}

    // MPLS-TE stable loopback address for this OSPF process.Enter either as IP
    // Address or Interface name, but not both. Unused field must be nil.
    MplsRouterId Ospf_Processes_Process_DefaultVrf_Mpls_MplsRouterId
}

func (mpls *Ospf_Processes_Process_DefaultVrf_Mpls) GetFilter() yfilter.YFilter { return mpls.YFilter }

func (mpls *Ospf_Processes_Process_DefaultVrf_Mpls) SetFilter(yf yfilter.YFilter) { mpls.YFilter = yf }

func (mpls *Ospf_Processes_Process_DefaultVrf_Mpls) GetGoName(yname string) string {
    if yname == "igp-intact" { return "IgpIntact" }
    if yname == "ldp-sync-update" { return "LdpSyncUpdate" }
    if yname == "multicast-intact" { return "MulticastIntact" }
    if yname == "autoroute-exclude" { return "AutorouteExclude" }
    if yname == "mpls-router-id" { return "MplsRouterId" }
    return ""
}

func (mpls *Ospf_Processes_Process_DefaultVrf_Mpls) GetSegmentPath() string {
    return "mpls"
}

func (mpls *Ospf_Processes_Process_DefaultVrf_Mpls) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mpls-router-id" {
        return &mpls.MplsRouterId
    }
    return nil
}

func (mpls *Ospf_Processes_Process_DefaultVrf_Mpls) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mpls-router-id"] = &mpls.MplsRouterId
    return children
}

func (mpls *Ospf_Processes_Process_DefaultVrf_Mpls) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["igp-intact"] = mpls.IgpIntact
    leafs["ldp-sync-update"] = mpls.LdpSyncUpdate
    leafs["multicast-intact"] = mpls.MulticastIntact
    leafs["autoroute-exclude"] = mpls.AutorouteExclude
    return leafs
}

func (mpls *Ospf_Processes_Process_DefaultVrf_Mpls) GetBundleName() string { return "cisco_ios_xr" }

func (mpls *Ospf_Processes_Process_DefaultVrf_Mpls) GetYangName() string { return "mpls" }

func (mpls *Ospf_Processes_Process_DefaultVrf_Mpls) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mpls *Ospf_Processes_Process_DefaultVrf_Mpls) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mpls *Ospf_Processes_Process_DefaultVrf_Mpls) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mpls *Ospf_Processes_Process_DefaultVrf_Mpls) SetParent(parent types.Entity) { mpls.parent = parent }

func (mpls *Ospf_Processes_Process_DefaultVrf_Mpls) GetParent() types.Entity { return mpls.parent }

func (mpls *Ospf_Processes_Process_DefaultVrf_Mpls) GetParentYangName() string { return "default-vrf" }

// Ospf_Processes_Process_DefaultVrf_Mpls_MplsRouterId
// MPLS-TE stable loopback address for this
// OSPF process.Enter either as IP Address or
// Interface name, but not both. Unused field
// must be nil
type Ospf_Processes_Process_DefaultVrf_Mpls_MplsRouterId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MPLS-TE stable IP address for this OSPF process. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // MPLS-TE stable loopback interface for this OSPF process. The type is string
    // with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (mplsRouterId *Ospf_Processes_Process_DefaultVrf_Mpls_MplsRouterId) GetFilter() yfilter.YFilter { return mplsRouterId.YFilter }

func (mplsRouterId *Ospf_Processes_Process_DefaultVrf_Mpls_MplsRouterId) SetFilter(yf yfilter.YFilter) { mplsRouterId.YFilter = yf }

func (mplsRouterId *Ospf_Processes_Process_DefaultVrf_Mpls_MplsRouterId) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (mplsRouterId *Ospf_Processes_Process_DefaultVrf_Mpls_MplsRouterId) GetSegmentPath() string {
    return "mpls-router-id"
}

func (mplsRouterId *Ospf_Processes_Process_DefaultVrf_Mpls_MplsRouterId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mplsRouterId *Ospf_Processes_Process_DefaultVrf_Mpls_MplsRouterId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mplsRouterId *Ospf_Processes_Process_DefaultVrf_Mpls_MplsRouterId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = mplsRouterId.Address
    leafs["interface-name"] = mplsRouterId.InterfaceName
    return leafs
}

func (mplsRouterId *Ospf_Processes_Process_DefaultVrf_Mpls_MplsRouterId) GetBundleName() string { return "cisco_ios_xr" }

func (mplsRouterId *Ospf_Processes_Process_DefaultVrf_Mpls_MplsRouterId) GetYangName() string { return "mpls-router-id" }

func (mplsRouterId *Ospf_Processes_Process_DefaultVrf_Mpls_MplsRouterId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsRouterId *Ospf_Processes_Process_DefaultVrf_Mpls_MplsRouterId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsRouterId *Ospf_Processes_Process_DefaultVrf_Mpls_MplsRouterId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsRouterId *Ospf_Processes_Process_DefaultVrf_Mpls_MplsRouterId) SetParent(parent types.Entity) { mplsRouterId.parent = parent }

func (mplsRouterId *Ospf_Processes_Process_DefaultVrf_Mpls_MplsRouterId) GetParent() types.Entity { return mplsRouterId.parent }

func (mplsRouterId *Ospf_Processes_Process_DefaultVrf_Mpls_MplsRouterId) GetParentYangName() string { return "mpls" }

// Ospf_Processes_Process_DefaultVrf_Microloop
// Microloop configuration
type Ospf_Processes_Process_DefaultVrf_Microloop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Microloop avoidance configuration.
    Avoidance Ospf_Processes_Process_DefaultVrf_Microloop_Avoidance
}

func (microloop *Ospf_Processes_Process_DefaultVrf_Microloop) GetFilter() yfilter.YFilter { return microloop.YFilter }

func (microloop *Ospf_Processes_Process_DefaultVrf_Microloop) SetFilter(yf yfilter.YFilter) { microloop.YFilter = yf }

func (microloop *Ospf_Processes_Process_DefaultVrf_Microloop) GetGoName(yname string) string {
    if yname == "avoidance" { return "Avoidance" }
    return ""
}

func (microloop *Ospf_Processes_Process_DefaultVrf_Microloop) GetSegmentPath() string {
    return "microloop"
}

func (microloop *Ospf_Processes_Process_DefaultVrf_Microloop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "avoidance" {
        return &microloop.Avoidance
    }
    return nil
}

func (microloop *Ospf_Processes_Process_DefaultVrf_Microloop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["avoidance"] = &microloop.Avoidance
    return children
}

func (microloop *Ospf_Processes_Process_DefaultVrf_Microloop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (microloop *Ospf_Processes_Process_DefaultVrf_Microloop) GetBundleName() string { return "cisco_ios_xr" }

func (microloop *Ospf_Processes_Process_DefaultVrf_Microloop) GetYangName() string { return "microloop" }

func (microloop *Ospf_Processes_Process_DefaultVrf_Microloop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (microloop *Ospf_Processes_Process_DefaultVrf_Microloop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (microloop *Ospf_Processes_Process_DefaultVrf_Microloop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (microloop *Ospf_Processes_Process_DefaultVrf_Microloop) SetParent(parent types.Entity) { microloop.parent = parent }

func (microloop *Ospf_Processes_Process_DefaultVrf_Microloop) GetParent() types.Entity { return microloop.parent }

func (microloop *Ospf_Processes_Process_DefaultVrf_Microloop) GetParentYangName() string { return "default-vrf" }

// Ospf_Processes_Process_DefaultVrf_Microloop_Avoidance
// Microloop avoidance configuration
type Ospf_Processes_Process_DefaultVrf_Microloop_Avoidance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MicroLoop avoidance feature enable configuration. The type is
    // OspfUloopAvoidance. The default value is all.
    Enable interface{}

    // Delay to introduce between SPF and RIB update in msecs. The type is
    // interface{} with range: 1..600000. Units are millisecond. The default value
    // is 5000.
    RibUpdateDelay interface{}
}

func (avoidance *Ospf_Processes_Process_DefaultVrf_Microloop_Avoidance) GetFilter() yfilter.YFilter { return avoidance.YFilter }

func (avoidance *Ospf_Processes_Process_DefaultVrf_Microloop_Avoidance) SetFilter(yf yfilter.YFilter) { avoidance.YFilter = yf }

func (avoidance *Ospf_Processes_Process_DefaultVrf_Microloop_Avoidance) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "rib-update-delay" { return "RibUpdateDelay" }
    return ""
}

func (avoidance *Ospf_Processes_Process_DefaultVrf_Microloop_Avoidance) GetSegmentPath() string {
    return "avoidance"
}

func (avoidance *Ospf_Processes_Process_DefaultVrf_Microloop_Avoidance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (avoidance *Ospf_Processes_Process_DefaultVrf_Microloop_Avoidance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (avoidance *Ospf_Processes_Process_DefaultVrf_Microloop_Avoidance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = avoidance.Enable
    leafs["rib-update-delay"] = avoidance.RibUpdateDelay
    return leafs
}

func (avoidance *Ospf_Processes_Process_DefaultVrf_Microloop_Avoidance) GetBundleName() string { return "cisco_ios_xr" }

func (avoidance *Ospf_Processes_Process_DefaultVrf_Microloop_Avoidance) GetYangName() string { return "avoidance" }

func (avoidance *Ospf_Processes_Process_DefaultVrf_Microloop_Avoidance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (avoidance *Ospf_Processes_Process_DefaultVrf_Microloop_Avoidance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (avoidance *Ospf_Processes_Process_DefaultVrf_Microloop_Avoidance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (avoidance *Ospf_Processes_Process_DefaultVrf_Microloop_Avoidance) SetParent(parent types.Entity) { avoidance.parent = parent }

func (avoidance *Ospf_Processes_Process_DefaultVrf_Microloop_Avoidance) GetParent() types.Entity { return avoidance.parent }

func (avoidance *Ospf_Processes_Process_DefaultVrf_Microloop_Avoidance) GetParentYangName() string { return "microloop" }

// Ospf_Processes_Process_DefaultVrf_MaximumRedistributePrefix
// Maximum number of prefixes redistributed into
// OSPF
type Ospf_Processes_Process_DefaultVrf_MaximumRedistributePrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Maximum number of prefixes redistributed. The type is interface{} with
    // range: 1..4294967295.
    NumberOfPrefixes interface{}

    // Threshold value (%) at which to generate a warning msg. The type is
    // interface{} with range: 1..100.
    Threshold interface{}

    // Only give warning messsage when limit is exceeded. The type is bool.
    WarningOnly interface{}
}

func (maximumRedistributePrefix *Ospf_Processes_Process_DefaultVrf_MaximumRedistributePrefix) GetFilter() yfilter.YFilter { return maximumRedistributePrefix.YFilter }

func (maximumRedistributePrefix *Ospf_Processes_Process_DefaultVrf_MaximumRedistributePrefix) SetFilter(yf yfilter.YFilter) { maximumRedistributePrefix.YFilter = yf }

func (maximumRedistributePrefix *Ospf_Processes_Process_DefaultVrf_MaximumRedistributePrefix) GetGoName(yname string) string {
    if yname == "number-of-prefixes" { return "NumberOfPrefixes" }
    if yname == "threshold" { return "Threshold" }
    if yname == "warning-only" { return "WarningOnly" }
    return ""
}

func (maximumRedistributePrefix *Ospf_Processes_Process_DefaultVrf_MaximumRedistributePrefix) GetSegmentPath() string {
    return "maximum-redistribute-prefix"
}

func (maximumRedistributePrefix *Ospf_Processes_Process_DefaultVrf_MaximumRedistributePrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maximumRedistributePrefix *Ospf_Processes_Process_DefaultVrf_MaximumRedistributePrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maximumRedistributePrefix *Ospf_Processes_Process_DefaultVrf_MaximumRedistributePrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number-of-prefixes"] = maximumRedistributePrefix.NumberOfPrefixes
    leafs["threshold"] = maximumRedistributePrefix.Threshold
    leafs["warning-only"] = maximumRedistributePrefix.WarningOnly
    return leafs
}

func (maximumRedistributePrefix *Ospf_Processes_Process_DefaultVrf_MaximumRedistributePrefix) GetBundleName() string { return "cisco_ios_xr" }

func (maximumRedistributePrefix *Ospf_Processes_Process_DefaultVrf_MaximumRedistributePrefix) GetYangName() string { return "maximum-redistribute-prefix" }

func (maximumRedistributePrefix *Ospf_Processes_Process_DefaultVrf_MaximumRedistributePrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maximumRedistributePrefix *Ospf_Processes_Process_DefaultVrf_MaximumRedistributePrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maximumRedistributePrefix *Ospf_Processes_Process_DefaultVrf_MaximumRedistributePrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maximumRedistributePrefix *Ospf_Processes_Process_DefaultVrf_MaximumRedistributePrefix) SetParent(parent types.Entity) { maximumRedistributePrefix.parent = parent }

func (maximumRedistributePrefix *Ospf_Processes_Process_DefaultVrf_MaximumRedistributePrefix) GetParent() types.Entity { return maximumRedistributePrefix.parent }

func (maximumRedistributePrefix *Ospf_Processes_Process_DefaultVrf_MaximumRedistributePrefix) GetParentYangName() string { return "default-vrf" }

// Ospf_Processes_Process_DefaultVrf_DefaultInformation
// Control distribution of default information
type Ospf_Processes_Process_DefaultVrf_DefaultInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Always advertise default route. The type is bool. The default value is
    // false.
    AlwaysAdvertise interface{}

    // OSPF metric. The type is interface{} with range: 1..16777214. The default
    // value is 1.
    Metric interface{}

    // OSPF External metric type. The type is OspfLinkStateMetric. The default
    // value is type2.
    MetricType interface{}

    // Routing policy name. The type is string.
    RoutePolicyName interface{}
}

func (defaultInformation *Ospf_Processes_Process_DefaultVrf_DefaultInformation) GetFilter() yfilter.YFilter { return defaultInformation.YFilter }

func (defaultInformation *Ospf_Processes_Process_DefaultVrf_DefaultInformation) SetFilter(yf yfilter.YFilter) { defaultInformation.YFilter = yf }

func (defaultInformation *Ospf_Processes_Process_DefaultVrf_DefaultInformation) GetGoName(yname string) string {
    if yname == "always-advertise" { return "AlwaysAdvertise" }
    if yname == "metric" { return "Metric" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (defaultInformation *Ospf_Processes_Process_DefaultVrf_DefaultInformation) GetSegmentPath() string {
    return "default-information"
}

func (defaultInformation *Ospf_Processes_Process_DefaultVrf_DefaultInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (defaultInformation *Ospf_Processes_Process_DefaultVrf_DefaultInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (defaultInformation *Ospf_Processes_Process_DefaultVrf_DefaultInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["always-advertise"] = defaultInformation.AlwaysAdvertise
    leafs["metric"] = defaultInformation.Metric
    leafs["metric-type"] = defaultInformation.MetricType
    leafs["route-policy-name"] = defaultInformation.RoutePolicyName
    return leafs
}

func (defaultInformation *Ospf_Processes_Process_DefaultVrf_DefaultInformation) GetBundleName() string { return "cisco_ios_xr" }

func (defaultInformation *Ospf_Processes_Process_DefaultVrf_DefaultInformation) GetYangName() string { return "default-information" }

func (defaultInformation *Ospf_Processes_Process_DefaultVrf_DefaultInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (defaultInformation *Ospf_Processes_Process_DefaultVrf_DefaultInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (defaultInformation *Ospf_Processes_Process_DefaultVrf_DefaultInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (defaultInformation *Ospf_Processes_Process_DefaultVrf_DefaultInformation) SetParent(parent types.Entity) { defaultInformation.parent = parent }

func (defaultInformation *Ospf_Processes_Process_DefaultVrf_DefaultInformation) GetParent() types.Entity { return defaultInformation.parent }

func (defaultInformation *Ospf_Processes_Process_DefaultVrf_DefaultInformation) GetParentYangName() string { return "default-vrf" }

// Ospf_Processes_Process_DefaultVrf_Af
// OSPF address family
// This type is a presence type.
type Ospf_Processes_Process_DefaultVrf_Af struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is OspfAddressFamily. This attribute is mandatory.
    AfName interface{}

    // Sub-Address family. The type is OspfSubAddressFamily.
    SafName interface{}
}

func (af *Ospf_Processes_Process_DefaultVrf_Af) GetFilter() yfilter.YFilter { return af.YFilter }

func (af *Ospf_Processes_Process_DefaultVrf_Af) SetFilter(yf yfilter.YFilter) { af.YFilter = yf }

func (af *Ospf_Processes_Process_DefaultVrf_Af) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "saf-name" { return "SafName" }
    return ""
}

func (af *Ospf_Processes_Process_DefaultVrf_Af) GetSegmentPath() string {
    return "af"
}

func (af *Ospf_Processes_Process_DefaultVrf_Af) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (af *Ospf_Processes_Process_DefaultVrf_Af) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (af *Ospf_Processes_Process_DefaultVrf_Af) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = af.AfName
    leafs["saf-name"] = af.SafName
    return leafs
}

func (af *Ospf_Processes_Process_DefaultVrf_Af) GetBundleName() string { return "cisco_ios_xr" }

func (af *Ospf_Processes_Process_DefaultVrf_Af) GetYangName() string { return "af" }

func (af *Ospf_Processes_Process_DefaultVrf_Af) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (af *Ospf_Processes_Process_DefaultVrf_Af) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (af *Ospf_Processes_Process_DefaultVrf_Af) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (af *Ospf_Processes_Process_DefaultVrf_Af) SetParent(parent types.Entity) { af.parent = parent }

func (af *Ospf_Processes_Process_DefaultVrf_Af) GetParent() types.Entity { return af.parent }

func (af *Ospf_Processes_Process_DefaultVrf_Af) GetParentYangName() string { return "default-vrf" }

// Ospf_Processes_Process_DefaultVrf_Queue
// Adjust OSPF input queue sizes and processing
// quantums
type Ospf_Processes_Process_DefaultVrf_Queue struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Maximum number of continuous rate-limited LSAs processed for FLUSH. The
    // type is interface{} with range: 30..3000. The default value is 150.
    DispatchRateLimitedFlush interface{}

    // Hello events are dropped when incoming event queue exceeds this. The type
    // is interface{} with range: 1000..30000. The default value is 9500.
    LimitHigh interface{}

    // Maximum number of continuous summary or external LSAs processed. The type
    // is interface{} with range: 30..3000. The default value is 150.
    DispatchSpfLsaLimit interface{}

    // DBDs/Updates are dropped when incoming event queue exceeds this. The type
    // is interface{} with range: 1000..30000. The default value is 8000.
    LimitLow interface{}

    // Maximum number of continuous rate-limited LSAs processed. The type is
    // interface{} with range: 30..3000. The default value is 150.
    DispatchRateLimited interface{}

    // LSA ACKs are dropped when incoming event queue exceeds this. The type is
    // interface{} with range: 1000..30000. The default value is 9000.
    LimitMedium interface{}

    // Maximum number of continuous incoming packet-related events processed. The
    // type is interface{} with range: 30..3000. The default value is 300.
    DispatchIncoming interface{}
}

func (queue *Ospf_Processes_Process_DefaultVrf_Queue) GetFilter() yfilter.YFilter { return queue.YFilter }

func (queue *Ospf_Processes_Process_DefaultVrf_Queue) SetFilter(yf yfilter.YFilter) { queue.YFilter = yf }

func (queue *Ospf_Processes_Process_DefaultVrf_Queue) GetGoName(yname string) string {
    if yname == "dispatch-rate-limited-flush" { return "DispatchRateLimitedFlush" }
    if yname == "limit-high" { return "LimitHigh" }
    if yname == "dispatch-spf-lsa-limit" { return "DispatchSpfLsaLimit" }
    if yname == "limit-low" { return "LimitLow" }
    if yname == "dispatch-rate-limited" { return "DispatchRateLimited" }
    if yname == "limit-medium" { return "LimitMedium" }
    if yname == "dispatch-incoming" { return "DispatchIncoming" }
    return ""
}

func (queue *Ospf_Processes_Process_DefaultVrf_Queue) GetSegmentPath() string {
    return "queue"
}

func (queue *Ospf_Processes_Process_DefaultVrf_Queue) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (queue *Ospf_Processes_Process_DefaultVrf_Queue) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (queue *Ospf_Processes_Process_DefaultVrf_Queue) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dispatch-rate-limited-flush"] = queue.DispatchRateLimitedFlush
    leafs["limit-high"] = queue.LimitHigh
    leafs["dispatch-spf-lsa-limit"] = queue.DispatchSpfLsaLimit
    leafs["limit-low"] = queue.LimitLow
    leafs["dispatch-rate-limited"] = queue.DispatchRateLimited
    leafs["limit-medium"] = queue.LimitMedium
    leafs["dispatch-incoming"] = queue.DispatchIncoming
    return leafs
}

func (queue *Ospf_Processes_Process_DefaultVrf_Queue) GetBundleName() string { return "cisco_ios_xr" }

func (queue *Ospf_Processes_Process_DefaultVrf_Queue) GetYangName() string { return "queue" }

func (queue *Ospf_Processes_Process_DefaultVrf_Queue) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (queue *Ospf_Processes_Process_DefaultVrf_Queue) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (queue *Ospf_Processes_Process_DefaultVrf_Queue) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (queue *Ospf_Processes_Process_DefaultVrf_Queue) SetParent(parent types.Entity) { queue.parent = parent }

func (queue *Ospf_Processes_Process_DefaultVrf_Queue) GetParent() types.Entity { return queue.parent }

func (queue *Ospf_Processes_Process_DefaultVrf_Queue) GetParentYangName() string { return "default-vrf" }

// Ospf_Processes_Process_DefaultVrf_MaxMetric
// Set maximum metric configuration
type Ospf_Processes_Process_DefaultVrf_MaxMetric struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Block ABR-disable mode entry while in max-metric mode. The type is
    // interface{}.
    MaxMetricNoAbrOff interface{}

    // Set maximum metric on-proc-restart configuration.
    MaxMetricOnProcRestart Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcRestart

    // Set maximum metric on-startup configuration.
    MaxMetricOnStartup Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnStartup

    // Set maximum metric on-proc-migration configuration.
    MaxMetricOnProcMigration Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcMigration

    // Set maximum metric always configuration.
    MaxMetricAlways Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricAlways

    // Set maximum metric on-switchover configuration.
    MaxMetricOnSwitchover Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnSwitchover
}

func (maxMetric *Ospf_Processes_Process_DefaultVrf_MaxMetric) GetFilter() yfilter.YFilter { return maxMetric.YFilter }

func (maxMetric *Ospf_Processes_Process_DefaultVrf_MaxMetric) SetFilter(yf yfilter.YFilter) { maxMetric.YFilter = yf }

func (maxMetric *Ospf_Processes_Process_DefaultVrf_MaxMetric) GetGoName(yname string) string {
    if yname == "max-metric-no-abr-off" { return "MaxMetricNoAbrOff" }
    if yname == "max-metric-on-proc-restart" { return "MaxMetricOnProcRestart" }
    if yname == "max-metric-on-startup" { return "MaxMetricOnStartup" }
    if yname == "max-metric-on-proc-migration" { return "MaxMetricOnProcMigration" }
    if yname == "max-metric-always" { return "MaxMetricAlways" }
    if yname == "max-metric-on-switchover" { return "MaxMetricOnSwitchover" }
    return ""
}

func (maxMetric *Ospf_Processes_Process_DefaultVrf_MaxMetric) GetSegmentPath() string {
    return "max-metric"
}

func (maxMetric *Ospf_Processes_Process_DefaultVrf_MaxMetric) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "max-metric-on-proc-restart" {
        return &maxMetric.MaxMetricOnProcRestart
    }
    if childYangName == "max-metric-on-startup" {
        return &maxMetric.MaxMetricOnStartup
    }
    if childYangName == "max-metric-on-proc-migration" {
        return &maxMetric.MaxMetricOnProcMigration
    }
    if childYangName == "max-metric-always" {
        return &maxMetric.MaxMetricAlways
    }
    if childYangName == "max-metric-on-switchover" {
        return &maxMetric.MaxMetricOnSwitchover
    }
    return nil
}

func (maxMetric *Ospf_Processes_Process_DefaultVrf_MaxMetric) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["max-metric-on-proc-restart"] = &maxMetric.MaxMetricOnProcRestart
    children["max-metric-on-startup"] = &maxMetric.MaxMetricOnStartup
    children["max-metric-on-proc-migration"] = &maxMetric.MaxMetricOnProcMigration
    children["max-metric-always"] = &maxMetric.MaxMetricAlways
    children["max-metric-on-switchover"] = &maxMetric.MaxMetricOnSwitchover
    return children
}

func (maxMetric *Ospf_Processes_Process_DefaultVrf_MaxMetric) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["max-metric-no-abr-off"] = maxMetric.MaxMetricNoAbrOff
    return leafs
}

func (maxMetric *Ospf_Processes_Process_DefaultVrf_MaxMetric) GetBundleName() string { return "cisco_ios_xr" }

func (maxMetric *Ospf_Processes_Process_DefaultVrf_MaxMetric) GetYangName() string { return "max-metric" }

func (maxMetric *Ospf_Processes_Process_DefaultVrf_MaxMetric) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxMetric *Ospf_Processes_Process_DefaultVrf_MaxMetric) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxMetric *Ospf_Processes_Process_DefaultVrf_MaxMetric) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxMetric *Ospf_Processes_Process_DefaultVrf_MaxMetric) SetParent(parent types.Entity) { maxMetric.parent = parent }

func (maxMetric *Ospf_Processes_Process_DefaultVrf_MaxMetric) GetParent() types.Entity { return maxMetric.parent }

func (maxMetric *Ospf_Processes_Process_DefaultVrf_MaxMetric) GetParentYangName() string { return "default-vrf" }

// Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcRestart
// Set maximum metric on-proc-restart
// configuration
type Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcRestart struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Let BGP decide when to originate router-LSA with normal metric. The type is
    // bool. The default value is false.
    WaitForBgp interface{}

    // Time in seconds to originate router-LSA with max-metric. The type is
    // interface{} with range: 5..86400. Units are second.
    StartupMax interface{}

    // Set maximum metric for stub links in router-LSAs. The type is bool.
    IncludeStub interface{}

    // Override summary-lsa metric with max-metric value. The type is bool.
    SummaryLsa interface{}

    // Overriding metric in summary-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    SummaryLsaMaximumMetric interface{}

    // Override external-lsa metric with max-metric value. The type is bool.
    ExternalLsa interface{}

    // Overriding metric in external-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    ExternalLsaMaximumMetric interface{}
}

func (maxMetricOnProcRestart *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcRestart) GetFilter() yfilter.YFilter { return maxMetricOnProcRestart.YFilter }

func (maxMetricOnProcRestart *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcRestart) SetFilter(yf yfilter.YFilter) { maxMetricOnProcRestart.YFilter = yf }

func (maxMetricOnProcRestart *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcRestart) GetGoName(yname string) string {
    if yname == "wait-for-bgp" { return "WaitForBgp" }
    if yname == "startup-max" { return "StartupMax" }
    if yname == "include-stub" { return "IncludeStub" }
    if yname == "summary-lsa" { return "SummaryLsa" }
    if yname == "summary-lsa-maximum-metric" { return "SummaryLsaMaximumMetric" }
    if yname == "external-lsa" { return "ExternalLsa" }
    if yname == "external-lsa-maximum-metric" { return "ExternalLsaMaximumMetric" }
    return ""
}

func (maxMetricOnProcRestart *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcRestart) GetSegmentPath() string {
    return "max-metric-on-proc-restart"
}

func (maxMetricOnProcRestart *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcRestart) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maxMetricOnProcRestart *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcRestart) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maxMetricOnProcRestart *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcRestart) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["wait-for-bgp"] = maxMetricOnProcRestart.WaitForBgp
    leafs["startup-max"] = maxMetricOnProcRestart.StartupMax
    leafs["include-stub"] = maxMetricOnProcRestart.IncludeStub
    leafs["summary-lsa"] = maxMetricOnProcRestart.SummaryLsa
    leafs["summary-lsa-maximum-metric"] = maxMetricOnProcRestart.SummaryLsaMaximumMetric
    leafs["external-lsa"] = maxMetricOnProcRestart.ExternalLsa
    leafs["external-lsa-maximum-metric"] = maxMetricOnProcRestart.ExternalLsaMaximumMetric
    return leafs
}

func (maxMetricOnProcRestart *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcRestart) GetBundleName() string { return "cisco_ios_xr" }

func (maxMetricOnProcRestart *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcRestart) GetYangName() string { return "max-metric-on-proc-restart" }

func (maxMetricOnProcRestart *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcRestart) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxMetricOnProcRestart *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcRestart) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxMetricOnProcRestart *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcRestart) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxMetricOnProcRestart *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcRestart) SetParent(parent types.Entity) { maxMetricOnProcRestart.parent = parent }

func (maxMetricOnProcRestart *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcRestart) GetParent() types.Entity { return maxMetricOnProcRestart.parent }

func (maxMetricOnProcRestart *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcRestart) GetParentYangName() string { return "max-metric" }

// Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnStartup
// Set maximum metric on-startup configuration
type Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnStartup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Let BGP decide when to originate router-LSA with normal metric. The type is
    // bool. The default value is false.
    WaitForBgp interface{}

    // Time in seconds to originate router-LSA with max-metric. The type is
    // interface{} with range: 5..86400. Units are second.
    StartupMax interface{}

    // Set maximum metric for stub links in router-LSAs. The type is bool.
    IncludeStub interface{}

    // Override summary-lsa metric with max-metric value. The type is bool.
    SummaryLsa interface{}

    // Overriding metric in summary-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    SummaryLsaMaximumMetric interface{}

    // Override external-lsa metric with max-metric value. The type is bool.
    ExternalLsa interface{}

    // Overriding metric in external-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    ExternalLsaMaximumMetric interface{}
}

func (maxMetricOnStartup *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnStartup) GetFilter() yfilter.YFilter { return maxMetricOnStartup.YFilter }

func (maxMetricOnStartup *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnStartup) SetFilter(yf yfilter.YFilter) { maxMetricOnStartup.YFilter = yf }

func (maxMetricOnStartup *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnStartup) GetGoName(yname string) string {
    if yname == "wait-for-bgp" { return "WaitForBgp" }
    if yname == "startup-max" { return "StartupMax" }
    if yname == "include-stub" { return "IncludeStub" }
    if yname == "summary-lsa" { return "SummaryLsa" }
    if yname == "summary-lsa-maximum-metric" { return "SummaryLsaMaximumMetric" }
    if yname == "external-lsa" { return "ExternalLsa" }
    if yname == "external-lsa-maximum-metric" { return "ExternalLsaMaximumMetric" }
    return ""
}

func (maxMetricOnStartup *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnStartup) GetSegmentPath() string {
    return "max-metric-on-startup"
}

func (maxMetricOnStartup *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnStartup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maxMetricOnStartup *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnStartup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maxMetricOnStartup *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnStartup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["wait-for-bgp"] = maxMetricOnStartup.WaitForBgp
    leafs["startup-max"] = maxMetricOnStartup.StartupMax
    leafs["include-stub"] = maxMetricOnStartup.IncludeStub
    leafs["summary-lsa"] = maxMetricOnStartup.SummaryLsa
    leafs["summary-lsa-maximum-metric"] = maxMetricOnStartup.SummaryLsaMaximumMetric
    leafs["external-lsa"] = maxMetricOnStartup.ExternalLsa
    leafs["external-lsa-maximum-metric"] = maxMetricOnStartup.ExternalLsaMaximumMetric
    return leafs
}

func (maxMetricOnStartup *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnStartup) GetBundleName() string { return "cisco_ios_xr" }

func (maxMetricOnStartup *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnStartup) GetYangName() string { return "max-metric-on-startup" }

func (maxMetricOnStartup *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnStartup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxMetricOnStartup *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnStartup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxMetricOnStartup *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnStartup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxMetricOnStartup *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnStartup) SetParent(parent types.Entity) { maxMetricOnStartup.parent = parent }

func (maxMetricOnStartup *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnStartup) GetParent() types.Entity { return maxMetricOnStartup.parent }

func (maxMetricOnStartup *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnStartup) GetParentYangName() string { return "max-metric" }

// Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcMigration
// Set maximum metric on-proc-migration
// configuration
type Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcMigration struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Let BGP decide when to originate router-LSA with normal metric. The type is
    // bool. The default value is false.
    WaitForBgp interface{}

    // Time in seconds to originate router-LSA with max-metric. The type is
    // interface{} with range: 5..86400. Units are second.
    StartupMax interface{}

    // Set maximum metric for stub links in router-LSAs. The type is bool.
    IncludeStub interface{}

    // Override summary-lsa metric with max-metric value. The type is bool.
    SummaryLsa interface{}

    // Overriding metric in summary-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    SummaryLsaMaximumMetric interface{}

    // Override external-lsa metric with max-metric value. The type is bool.
    ExternalLsa interface{}

    // Overriding metric in external-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    ExternalLsaMaximumMetric interface{}
}

func (maxMetricOnProcMigration *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcMigration) GetFilter() yfilter.YFilter { return maxMetricOnProcMigration.YFilter }

func (maxMetricOnProcMigration *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcMigration) SetFilter(yf yfilter.YFilter) { maxMetricOnProcMigration.YFilter = yf }

func (maxMetricOnProcMigration *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcMigration) GetGoName(yname string) string {
    if yname == "wait-for-bgp" { return "WaitForBgp" }
    if yname == "startup-max" { return "StartupMax" }
    if yname == "include-stub" { return "IncludeStub" }
    if yname == "summary-lsa" { return "SummaryLsa" }
    if yname == "summary-lsa-maximum-metric" { return "SummaryLsaMaximumMetric" }
    if yname == "external-lsa" { return "ExternalLsa" }
    if yname == "external-lsa-maximum-metric" { return "ExternalLsaMaximumMetric" }
    return ""
}

func (maxMetricOnProcMigration *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcMigration) GetSegmentPath() string {
    return "max-metric-on-proc-migration"
}

func (maxMetricOnProcMigration *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcMigration) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maxMetricOnProcMigration *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcMigration) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maxMetricOnProcMigration *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcMigration) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["wait-for-bgp"] = maxMetricOnProcMigration.WaitForBgp
    leafs["startup-max"] = maxMetricOnProcMigration.StartupMax
    leafs["include-stub"] = maxMetricOnProcMigration.IncludeStub
    leafs["summary-lsa"] = maxMetricOnProcMigration.SummaryLsa
    leafs["summary-lsa-maximum-metric"] = maxMetricOnProcMigration.SummaryLsaMaximumMetric
    leafs["external-lsa"] = maxMetricOnProcMigration.ExternalLsa
    leafs["external-lsa-maximum-metric"] = maxMetricOnProcMigration.ExternalLsaMaximumMetric
    return leafs
}

func (maxMetricOnProcMigration *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcMigration) GetBundleName() string { return "cisco_ios_xr" }

func (maxMetricOnProcMigration *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcMigration) GetYangName() string { return "max-metric-on-proc-migration" }

func (maxMetricOnProcMigration *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcMigration) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxMetricOnProcMigration *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcMigration) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxMetricOnProcMigration *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcMigration) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxMetricOnProcMigration *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcMigration) SetParent(parent types.Entity) { maxMetricOnProcMigration.parent = parent }

func (maxMetricOnProcMigration *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcMigration) GetParent() types.Entity { return maxMetricOnProcMigration.parent }

func (maxMetricOnProcMigration *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcMigration) GetParentYangName() string { return "max-metric" }

// Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricAlways
// Set maximum metric always configuration
type Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricAlways struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Set maximum metric for stub links in router-LSAs. The type is bool. The
    // default value is false.
    IncludeStub interface{}

    // Override summary-lsa metric with max-metric value. The type is bool.
    SummaryLsa interface{}

    // Overriding metric in summary-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    SummaryLsaMaximumMetric interface{}

    // Override external-lsa metric with max-metric value. The type is bool.
    ExternalLsa interface{}

    // Overriding metric in external-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    ExternalLsaMaximumMetric interface{}
}

func (maxMetricAlways *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricAlways) GetFilter() yfilter.YFilter { return maxMetricAlways.YFilter }

func (maxMetricAlways *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricAlways) SetFilter(yf yfilter.YFilter) { maxMetricAlways.YFilter = yf }

func (maxMetricAlways *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricAlways) GetGoName(yname string) string {
    if yname == "include-stub" { return "IncludeStub" }
    if yname == "summary-lsa" { return "SummaryLsa" }
    if yname == "summary-lsa-maximum-metric" { return "SummaryLsaMaximumMetric" }
    if yname == "external-lsa" { return "ExternalLsa" }
    if yname == "external-lsa-maximum-metric" { return "ExternalLsaMaximumMetric" }
    return ""
}

func (maxMetricAlways *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricAlways) GetSegmentPath() string {
    return "max-metric-always"
}

func (maxMetricAlways *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricAlways) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maxMetricAlways *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricAlways) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maxMetricAlways *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricAlways) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["include-stub"] = maxMetricAlways.IncludeStub
    leafs["summary-lsa"] = maxMetricAlways.SummaryLsa
    leafs["summary-lsa-maximum-metric"] = maxMetricAlways.SummaryLsaMaximumMetric
    leafs["external-lsa"] = maxMetricAlways.ExternalLsa
    leafs["external-lsa-maximum-metric"] = maxMetricAlways.ExternalLsaMaximumMetric
    return leafs
}

func (maxMetricAlways *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricAlways) GetBundleName() string { return "cisco_ios_xr" }

func (maxMetricAlways *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricAlways) GetYangName() string { return "max-metric-always" }

func (maxMetricAlways *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricAlways) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxMetricAlways *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricAlways) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxMetricAlways *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricAlways) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxMetricAlways *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricAlways) SetParent(parent types.Entity) { maxMetricAlways.parent = parent }

func (maxMetricAlways *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricAlways) GetParent() types.Entity { return maxMetricAlways.parent }

func (maxMetricAlways *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricAlways) GetParentYangName() string { return "max-metric" }

// Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnSwitchover
// Set maximum metric on-switchover configuration
type Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnSwitchover struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Let BGP decide when to originate router-LSA with normal metric. The type is
    // bool. The default value is false.
    WaitForBgp interface{}

    // Time in seconds to originate router-LSA with max-metric. The type is
    // interface{} with range: 5..86400. Units are second.
    StartupMax interface{}

    // Set maximum metric for stub links in router-LSAs. The type is bool.
    IncludeStub interface{}

    // Override summary-lsa metric with max-metric value. The type is bool.
    SummaryLsa interface{}

    // Overriding metric in summary-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    SummaryLsaMaximumMetric interface{}

    // Override external-lsa metric with max-metric value. The type is bool.
    ExternalLsa interface{}

    // Overriding metric in external-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    ExternalLsaMaximumMetric interface{}
}

func (maxMetricOnSwitchover *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnSwitchover) GetFilter() yfilter.YFilter { return maxMetricOnSwitchover.YFilter }

func (maxMetricOnSwitchover *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnSwitchover) SetFilter(yf yfilter.YFilter) { maxMetricOnSwitchover.YFilter = yf }

func (maxMetricOnSwitchover *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnSwitchover) GetGoName(yname string) string {
    if yname == "wait-for-bgp" { return "WaitForBgp" }
    if yname == "startup-max" { return "StartupMax" }
    if yname == "include-stub" { return "IncludeStub" }
    if yname == "summary-lsa" { return "SummaryLsa" }
    if yname == "summary-lsa-maximum-metric" { return "SummaryLsaMaximumMetric" }
    if yname == "external-lsa" { return "ExternalLsa" }
    if yname == "external-lsa-maximum-metric" { return "ExternalLsaMaximumMetric" }
    return ""
}

func (maxMetricOnSwitchover *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnSwitchover) GetSegmentPath() string {
    return "max-metric-on-switchover"
}

func (maxMetricOnSwitchover *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnSwitchover) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maxMetricOnSwitchover *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnSwitchover) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maxMetricOnSwitchover *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnSwitchover) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["wait-for-bgp"] = maxMetricOnSwitchover.WaitForBgp
    leafs["startup-max"] = maxMetricOnSwitchover.StartupMax
    leafs["include-stub"] = maxMetricOnSwitchover.IncludeStub
    leafs["summary-lsa"] = maxMetricOnSwitchover.SummaryLsa
    leafs["summary-lsa-maximum-metric"] = maxMetricOnSwitchover.SummaryLsaMaximumMetric
    leafs["external-lsa"] = maxMetricOnSwitchover.ExternalLsa
    leafs["external-lsa-maximum-metric"] = maxMetricOnSwitchover.ExternalLsaMaximumMetric
    return leafs
}

func (maxMetricOnSwitchover *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnSwitchover) GetBundleName() string { return "cisco_ios_xr" }

func (maxMetricOnSwitchover *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnSwitchover) GetYangName() string { return "max-metric-on-switchover" }

func (maxMetricOnSwitchover *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnSwitchover) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxMetricOnSwitchover *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnSwitchover) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxMetricOnSwitchover *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnSwitchover) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxMetricOnSwitchover *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnSwitchover) SetParent(parent types.Entity) { maxMetricOnSwitchover.parent = parent }

func (maxMetricOnSwitchover *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnSwitchover) GetParent() types.Entity { return maxMetricOnSwitchover.parent }

func (maxMetricOnSwitchover *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnSwitchover) GetParentYangName() string { return "max-metric" }

// Ospf_Processes_Process_DefaultVrf_Nsf
// Non Stop Forwarding configuration
type Ospf_Processes_Process_DefaultVrf_Nsf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Maximum route lifetime following restart in seconds. The type is
    // interface{} with range: 90..1800. Units are second. The default value is
    // 90.
    Lifetime interface{}

    // Enable IETF Non Stop Forwarding. The type is OspfIetfNsf.
    Ietf interface{}

    // Disable helper support role for IETF Non Stop Forwarding. The type is
    // OspfIetfNsfSupport.
    IetfSupportRole interface{}

    // Enable Cisco Non Stop Forwarding. The type is OspfCiscoNsf.
    Cisco interface{}

    // Minimum interval between Non Stop Forwarding restarts in seconds. The type
    // is interface{} with range: 90..3600. Units are second. The default value is
    // 90.
    Interval interface{}

    // Maximum time allowed for external route learning (seconds). The type is
    // interface{} with range: 1..3600. Units are second. The default value is 60.
    FlushDelayTime interface{}

    // Enable Strict LSA checking of IETF NSF. The type is interface{}.
    IetfStrictLsaChecking interface{}
}

func (nsf *Ospf_Processes_Process_DefaultVrf_Nsf) GetFilter() yfilter.YFilter { return nsf.YFilter }

func (nsf *Ospf_Processes_Process_DefaultVrf_Nsf) SetFilter(yf yfilter.YFilter) { nsf.YFilter = yf }

func (nsf *Ospf_Processes_Process_DefaultVrf_Nsf) GetGoName(yname string) string {
    if yname == "lifetime" { return "Lifetime" }
    if yname == "ietf" { return "Ietf" }
    if yname == "ietf-support-role" { return "IetfSupportRole" }
    if yname == "cisco" { return "Cisco" }
    if yname == "interval" { return "Interval" }
    if yname == "flush-delay-time" { return "FlushDelayTime" }
    if yname == "ietf-strict-lsa-checking" { return "IetfStrictLsaChecking" }
    return ""
}

func (nsf *Ospf_Processes_Process_DefaultVrf_Nsf) GetSegmentPath() string {
    return "nsf"
}

func (nsf *Ospf_Processes_Process_DefaultVrf_Nsf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nsf *Ospf_Processes_Process_DefaultVrf_Nsf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nsf *Ospf_Processes_Process_DefaultVrf_Nsf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lifetime"] = nsf.Lifetime
    leafs["ietf"] = nsf.Ietf
    leafs["ietf-support-role"] = nsf.IetfSupportRole
    leafs["cisco"] = nsf.Cisco
    leafs["interval"] = nsf.Interval
    leafs["flush-delay-time"] = nsf.FlushDelayTime
    leafs["ietf-strict-lsa-checking"] = nsf.IetfStrictLsaChecking
    return leafs
}

func (nsf *Ospf_Processes_Process_DefaultVrf_Nsf) GetBundleName() string { return "cisco_ios_xr" }

func (nsf *Ospf_Processes_Process_DefaultVrf_Nsf) GetYangName() string { return "nsf" }

func (nsf *Ospf_Processes_Process_DefaultVrf_Nsf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nsf *Ospf_Processes_Process_DefaultVrf_Nsf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nsf *Ospf_Processes_Process_DefaultVrf_Nsf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nsf *Ospf_Processes_Process_DefaultVrf_Nsf) SetParent(parent types.Entity) { nsf.parent = parent }

func (nsf *Ospf_Processes_Process_DefaultVrf_Nsf) GetParent() types.Entity { return nsf.parent }

func (nsf *Ospf_Processes_Process_DefaultVrf_Nsf) GetParentYangName() string { return "default-vrf" }

// Ospf_Processes_Process_DefaultVrf_ProcessScope
// Process scope configuration
type Ospf_Processes_Process_DefaultVrf_ProcessScope struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Enable/Disable an OSPF area to advertise intra-area prefixes out of this
    // area as external. The type is bool.
    ExternalOut interface{}

    // Enable/Disable prefix suppression for primary addresses. The type is bool.
    // The default value is false.
    PrefixSuppressionPrimary interface{}

    // Enable/Disable ignoring of MTU in DBD packets. The type is bool. The
    // default value is false.
    MtuIgnore interface{}

    // Enable/Disable MPLS LDP sync for igp-shortcuts. The type is bool.
    LdpSyncIgpShortcuts interface{}

    // Enable MPLS LDP Auto Config. The type is interface{}.
    LdpAutoConfig interface{}

    // Enable/Disable an OSPF area to advertise external prefixes into this area
    // as summary. The type is bool.
    SummaryIn interface{}

    // Type of attached network. The type is OspfNetwork.
    NetworkType interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Enable/Disable advertising loopback as a stub network. The type is bool.
    // The default value is false.
    LoopbackStubNetwork interface{}

    // Enable/Disable prefix suppression for secondary addresses. The type is
    // bool. The default value is false.
    PrefixSuppressionSecondary interface{}

    // Enable/Disable OSPF demand circuit. The type is bool. The default value is
    // false.
    DemandCircuit interface{}

    // segment-routing configuration Applicable only in Default VRF. The type is
    // OspfSegmentRouting.
    SegmentRouting interface{}

    // When enabled, prevent sending HELLO packets over link. The type is bool.
    // The default value is false.
    Passive interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Customize size of OSPF packets upto MTU. The type is interface{} with
    // range: 576..10000.
    PacketSize interface{}

    // Enable/Disable MPLS LDP sync. The type is bool.
    LdpSync interface{}

    // Filter OSPF LSA during synchronization and flooding. The type is bool. The
    // default value is false.
    DatabaseFilter interface{}

    // Enable/Disable registration for early interface down notifications. The
    // type is bool. The default value is false.
    LinkDownFastDetect interface{}

    // segment-routing forwarding configuration Applicableonly in Default VRF. The
    // type is OspfSegmentRoutingForwarding.
    SegmentRoutingForwarding interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Router priority for DR and BDR election. The type is interface{} with
    // range: 0..255. The default value is 1.
    Priority interface{}

    // Enable/Disable OSPF flood reduction. The type is bool. The default value is
    // false.
    FloodReduction interface{}

    // Segment Routing Global Block configuration.
    Srgb Ospf_Processes_Process_DefaultVrf_ProcessScope_Srgb

    // Fast-reroute configuration.
    FastReroute Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute

    // Filter networks intalled to RIB (disable as ACL name means filtering is
    // disabled).
    DistributeList Ospf_Processes_Process_DefaultVrf_ProcessScope_DistributeList

    // BFD configuration.
    Bfd Ospf_Processes_Process_DefaultVrf_ProcessScope_Bfd

    // Authentication.
    Authentication Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication

    // Container class for security related configuration parameters.
    Security Ospf_Processes_Process_DefaultVrf_ProcessScope_Security

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_DefaultVrf_ProcessScope_DeadIntervalMinimal

    // Interface fallback cost.
    CostFallback Ospf_Processes_Process_DefaultVrf_ProcessScope_CostFallback
}

func (processScope *Ospf_Processes_Process_DefaultVrf_ProcessScope) GetFilter() yfilter.YFilter { return processScope.YFilter }

func (processScope *Ospf_Processes_Process_DefaultVrf_ProcessScope) SetFilter(yf yfilter.YFilter) { processScope.YFilter = yf }

func (processScope *Ospf_Processes_Process_DefaultVrf_ProcessScope) GetGoName(yname string) string {
    if yname == "cost" { return "Cost" }
    if yname == "external-out" { return "ExternalOut" }
    if yname == "prefix-suppression-primary" { return "PrefixSuppressionPrimary" }
    if yname == "mtu-ignore" { return "MtuIgnore" }
    if yname == "ldp-sync-igp-shortcuts" { return "LdpSyncIgpShortcuts" }
    if yname == "ldp-auto-config" { return "LdpAutoConfig" }
    if yname == "summary-in" { return "SummaryIn" }
    if yname == "network-type" { return "NetworkType" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "loopback-stub-network" { return "LoopbackStubNetwork" }
    if yname == "prefix-suppression-secondary" { return "PrefixSuppressionSecondary" }
    if yname == "demand-circuit" { return "DemandCircuit" }
    if yname == "segment-routing" { return "SegmentRouting" }
    if yname == "passive" { return "Passive" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "packet-size" { return "PacketSize" }
    if yname == "ldp-sync" { return "LdpSync" }
    if yname == "database-filter" { return "DatabaseFilter" }
    if yname == "link-down-fast-detect" { return "LinkDownFastDetect" }
    if yname == "segment-routing-forwarding" { return "SegmentRoutingForwarding" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "priority" { return "Priority" }
    if yname == "flood-reduction" { return "FloodReduction" }
    if yname == "srgb" { return "Srgb" }
    if yname == "fast-reroute" { return "FastReroute" }
    if yname == "distribute-list" { return "DistributeList" }
    if yname == "bfd" { return "Bfd" }
    if yname == "authentication" { return "Authentication" }
    if yname == "security" { return "Security" }
    if yname == "dead-interval-minimal" { return "DeadIntervalMinimal" }
    if yname == "cost-fallback" { return "CostFallback" }
    return ""
}

func (processScope *Ospf_Processes_Process_DefaultVrf_ProcessScope) GetSegmentPath() string {
    return "process-scope"
}

func (processScope *Ospf_Processes_Process_DefaultVrf_ProcessScope) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "srgb" {
        return &processScope.Srgb
    }
    if childYangName == "fast-reroute" {
        return &processScope.FastReroute
    }
    if childYangName == "distribute-list" {
        return &processScope.DistributeList
    }
    if childYangName == "bfd" {
        return &processScope.Bfd
    }
    if childYangName == "authentication" {
        return &processScope.Authentication
    }
    if childYangName == "security" {
        return &processScope.Security
    }
    if childYangName == "dead-interval-minimal" {
        return &processScope.DeadIntervalMinimal
    }
    if childYangName == "cost-fallback" {
        return &processScope.CostFallback
    }
    return nil
}

func (processScope *Ospf_Processes_Process_DefaultVrf_ProcessScope) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["srgb"] = &processScope.Srgb
    children["fast-reroute"] = &processScope.FastReroute
    children["distribute-list"] = &processScope.DistributeList
    children["bfd"] = &processScope.Bfd
    children["authentication"] = &processScope.Authentication
    children["security"] = &processScope.Security
    children["dead-interval-minimal"] = &processScope.DeadIntervalMinimal
    children["cost-fallback"] = &processScope.CostFallback
    return children
}

func (processScope *Ospf_Processes_Process_DefaultVrf_ProcessScope) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cost"] = processScope.Cost
    leafs["external-out"] = processScope.ExternalOut
    leafs["prefix-suppression-primary"] = processScope.PrefixSuppressionPrimary
    leafs["mtu-ignore"] = processScope.MtuIgnore
    leafs["ldp-sync-igp-shortcuts"] = processScope.LdpSyncIgpShortcuts
    leafs["ldp-auto-config"] = processScope.LdpAutoConfig
    leafs["summary-in"] = processScope.SummaryIn
    leafs["network-type"] = processScope.NetworkType
    leafs["hello-interval"] = processScope.HelloInterval
    leafs["loopback-stub-network"] = processScope.LoopbackStubNetwork
    leafs["prefix-suppression-secondary"] = processScope.PrefixSuppressionSecondary
    leafs["demand-circuit"] = processScope.DemandCircuit
    leafs["segment-routing"] = processScope.SegmentRouting
    leafs["passive"] = processScope.Passive
    leafs["transmit-delay"] = processScope.TransmitDelay
    leafs["packet-size"] = processScope.PacketSize
    leafs["ldp-sync"] = processScope.LdpSync
    leafs["database-filter"] = processScope.DatabaseFilter
    leafs["link-down-fast-detect"] = processScope.LinkDownFastDetect
    leafs["segment-routing-forwarding"] = processScope.SegmentRoutingForwarding
    leafs["retransmit-interval"] = processScope.RetransmitInterval
    leafs["priority"] = processScope.Priority
    leafs["flood-reduction"] = processScope.FloodReduction
    return leafs
}

func (processScope *Ospf_Processes_Process_DefaultVrf_ProcessScope) GetBundleName() string { return "cisco_ios_xr" }

func (processScope *Ospf_Processes_Process_DefaultVrf_ProcessScope) GetYangName() string { return "process-scope" }

func (processScope *Ospf_Processes_Process_DefaultVrf_ProcessScope) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (processScope *Ospf_Processes_Process_DefaultVrf_ProcessScope) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (processScope *Ospf_Processes_Process_DefaultVrf_ProcessScope) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (processScope *Ospf_Processes_Process_DefaultVrf_ProcessScope) SetParent(parent types.Entity) { processScope.parent = parent }

func (processScope *Ospf_Processes_Process_DefaultVrf_ProcessScope) GetParent() types.Entity { return processScope.parent }

func (processScope *Ospf_Processes_Process_DefaultVrf_ProcessScope) GetParentYangName() string { return "default-vrf" }

// Ospf_Processes_Process_DefaultVrf_ProcessScope_Srgb
// Segment Routing Global Block configuration
// This type is a presence type.
type Ospf_Processes_Process_DefaultVrf_ProcessScope_Srgb struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The lower bound of the SRGB. The type is interface{} with range:
    // 16000..1048575. This attribute is mandatory.
    LowerBound interface{}

    // The upper bound of the SRGB. The type is interface{} with range:
    // 16000..1048575. This attribute is mandatory.
    UpperBound interface{}
}

func (srgb *Ospf_Processes_Process_DefaultVrf_ProcessScope_Srgb) GetFilter() yfilter.YFilter { return srgb.YFilter }

func (srgb *Ospf_Processes_Process_DefaultVrf_ProcessScope_Srgb) SetFilter(yf yfilter.YFilter) { srgb.YFilter = yf }

func (srgb *Ospf_Processes_Process_DefaultVrf_ProcessScope_Srgb) GetGoName(yname string) string {
    if yname == "lower-bound" { return "LowerBound" }
    if yname == "upper-bound" { return "UpperBound" }
    return ""
}

func (srgb *Ospf_Processes_Process_DefaultVrf_ProcessScope_Srgb) GetSegmentPath() string {
    return "srgb"
}

func (srgb *Ospf_Processes_Process_DefaultVrf_ProcessScope_Srgb) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srgb *Ospf_Processes_Process_DefaultVrf_ProcessScope_Srgb) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srgb *Ospf_Processes_Process_DefaultVrf_ProcessScope_Srgb) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lower-bound"] = srgb.LowerBound
    leafs["upper-bound"] = srgb.UpperBound
    return leafs
}

func (srgb *Ospf_Processes_Process_DefaultVrf_ProcessScope_Srgb) GetBundleName() string { return "cisco_ios_xr" }

func (srgb *Ospf_Processes_Process_DefaultVrf_ProcessScope_Srgb) GetYangName() string { return "srgb" }

func (srgb *Ospf_Processes_Process_DefaultVrf_ProcessScope_Srgb) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srgb *Ospf_Processes_Process_DefaultVrf_ProcessScope_Srgb) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srgb *Ospf_Processes_Process_DefaultVrf_ProcessScope_Srgb) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srgb *Ospf_Processes_Process_DefaultVrf_ProcessScope_Srgb) SetParent(parent types.Entity) { srgb.parent = parent }

func (srgb *Ospf_Processes_Process_DefaultVrf_ProcessScope_Srgb) GetParent() types.Entity { return srgb.parent }

func (srgb *Ospf_Processes_Process_DefaultVrf_ProcessScope_Srgb) GetParentYangName() string { return "process-scope" }

// Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute
// Fast-reroute configuration
type Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // OspfProcFastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink

    // Fast-reroute per-prefix configuration.
    PerPrefix Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute) GetGoName(yname string) string {
    if yname == "fast-reroute-enable" { return "FastRerouteEnable" }
    if yname == "per-link" { return "PerLink" }
    if yname == "per-prefix" { return "PerPrefix" }
    return ""
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "per-link" {
        return &fastReroute.PerLink
    }
    if childYangName == "per-prefix" {
        return &fastReroute.PerPrefix
    }
    return nil
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["per-link"] = &fastReroute.PerLink
    children["per-prefix"] = &fastReroute.PerPrefix
    return children
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-enable"] = fastReroute.FastRerouteEnable
    return leafs
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute) GetParentYangName() string { return "process-scope" }

// Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink) GetFilter() yfilter.YFilter { return perLink.YFilter }

func (perLink *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink) SetFilter(yf yfilter.YFilter) { perLink.YFilter = yf }

func (perLink *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perLink *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink) GetSegmentPath() string {
    return "per-link"
}

func (perLink *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perLink.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perLink.ExcludeInterfaces
    }
    return nil
}

func (perLink *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perLink.CandidateInterfaces
    children["exclude-interfaces"] = &perLink.ExcludeInterfaces
    return children
}

func (perLink *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perLink.FastRerouteUseCandidateOnly
    return leafs
}

func (perLink *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink) GetBundleName() string { return "cisco_ios_xr" }

func (perLink *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink) GetYangName() string { return "per-link" }

func (perLink *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLink *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLink *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLink *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink) SetParent(parent types.Entity) { perLink.parent = parent }

func (perLink *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink) GetParent() types.Entity { return perLink.parent }

func (perLink *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetParentYangName() string { return "per-link" }

// Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetParentYangName() string { return "per-link" }

// Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix
// Fast-reroute per-prefix configuration
type Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Topology Independet LFA configuration. The type is bool.
    TopologyIndependentLfa interface{}

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Remote LFA configuration.
    RemoteLfa Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix) GetFilter() yfilter.YFilter { return perPrefix.YFilter }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix) SetFilter(yf yfilter.YFilter) { perPrefix.YFilter = yf }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix) GetGoName(yname string) string {
    if yname == "topology-independent-lfa" { return "TopologyIndependentLfa" }
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "remote-lfa" { return "RemoteLfa" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix) GetSegmentPath() string {
    return "per-prefix"
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-lfa" {
        return &perPrefix.RemoteLfa
    }
    if childYangName == "candidate-interfaces" {
        return &perPrefix.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perPrefix.ExcludeInterfaces
    }
    return nil
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["remote-lfa"] = &perPrefix.RemoteLfa
    children["candidate-interfaces"] = &perPrefix.CandidateInterfaces
    children["exclude-interfaces"] = &perPrefix.ExcludeInterfaces
    return children
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["topology-independent-lfa"] = perPrefix.TopologyIndependentLfa
    leafs["fast-reroute-use-candidate-only"] = perPrefix.FastRerouteUseCandidateOnly
    return leafs
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix) GetYangName() string { return "per-prefix" }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix) SetParent(parent types.Entity) { perPrefix.parent = parent }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix) GetParent() types.Entity { return perPrefix.parent }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa
// Remote LFA configuration
type Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable remote LFA computation. The type is OspfProcFrrRlfaTunnel.
    Tunnel interface{}

    // Maximum path cost to remote LFA. The type is interface{} with range:
    // 1..4294967295.
    MaximumCost interface{}
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) GetFilter() yfilter.YFilter { return remoteLfa.YFilter }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) SetFilter(yf yfilter.YFilter) { remoteLfa.YFilter = yf }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) GetGoName(yname string) string {
    if yname == "tunnel" { return "Tunnel" }
    if yname == "maximum-cost" { return "MaximumCost" }
    return ""
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) GetSegmentPath() string {
    return "remote-lfa"
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel"] = remoteLfa.Tunnel
    leafs["maximum-cost"] = remoteLfa.MaximumCost
    return leafs
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) GetBundleName() string { return "cisco_ios_xr" }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) GetYangName() string { return "remote-lfa" }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) SetParent(parent types.Entity) { remoteLfa.parent = parent }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) GetParent() types.Entity { return remoteLfa.parent }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospf_Processes_Process_DefaultVrf_ProcessScope_DistributeList
// Filter networks intalled to RIB (disable as ACL
// name means filtering is disabled)
// This type is a presence type.
type Ospf_Processes_Process_DefaultVrf_ProcessScope_DistributeList struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Access Control List name. The type is string.
    AccessListName interface{}

    // Route Policy name. The type is string.
    RoutePolicyName interface{}
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_ProcessScope_DistributeList) GetFilter() yfilter.YFilter { return distributeList.YFilter }

func (distributeList *Ospf_Processes_Process_DefaultVrf_ProcessScope_DistributeList) SetFilter(yf yfilter.YFilter) { distributeList.YFilter = yf }

func (distributeList *Ospf_Processes_Process_DefaultVrf_ProcessScope_DistributeList) GetGoName(yname string) string {
    if yname == "access-list-name" { return "AccessListName" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_ProcessScope_DistributeList) GetSegmentPath() string {
    return "distribute-list"
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_ProcessScope_DistributeList) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_ProcessScope_DistributeList) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_ProcessScope_DistributeList) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["access-list-name"] = distributeList.AccessListName
    leafs["route-policy-name"] = distributeList.RoutePolicyName
    return leafs
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_ProcessScope_DistributeList) GetBundleName() string { return "cisco_ios_xr" }

func (distributeList *Ospf_Processes_Process_DefaultVrf_ProcessScope_DistributeList) GetYangName() string { return "distribute-list" }

func (distributeList *Ospf_Processes_Process_DefaultVrf_ProcessScope_DistributeList) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distributeList *Ospf_Processes_Process_DefaultVrf_ProcessScope_DistributeList) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distributeList *Ospf_Processes_Process_DefaultVrf_ProcessScope_DistributeList) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distributeList *Ospf_Processes_Process_DefaultVrf_ProcessScope_DistributeList) SetParent(parent types.Entity) { distributeList.parent = parent }

func (distributeList *Ospf_Processes_Process_DefaultVrf_ProcessScope_DistributeList) GetParent() types.Entity { return distributeList.parent }

func (distributeList *Ospf_Processes_Process_DefaultVrf_ProcessScope_DistributeList) GetParentYangName() string { return "process-scope" }

// Ospf_Processes_Process_DefaultVrf_ProcessScope_Bfd
// BFD configuration
type Ospf_Processes_Process_DefaultVrf_ProcessScope_Bfd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hello interval for BFD sessions created by OSPF. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    Interval interface{}

    // Detection multiplier for BFD sessions created by OSPF. The type is
    // interface{} with range: 2..50.
    DetectionMultiplier interface{}

    // use of Bidirectional Forwarding Detection. The type is BfdEnableMode.
    FastDetectMode interface{}
}

func (bfd *Ospf_Processes_Process_DefaultVrf_ProcessScope_Bfd) GetFilter() yfilter.YFilter { return bfd.YFilter }

func (bfd *Ospf_Processes_Process_DefaultVrf_ProcessScope_Bfd) SetFilter(yf yfilter.YFilter) { bfd.YFilter = yf }

func (bfd *Ospf_Processes_Process_DefaultVrf_ProcessScope_Bfd) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "fast-detect-mode" { return "FastDetectMode" }
    return ""
}

func (bfd *Ospf_Processes_Process_DefaultVrf_ProcessScope_Bfd) GetSegmentPath() string {
    return "bfd"
}

func (bfd *Ospf_Processes_Process_DefaultVrf_ProcessScope_Bfd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bfd *Ospf_Processes_Process_DefaultVrf_ProcessScope_Bfd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bfd *Ospf_Processes_Process_DefaultVrf_ProcessScope_Bfd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = bfd.Interval
    leafs["detection-multiplier"] = bfd.DetectionMultiplier
    leafs["fast-detect-mode"] = bfd.FastDetectMode
    return leafs
}

func (bfd *Ospf_Processes_Process_DefaultVrf_ProcessScope_Bfd) GetBundleName() string { return "cisco_ios_xr" }

func (bfd *Ospf_Processes_Process_DefaultVrf_ProcessScope_Bfd) GetYangName() string { return "bfd" }

func (bfd *Ospf_Processes_Process_DefaultVrf_ProcessScope_Bfd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfd *Ospf_Processes_Process_DefaultVrf_ProcessScope_Bfd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfd *Ospf_Processes_Process_DefaultVrf_ProcessScope_Bfd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfd *Ospf_Processes_Process_DefaultVrf_ProcessScope_Bfd) SetParent(parent types.Entity) { bfd.parent = parent }

func (bfd *Ospf_Processes_Process_DefaultVrf_ProcessScope_Bfd) GetParent() types.Entity { return bfd.parent }

func (bfd *Ospf_Processes_Process_DefaultVrf_ProcessScope_Bfd) GetParentYangName() string { return "process-scope" }

// Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication
// Authentication
type Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // (!.+)|([^!].+).
    Key interface{}

    // Authentication type.
    Type Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication) GetGoName(yname string) string {
    if yname == "key" { return "Key" }
    if yname == "type" { return "Type" }
    if yname == "message-digest-keies" { return "MessageDigestKeies" }
    return ""
}

func (authentication *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "type" {
        return &authentication.Type
    }
    if childYangName == "message-digest-keies" {
        return &authentication.MessageDigestKeies
    }
    return nil
}

func (authentication *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["type"] = &authentication.Type
    children["message-digest-keies"] = &authentication.MessageDigestKeies
    return children
}

func (authentication *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key"] = authentication.Key
    return leafs
}

func (authentication *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication) GetParentYangName() string { return "process-scope" }

// Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_Type struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_Type) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_Type) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_Type) GetGoName(yname string) string {
    if yname == "authen-type" { return "AuthenType" }
    if yname == "keychain-authen-type" { return "KeychainAuthenType" }
    if yname == "keychain-name" { return "KeychainName" }
    return ""
}

func (self *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_Type) GetSegmentPath() string {
    return "type"
}

func (self *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_Type) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_Type) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_Type) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["authen-type"] = self.AuthenType
    leafs["keychain-authen-type"] = self.KeychainAuthenType
    leafs["keychain-name"] = self.KeychainName
    return leafs
}

func (self *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_Type) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_Type) GetYangName() string { return "type" }

func (self *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_Type) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_Type) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_Type) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_Type) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_Type) GetParent() types.Entity { return self.parent }

func (self *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_Type) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies) GetFilter() yfilter.YFilter { return messageDigestKeies.YFilter }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies) SetFilter(yf yfilter.YFilter) { messageDigestKeies.YFilter = yf }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies) GetGoName(yname string) string {
    if yname == "message-digest-key" { return "MessageDigestKey" }
    return ""
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies) GetSegmentPath() string {
    return "message-digest-keies"
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "message-digest-key" {
        for _, c := range messageDigestKeies.MessageDigestKey {
            if messageDigestKeies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey{}
        messageDigestKeies.MessageDigestKey = append(messageDigestKeies.MessageDigestKey, child)
        return &messageDigestKeies.MessageDigestKey[len(messageDigestKeies.MessageDigestKey)-1]
    }
    return nil
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range messageDigestKeies.MessageDigestKey {
        children[messageDigestKeies.MessageDigestKey[i].GetSegmentPath()] = &messageDigestKeies.MessageDigestKey[i]
    }
    return children
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies) GetYangName() string { return "message-digest-keies" }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies) SetParent(parent types.Entity) { messageDigestKeies.parent = parent }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies) GetParent() types.Entity { return messageDigestKeies.parent }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: (!.+)|([^!].+). This attribute
    // is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) GetFilter() yfilter.YFilter { return messageDigestKey.YFilter }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) SetFilter(yf yfilter.YFilter) { messageDigestKey.YFilter = yf }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) GetGoName(yname string) string {
    if yname == "key-id" { return "KeyId" }
    if yname == "password" { return "Password" }
    return ""
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) GetSegmentPath() string {
    return "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key-id"] = messageDigestKey.KeyId
    leafs["password"] = messageDigestKey.Password
    return leafs
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) GetYangName() string { return "message-digest-key" }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) SetParent(parent types.Entity) { messageDigestKey.parent = parent }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParent() types.Entity { return messageDigestKey.parent }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParentYangName() string { return "message-digest-keies" }

// Ospf_Processes_Process_DefaultVrf_ProcessScope_Security
// Container class for security related
// configuration parameters
type Ospf_Processes_Process_DefaultVrf_ProcessScope_Security struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enabling turns on TTL security.
    Ttl Ospf_Processes_Process_DefaultVrf_ProcessScope_Security_Ttl
}

func (security *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security) GetFilter() yfilter.YFilter { return security.YFilter }

func (security *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security) SetFilter(yf yfilter.YFilter) { security.YFilter = yf }

func (security *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security) GetGoName(yname string) string {
    if yname == "ttl" { return "Ttl" }
    return ""
}

func (security *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security) GetSegmentPath() string {
    return "security"
}

func (security *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ttl" {
        return &security.Ttl
    }
    return nil
}

func (security *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ttl"] = &security.Ttl
    return children
}

func (security *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (security *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security) GetBundleName() string { return "cisco_ios_xr" }

func (security *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security) GetYangName() string { return "security" }

func (security *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (security *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (security *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (security *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security) SetParent(parent types.Entity) { security.parent = parent }

func (security *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security) GetParent() types.Entity { return security.parent }

func (security *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security) GetParentYangName() string { return "process-scope" }

// Ospf_Processes_Process_DefaultVrf_ProcessScope_Security_Ttl
// Enabling turns on TTL security
type Ospf_Processes_Process_DefaultVrf_ProcessScope_Security_Ttl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable TTL security. The type is bool.
    Enable interface{}

    // Hop count. The type is interface{} with range: 1..254.
    HopCount interface{}
}

func (ttl *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security_Ttl) GetFilter() yfilter.YFilter { return ttl.YFilter }

func (ttl *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security_Ttl) SetFilter(yf yfilter.YFilter) { ttl.YFilter = yf }

func (ttl *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security_Ttl) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "hop-count" { return "HopCount" }
    return ""
}

func (ttl *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security_Ttl) GetSegmentPath() string {
    return "ttl"
}

func (ttl *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security_Ttl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ttl *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security_Ttl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ttl *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security_Ttl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = ttl.Enable
    leafs["hop-count"] = ttl.HopCount
    return leafs
}

func (ttl *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security_Ttl) GetBundleName() string { return "cisco_ios_xr" }

func (ttl *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security_Ttl) GetYangName() string { return "ttl" }

func (ttl *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security_Ttl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ttl *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security_Ttl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ttl *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security_Ttl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ttl *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security_Ttl) SetParent(parent types.Entity) { ttl.parent = parent }

func (ttl *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security_Ttl) GetParent() types.Entity { return ttl.parent }

func (ttl *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security_Ttl) GetParentYangName() string { return "security" }

// Ospf_Processes_Process_DefaultVrf_ProcessScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_DefaultVrf_ProcessScope_DeadIntervalMinimal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_ProcessScope_DeadIntervalMinimal) GetFilter() yfilter.YFilter { return deadIntervalMinimal.YFilter }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_ProcessScope_DeadIntervalMinimal) SetFilter(yf yfilter.YFilter) { deadIntervalMinimal.YFilter = yf }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_ProcessScope_DeadIntervalMinimal) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "multiplier" { return "Multiplier" }
    return ""
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_ProcessScope_DeadIntervalMinimal) GetSegmentPath() string {
    return "dead-interval-minimal"
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_ProcessScope_DeadIntervalMinimal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_ProcessScope_DeadIntervalMinimal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_ProcessScope_DeadIntervalMinimal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = deadIntervalMinimal.Interval
    leafs["multiplier"] = deadIntervalMinimal.Multiplier
    return leafs
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_ProcessScope_DeadIntervalMinimal) GetBundleName() string { return "cisco_ios_xr" }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_ProcessScope_DeadIntervalMinimal) GetYangName() string { return "dead-interval-minimal" }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_ProcessScope_DeadIntervalMinimal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_ProcessScope_DeadIntervalMinimal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_ProcessScope_DeadIntervalMinimal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_ProcessScope_DeadIntervalMinimal) SetParent(parent types.Entity) { deadIntervalMinimal.parent = parent }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_ProcessScope_DeadIntervalMinimal) GetParent() types.Entity { return deadIntervalMinimal.parent }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_ProcessScope_DeadIntervalMinimal) GetParentYangName() string { return "process-scope" }

// Ospf_Processes_Process_DefaultVrf_ProcessScope_CostFallback
// Interface fallback cost
type Ospf_Processes_Process_DefaultVrf_ProcessScope_CostFallback struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fallback cost of link. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Bandwidth threshold. The type is interface{} with range: 1..4294967.
    Threshold interface{}
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_ProcessScope_CostFallback) GetFilter() yfilter.YFilter { return costFallback.YFilter }

func (costFallback *Ospf_Processes_Process_DefaultVrf_ProcessScope_CostFallback) SetFilter(yf yfilter.YFilter) { costFallback.YFilter = yf }

func (costFallback *Ospf_Processes_Process_DefaultVrf_ProcessScope_CostFallback) GetGoName(yname string) string {
    if yname == "cost" { return "Cost" }
    if yname == "threshold" { return "Threshold" }
    return ""
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_ProcessScope_CostFallback) GetSegmentPath() string {
    return "cost-fallback"
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_ProcessScope_CostFallback) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_ProcessScope_CostFallback) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_ProcessScope_CostFallback) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cost"] = costFallback.Cost
    leafs["threshold"] = costFallback.Threshold
    return leafs
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_ProcessScope_CostFallback) GetBundleName() string { return "cisco_ios_xr" }

func (costFallback *Ospf_Processes_Process_DefaultVrf_ProcessScope_CostFallback) GetYangName() string { return "cost-fallback" }

func (costFallback *Ospf_Processes_Process_DefaultVrf_ProcessScope_CostFallback) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (costFallback *Ospf_Processes_Process_DefaultVrf_ProcessScope_CostFallback) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (costFallback *Ospf_Processes_Process_DefaultVrf_ProcessScope_CostFallback) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (costFallback *Ospf_Processes_Process_DefaultVrf_ProcessScope_CostFallback) SetParent(parent types.Entity) { costFallback.parent = parent }

func (costFallback *Ospf_Processes_Process_DefaultVrf_ProcessScope_CostFallback) GetParent() types.Entity { return costFallback.parent }

func (costFallback *Ospf_Processes_Process_DefaultVrf_ProcessScope_CostFallback) GetParentYangName() string { return "process-scope" }

// Ospf_Processes_Process_DefaultVrf_Redistribution
// Redistribute configurations
type Ospf_Processes_Process_DefaultVrf_Redistribution struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Redistribute information from another routing protocol.
    Redistributes Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes
}

func (redistribution *Ospf_Processes_Process_DefaultVrf_Redistribution) GetFilter() yfilter.YFilter { return redistribution.YFilter }

func (redistribution *Ospf_Processes_Process_DefaultVrf_Redistribution) SetFilter(yf yfilter.YFilter) { redistribution.YFilter = yf }

func (redistribution *Ospf_Processes_Process_DefaultVrf_Redistribution) GetGoName(yname string) string {
    if yname == "redistributes" { return "Redistributes" }
    return ""
}

func (redistribution *Ospf_Processes_Process_DefaultVrf_Redistribution) GetSegmentPath() string {
    return "redistribution"
}

func (redistribution *Ospf_Processes_Process_DefaultVrf_Redistribution) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "redistributes" {
        return &redistribution.Redistributes
    }
    return nil
}

func (redistribution *Ospf_Processes_Process_DefaultVrf_Redistribution) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["redistributes"] = &redistribution.Redistributes
    return children
}

func (redistribution *Ospf_Processes_Process_DefaultVrf_Redistribution) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (redistribution *Ospf_Processes_Process_DefaultVrf_Redistribution) GetBundleName() string { return "cisco_ios_xr" }

func (redistribution *Ospf_Processes_Process_DefaultVrf_Redistribution) GetYangName() string { return "redistribution" }

func (redistribution *Ospf_Processes_Process_DefaultVrf_Redistribution) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (redistribution *Ospf_Processes_Process_DefaultVrf_Redistribution) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (redistribution *Ospf_Processes_Process_DefaultVrf_Redistribution) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (redistribution *Ospf_Processes_Process_DefaultVrf_Redistribution) SetParent(parent types.Entity) { redistribution.parent = parent }

func (redistribution *Ospf_Processes_Process_DefaultVrf_Redistribution) GetParent() types.Entity { return redistribution.parent }

func (redistribution *Ospf_Processes_Process_DefaultVrf_Redistribution) GetParentYangName() string { return "default-vrf" }

// Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes
// Redistribute information from another routing
// protocol
type Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Redistribute information from another routing protocol. The type is slice
    // of
    // Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute.
    Redistribute []Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute
}

func (redistributes *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes) GetFilter() yfilter.YFilter { return redistributes.YFilter }

func (redistributes *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes) SetFilter(yf yfilter.YFilter) { redistributes.YFilter = yf }

func (redistributes *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes) GetGoName(yname string) string {
    if yname == "redistribute" { return "Redistribute" }
    return ""
}

func (redistributes *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes) GetSegmentPath() string {
    return "redistributes"
}

func (redistributes *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "redistribute" {
        for _, c := range redistributes.Redistribute {
            if redistributes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute{}
        redistributes.Redistribute = append(redistributes.Redistribute, child)
        return &redistributes.Redistribute[len(redistributes.Redistribute)-1]
    }
    return nil
}

func (redistributes *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range redistributes.Redistribute {
        children[redistributes.Redistribute[i].GetSegmentPath()] = &redistributes.Redistribute[i]
    }
    return children
}

func (redistributes *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (redistributes *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes) GetBundleName() string { return "cisco_ios_xr" }

func (redistributes *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes) GetYangName() string { return "redistributes" }

func (redistributes *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (redistributes *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (redistributes *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (redistributes *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes) SetParent(parent types.Entity) { redistributes.parent = parent }

func (redistributes *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes) GetParent() types.Entity { return redistributes.parent }

func (redistributes *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes) GetParentYangName() string { return "redistribution" }

// Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute
// Redistribute information from another routing
// protocol
type Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Distribute list protocol type. The type is
    // OspfRedistProtocol.
    ProtocolName interface{}

    // connected or static or dagr or subscriber or mobile or rip.
    ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip

    // application or isis or ospf. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf.
    ApplicationOrIsisOrOspf []Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf

    // bgp. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Bgp.
    Bgp []Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Bgp

    // eigrp. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Eigrp.
    Eigrp []Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Eigrp
}

func (redistribute *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute) GetFilter() yfilter.YFilter { return redistribute.YFilter }

func (redistribute *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute) SetFilter(yf yfilter.YFilter) { redistribute.YFilter = yf }

func (redistribute *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute) GetGoName(yname string) string {
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "connected-or-static-or-dagr-or-subscriber-or-mobile-or-rip" { return "ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip" }
    if yname == "application-or-isis-or-ospf" { return "ApplicationOrIsisOrOspf" }
    if yname == "bgp" { return "Bgp" }
    if yname == "eigrp" { return "Eigrp" }
    return ""
}

func (redistribute *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute) GetSegmentPath() string {
    return "redistribute" + "[protocol-name='" + fmt.Sprintf("%v", redistribute.ProtocolName) + "']"
}

func (redistribute *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "connected-or-static-or-dagr-or-subscriber-or-mobile-or-rip" {
        return &redistribute.ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip
    }
    if childYangName == "application-or-isis-or-ospf" {
        for _, c := range redistribute.ApplicationOrIsisOrOspf {
            if redistribute.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf{}
        redistribute.ApplicationOrIsisOrOspf = append(redistribute.ApplicationOrIsisOrOspf, child)
        return &redistribute.ApplicationOrIsisOrOspf[len(redistribute.ApplicationOrIsisOrOspf)-1]
    }
    if childYangName == "bgp" {
        for _, c := range redistribute.Bgp {
            if redistribute.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Bgp{}
        redistribute.Bgp = append(redistribute.Bgp, child)
        return &redistribute.Bgp[len(redistribute.Bgp)-1]
    }
    if childYangName == "eigrp" {
        for _, c := range redistribute.Eigrp {
            if redistribute.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Eigrp{}
        redistribute.Eigrp = append(redistribute.Eigrp, child)
        return &redistribute.Eigrp[len(redistribute.Eigrp)-1]
    }
    return nil
}

func (redistribute *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["connected-or-static-or-dagr-or-subscriber-or-mobile-or-rip"] = &redistribute.ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip
    for i := range redistribute.ApplicationOrIsisOrOspf {
        children[redistribute.ApplicationOrIsisOrOspf[i].GetSegmentPath()] = &redistribute.ApplicationOrIsisOrOspf[i]
    }
    for i := range redistribute.Bgp {
        children[redistribute.Bgp[i].GetSegmentPath()] = &redistribute.Bgp[i]
    }
    for i := range redistribute.Eigrp {
        children[redistribute.Eigrp[i].GetSegmentPath()] = &redistribute.Eigrp[i]
    }
    return children
}

func (redistribute *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-name"] = redistribute.ProtocolName
    return leafs
}

func (redistribute *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute) GetBundleName() string { return "cisco_ios_xr" }

func (redistribute *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute) GetYangName() string { return "redistribute" }

func (redistribute *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (redistribute *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (redistribute *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (redistribute *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute) SetParent(parent types.Entity) { redistribute.parent = parent }

func (redistribute *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute) GetParent() types.Entity { return redistribute.parent }

func (redistribute *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute) GetParentYangName() string { return "redistributes" }

// Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip
// connected or static or dagr or subscriber or
// mobile or rip
// This type is a presence type.
type Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Disallow subnetting. The type is bool. The default value is false.
    Classful interface{}

    // Default metric for routes being redistributed into OSPF. The type is
    // interface{} with range: 1..16777214.
    DefaultRedistributedRouteMetric interface{}

    // Set tag for routes redistributed into OSPF. The type is interface{} with
    // range: 0..4294967295.
    Tag interface{}

    // Set OSPF External metric type. The type is OspfLinkStateMetric.
    MetricType interface{}

    // EIGRP route type. The type is OspfEigrpRoute.
    EigrpRouteType interface{}

    // Levels of ISIS routes. The type is OspfRouteLevel.
    IsisLevels interface{}

    // OSPF_Internal route type. The type is bool.
    OspfInternal interface{}

    // OSPF external route types. The type is OspfRouteLevel.
    OspfExternal interface{}

    // OSPF NSSA external route types. The type is OspfRouteLevel.
    OspfNssaLevel interface{}

    // Routing policy name. The type is string.
    RoutePolicyName interface{}

    // Preserve MED of BGP routes. The type is bool.
    BgpPreserveMed interface{}

    // Preserve Metric and Metric Type of BGP Default Route. The type is bool.
    BgpPreserveDefaultInfo interface{}

    // LSA type for redistributed routes. The type is OspfRedistLsa. The default
    // value is external.
    OspfRedistLsaType interface{}

    // Only redistribute to NSSA areas. The type is bool.
    OspfnssaOnly interface{}
}

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) GetFilter() yfilter.YFilter { return connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.YFilter }

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) SetFilter(yf yfilter.YFilter) { connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.YFilter = yf }

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) GetGoName(yname string) string {
    if yname == "classful" { return "Classful" }
    if yname == "default-redistributed-route-metric" { return "DefaultRedistributedRouteMetric" }
    if yname == "tag" { return "Tag" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "eigrp-route-type" { return "EigrpRouteType" }
    if yname == "isis-levels" { return "IsisLevels" }
    if yname == "ospf-internal" { return "OspfInternal" }
    if yname == "ospf-external" { return "OspfExternal" }
    if yname == "ospf-nssa-level" { return "OspfNssaLevel" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "bgp-preserve-med" { return "BgpPreserveMed" }
    if yname == "bgp-preserve-default-info" { return "BgpPreserveDefaultInfo" }
    if yname == "ospf-redist-lsa-type" { return "OspfRedistLsaType" }
    if yname == "ospfnssa-only" { return "OspfnssaOnly" }
    return ""
}

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) GetSegmentPath() string {
    return "connected-or-static-or-dagr-or-subscriber-or-mobile-or-rip"
}

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["classful"] = connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.Classful
    leafs["default-redistributed-route-metric"] = connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.DefaultRedistributedRouteMetric
    leafs["tag"] = connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.Tag
    leafs["metric-type"] = connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.MetricType
    leafs["eigrp-route-type"] = connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EigrpRouteType
    leafs["isis-levels"] = connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.IsisLevels
    leafs["ospf-internal"] = connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.OspfInternal
    leafs["ospf-external"] = connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.OspfExternal
    leafs["ospf-nssa-level"] = connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.OspfNssaLevel
    leafs["route-policy-name"] = connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.RoutePolicyName
    leafs["bgp-preserve-med"] = connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.BgpPreserveMed
    leafs["bgp-preserve-default-info"] = connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.BgpPreserveDefaultInfo
    leafs["ospf-redist-lsa-type"] = connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.OspfRedistLsaType
    leafs["ospfnssa-only"] = connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.OspfnssaOnly
    return leafs
}

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) GetBundleName() string { return "cisco_ios_xr" }

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) GetYangName() string { return "connected-or-static-or-dagr-or-subscriber-or-mobile-or-rip" }

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) SetParent(parent types.Entity) { connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.parent = parent }

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) GetParent() types.Entity { return connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.parent }

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) GetParentYangName() string { return "redistribute" }

// Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf
// application or isis or ospf
type Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. OSPF or ISIS process name or protocol name: bgp,
    // eigrp, connected. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    InstanceName interface{}

    // Disallow subnetting. The type is bool. The default value is false.
    Classful interface{}

    // Default metric for routes being redistributed into OSPF. The type is
    // interface{} with range: 1..16777214.
    DefaultRedistributedRouteMetric interface{}

    // Set tag for routes redistributed into OSPF. The type is interface{} with
    // range: 0..4294967295.
    Tag interface{}

    // Set OSPF External metric type. The type is OspfLinkStateMetric.
    MetricType interface{}

    // EIGRP route type. The type is OspfEigrpRoute.
    EigrpRouteType interface{}

    // Levels of ISIS routes. The type is OspfRouteLevel.
    IsisLevels interface{}

    // OSPF_Internal route type. The type is bool.
    OspfInternal interface{}

    // OSPF external route types. The type is OspfRouteLevel.
    OspfExternal interface{}

    // OSPF NSSA external route types. The type is OspfRouteLevel.
    OspfNssaLevel interface{}

    // Routing policy name. The type is string.
    RoutePolicyName interface{}

    // Preserve MED of BGP routes. The type is bool.
    BgpPreserveMed interface{}

    // Preserve Metric and Metric Type of BGP Default Route. The type is bool.
    BgpPreserveDefaultInfo interface{}

    // LSA type for redistributed routes. The type is OspfRedistLsa. The default
    // value is external.
    OspfRedistLsaType interface{}

    // Only redistribute to NSSA areas. The type is bool.
    OspfnssaOnly interface{}
}

func (applicationOrIsisOrOspf *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) GetFilter() yfilter.YFilter { return applicationOrIsisOrOspf.YFilter }

func (applicationOrIsisOrOspf *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) SetFilter(yf yfilter.YFilter) { applicationOrIsisOrOspf.YFilter = yf }

func (applicationOrIsisOrOspf *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "classful" { return "Classful" }
    if yname == "default-redistributed-route-metric" { return "DefaultRedistributedRouteMetric" }
    if yname == "tag" { return "Tag" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "eigrp-route-type" { return "EigrpRouteType" }
    if yname == "isis-levels" { return "IsisLevels" }
    if yname == "ospf-internal" { return "OspfInternal" }
    if yname == "ospf-external" { return "OspfExternal" }
    if yname == "ospf-nssa-level" { return "OspfNssaLevel" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "bgp-preserve-med" { return "BgpPreserveMed" }
    if yname == "bgp-preserve-default-info" { return "BgpPreserveDefaultInfo" }
    if yname == "ospf-redist-lsa-type" { return "OspfRedistLsaType" }
    if yname == "ospfnssa-only" { return "OspfnssaOnly" }
    return ""
}

func (applicationOrIsisOrOspf *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) GetSegmentPath() string {
    return "application-or-isis-or-ospf" + "[instance-name='" + fmt.Sprintf("%v", applicationOrIsisOrOspf.InstanceName) + "']"
}

func (applicationOrIsisOrOspf *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationOrIsisOrOspf *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationOrIsisOrOspf *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = applicationOrIsisOrOspf.InstanceName
    leafs["classful"] = applicationOrIsisOrOspf.Classful
    leafs["default-redistributed-route-metric"] = applicationOrIsisOrOspf.DefaultRedistributedRouteMetric
    leafs["tag"] = applicationOrIsisOrOspf.Tag
    leafs["metric-type"] = applicationOrIsisOrOspf.MetricType
    leafs["eigrp-route-type"] = applicationOrIsisOrOspf.EigrpRouteType
    leafs["isis-levels"] = applicationOrIsisOrOspf.IsisLevels
    leafs["ospf-internal"] = applicationOrIsisOrOspf.OspfInternal
    leafs["ospf-external"] = applicationOrIsisOrOspf.OspfExternal
    leafs["ospf-nssa-level"] = applicationOrIsisOrOspf.OspfNssaLevel
    leafs["route-policy-name"] = applicationOrIsisOrOspf.RoutePolicyName
    leafs["bgp-preserve-med"] = applicationOrIsisOrOspf.BgpPreserveMed
    leafs["bgp-preserve-default-info"] = applicationOrIsisOrOspf.BgpPreserveDefaultInfo
    leafs["ospf-redist-lsa-type"] = applicationOrIsisOrOspf.OspfRedistLsaType
    leafs["ospfnssa-only"] = applicationOrIsisOrOspf.OspfnssaOnly
    return leafs
}

func (applicationOrIsisOrOspf *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) GetBundleName() string { return "cisco_ios_xr" }

func (applicationOrIsisOrOspf *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) GetYangName() string { return "application-or-isis-or-ospf" }

func (applicationOrIsisOrOspf *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationOrIsisOrOspf *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationOrIsisOrOspf *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationOrIsisOrOspf *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) SetParent(parent types.Entity) { applicationOrIsisOrOspf.parent = parent }

func (applicationOrIsisOrOspf *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) GetParent() types.Entity { return applicationOrIsisOrOspf.parent }

func (applicationOrIsisOrOspf *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) GetParentYangName() string { return "redistribute" }

// Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Bgp
// bgp
type Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Bgp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. OSPF or ISIS process name or protocol name: bgp,
    // eigrp, connected. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    InstanceName interface{}

    // This attribute is a key. First half of BGP AS number in XX.YY format.
    // Mandatory if Protocol is BGP and must not be specified otherwise. Must be a
    // non-zero value if second half is zero. The type is interface{} with range:
    // 0..65535.
    AsXx interface{}

    // This attribute is a key. Second half of BGP AS number in XX.YY format .
    // Mandatory if Protocol is BGP or EIGRP and must not be specified otherwise.
    // Must be a non-zero value if first half is zero. The type is interface{}
    // with range: 0..4294967295.
    AsYy interface{}

    // Disallow subnetting. The type is bool. The default value is false.
    Classful interface{}

    // Default metric for routes being redistributed into OSPF. The type is
    // interface{} with range: 1..16777214.
    DefaultRedistributedRouteMetric interface{}

    // Set tag for routes redistributed into OSPF. The type is interface{} with
    // range: 0..4294967295.
    Tag interface{}

    // Set OSPF External metric type. The type is OspfLinkStateMetric.
    MetricType interface{}

    // EIGRP route type. The type is OspfEigrpRoute.
    EigrpRouteType interface{}

    // Levels of ISIS routes. The type is OspfRouteLevel.
    IsisLevels interface{}

    // OSPF_Internal route type. The type is bool.
    OspfInternal interface{}

    // OSPF external route types. The type is OspfRouteLevel.
    OspfExternal interface{}

    // OSPF NSSA external route types. The type is OspfRouteLevel.
    OspfNssaLevel interface{}

    // Routing policy name. The type is string.
    RoutePolicyName interface{}

    // Preserve MED of BGP routes. The type is bool.
    BgpPreserveMed interface{}

    // Preserve Metric and Metric Type of BGP Default Route. The type is bool.
    BgpPreserveDefaultInfo interface{}

    // LSA type for redistributed routes. The type is OspfRedistLsa. The default
    // value is external.
    OspfRedistLsaType interface{}

    // Only redistribute to NSSA areas. The type is bool.
    OspfnssaOnly interface{}
}

func (bgp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Bgp) GetFilter() yfilter.YFilter { return bgp.YFilter }

func (bgp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Bgp) SetFilter(yf yfilter.YFilter) { bgp.YFilter = yf }

func (bgp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Bgp) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "as-xx" { return "AsXx" }
    if yname == "as-yy" { return "AsYy" }
    if yname == "classful" { return "Classful" }
    if yname == "default-redistributed-route-metric" { return "DefaultRedistributedRouteMetric" }
    if yname == "tag" { return "Tag" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "eigrp-route-type" { return "EigrpRouteType" }
    if yname == "isis-levels" { return "IsisLevels" }
    if yname == "ospf-internal" { return "OspfInternal" }
    if yname == "ospf-external" { return "OspfExternal" }
    if yname == "ospf-nssa-level" { return "OspfNssaLevel" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "bgp-preserve-med" { return "BgpPreserveMed" }
    if yname == "bgp-preserve-default-info" { return "BgpPreserveDefaultInfo" }
    if yname == "ospf-redist-lsa-type" { return "OspfRedistLsaType" }
    if yname == "ospfnssa-only" { return "OspfnssaOnly" }
    return ""
}

func (bgp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Bgp) GetSegmentPath() string {
    return "bgp" + "[instance-name='" + fmt.Sprintf("%v", bgp.InstanceName) + "']" + "[as-xx='" + fmt.Sprintf("%v", bgp.AsXx) + "']" + "[as-yy='" + fmt.Sprintf("%v", bgp.AsYy) + "']"
}

func (bgp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Bgp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bgp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Bgp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bgp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Bgp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = bgp.InstanceName
    leafs["as-xx"] = bgp.AsXx
    leafs["as-yy"] = bgp.AsYy
    leafs["classful"] = bgp.Classful
    leafs["default-redistributed-route-metric"] = bgp.DefaultRedistributedRouteMetric
    leafs["tag"] = bgp.Tag
    leafs["metric-type"] = bgp.MetricType
    leafs["eigrp-route-type"] = bgp.EigrpRouteType
    leafs["isis-levels"] = bgp.IsisLevels
    leafs["ospf-internal"] = bgp.OspfInternal
    leafs["ospf-external"] = bgp.OspfExternal
    leafs["ospf-nssa-level"] = bgp.OspfNssaLevel
    leafs["route-policy-name"] = bgp.RoutePolicyName
    leafs["bgp-preserve-med"] = bgp.BgpPreserveMed
    leafs["bgp-preserve-default-info"] = bgp.BgpPreserveDefaultInfo
    leafs["ospf-redist-lsa-type"] = bgp.OspfRedistLsaType
    leafs["ospfnssa-only"] = bgp.OspfnssaOnly
    return leafs
}

func (bgp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Bgp) GetBundleName() string { return "cisco_ios_xr" }

func (bgp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Bgp) GetYangName() string { return "bgp" }

func (bgp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Bgp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bgp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Bgp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bgp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Bgp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bgp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Bgp) SetParent(parent types.Entity) { bgp.parent = parent }

func (bgp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Bgp) GetParent() types.Entity { return bgp.parent }

func (bgp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Bgp) GetParentYangName() string { return "redistribute" }

// Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Eigrp
// eigrp
type Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Eigrp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. OSPF or ISIS process name or protocol name: bgp,
    // eigrp, connected. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    InstanceName interface{}

    // This attribute is a key. First half of BGP AS number in XX.YY format.
    // Mandatory if Protocol is BGP and must not be specified otherwise. Must be a
    // non-zero value if second half is zero. The type is interface{} with range:
    // 0..65535.
    AsXx interface{}

    // Disallow subnetting. The type is bool. The default value is false.
    Classful interface{}

    // Default metric for routes being redistributed into OSPF. The type is
    // interface{} with range: 1..16777214.
    DefaultRedistributedRouteMetric interface{}

    // Set tag for routes redistributed into OSPF. The type is interface{} with
    // range: 0..4294967295.
    Tag interface{}

    // Set OSPF External metric type. The type is OspfLinkStateMetric.
    MetricType interface{}

    // EIGRP route type. The type is OspfEigrpRoute.
    EigrpRouteType interface{}

    // Levels of ISIS routes. The type is OspfRouteLevel.
    IsisLevels interface{}

    // OSPF_Internal route type. The type is bool.
    OspfInternal interface{}

    // OSPF external route types. The type is OspfRouteLevel.
    OspfExternal interface{}

    // OSPF NSSA external route types. The type is OspfRouteLevel.
    OspfNssaLevel interface{}

    // Routing policy name. The type is string.
    RoutePolicyName interface{}

    // Preserve MED of BGP routes. The type is bool.
    BgpPreserveMed interface{}

    // Preserve Metric and Metric Type of BGP Default Route. The type is bool.
    BgpPreserveDefaultInfo interface{}

    // LSA type for redistributed routes. The type is OspfRedistLsa. The default
    // value is external.
    OspfRedistLsaType interface{}

    // Only redistribute to NSSA areas. The type is bool.
    OspfnssaOnly interface{}
}

func (eigrp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Eigrp) GetFilter() yfilter.YFilter { return eigrp.YFilter }

func (eigrp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Eigrp) SetFilter(yf yfilter.YFilter) { eigrp.YFilter = yf }

func (eigrp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Eigrp) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "as-xx" { return "AsXx" }
    if yname == "classful" { return "Classful" }
    if yname == "default-redistributed-route-metric" { return "DefaultRedistributedRouteMetric" }
    if yname == "tag" { return "Tag" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "eigrp-route-type" { return "EigrpRouteType" }
    if yname == "isis-levels" { return "IsisLevels" }
    if yname == "ospf-internal" { return "OspfInternal" }
    if yname == "ospf-external" { return "OspfExternal" }
    if yname == "ospf-nssa-level" { return "OspfNssaLevel" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "bgp-preserve-med" { return "BgpPreserveMed" }
    if yname == "bgp-preserve-default-info" { return "BgpPreserveDefaultInfo" }
    if yname == "ospf-redist-lsa-type" { return "OspfRedistLsaType" }
    if yname == "ospfnssa-only" { return "OspfnssaOnly" }
    return ""
}

func (eigrp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Eigrp) GetSegmentPath() string {
    return "eigrp" + "[instance-name='" + fmt.Sprintf("%v", eigrp.InstanceName) + "']" + "[as-xx='" + fmt.Sprintf("%v", eigrp.AsXx) + "']"
}

func (eigrp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Eigrp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (eigrp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Eigrp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (eigrp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Eigrp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = eigrp.InstanceName
    leafs["as-xx"] = eigrp.AsXx
    leafs["classful"] = eigrp.Classful
    leafs["default-redistributed-route-metric"] = eigrp.DefaultRedistributedRouteMetric
    leafs["tag"] = eigrp.Tag
    leafs["metric-type"] = eigrp.MetricType
    leafs["eigrp-route-type"] = eigrp.EigrpRouteType
    leafs["isis-levels"] = eigrp.IsisLevels
    leafs["ospf-internal"] = eigrp.OspfInternal
    leafs["ospf-external"] = eigrp.OspfExternal
    leafs["ospf-nssa-level"] = eigrp.OspfNssaLevel
    leafs["route-policy-name"] = eigrp.RoutePolicyName
    leafs["bgp-preserve-med"] = eigrp.BgpPreserveMed
    leafs["bgp-preserve-default-info"] = eigrp.BgpPreserveDefaultInfo
    leafs["ospf-redist-lsa-type"] = eigrp.OspfRedistLsaType
    leafs["ospfnssa-only"] = eigrp.OspfnssaOnly
    return leafs
}

func (eigrp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Eigrp) GetBundleName() string { return "cisco_ios_xr" }

func (eigrp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Eigrp) GetYangName() string { return "eigrp" }

func (eigrp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Eigrp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eigrp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Eigrp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eigrp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Eigrp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eigrp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Eigrp) SetParent(parent types.Entity) { eigrp.parent = parent }

func (eigrp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Eigrp) GetParent() types.Entity { return eigrp.parent }

func (eigrp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Eigrp) GetParentYangName() string { return "redistribute" }

// Ospf_Processes_Process_DefaultVrf_AdjacencyStagger
// Staggering OSPF adjacency bring up
type Ospf_Processes_Process_DefaultVrf_AdjacencyStagger struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Disable OSPF adjacency stagger. The type is interface{}.
    Disable interface{}

    // Adjacency Stagger: Initial number of neighbors to bring up per area. The
    // type is interface{} with range: 1..65535. The default value is 2.
    InitialNbr interface{}

    // Adjacency Stagger: Subsequent simultaneous number of neighbors to bring up.
    // The type is interface{} with range: 1..65535. The default value is 64.
    MaxNbr interface{}
}

func (adjacencyStagger *Ospf_Processes_Process_DefaultVrf_AdjacencyStagger) GetFilter() yfilter.YFilter { return adjacencyStagger.YFilter }

func (adjacencyStagger *Ospf_Processes_Process_DefaultVrf_AdjacencyStagger) SetFilter(yf yfilter.YFilter) { adjacencyStagger.YFilter = yf }

func (adjacencyStagger *Ospf_Processes_Process_DefaultVrf_AdjacencyStagger) GetGoName(yname string) string {
    if yname == "disable" { return "Disable" }
    if yname == "initial-nbr" { return "InitialNbr" }
    if yname == "max-nbr" { return "MaxNbr" }
    return ""
}

func (adjacencyStagger *Ospf_Processes_Process_DefaultVrf_AdjacencyStagger) GetSegmentPath() string {
    return "adjacency-stagger"
}

func (adjacencyStagger *Ospf_Processes_Process_DefaultVrf_AdjacencyStagger) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (adjacencyStagger *Ospf_Processes_Process_DefaultVrf_AdjacencyStagger) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (adjacencyStagger *Ospf_Processes_Process_DefaultVrf_AdjacencyStagger) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["disable"] = adjacencyStagger.Disable
    leafs["initial-nbr"] = adjacencyStagger.InitialNbr
    leafs["max-nbr"] = adjacencyStagger.MaxNbr
    return leafs
}

func (adjacencyStagger *Ospf_Processes_Process_DefaultVrf_AdjacencyStagger) GetBundleName() string { return "cisco_ios_xr" }

func (adjacencyStagger *Ospf_Processes_Process_DefaultVrf_AdjacencyStagger) GetYangName() string { return "adjacency-stagger" }

func (adjacencyStagger *Ospf_Processes_Process_DefaultVrf_AdjacencyStagger) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjacencyStagger *Ospf_Processes_Process_DefaultVrf_AdjacencyStagger) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjacencyStagger *Ospf_Processes_Process_DefaultVrf_AdjacencyStagger) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjacencyStagger *Ospf_Processes_Process_DefaultVrf_AdjacencyStagger) SetParent(parent types.Entity) { adjacencyStagger.parent = parent }

func (adjacencyStagger *Ospf_Processes_Process_DefaultVrf_AdjacencyStagger) GetParent() types.Entity { return adjacencyStagger.parent }

func (adjacencyStagger *Ospf_Processes_Process_DefaultVrf_AdjacencyStagger) GetParentYangName() string { return "default-vrf" }

// Ospf_Processes_Process_DefaultVrf_MaxLsa
// Set max-lsa configuration
// This type is a presence type.
type Ospf_Processes_Process_DefaultVrf_MaxLsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Set maximum number of non self-generated LSAs. The type is interface{} with
    // range: 1..4294967294. This attribute is mandatory.
    MaxLsaLimit interface{}

    // Set max-lsa threshold for generating a warning message. The type is
    // interface{} with range: 1..100.
    MaxLsaThreshold interface{}

    // Only give warning message when limit is exceeded. The type is bool.
    MaxLsaWarningOnly interface{}

    // Set time during which all adjacencies are suppressed. The type is
    // interface{} with range: 1..35791394.
    MaxLsaIgnoreTime interface{}

    // Set count on how many times adjacencies can be suppressed. The type is
    // interface{} with range: 1..4294967294.
    MaxLsaIgnoreCount interface{}

    // Set number of minutes after which ignore-count is reset to zero. The type
    // is interface{} with range: 2..71582788. Units are minute.
    MaxLsaResetTime interface{}
}

func (maxLsa *Ospf_Processes_Process_DefaultVrf_MaxLsa) GetFilter() yfilter.YFilter { return maxLsa.YFilter }

func (maxLsa *Ospf_Processes_Process_DefaultVrf_MaxLsa) SetFilter(yf yfilter.YFilter) { maxLsa.YFilter = yf }

func (maxLsa *Ospf_Processes_Process_DefaultVrf_MaxLsa) GetGoName(yname string) string {
    if yname == "max-lsa-limit" { return "MaxLsaLimit" }
    if yname == "max-lsa-threshold" { return "MaxLsaThreshold" }
    if yname == "max-lsa-warning-only" { return "MaxLsaWarningOnly" }
    if yname == "max-lsa-ignore-time" { return "MaxLsaIgnoreTime" }
    if yname == "max-lsa-ignore-count" { return "MaxLsaIgnoreCount" }
    if yname == "max-lsa-reset-time" { return "MaxLsaResetTime" }
    return ""
}

func (maxLsa *Ospf_Processes_Process_DefaultVrf_MaxLsa) GetSegmentPath() string {
    return "max-lsa"
}

func (maxLsa *Ospf_Processes_Process_DefaultVrf_MaxLsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maxLsa *Ospf_Processes_Process_DefaultVrf_MaxLsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maxLsa *Ospf_Processes_Process_DefaultVrf_MaxLsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["max-lsa-limit"] = maxLsa.MaxLsaLimit
    leafs["max-lsa-threshold"] = maxLsa.MaxLsaThreshold
    leafs["max-lsa-warning-only"] = maxLsa.MaxLsaWarningOnly
    leafs["max-lsa-ignore-time"] = maxLsa.MaxLsaIgnoreTime
    leafs["max-lsa-ignore-count"] = maxLsa.MaxLsaIgnoreCount
    leafs["max-lsa-reset-time"] = maxLsa.MaxLsaResetTime
    return leafs
}

func (maxLsa *Ospf_Processes_Process_DefaultVrf_MaxLsa) GetBundleName() string { return "cisco_ios_xr" }

func (maxLsa *Ospf_Processes_Process_DefaultVrf_MaxLsa) GetYangName() string { return "max-lsa" }

func (maxLsa *Ospf_Processes_Process_DefaultVrf_MaxLsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxLsa *Ospf_Processes_Process_DefaultVrf_MaxLsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxLsa *Ospf_Processes_Process_DefaultVrf_MaxLsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxLsa *Ospf_Processes_Process_DefaultVrf_MaxLsa) SetParent(parent types.Entity) { maxLsa.parent = parent }

func (maxLsa *Ospf_Processes_Process_DefaultVrf_MaxLsa) GetParent() types.Entity { return maxLsa.parent }

func (maxLsa *Ospf_Processes_Process_DefaultVrf_MaxLsa) GetParentYangName() string { return "default-vrf" }

// Ospf_Processes_Process_DefaultVrf_AutoCost
// Controls automatic cost based on bandwidth
type Ospf_Processes_Process_DefaultVrf_AutoCost struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Disabling auto costing. The type is bool. The default value is false.
    Disable interface{}

    // The reference bandwidth in terms of Mbits per second. The type is
    // interface{} with range: 1..4294967. Units are Mbit/s. The default value is
    // 100.
    Bandwidth interface{}
}

func (autoCost *Ospf_Processes_Process_DefaultVrf_AutoCost) GetFilter() yfilter.YFilter { return autoCost.YFilter }

func (autoCost *Ospf_Processes_Process_DefaultVrf_AutoCost) SetFilter(yf yfilter.YFilter) { autoCost.YFilter = yf }

func (autoCost *Ospf_Processes_Process_DefaultVrf_AutoCost) GetGoName(yname string) string {
    if yname == "disable" { return "Disable" }
    if yname == "bandwidth" { return "Bandwidth" }
    return ""
}

func (autoCost *Ospf_Processes_Process_DefaultVrf_AutoCost) GetSegmentPath() string {
    return "auto-cost"
}

func (autoCost *Ospf_Processes_Process_DefaultVrf_AutoCost) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (autoCost *Ospf_Processes_Process_DefaultVrf_AutoCost) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (autoCost *Ospf_Processes_Process_DefaultVrf_AutoCost) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["disable"] = autoCost.Disable
    leafs["bandwidth"] = autoCost.Bandwidth
    return leafs
}

func (autoCost *Ospf_Processes_Process_DefaultVrf_AutoCost) GetBundleName() string { return "cisco_ios_xr" }

func (autoCost *Ospf_Processes_Process_DefaultVrf_AutoCost) GetYangName() string { return "auto-cost" }

func (autoCost *Ospf_Processes_Process_DefaultVrf_AutoCost) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (autoCost *Ospf_Processes_Process_DefaultVrf_AutoCost) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (autoCost *Ospf_Processes_Process_DefaultVrf_AutoCost) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (autoCost *Ospf_Processes_Process_DefaultVrf_AutoCost) SetParent(parent types.Entity) { autoCost.parent = parent }

func (autoCost *Ospf_Processes_Process_DefaultVrf_AutoCost) GetParent() types.Entity { return autoCost.parent }

func (autoCost *Ospf_Processes_Process_DefaultVrf_AutoCost) GetParentYangName() string { return "default-vrf" }

// Ospf_Processes_Process_DefaultVrf_Ucmp
// Unequal Cost Multi-ptah configuration
type Ospf_Processes_Process_DefaultVrf_Ucmp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Delay in msecs between primary SPF and UCMP computation. The type is
    // interface{} with range: 1..5000. Units are millisecond. The default value
    // is 100.
    DelayInterval interface{}

    // UCMP feature enable configuration.
    Enable Ospf_Processes_Process_DefaultVrf_Ucmp_Enable

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces
}

func (ucmp *Ospf_Processes_Process_DefaultVrf_Ucmp) GetFilter() yfilter.YFilter { return ucmp.YFilter }

func (ucmp *Ospf_Processes_Process_DefaultVrf_Ucmp) SetFilter(yf yfilter.YFilter) { ucmp.YFilter = yf }

func (ucmp *Ospf_Processes_Process_DefaultVrf_Ucmp) GetGoName(yname string) string {
    if yname == "delay-interval" { return "DelayInterval" }
    if yname == "enable" { return "Enable" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (ucmp *Ospf_Processes_Process_DefaultVrf_Ucmp) GetSegmentPath() string {
    return "ucmp"
}

func (ucmp *Ospf_Processes_Process_DefaultVrf_Ucmp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "enable" {
        return &ucmp.Enable
    }
    if childYangName == "exclude-interfaces" {
        return &ucmp.ExcludeInterfaces
    }
    return nil
}

func (ucmp *Ospf_Processes_Process_DefaultVrf_Ucmp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["enable"] = &ucmp.Enable
    children["exclude-interfaces"] = &ucmp.ExcludeInterfaces
    return children
}

func (ucmp *Ospf_Processes_Process_DefaultVrf_Ucmp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["delay-interval"] = ucmp.DelayInterval
    return leafs
}

func (ucmp *Ospf_Processes_Process_DefaultVrf_Ucmp) GetBundleName() string { return "cisco_ios_xr" }

func (ucmp *Ospf_Processes_Process_DefaultVrf_Ucmp) GetYangName() string { return "ucmp" }

func (ucmp *Ospf_Processes_Process_DefaultVrf_Ucmp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ucmp *Ospf_Processes_Process_DefaultVrf_Ucmp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ucmp *Ospf_Processes_Process_DefaultVrf_Ucmp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ucmp *Ospf_Processes_Process_DefaultVrf_Ucmp) SetParent(parent types.Entity) { ucmp.parent = parent }

func (ucmp *Ospf_Processes_Process_DefaultVrf_Ucmp) GetParent() types.Entity { return ucmp.parent }

func (ucmp *Ospf_Processes_Process_DefaultVrf_Ucmp) GetParentYangName() string { return "default-vrf" }

// Ospf_Processes_Process_DefaultVrf_Ucmp_Enable
// UCMP feature enable configuration
type Ospf_Processes_Process_DefaultVrf_Ucmp_Enable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Value of variance. The type is interface{} with range: 101..10000. The
    // default value is 200.
    Variance interface{}

    // Name of the Prefix List. The type is string.
    PrefixListName interface{}
}

func (enable *Ospf_Processes_Process_DefaultVrf_Ucmp_Enable) GetFilter() yfilter.YFilter { return enable.YFilter }

func (enable *Ospf_Processes_Process_DefaultVrf_Ucmp_Enable) SetFilter(yf yfilter.YFilter) { enable.YFilter = yf }

func (enable *Ospf_Processes_Process_DefaultVrf_Ucmp_Enable) GetGoName(yname string) string {
    if yname == "variance" { return "Variance" }
    if yname == "prefix-list-name" { return "PrefixListName" }
    return ""
}

func (enable *Ospf_Processes_Process_DefaultVrf_Ucmp_Enable) GetSegmentPath() string {
    return "enable"
}

func (enable *Ospf_Processes_Process_DefaultVrf_Ucmp_Enable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (enable *Ospf_Processes_Process_DefaultVrf_Ucmp_Enable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (enable *Ospf_Processes_Process_DefaultVrf_Ucmp_Enable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["variance"] = enable.Variance
    leafs["prefix-list-name"] = enable.PrefixListName
    return leafs
}

func (enable *Ospf_Processes_Process_DefaultVrf_Ucmp_Enable) GetBundleName() string { return "cisco_ios_xr" }

func (enable *Ospf_Processes_Process_DefaultVrf_Ucmp_Enable) GetYangName() string { return "enable" }

func (enable *Ospf_Processes_Process_DefaultVrf_Ucmp_Enable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (enable *Ospf_Processes_Process_DefaultVrf_Ucmp_Enable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (enable *Ospf_Processes_Process_DefaultVrf_Ucmp_Enable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (enable *Ospf_Processes_Process_DefaultVrf_Ucmp_Enable) SetParent(parent types.Entity) { enable.parent = parent }

func (enable *Ospf_Processes_Process_DefaultVrf_Ucmp_Enable) GetParent() types.Entity { return enable.parent }

func (enable *Ospf_Processes_Process_DefaultVrf_Ucmp_Enable) GetParentYangName() string { return "ucmp" }

// Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces) GetParentYangName() string { return "ucmp" }

// Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospf_Processes_Process_DefaultVrf_FastReroute
// Fast-reroute instance scoped parameters
type Ospf_Processes_Process_DefaultVrf_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fast-reroute per-link global configuration.
    PerLink Ospf_Processes_Process_DefaultVrf_FastReroute_PerLink

    // Fast-reroute per-prefix global configuration.
    PerPrefix Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_FastReroute) GetGoName(yname string) string {
    if yname == "per-link" { return "PerLink" }
    if yname == "per-prefix" { return "PerPrefix" }
    return ""
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "per-link" {
        return &fastReroute.PerLink
    }
    if childYangName == "per-prefix" {
        return &fastReroute.PerPrefix
    }
    return nil
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["per-link"] = &fastReroute.PerLink
    children["per-prefix"] = &fastReroute.PerPrefix
    return children
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_FastReroute) GetParentYangName() string { return "default-vrf" }

// Ospf_Processes_Process_DefaultVrf_FastReroute_PerLink
// Fast-reroute per-link global configuration
type Ospf_Processes_Process_DefaultVrf_FastReroute_PerLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fast-reroute per-link/per-prefix priority-limit command. The type is
    // OspfFastReroutePriority.
    Priority interface{}
}

func (perLink *Ospf_Processes_Process_DefaultVrf_FastReroute_PerLink) GetFilter() yfilter.YFilter { return perLink.YFilter }

func (perLink *Ospf_Processes_Process_DefaultVrf_FastReroute_PerLink) SetFilter(yf yfilter.YFilter) { perLink.YFilter = yf }

func (perLink *Ospf_Processes_Process_DefaultVrf_FastReroute_PerLink) GetGoName(yname string) string {
    if yname == "priority" { return "Priority" }
    return ""
}

func (perLink *Ospf_Processes_Process_DefaultVrf_FastReroute_PerLink) GetSegmentPath() string {
    return "per-link"
}

func (perLink *Ospf_Processes_Process_DefaultVrf_FastReroute_PerLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (perLink *Ospf_Processes_Process_DefaultVrf_FastReroute_PerLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (perLink *Ospf_Processes_Process_DefaultVrf_FastReroute_PerLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["priority"] = perLink.Priority
    return leafs
}

func (perLink *Ospf_Processes_Process_DefaultVrf_FastReroute_PerLink) GetBundleName() string { return "cisco_ios_xr" }

func (perLink *Ospf_Processes_Process_DefaultVrf_FastReroute_PerLink) GetYangName() string { return "per-link" }

func (perLink *Ospf_Processes_Process_DefaultVrf_FastReroute_PerLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLink *Ospf_Processes_Process_DefaultVrf_FastReroute_PerLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLink *Ospf_Processes_Process_DefaultVrf_FastReroute_PerLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLink *Ospf_Processes_Process_DefaultVrf_FastReroute_PerLink) SetParent(parent types.Entity) { perLink.parent = parent }

func (perLink *Ospf_Processes_Process_DefaultVrf_FastReroute_PerLink) GetParent() types.Entity { return perLink.parent }

func (perLink *Ospf_Processes_Process_DefaultVrf_FastReroute_PerLink) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix
// Fast-reroute per-prefix global configuration
type Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Disable load sharing between multiple backups. The type is interface{}.
    LoadSharingDisable interface{}

    // Fast-reroute per-link/per-prefix priority-limit command. The type is
    // OspfFastReroutePriority.
    Priority interface{}

    // Fast-reroute tiebreakers configurations.
    Tiebreakers Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix) GetFilter() yfilter.YFilter { return perPrefix.YFilter }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix) SetFilter(yf yfilter.YFilter) { perPrefix.YFilter = yf }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix) GetGoName(yname string) string {
    if yname == "load-sharing-disable" { return "LoadSharingDisable" }
    if yname == "priority" { return "Priority" }
    if yname == "tiebreakers" { return "Tiebreakers" }
    return ""
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix) GetSegmentPath() string {
    return "per-prefix"
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tiebreakers" {
        return &perPrefix.Tiebreakers
    }
    return nil
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tiebreakers"] = &perPrefix.Tiebreakers
    return children
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["load-sharing-disable"] = perPrefix.LoadSharingDisable
    leafs["priority"] = perPrefix.Priority
    return leafs
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix) GetYangName() string { return "per-prefix" }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix) SetParent(parent types.Entity) { perPrefix.parent = parent }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix) GetParent() types.Entity { return perPrefix.parent }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers
// Fast-reroute tiebreakers configurations
type Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fast-reroute tiebreakers configuration. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker.
    Tiebreaker []Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers) GetFilter() yfilter.YFilter { return tiebreakers.YFilter }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers) SetFilter(yf yfilter.YFilter) { tiebreakers.YFilter = yf }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers) GetGoName(yname string) string {
    if yname == "tiebreaker" { return "Tiebreaker" }
    return ""
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers) GetSegmentPath() string {
    return "tiebreakers"
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tiebreaker" {
        for _, c := range tiebreakers.Tiebreaker {
            if tiebreakers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker{}
        tiebreakers.Tiebreaker = append(tiebreakers.Tiebreaker, child)
        return &tiebreakers.Tiebreaker[len(tiebreakers.Tiebreaker)-1]
    }
    return nil
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range tiebreakers.Tiebreaker {
        children[tiebreakers.Tiebreaker[i].GetSegmentPath()] = &tiebreakers.Tiebreaker[i]
    }
    return children
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers) GetYangName() string { return "tiebreakers" }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers) SetParent(parent types.Entity) { tiebreakers.parent = parent }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers) GetParent() types.Entity { return tiebreakers.parent }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
// Fast-reroute tiebreakers configuration
type Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Tiebreaker type. The type is
    // OspfFastRerouteTiebreakers.
    TiebreakerType interface{}

    // Index value for a tiebreaker, 0 to disable. The type is interface{} with
    // range: 0..255. This attribute is mandatory.
    TiebreakerIndex interface{}
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetFilter() yfilter.YFilter { return tiebreaker.YFilter }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetFilter(yf yfilter.YFilter) { tiebreaker.YFilter = yf }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetGoName(yname string) string {
    if yname == "tiebreaker-type" { return "TiebreakerType" }
    if yname == "tiebreaker-index" { return "TiebreakerIndex" }
    return ""
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetSegmentPath() string {
    return "tiebreaker" + "[tiebreaker-type='" + fmt.Sprintf("%v", tiebreaker.TiebreakerType) + "']"
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tiebreaker-type"] = tiebreaker.TiebreakerType
    leafs["tiebreaker-index"] = tiebreaker.TiebreakerIndex
    return leafs
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetYangName() string { return "tiebreaker" }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetParent(parent types.Entity) { tiebreaker.parent = parent }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParent() types.Entity { return tiebreaker.parent }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParentYangName() string { return "tiebreakers" }

// Ospf_Processes_Process_DefaultVrf_SummaryPrefixes
// Configure IP prefix summary
type Ospf_Processes_Process_DefaultVrf_SummaryPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Data container.
    SummaryPrefixData Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefixData

    // keys: prefix, netmask. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_PrefixAndNetmask.
    PrefixAndNetmask []Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_PrefixAndNetmask

    // keys: prefix. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Prefix.
    Prefix []Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Prefix

    // keys: netmask. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Netmask.
    Netmask []Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Netmask
}

func (summaryPrefixes *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes) GetFilter() yfilter.YFilter { return summaryPrefixes.YFilter }

func (summaryPrefixes *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes) SetFilter(yf yfilter.YFilter) { summaryPrefixes.YFilter = yf }

func (summaryPrefixes *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes) GetGoName(yname string) string {
    if yname == "summary-prefix-data" { return "SummaryPrefixData" }
    if yname == "prefix-and-netmask" { return "PrefixAndNetmask" }
    if yname == "prefix" { return "Prefix" }
    if yname == "netmask" { return "Netmask" }
    return ""
}

func (summaryPrefixes *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes) GetSegmentPath() string {
    return "summary-prefixes"
}

func (summaryPrefixes *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary-prefix-data" {
        return &summaryPrefixes.SummaryPrefixData
    }
    if childYangName == "prefix-and-netmask" {
        for _, c := range summaryPrefixes.PrefixAndNetmask {
            if summaryPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_PrefixAndNetmask{}
        summaryPrefixes.PrefixAndNetmask = append(summaryPrefixes.PrefixAndNetmask, child)
        return &summaryPrefixes.PrefixAndNetmask[len(summaryPrefixes.PrefixAndNetmask)-1]
    }
    if childYangName == "prefix" {
        for _, c := range summaryPrefixes.Prefix {
            if summaryPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Prefix{}
        summaryPrefixes.Prefix = append(summaryPrefixes.Prefix, child)
        return &summaryPrefixes.Prefix[len(summaryPrefixes.Prefix)-1]
    }
    if childYangName == "netmask" {
        for _, c := range summaryPrefixes.Netmask {
            if summaryPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Netmask{}
        summaryPrefixes.Netmask = append(summaryPrefixes.Netmask, child)
        return &summaryPrefixes.Netmask[len(summaryPrefixes.Netmask)-1]
    }
    return nil
}

func (summaryPrefixes *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["summary-prefix-data"] = &summaryPrefixes.SummaryPrefixData
    for i := range summaryPrefixes.PrefixAndNetmask {
        children[summaryPrefixes.PrefixAndNetmask[i].GetSegmentPath()] = &summaryPrefixes.PrefixAndNetmask[i]
    }
    for i := range summaryPrefixes.Prefix {
        children[summaryPrefixes.Prefix[i].GetSegmentPath()] = &summaryPrefixes.Prefix[i]
    }
    for i := range summaryPrefixes.Netmask {
        children[summaryPrefixes.Netmask[i].GetSegmentPath()] = &summaryPrefixes.Netmask[i]
    }
    return children
}

func (summaryPrefixes *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (summaryPrefixes *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (summaryPrefixes *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes) GetYangName() string { return "summary-prefixes" }

func (summaryPrefixes *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summaryPrefixes *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summaryPrefixes *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summaryPrefixes *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes) SetParent(parent types.Entity) { summaryPrefixes.parent = parent }

func (summaryPrefixes *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes) GetParent() types.Entity { return summaryPrefixes.parent }

func (summaryPrefixes *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes) GetParentYangName() string { return "default-vrf" }

// Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefixData
// Data container.
type Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefixData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Do not advertise when translating OSPF type-7 LSA. The type is bool. The
    // default value is false.
    NotAdvertise interface{}

    // 32-bit tag value. The type is interface{} with range: 0..4294967295.
    Tag interface{}
}

func (summaryPrefixData *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefixData) GetFilter() yfilter.YFilter { return summaryPrefixData.YFilter }

func (summaryPrefixData *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefixData) SetFilter(yf yfilter.YFilter) { summaryPrefixData.YFilter = yf }

func (summaryPrefixData *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefixData) GetGoName(yname string) string {
    if yname == "not-advertise" { return "NotAdvertise" }
    if yname == "tag" { return "Tag" }
    return ""
}

func (summaryPrefixData *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefixData) GetSegmentPath() string {
    return "summary-prefix-data"
}

func (summaryPrefixData *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefixData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (summaryPrefixData *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefixData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (summaryPrefixData *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefixData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["not-advertise"] = summaryPrefixData.NotAdvertise
    leafs["tag"] = summaryPrefixData.Tag
    return leafs
}

func (summaryPrefixData *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefixData) GetBundleName() string { return "cisco_ios_xr" }

func (summaryPrefixData *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefixData) GetYangName() string { return "summary-prefix-data" }

func (summaryPrefixData *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefixData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summaryPrefixData *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefixData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summaryPrefixData *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefixData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summaryPrefixData *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefixData) SetParent(parent types.Entity) { summaryPrefixData.parent = parent }

func (summaryPrefixData *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefixData) GetParent() types.Entity { return summaryPrefixData.parent }

func (summaryPrefixData *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefixData) GetParentYangName() string { return "summary-prefixes" }

// Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_PrefixAndNetmask
// keys: prefix, netmask
type Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_PrefixAndNetmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IP summary prefix. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // This attribute is a key. Summary netmask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Netmask interface{}

    // Do not advertise when translating OSPF type-7 LSA. The type is bool. The
    // default value is false.
    NotAdvertise interface{}

    // 32-bit tag value. The type is interface{} with range: 0..4294967295.
    Tag interface{}
}

func (prefixAndNetmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_PrefixAndNetmask) GetFilter() yfilter.YFilter { return prefixAndNetmask.YFilter }

func (prefixAndNetmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_PrefixAndNetmask) SetFilter(yf yfilter.YFilter) { prefixAndNetmask.YFilter = yf }

func (prefixAndNetmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_PrefixAndNetmask) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "netmask" { return "Netmask" }
    if yname == "not-advertise" { return "NotAdvertise" }
    if yname == "tag" { return "Tag" }
    return ""
}

func (prefixAndNetmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_PrefixAndNetmask) GetSegmentPath() string {
    return "prefix-and-netmask" + "[prefix='" + fmt.Sprintf("%v", prefixAndNetmask.Prefix) + "']" + "[netmask='" + fmt.Sprintf("%v", prefixAndNetmask.Netmask) + "']"
}

func (prefixAndNetmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_PrefixAndNetmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefixAndNetmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_PrefixAndNetmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefixAndNetmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_PrefixAndNetmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = prefixAndNetmask.Prefix
    leafs["netmask"] = prefixAndNetmask.Netmask
    leafs["not-advertise"] = prefixAndNetmask.NotAdvertise
    leafs["tag"] = prefixAndNetmask.Tag
    return leafs
}

func (prefixAndNetmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_PrefixAndNetmask) GetBundleName() string { return "cisco_ios_xr" }

func (prefixAndNetmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_PrefixAndNetmask) GetYangName() string { return "prefix-and-netmask" }

func (prefixAndNetmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_PrefixAndNetmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefixAndNetmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_PrefixAndNetmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefixAndNetmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_PrefixAndNetmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefixAndNetmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_PrefixAndNetmask) SetParent(parent types.Entity) { prefixAndNetmask.parent = parent }

func (prefixAndNetmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_PrefixAndNetmask) GetParent() types.Entity { return prefixAndNetmask.parent }

func (prefixAndNetmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_PrefixAndNetmask) GetParentYangName() string { return "summary-prefixes" }

// Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Prefix
// keys: prefix
type Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IP summary prefix. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Do not advertise when translating OSPF type-7 LSA. The type is bool. The
    // default value is false.
    NotAdvertise interface{}

    // 32-bit tag value. The type is interface{} with range: 0..4294967295.
    Tag interface{}
}

func (prefix *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Prefix) GetFilter() yfilter.YFilter { return prefix.YFilter }

func (prefix *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Prefix) SetFilter(yf yfilter.YFilter) { prefix.YFilter = yf }

func (prefix *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Prefix) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "not-advertise" { return "NotAdvertise" }
    if yname == "tag" { return "Tag" }
    return ""
}

func (prefix *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Prefix) GetSegmentPath() string {
    return "prefix" + "[prefix='" + fmt.Sprintf("%v", prefix.Prefix) + "']"
}

func (prefix *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefix *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefix *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = prefix.Prefix
    leafs["not-advertise"] = prefix.NotAdvertise
    leafs["tag"] = prefix.Tag
    return leafs
}

func (prefix *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (prefix *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Prefix) GetYangName() string { return "prefix" }

func (prefix *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefix *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefix *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefix *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Prefix) SetParent(parent types.Entity) { prefix.parent = parent }

func (prefix *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Prefix) GetParent() types.Entity { return prefix.parent }

func (prefix *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Prefix) GetParentYangName() string { return "summary-prefixes" }

// Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Netmask
// keys: netmask
type Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Netmask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Summary netmask. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Netmask interface{}

    // Do not advertise when translating OSPF type-7 LSA. The type is bool. The
    // default value is false.
    NotAdvertise interface{}

    // 32-bit tag value. The type is interface{} with range: 0..4294967295.
    Tag interface{}
}

func (netmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Netmask) GetFilter() yfilter.YFilter { return netmask.YFilter }

func (netmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Netmask) SetFilter(yf yfilter.YFilter) { netmask.YFilter = yf }

func (netmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Netmask) GetGoName(yname string) string {
    if yname == "netmask" { return "Netmask" }
    if yname == "not-advertise" { return "NotAdvertise" }
    if yname == "tag" { return "Tag" }
    return ""
}

func (netmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Netmask) GetSegmentPath() string {
    return "netmask" + "[netmask='" + fmt.Sprintf("%v", netmask.Netmask) + "']"
}

func (netmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Netmask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (netmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Netmask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (netmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Netmask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["netmask"] = netmask.Netmask
    leafs["not-advertise"] = netmask.NotAdvertise
    leafs["tag"] = netmask.Tag
    return leafs
}

func (netmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Netmask) GetBundleName() string { return "cisco_ios_xr" }

func (netmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Netmask) GetYangName() string { return "netmask" }

func (netmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Netmask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (netmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Netmask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (netmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Netmask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (netmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Netmask) SetParent(parent types.Entity) { netmask.parent = parent }

func (netmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Netmask) GetParent() types.Entity { return netmask.parent }

func (netmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Netmask) GetParentYangName() string { return "summary-prefixes" }

// Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates
// Filter outgoing routing updates
type Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Filter outgoing routing updates for a particular protocol. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates_OutgoingRouteUpdate.
    OutgoingRouteUpdate []Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates_OutgoingRouteUpdate
}

func (outgoingRouteUpdates *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates) GetFilter() yfilter.YFilter { return outgoingRouteUpdates.YFilter }

func (outgoingRouteUpdates *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates) SetFilter(yf yfilter.YFilter) { outgoingRouteUpdates.YFilter = yf }

func (outgoingRouteUpdates *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates) GetGoName(yname string) string {
    if yname == "outgoing-route-update" { return "OutgoingRouteUpdate" }
    return ""
}

func (outgoingRouteUpdates *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates) GetSegmentPath() string {
    return "outgoing-route-updates"
}

func (outgoingRouteUpdates *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "outgoing-route-update" {
        for _, c := range outgoingRouteUpdates.OutgoingRouteUpdate {
            if outgoingRouteUpdates.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates_OutgoingRouteUpdate{}
        outgoingRouteUpdates.OutgoingRouteUpdate = append(outgoingRouteUpdates.OutgoingRouteUpdate, child)
        return &outgoingRouteUpdates.OutgoingRouteUpdate[len(outgoingRouteUpdates.OutgoingRouteUpdate)-1]
    }
    return nil
}

func (outgoingRouteUpdates *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range outgoingRouteUpdates.OutgoingRouteUpdate {
        children[outgoingRouteUpdates.OutgoingRouteUpdate[i].GetSegmentPath()] = &outgoingRouteUpdates.OutgoingRouteUpdate[i]
    }
    return children
}

func (outgoingRouteUpdates *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (outgoingRouteUpdates *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates) GetBundleName() string { return "cisco_ios_xr" }

func (outgoingRouteUpdates *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates) GetYangName() string { return "outgoing-route-updates" }

func (outgoingRouteUpdates *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (outgoingRouteUpdates *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (outgoingRouteUpdates *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (outgoingRouteUpdates *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates) SetParent(parent types.Entity) { outgoingRouteUpdates.parent = parent }

func (outgoingRouteUpdates *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates) GetParent() types.Entity { return outgoingRouteUpdates.parent }

func (outgoingRouteUpdates *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates) GetParentYangName() string { return "default-vrf" }

// Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates_OutgoingRouteUpdate
// Filter outgoing routing updates for a
// particular protocol
type Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates_OutgoingRouteUpdate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Distribute list protocol type. The type is
    // OspfDistListProtocol.
    ProtocolName interface{}

    // Access Control List name. The type is string.
    AccessListName interface{}

    // First half of BGP AS number in XX.YY format.  Mandatory if Protocol is BGP
    // and must not be specified otherwise. Must be a non-zero value if second
    // half is zero. The type is interface{} with range: 0..65535.
    AsXx interface{}

    // Second half of BGP AS number in XX.YY format. Mandatory if Protocol is BGP
    // and must not be specified otherwise. Must be a non-zero value if first half
    // is zero. The type is interface{} with range: 0..4294967295.
    AsYy interface{}

    // OSPF process name. The type is string.
    OspfProcessName interface{}
}

func (outgoingRouteUpdate *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates_OutgoingRouteUpdate) GetFilter() yfilter.YFilter { return outgoingRouteUpdate.YFilter }

func (outgoingRouteUpdate *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates_OutgoingRouteUpdate) SetFilter(yf yfilter.YFilter) { outgoingRouteUpdate.YFilter = yf }

func (outgoingRouteUpdate *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates_OutgoingRouteUpdate) GetGoName(yname string) string {
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "access-list-name" { return "AccessListName" }
    if yname == "as-xx" { return "AsXx" }
    if yname == "as-yy" { return "AsYy" }
    if yname == "ospf-process-name" { return "OspfProcessName" }
    return ""
}

func (outgoingRouteUpdate *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates_OutgoingRouteUpdate) GetSegmentPath() string {
    return "outgoing-route-update" + "[protocol-name='" + fmt.Sprintf("%v", outgoingRouteUpdate.ProtocolName) + "']"
}

func (outgoingRouteUpdate *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates_OutgoingRouteUpdate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (outgoingRouteUpdate *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates_OutgoingRouteUpdate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (outgoingRouteUpdate *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates_OutgoingRouteUpdate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-name"] = outgoingRouteUpdate.ProtocolName
    leafs["access-list-name"] = outgoingRouteUpdate.AccessListName
    leafs["as-xx"] = outgoingRouteUpdate.AsXx
    leafs["as-yy"] = outgoingRouteUpdate.AsYy
    leafs["ospf-process-name"] = outgoingRouteUpdate.OspfProcessName
    return leafs
}

func (outgoingRouteUpdate *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates_OutgoingRouteUpdate) GetBundleName() string { return "cisco_ios_xr" }

func (outgoingRouteUpdate *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates_OutgoingRouteUpdate) GetYangName() string { return "outgoing-route-update" }

func (outgoingRouteUpdate *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates_OutgoingRouteUpdate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (outgoingRouteUpdate *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates_OutgoingRouteUpdate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (outgoingRouteUpdate *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates_OutgoingRouteUpdate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (outgoingRouteUpdate *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates_OutgoingRouteUpdate) SetParent(parent types.Entity) { outgoingRouteUpdate.parent = parent }

func (outgoingRouteUpdate *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates_OutgoingRouteUpdate) GetParent() types.Entity { return outgoingRouteUpdate.parent }

func (outgoingRouteUpdate *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates_OutgoingRouteUpdate) GetParentYangName() string { return "outgoing-route-updates" }

// Ospf_Processes_Process_DefaultVrf_Distance
// Administrative distance configuration
type Ospf_Processes_Process_DefaultVrf_Distance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Define an administrative distance. The type is interface{} with range:
    // 1..255. The default value is 110.
    AdminDistance interface{}

    // OSPF distance configuration.
    OspfDistance Ospf_Processes_Process_DefaultVrf_Distance_OspfDistance

    // IP specific administrative distance configuration.
    IpDistances Ospf_Processes_Process_DefaultVrf_Distance_IpDistances
}

func (distance *Ospf_Processes_Process_DefaultVrf_Distance) GetFilter() yfilter.YFilter { return distance.YFilter }

func (distance *Ospf_Processes_Process_DefaultVrf_Distance) SetFilter(yf yfilter.YFilter) { distance.YFilter = yf }

func (distance *Ospf_Processes_Process_DefaultVrf_Distance) GetGoName(yname string) string {
    if yname == "admin-distance" { return "AdminDistance" }
    if yname == "ospf-distance" { return "OspfDistance" }
    if yname == "ip-distances" { return "IpDistances" }
    return ""
}

func (distance *Ospf_Processes_Process_DefaultVrf_Distance) GetSegmentPath() string {
    return "distance"
}

func (distance *Ospf_Processes_Process_DefaultVrf_Distance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ospf-distance" {
        return &distance.OspfDistance
    }
    if childYangName == "ip-distances" {
        return &distance.IpDistances
    }
    return nil
}

func (distance *Ospf_Processes_Process_DefaultVrf_Distance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ospf-distance"] = &distance.OspfDistance
    children["ip-distances"] = &distance.IpDistances
    return children
}

func (distance *Ospf_Processes_Process_DefaultVrf_Distance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["admin-distance"] = distance.AdminDistance
    return leafs
}

func (distance *Ospf_Processes_Process_DefaultVrf_Distance) GetBundleName() string { return "cisco_ios_xr" }

func (distance *Ospf_Processes_Process_DefaultVrf_Distance) GetYangName() string { return "distance" }

func (distance *Ospf_Processes_Process_DefaultVrf_Distance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distance *Ospf_Processes_Process_DefaultVrf_Distance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distance *Ospf_Processes_Process_DefaultVrf_Distance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distance *Ospf_Processes_Process_DefaultVrf_Distance) SetParent(parent types.Entity) { distance.parent = parent }

func (distance *Ospf_Processes_Process_DefaultVrf_Distance) GetParent() types.Entity { return distance.parent }

func (distance *Ospf_Processes_Process_DefaultVrf_Distance) GetParentYangName() string { return "default-vrf" }

// Ospf_Processes_Process_DefaultVrf_Distance_OspfDistance
// OSPF distance configuration
type Ospf_Processes_Process_DefaultVrf_Distance_OspfDistance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Distance for intra-area routes. The type is interface{} with range: 1..255.
    // The default value is 110.
    IntraArea interface{}

    // Distance for inter-area routes. The type is interface{} with range: 1..255.
    // The default value is 110.
    InterArea interface{}

    // Distance for external type 5 and type 7 routes. The type is interface{}
    // with range: 1..255. The default value is 110.
    ExternalRoutes interface{}
}

func (ospfDistance *Ospf_Processes_Process_DefaultVrf_Distance_OspfDistance) GetFilter() yfilter.YFilter { return ospfDistance.YFilter }

func (ospfDistance *Ospf_Processes_Process_DefaultVrf_Distance_OspfDistance) SetFilter(yf yfilter.YFilter) { ospfDistance.YFilter = yf }

func (ospfDistance *Ospf_Processes_Process_DefaultVrf_Distance_OspfDistance) GetGoName(yname string) string {
    if yname == "intra-area" { return "IntraArea" }
    if yname == "inter-area" { return "InterArea" }
    if yname == "external-routes" { return "ExternalRoutes" }
    return ""
}

func (ospfDistance *Ospf_Processes_Process_DefaultVrf_Distance_OspfDistance) GetSegmentPath() string {
    return "ospf-distance"
}

func (ospfDistance *Ospf_Processes_Process_DefaultVrf_Distance_OspfDistance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ospfDistance *Ospf_Processes_Process_DefaultVrf_Distance_OspfDistance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ospfDistance *Ospf_Processes_Process_DefaultVrf_Distance_OspfDistance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["intra-area"] = ospfDistance.IntraArea
    leafs["inter-area"] = ospfDistance.InterArea
    leafs["external-routes"] = ospfDistance.ExternalRoutes
    return leafs
}

func (ospfDistance *Ospf_Processes_Process_DefaultVrf_Distance_OspfDistance) GetBundleName() string { return "cisco_ios_xr" }

func (ospfDistance *Ospf_Processes_Process_DefaultVrf_Distance_OspfDistance) GetYangName() string { return "ospf-distance" }

func (ospfDistance *Ospf_Processes_Process_DefaultVrf_Distance_OspfDistance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ospfDistance *Ospf_Processes_Process_DefaultVrf_Distance_OspfDistance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ospfDistance *Ospf_Processes_Process_DefaultVrf_Distance_OspfDistance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ospfDistance *Ospf_Processes_Process_DefaultVrf_Distance_OspfDistance) SetParent(parent types.Entity) { ospfDistance.parent = parent }

func (ospfDistance *Ospf_Processes_Process_DefaultVrf_Distance_OspfDistance) GetParent() types.Entity { return ospfDistance.parent }

func (ospfDistance *Ospf_Processes_Process_DefaultVrf_Distance_OspfDistance) GetParentYangName() string { return "distance" }

// Ospf_Processes_Process_DefaultVrf_Distance_IpDistances
// IP specific administrative distance
// configuration
type Ospf_Processes_Process_DefaultVrf_Distance_IpDistances struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Administrative distance configuration for a particular IP address. The type
    // is slice of
    // Ospf_Processes_Process_DefaultVrf_Distance_IpDistances_IpDistance.
    IpDistance []Ospf_Processes_Process_DefaultVrf_Distance_IpDistances_IpDistance
}

func (ipDistances *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances) GetFilter() yfilter.YFilter { return ipDistances.YFilter }

func (ipDistances *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances) SetFilter(yf yfilter.YFilter) { ipDistances.YFilter = yf }

func (ipDistances *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances) GetGoName(yname string) string {
    if yname == "ip-distance" { return "IpDistance" }
    return ""
}

func (ipDistances *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances) GetSegmentPath() string {
    return "ip-distances"
}

func (ipDistances *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ip-distance" {
        for _, c := range ipDistances.IpDistance {
            if ipDistances.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_Distance_IpDistances_IpDistance{}
        ipDistances.IpDistance = append(ipDistances.IpDistance, child)
        return &ipDistances.IpDistance[len(ipDistances.IpDistance)-1]
    }
    return nil
}

func (ipDistances *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipDistances.IpDistance {
        children[ipDistances.IpDistance[i].GetSegmentPath()] = &ipDistances.IpDistance[i]
    }
    return children
}

func (ipDistances *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipDistances *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances) GetBundleName() string { return "cisco_ios_xr" }

func (ipDistances *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances) GetYangName() string { return "ip-distances" }

func (ipDistances *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipDistances *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipDistances *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipDistances *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances) SetParent(parent types.Entity) { ipDistances.parent = parent }

func (ipDistances *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances) GetParent() types.Entity { return ipDistances.parent }

func (ipDistances *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances) GetParentYangName() string { return "distance" }

// Ospf_Processes_Process_DefaultVrf_Distance_IpDistances_IpDistance
// Administrative distance configuration for a
// particular IP address
type Ospf_Processes_Process_DefaultVrf_Distance_IpDistances_IpDistance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IP source address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // This attribute is a key. IP wild card bits -- inverted mask. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Wildcard interface{}

    // Administrative distance. The type is interface{} with range: 1..255. The
    // default value is 110.
    Distance interface{}

    // Access Control List name. The type is string.
    AccessListName interface{}
}

func (ipDistance *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances_IpDistance) GetFilter() yfilter.YFilter { return ipDistance.YFilter }

func (ipDistance *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances_IpDistance) SetFilter(yf yfilter.YFilter) { ipDistance.YFilter = yf }

func (ipDistance *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances_IpDistance) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "wildcard" { return "Wildcard" }
    if yname == "distance" { return "Distance" }
    if yname == "access-list-name" { return "AccessListName" }
    return ""
}

func (ipDistance *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances_IpDistance) GetSegmentPath() string {
    return "ip-distance" + "[address='" + fmt.Sprintf("%v", ipDistance.Address) + "']" + "[wildcard='" + fmt.Sprintf("%v", ipDistance.Wildcard) + "']"
}

func (ipDistance *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances_IpDistance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipDistance *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances_IpDistance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipDistance *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances_IpDistance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipDistance.Address
    leafs["wildcard"] = ipDistance.Wildcard
    leafs["distance"] = ipDistance.Distance
    leafs["access-list-name"] = ipDistance.AccessListName
    return leafs
}

func (ipDistance *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances_IpDistance) GetBundleName() string { return "cisco_ios_xr" }

func (ipDistance *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances_IpDistance) GetYangName() string { return "ip-distance" }

func (ipDistance *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances_IpDistance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipDistance *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances_IpDistance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipDistance *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances_IpDistance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipDistance *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances_IpDistance) SetParent(parent types.Entity) { ipDistance.parent = parent }

func (ipDistance *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances_IpDistance) GetParent() types.Entity { return ipDistance.parent }

func (ipDistance *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances_IpDistance) GetParentYangName() string { return "ip-distances" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses
// Area configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configuration for a particular area. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress.
    AreaAddress []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress

    // Configuration for a particular area. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId.
    AreaAreaId []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId
}

func (areaAddresses *Ospf_Processes_Process_DefaultVrf_AreaAddresses) GetFilter() yfilter.YFilter { return areaAddresses.YFilter }

func (areaAddresses *Ospf_Processes_Process_DefaultVrf_AreaAddresses) SetFilter(yf yfilter.YFilter) { areaAddresses.YFilter = yf }

func (areaAddresses *Ospf_Processes_Process_DefaultVrf_AreaAddresses) GetGoName(yname string) string {
    if yname == "area-address" { return "AreaAddress" }
    if yname == "area-area-id" { return "AreaAreaId" }
    return ""
}

func (areaAddresses *Ospf_Processes_Process_DefaultVrf_AreaAddresses) GetSegmentPath() string {
    return "area-addresses"
}

func (areaAddresses *Ospf_Processes_Process_DefaultVrf_AreaAddresses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "area-address" {
        for _, c := range areaAddresses.AreaAddress {
            if areaAddresses.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress{}
        areaAddresses.AreaAddress = append(areaAddresses.AreaAddress, child)
        return &areaAddresses.AreaAddress[len(areaAddresses.AreaAddress)-1]
    }
    if childYangName == "area-area-id" {
        for _, c := range areaAddresses.AreaAreaId {
            if areaAddresses.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId{}
        areaAddresses.AreaAreaId = append(areaAddresses.AreaAreaId, child)
        return &areaAddresses.AreaAreaId[len(areaAddresses.AreaAreaId)-1]
    }
    return nil
}

func (areaAddresses *Ospf_Processes_Process_DefaultVrf_AreaAddresses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range areaAddresses.AreaAddress {
        children[areaAddresses.AreaAddress[i].GetSegmentPath()] = &areaAddresses.AreaAddress[i]
    }
    for i := range areaAddresses.AreaAreaId {
        children[areaAddresses.AreaAreaId[i].GetSegmentPath()] = &areaAddresses.AreaAreaId[i]
    }
    return children
}

func (areaAddresses *Ospf_Processes_Process_DefaultVrf_AreaAddresses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (areaAddresses *Ospf_Processes_Process_DefaultVrf_AreaAddresses) GetBundleName() string { return "cisco_ios_xr" }

func (areaAddresses *Ospf_Processes_Process_DefaultVrf_AreaAddresses) GetYangName() string { return "area-addresses" }

func (areaAddresses *Ospf_Processes_Process_DefaultVrf_AreaAddresses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaAddresses *Ospf_Processes_Process_DefaultVrf_AreaAddresses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaAddresses *Ospf_Processes_Process_DefaultVrf_AreaAddresses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaAddresses *Ospf_Processes_Process_DefaultVrf_AreaAddresses) SetParent(parent types.Entity) { areaAddresses.parent = parent }

func (areaAddresses *Ospf_Processes_Process_DefaultVrf_AreaAddresses) GetParent() types.Entity { return areaAddresses.parent }

func (areaAddresses *Ospf_Processes_Process_DefaultVrf_AreaAddresses) GetParentYangName() string { return "default-vrf" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress
// Configuration for a particular area
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Area ID if in IP address format. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Configure a route policy for inbound type-3 lsa filtering. The type is
    // string.
    RoutePolicyIn interface{}

    // Set the summary default-cost of a NSSA/stub area. The type is interface{}
    // with range: 1..16777215. The default value is 1.
    DefaultCost interface{}

    // Configure a route policy for outbound type-3 lsa filtering. The type is
    // string.
    RoutePolicyOut interface{}

    // Specify the area as a stub area (send summary LSA stub area). The type is
    // bool.
    Stub interface{}

    // Configure an OSPF area to run MPLS Traffic Engineering. The type is
    // interface{}.
    MplsTrafficEng interface{}

    // Enable/Disable an OSPF area to advertise intra-area prefixes out of this
    // area as external. The type is bool.
    ExternalOut interface{}

    // Enable/Disable an OSPF area to advertise external prefixes into this area
    // as summary. The type is bool.
    SummaryIn interface{}

    // segment-routing configuration Applicable only in Default VRF. The type is
    // OspfSegmentRouting.
    SegmentRouting interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Virtual Link scope configurations.
    VirtualLinkScopes Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes

    // Sham Link scope configurations.
    ShamLinkScopes Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes

    // Area scope configuration.
    AreaScope Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope

    // Name scope configurations.
    NameScopes Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes

    // Multi Area Interface scope configurations.
    MultiAreaInterfaceScopes Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes

    // Summarize routes matching address/mask (border routers only).
    AreaRanges Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges

    // Specify area as a NSSA area.
    Nssa Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa
}

func (areaAddress *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress) GetFilter() yfilter.YFilter { return areaAddress.YFilter }

func (areaAddress *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress) SetFilter(yf yfilter.YFilter) { areaAddress.YFilter = yf }

func (areaAddress *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "route-policy-in" { return "RoutePolicyIn" }
    if yname == "default-cost" { return "DefaultCost" }
    if yname == "route-policy-out" { return "RoutePolicyOut" }
    if yname == "stub" { return "Stub" }
    if yname == "mpls-traffic-eng" { return "MplsTrafficEng" }
    if yname == "external-out" { return "ExternalOut" }
    if yname == "summary-in" { return "SummaryIn" }
    if yname == "segment-routing" { return "SegmentRouting" }
    if yname == "running" { return "Running" }
    if yname == "virtual-link-scopes" { return "VirtualLinkScopes" }
    if yname == "sham-link-scopes" { return "ShamLinkScopes" }
    if yname == "area-scope" { return "AreaScope" }
    if yname == "name-scopes" { return "NameScopes" }
    if yname == "multi-area-interface-scopes" { return "MultiAreaInterfaceScopes" }
    if yname == "area-ranges" { return "AreaRanges" }
    if yname == "nssa" { return "Nssa" }
    return ""
}

func (areaAddress *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress) GetSegmentPath() string {
    return "area-address" + "[address='" + fmt.Sprintf("%v", areaAddress.Address) + "']"
}

func (areaAddress *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "virtual-link-scopes" {
        return &areaAddress.VirtualLinkScopes
    }
    if childYangName == "sham-link-scopes" {
        return &areaAddress.ShamLinkScopes
    }
    if childYangName == "area-scope" {
        return &areaAddress.AreaScope
    }
    if childYangName == "name-scopes" {
        return &areaAddress.NameScopes
    }
    if childYangName == "multi-area-interface-scopes" {
        return &areaAddress.MultiAreaInterfaceScopes
    }
    if childYangName == "area-ranges" {
        return &areaAddress.AreaRanges
    }
    if childYangName == "nssa" {
        return &areaAddress.Nssa
    }
    return nil
}

func (areaAddress *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["virtual-link-scopes"] = &areaAddress.VirtualLinkScopes
    children["sham-link-scopes"] = &areaAddress.ShamLinkScopes
    children["area-scope"] = &areaAddress.AreaScope
    children["name-scopes"] = &areaAddress.NameScopes
    children["multi-area-interface-scopes"] = &areaAddress.MultiAreaInterfaceScopes
    children["area-ranges"] = &areaAddress.AreaRanges
    children["nssa"] = &areaAddress.Nssa
    return children
}

func (areaAddress *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = areaAddress.Address
    leafs["route-policy-in"] = areaAddress.RoutePolicyIn
    leafs["default-cost"] = areaAddress.DefaultCost
    leafs["route-policy-out"] = areaAddress.RoutePolicyOut
    leafs["stub"] = areaAddress.Stub
    leafs["mpls-traffic-eng"] = areaAddress.MplsTrafficEng
    leafs["external-out"] = areaAddress.ExternalOut
    leafs["summary-in"] = areaAddress.SummaryIn
    leafs["segment-routing"] = areaAddress.SegmentRouting
    leafs["running"] = areaAddress.Running
    return leafs
}

func (areaAddress *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress) GetBundleName() string { return "cisco_ios_xr" }

func (areaAddress *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress) GetYangName() string { return "area-address" }

func (areaAddress *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaAddress *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaAddress *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaAddress *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress) SetParent(parent types.Entity) { areaAddress.parent = parent }

func (areaAddress *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress) GetParent() types.Entity { return areaAddress.parent }

func (areaAddress *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress) GetParentYangName() string { return "area-addresses" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes
// Virtual Link scope configurations
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Virtual Link configuration. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope.
    VirtualLinkScope []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope
}

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes) GetFilter() yfilter.YFilter { return virtualLinkScopes.YFilter }

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes) SetFilter(yf yfilter.YFilter) { virtualLinkScopes.YFilter = yf }

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes) GetGoName(yname string) string {
    if yname == "virtual-link-scope" { return "VirtualLinkScope" }
    return ""
}

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes) GetSegmentPath() string {
    return "virtual-link-scopes"
}

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "virtual-link-scope" {
        for _, c := range virtualLinkScopes.VirtualLinkScope {
            if virtualLinkScopes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope{}
        virtualLinkScopes.VirtualLinkScope = append(virtualLinkScopes.VirtualLinkScope, child)
        return &virtualLinkScopes.VirtualLinkScope[len(virtualLinkScopes.VirtualLinkScope)-1]
    }
    return nil
}

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range virtualLinkScopes.VirtualLinkScope {
        children[virtualLinkScopes.VirtualLinkScope[i].GetSegmentPath()] = &virtualLinkScopes.VirtualLinkScope[i]
    }
    return children
}

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes) GetBundleName() string { return "cisco_ios_xr" }

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes) GetYangName() string { return "virtual-link-scopes" }

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes) SetParent(parent types.Entity) { virtualLinkScopes.parent = parent }

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes) GetParent() types.Entity { return virtualLinkScopes.parent }

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes) GetParentYangName() string { return "area-address" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope
// Virtual Link configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Router ID of virtual link neighbor. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Authentication.
    Authentication Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal
}

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) GetFilter() yfilter.YFilter { return virtualLinkScope.YFilter }

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) SetFilter(yf yfilter.YFilter) { virtualLinkScope.YFilter = yf }

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "running" { return "Running" }
    if yname == "authentication" { return "Authentication" }
    if yname == "dead-interval-minimal" { return "DeadIntervalMinimal" }
    return ""
}

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) GetSegmentPath() string {
    return "virtual-link-scope" + "[address='" + fmt.Sprintf("%v", virtualLinkScope.Address) + "']"
}

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "authentication" {
        return &virtualLinkScope.Authentication
    }
    if childYangName == "dead-interval-minimal" {
        return &virtualLinkScope.DeadIntervalMinimal
    }
    return nil
}

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["authentication"] = &virtualLinkScope.Authentication
    children["dead-interval-minimal"] = &virtualLinkScope.DeadIntervalMinimal
    return children
}

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = virtualLinkScope.Address
    leafs["hello-interval"] = virtualLinkScope.HelloInterval
    leafs["transmit-delay"] = virtualLinkScope.TransmitDelay
    leafs["retransmit-interval"] = virtualLinkScope.RetransmitInterval
    leafs["running"] = virtualLinkScope.Running
    return leafs
}

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) GetBundleName() string { return "cisco_ios_xr" }

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) GetYangName() string { return "virtual-link-scope" }

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) SetParent(parent types.Entity) { virtualLinkScope.parent = parent }

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) GetParent() types.Entity { return virtualLinkScope.parent }

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) GetParentYangName() string { return "virtual-link-scopes" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication
// Authentication
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // (!.+)|([^!].+).
    Key interface{}

    // Authentication type.
    Type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) GetGoName(yname string) string {
    if yname == "key" { return "Key" }
    if yname == "type" { return "Type" }
    if yname == "message-digest-keies" { return "MessageDigestKeies" }
    return ""
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "type" {
        return &authentication.Type
    }
    if childYangName == "message-digest-keies" {
        return &authentication.MessageDigestKeies
    }
    return nil
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["type"] = &authentication.Type
    children["message-digest-keies"] = &authentication.MessageDigestKeies
    return children
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key"] = authentication.Key
    return leafs
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) GetParentYangName() string { return "virtual-link-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetGoName(yname string) string {
    if yname == "authen-type" { return "AuthenType" }
    if yname == "keychain-authen-type" { return "KeychainAuthenType" }
    if yname == "keychain-name" { return "KeychainName" }
    return ""
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetSegmentPath() string {
    return "type"
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["authen-type"] = self.AuthenType
    leafs["keychain-authen-type"] = self.KeychainAuthenType
    leafs["keychain-name"] = self.KeychainName
    return leafs
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetYangName() string { return "type" }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetParent() types.Entity { return self.parent }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetFilter() yfilter.YFilter { return messageDigestKeies.YFilter }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) SetFilter(yf yfilter.YFilter) { messageDigestKeies.YFilter = yf }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetGoName(yname string) string {
    if yname == "message-digest-key" { return "MessageDigestKey" }
    return ""
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetSegmentPath() string {
    return "message-digest-keies"
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "message-digest-key" {
        for _, c := range messageDigestKeies.MessageDigestKey {
            if messageDigestKeies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey{}
        messageDigestKeies.MessageDigestKey = append(messageDigestKeies.MessageDigestKey, child)
        return &messageDigestKeies.MessageDigestKey[len(messageDigestKeies.MessageDigestKey)-1]
    }
    return nil
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range messageDigestKeies.MessageDigestKey {
        children[messageDigestKeies.MessageDigestKey[i].GetSegmentPath()] = &messageDigestKeies.MessageDigestKey[i]
    }
    return children
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetYangName() string { return "message-digest-keies" }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) SetParent(parent types.Entity) { messageDigestKeies.parent = parent }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetParent() types.Entity { return messageDigestKeies.parent }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: (!.+)|([^!].+). This attribute
    // is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetFilter() yfilter.YFilter { return messageDigestKey.YFilter }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) SetFilter(yf yfilter.YFilter) { messageDigestKey.YFilter = yf }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetGoName(yname string) string {
    if yname == "key-id" { return "KeyId" }
    if yname == "password" { return "Password" }
    return ""
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetSegmentPath() string {
    return "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key-id"] = messageDigestKey.KeyId
    leafs["password"] = messageDigestKey.Password
    return leafs
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetYangName() string { return "message-digest-key" }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) SetParent(parent types.Entity) { messageDigestKey.parent = parent }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParent() types.Entity { return messageDigestKey.parent }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParentYangName() string { return "message-digest-keies" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetFilter() yfilter.YFilter { return deadIntervalMinimal.YFilter }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) SetFilter(yf yfilter.YFilter) { deadIntervalMinimal.YFilter = yf }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "multiplier" { return "Multiplier" }
    return ""
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetSegmentPath() string {
    return "dead-interval-minimal"
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = deadIntervalMinimal.Interval
    leafs["multiplier"] = deadIntervalMinimal.Multiplier
    return leafs
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetBundleName() string { return "cisco_ios_xr" }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetYangName() string { return "dead-interval-minimal" }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) SetParent(parent types.Entity) { deadIntervalMinimal.parent = parent }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetParent() types.Entity { return deadIntervalMinimal.parent }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetParentYangName() string { return "virtual-link-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes
// Sham Link scope configurations
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sham Link configuration. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope.
    ShamLinkScope []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope
}

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes) GetFilter() yfilter.YFilter { return shamLinkScopes.YFilter }

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes) SetFilter(yf yfilter.YFilter) { shamLinkScopes.YFilter = yf }

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes) GetGoName(yname string) string {
    if yname == "sham-link-scope" { return "ShamLinkScope" }
    return ""
}

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes) GetSegmentPath() string {
    return "sham-link-scopes"
}

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sham-link-scope" {
        for _, c := range shamLinkScopes.ShamLinkScope {
            if shamLinkScopes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope{}
        shamLinkScopes.ShamLinkScope = append(shamLinkScopes.ShamLinkScope, child)
        return &shamLinkScopes.ShamLinkScope[len(shamLinkScopes.ShamLinkScope)-1]
    }
    return nil
}

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range shamLinkScopes.ShamLinkScope {
        children[shamLinkScopes.ShamLinkScope[i].GetSegmentPath()] = &shamLinkScopes.ShamLinkScope[i]
    }
    return children
}

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes) GetBundleName() string { return "cisco_ios_xr" }

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes) GetYangName() string { return "sham-link-scopes" }

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes) SetParent(parent types.Entity) { shamLinkScopes.parent = parent }

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes) GetParent() types.Entity { return shamLinkScopes.parent }

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes) GetParentYangName() string { return "area-address" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope
// Sham Link configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Address of the local sham-link endpoint. The type
    // is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // This attribute is a key. Address of the remote sham-link endpoint. The type
    // is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Address of the local sham-link endpoint. Enter an IP Address. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Source interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Authentication.
    Authentication Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal
}

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) GetFilter() yfilter.YFilter { return shamLinkScope.YFilter }

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) SetFilter(yf yfilter.YFilter) { shamLinkScope.YFilter = yf }

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "source" { return "Source" }
    if yname == "cost" { return "Cost" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "running" { return "Running" }
    if yname == "authentication" { return "Authentication" }
    if yname == "dead-interval-minimal" { return "DeadIntervalMinimal" }
    return ""
}

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) GetSegmentPath() string {
    return "sham-link-scope" + "[source-address='" + fmt.Sprintf("%v", shamLinkScope.SourceAddress) + "']" + "[destination-address='" + fmt.Sprintf("%v", shamLinkScope.DestinationAddress) + "']"
}

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "authentication" {
        return &shamLinkScope.Authentication
    }
    if childYangName == "dead-interval-minimal" {
        return &shamLinkScope.DeadIntervalMinimal
    }
    return nil
}

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["authentication"] = &shamLinkScope.Authentication
    children["dead-interval-minimal"] = &shamLinkScope.DeadIntervalMinimal
    return children
}

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = shamLinkScope.SourceAddress
    leafs["destination-address"] = shamLinkScope.DestinationAddress
    leafs["source"] = shamLinkScope.Source
    leafs["cost"] = shamLinkScope.Cost
    leafs["hello-interval"] = shamLinkScope.HelloInterval
    leafs["transmit-delay"] = shamLinkScope.TransmitDelay
    leafs["retransmit-interval"] = shamLinkScope.RetransmitInterval
    leafs["running"] = shamLinkScope.Running
    return leafs
}

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) GetBundleName() string { return "cisco_ios_xr" }

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) GetYangName() string { return "sham-link-scope" }

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) SetParent(parent types.Entity) { shamLinkScope.parent = parent }

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) GetParent() types.Entity { return shamLinkScope.parent }

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) GetParentYangName() string { return "sham-link-scopes" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication
// Authentication
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // (!.+)|([^!].+).
    Key interface{}

    // Authentication type.
    Type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) GetGoName(yname string) string {
    if yname == "key" { return "Key" }
    if yname == "type" { return "Type" }
    if yname == "message-digest-keies" { return "MessageDigestKeies" }
    return ""
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "type" {
        return &authentication.Type
    }
    if childYangName == "message-digest-keies" {
        return &authentication.MessageDigestKeies
    }
    return nil
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["type"] = &authentication.Type
    children["message-digest-keies"] = &authentication.MessageDigestKeies
    return children
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key"] = authentication.Key
    return leafs
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) GetParentYangName() string { return "sham-link-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetGoName(yname string) string {
    if yname == "authen-type" { return "AuthenType" }
    if yname == "keychain-authen-type" { return "KeychainAuthenType" }
    if yname == "keychain-name" { return "KeychainName" }
    return ""
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetSegmentPath() string {
    return "type"
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["authen-type"] = self.AuthenType
    leafs["keychain-authen-type"] = self.KeychainAuthenType
    leafs["keychain-name"] = self.KeychainName
    return leafs
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetYangName() string { return "type" }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetParent() types.Entity { return self.parent }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetFilter() yfilter.YFilter { return messageDigestKeies.YFilter }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) SetFilter(yf yfilter.YFilter) { messageDigestKeies.YFilter = yf }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetGoName(yname string) string {
    if yname == "message-digest-key" { return "MessageDigestKey" }
    return ""
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetSegmentPath() string {
    return "message-digest-keies"
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "message-digest-key" {
        for _, c := range messageDigestKeies.MessageDigestKey {
            if messageDigestKeies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey{}
        messageDigestKeies.MessageDigestKey = append(messageDigestKeies.MessageDigestKey, child)
        return &messageDigestKeies.MessageDigestKey[len(messageDigestKeies.MessageDigestKey)-1]
    }
    return nil
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range messageDigestKeies.MessageDigestKey {
        children[messageDigestKeies.MessageDigestKey[i].GetSegmentPath()] = &messageDigestKeies.MessageDigestKey[i]
    }
    return children
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetYangName() string { return "message-digest-keies" }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) SetParent(parent types.Entity) { messageDigestKeies.parent = parent }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetParent() types.Entity { return messageDigestKeies.parent }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: (!.+)|([^!].+). This attribute
    // is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetFilter() yfilter.YFilter { return messageDigestKey.YFilter }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) SetFilter(yf yfilter.YFilter) { messageDigestKey.YFilter = yf }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetGoName(yname string) string {
    if yname == "key-id" { return "KeyId" }
    if yname == "password" { return "Password" }
    return ""
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetSegmentPath() string {
    return "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key-id"] = messageDigestKey.KeyId
    leafs["password"] = messageDigestKey.Password
    return leafs
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetYangName() string { return "message-digest-key" }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) SetParent(parent types.Entity) { messageDigestKey.parent = parent }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParent() types.Entity { return messageDigestKey.parent }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParentYangName() string { return "message-digest-keies" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetFilter() yfilter.YFilter { return deadIntervalMinimal.YFilter }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) SetFilter(yf yfilter.YFilter) { deadIntervalMinimal.YFilter = yf }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "multiplier" { return "Multiplier" }
    return ""
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetSegmentPath() string {
    return "dead-interval-minimal"
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = deadIntervalMinimal.Interval
    leafs["multiplier"] = deadIntervalMinimal.Multiplier
    return leafs
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetBundleName() string { return "cisco_ios_xr" }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetYangName() string { return "dead-interval-minimal" }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) SetParent(parent types.Entity) { deadIntervalMinimal.parent = parent }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetParent() types.Entity { return deadIntervalMinimal.parent }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetParentYangName() string { return "sham-link-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope
// Area scope configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Enable/Disable prefix suppression for primary addresses. The type is bool.
    // The default value is false.
    PrefixSuppressionPrimary interface{}

    // Enable/Disable ignoring of MTU in DBD packets. The type is bool. The
    // default value is false.
    MtuIgnore interface{}

    // Enable/Disable MPLS LDP sync for igp-shortcuts. The type is bool.
    LdpSyncIgpShortcuts interface{}

    // Enable MPLS LDP Auto Config. The type is interface{}.
    LdpAutoConfig interface{}

    // Type of attached network. The type is OspfNetwork.
    NetworkType interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Enable/Disable advertising loopback as a stub network. The type is bool.
    // The default value is false.
    LoopbackStubNetwork interface{}

    // Enable/Disable prefix suppression for secondary addresses. The type is
    // bool. The default value is false.
    PrefixSuppressionSecondary interface{}

    // Enable/Disable OSPF demand circuit. The type is bool. The default value is
    // false.
    DemandCircuit interface{}

    // When enabled, prevent sending HELLO packets over link. The type is bool.
    // The default value is false.
    Passive interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Customize size of OSPF packets upto MTU. The type is interface{} with
    // range: 576..10000.
    PacketSize interface{}

    // Enable/Disable MPLS LDP sync. The type is bool.
    LdpSync interface{}

    // Filter OSPF LSA during synchronization and flooding. The type is bool. The
    // default value is false.
    DatabaseFilter interface{}

    // Enable/Disable registration for early interface down notifications. The
    // type is bool. The default value is false.
    LinkDownFastDetect interface{}

    // segment-routing forwarding configuration Applicableonly in Default VRF. The
    // type is OspfSegmentRoutingForwarding.
    SegmentRoutingForwarding interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Router priority for DR and BDR election. The type is interface{} with
    // range: 0..255. The default value is 1.
    Priority interface{}

    // Enable/Disable OSPF flood reduction. The type is bool. The default value is
    // false.
    FloodReduction interface{}

    // Filter networks intalled to RIB (disable as ACL name means filtering is
    // disabled).
    DistributeList Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DistributeList

    // BFD configuration.
    Bfd Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Bfd

    // Authentication.
    Authentication Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication

    // Container class for security related configuration parameters.
    Security Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal

    // Fast-reroute configuration.
    FastReroute Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute

    // Interface fallback cost.
    CostFallback Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_CostFallback
}

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope) GetFilter() yfilter.YFilter { return areaScope.YFilter }

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope) SetFilter(yf yfilter.YFilter) { areaScope.YFilter = yf }

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope) GetGoName(yname string) string {
    if yname == "cost" { return "Cost" }
    if yname == "prefix-suppression-primary" { return "PrefixSuppressionPrimary" }
    if yname == "mtu-ignore" { return "MtuIgnore" }
    if yname == "ldp-sync-igp-shortcuts" { return "LdpSyncIgpShortcuts" }
    if yname == "ldp-auto-config" { return "LdpAutoConfig" }
    if yname == "network-type" { return "NetworkType" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "loopback-stub-network" { return "LoopbackStubNetwork" }
    if yname == "prefix-suppression-secondary" { return "PrefixSuppressionSecondary" }
    if yname == "demand-circuit" { return "DemandCircuit" }
    if yname == "passive" { return "Passive" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "packet-size" { return "PacketSize" }
    if yname == "ldp-sync" { return "LdpSync" }
    if yname == "database-filter" { return "DatabaseFilter" }
    if yname == "link-down-fast-detect" { return "LinkDownFastDetect" }
    if yname == "segment-routing-forwarding" { return "SegmentRoutingForwarding" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "priority" { return "Priority" }
    if yname == "flood-reduction" { return "FloodReduction" }
    if yname == "distribute-list" { return "DistributeList" }
    if yname == "bfd" { return "Bfd" }
    if yname == "authentication" { return "Authentication" }
    if yname == "security" { return "Security" }
    if yname == "dead-interval-minimal" { return "DeadIntervalMinimal" }
    if yname == "fast-reroute" { return "FastReroute" }
    if yname == "cost-fallback" { return "CostFallback" }
    return ""
}

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope) GetSegmentPath() string {
    return "area-scope"
}

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "distribute-list" {
        return &areaScope.DistributeList
    }
    if childYangName == "bfd" {
        return &areaScope.Bfd
    }
    if childYangName == "authentication" {
        return &areaScope.Authentication
    }
    if childYangName == "security" {
        return &areaScope.Security
    }
    if childYangName == "dead-interval-minimal" {
        return &areaScope.DeadIntervalMinimal
    }
    if childYangName == "fast-reroute" {
        return &areaScope.FastReroute
    }
    if childYangName == "cost-fallback" {
        return &areaScope.CostFallback
    }
    return nil
}

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["distribute-list"] = &areaScope.DistributeList
    children["bfd"] = &areaScope.Bfd
    children["authentication"] = &areaScope.Authentication
    children["security"] = &areaScope.Security
    children["dead-interval-minimal"] = &areaScope.DeadIntervalMinimal
    children["fast-reroute"] = &areaScope.FastReroute
    children["cost-fallback"] = &areaScope.CostFallback
    return children
}

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cost"] = areaScope.Cost
    leafs["prefix-suppression-primary"] = areaScope.PrefixSuppressionPrimary
    leafs["mtu-ignore"] = areaScope.MtuIgnore
    leafs["ldp-sync-igp-shortcuts"] = areaScope.LdpSyncIgpShortcuts
    leafs["ldp-auto-config"] = areaScope.LdpAutoConfig
    leafs["network-type"] = areaScope.NetworkType
    leafs["hello-interval"] = areaScope.HelloInterval
    leafs["loopback-stub-network"] = areaScope.LoopbackStubNetwork
    leafs["prefix-suppression-secondary"] = areaScope.PrefixSuppressionSecondary
    leafs["demand-circuit"] = areaScope.DemandCircuit
    leafs["passive"] = areaScope.Passive
    leafs["transmit-delay"] = areaScope.TransmitDelay
    leafs["packet-size"] = areaScope.PacketSize
    leafs["ldp-sync"] = areaScope.LdpSync
    leafs["database-filter"] = areaScope.DatabaseFilter
    leafs["link-down-fast-detect"] = areaScope.LinkDownFastDetect
    leafs["segment-routing-forwarding"] = areaScope.SegmentRoutingForwarding
    leafs["retransmit-interval"] = areaScope.RetransmitInterval
    leafs["priority"] = areaScope.Priority
    leafs["flood-reduction"] = areaScope.FloodReduction
    return leafs
}

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope) GetBundleName() string { return "cisco_ios_xr" }

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope) GetYangName() string { return "area-scope" }

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope) SetParent(parent types.Entity) { areaScope.parent = parent }

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope) GetParent() types.Entity { return areaScope.parent }

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope) GetParentYangName() string { return "area-address" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DistributeList
// Filter networks intalled to RIB (disable as ACL
// name means filtering is disabled)
// This type is a presence type.
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DistributeList struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Access Control List name. The type is string.
    AccessListName interface{}

    // Route Policy name. The type is string.
    RoutePolicyName interface{}
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) GetFilter() yfilter.YFilter { return distributeList.YFilter }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) SetFilter(yf yfilter.YFilter) { distributeList.YFilter = yf }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) GetGoName(yname string) string {
    if yname == "access-list-name" { return "AccessListName" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) GetSegmentPath() string {
    return "distribute-list"
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["access-list-name"] = distributeList.AccessListName
    leafs["route-policy-name"] = distributeList.RoutePolicyName
    return leafs
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) GetBundleName() string { return "cisco_ios_xr" }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) GetYangName() string { return "distribute-list" }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) SetParent(parent types.Entity) { distributeList.parent = parent }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) GetParent() types.Entity { return distributeList.parent }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) GetParentYangName() string { return "area-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Bfd
// BFD configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Bfd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hello interval for BFD sessions created by OSPF. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    Interval interface{}

    // Detection multiplier for BFD sessions created by OSPF. The type is
    // interface{} with range: 2..50.
    DetectionMultiplier interface{}

    // use of Bidirectional Forwarding Detection. The type is BfdEnableMode.
    FastDetectMode interface{}
}

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Bfd) GetFilter() yfilter.YFilter { return bfd.YFilter }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Bfd) SetFilter(yf yfilter.YFilter) { bfd.YFilter = yf }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Bfd) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "fast-detect-mode" { return "FastDetectMode" }
    return ""
}

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Bfd) GetSegmentPath() string {
    return "bfd"
}

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Bfd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Bfd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Bfd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = bfd.Interval
    leafs["detection-multiplier"] = bfd.DetectionMultiplier
    leafs["fast-detect-mode"] = bfd.FastDetectMode
    return leafs
}

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Bfd) GetBundleName() string { return "cisco_ios_xr" }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Bfd) GetYangName() string { return "bfd" }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Bfd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Bfd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Bfd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Bfd) SetParent(parent types.Entity) { bfd.parent = parent }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Bfd) GetParent() types.Entity { return bfd.parent }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Bfd) GetParentYangName() string { return "area-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication
// Authentication
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // (!.+)|([^!].+).
    Key interface{}

    // Authentication type.
    Type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication) GetGoName(yname string) string {
    if yname == "key" { return "Key" }
    if yname == "type" { return "Type" }
    if yname == "message-digest-keies" { return "MessageDigestKeies" }
    return ""
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "type" {
        return &authentication.Type
    }
    if childYangName == "message-digest-keies" {
        return &authentication.MessageDigestKeies
    }
    return nil
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["type"] = &authentication.Type
    children["message-digest-keies"] = &authentication.MessageDigestKeies
    return children
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key"] = authentication.Key
    return leafs
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication) GetParentYangName() string { return "area-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) GetGoName(yname string) string {
    if yname == "authen-type" { return "AuthenType" }
    if yname == "keychain-authen-type" { return "KeychainAuthenType" }
    if yname == "keychain-name" { return "KeychainName" }
    return ""
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) GetSegmentPath() string {
    return "type"
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["authen-type"] = self.AuthenType
    leafs["keychain-authen-type"] = self.KeychainAuthenType
    leafs["keychain-name"] = self.KeychainName
    return leafs
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) GetYangName() string { return "type" }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) GetParent() types.Entity { return self.parent }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) GetFilter() yfilter.YFilter { return messageDigestKeies.YFilter }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) SetFilter(yf yfilter.YFilter) { messageDigestKeies.YFilter = yf }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) GetGoName(yname string) string {
    if yname == "message-digest-key" { return "MessageDigestKey" }
    return ""
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) GetSegmentPath() string {
    return "message-digest-keies"
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "message-digest-key" {
        for _, c := range messageDigestKeies.MessageDigestKey {
            if messageDigestKeies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey{}
        messageDigestKeies.MessageDigestKey = append(messageDigestKeies.MessageDigestKey, child)
        return &messageDigestKeies.MessageDigestKey[len(messageDigestKeies.MessageDigestKey)-1]
    }
    return nil
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range messageDigestKeies.MessageDigestKey {
        children[messageDigestKeies.MessageDigestKey[i].GetSegmentPath()] = &messageDigestKeies.MessageDigestKey[i]
    }
    return children
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) GetYangName() string { return "message-digest-keies" }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) SetParent(parent types.Entity) { messageDigestKeies.parent = parent }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) GetParent() types.Entity { return messageDigestKeies.parent }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: (!.+)|([^!].+). This attribute
    // is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetFilter() yfilter.YFilter { return messageDigestKey.YFilter }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) SetFilter(yf yfilter.YFilter) { messageDigestKey.YFilter = yf }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetGoName(yname string) string {
    if yname == "key-id" { return "KeyId" }
    if yname == "password" { return "Password" }
    return ""
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetSegmentPath() string {
    return "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key-id"] = messageDigestKey.KeyId
    leafs["password"] = messageDigestKey.Password
    return leafs
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetYangName() string { return "message-digest-key" }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) SetParent(parent types.Entity) { messageDigestKey.parent = parent }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParent() types.Entity { return messageDigestKey.parent }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParentYangName() string { return "message-digest-keies" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security
// Container class for security related
// configuration parameters
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enabling turns on TTL security.
    Ttl Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl
}

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security) GetFilter() yfilter.YFilter { return security.YFilter }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security) SetFilter(yf yfilter.YFilter) { security.YFilter = yf }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security) GetGoName(yname string) string {
    if yname == "ttl" { return "Ttl" }
    return ""
}

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security) GetSegmentPath() string {
    return "security"
}

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ttl" {
        return &security.Ttl
    }
    return nil
}

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ttl"] = &security.Ttl
    return children
}

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security) GetBundleName() string { return "cisco_ios_xr" }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security) GetYangName() string { return "security" }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security) SetParent(parent types.Entity) { security.parent = parent }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security) GetParent() types.Entity { return security.parent }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security) GetParentYangName() string { return "area-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl
// Enabling turns on TTL security
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable TTL security. The type is bool.
    Enable interface{}

    // Hop count. The type is interface{} with range: 1..254.
    HopCount interface{}
}

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) GetFilter() yfilter.YFilter { return ttl.YFilter }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) SetFilter(yf yfilter.YFilter) { ttl.YFilter = yf }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "hop-count" { return "HopCount" }
    return ""
}

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) GetSegmentPath() string {
    return "ttl"
}

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = ttl.Enable
    leafs["hop-count"] = ttl.HopCount
    return leafs
}

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) GetBundleName() string { return "cisco_ios_xr" }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) GetYangName() string { return "ttl" }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) SetParent(parent types.Entity) { ttl.parent = parent }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) GetParent() types.Entity { return ttl.parent }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) GetParentYangName() string { return "security" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) GetFilter() yfilter.YFilter { return deadIntervalMinimal.YFilter }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) SetFilter(yf yfilter.YFilter) { deadIntervalMinimal.YFilter = yf }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "multiplier" { return "Multiplier" }
    return ""
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) GetSegmentPath() string {
    return "dead-interval-minimal"
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = deadIntervalMinimal.Interval
    leafs["multiplier"] = deadIntervalMinimal.Multiplier
    return leafs
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) GetBundleName() string { return "cisco_ios_xr" }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) GetYangName() string { return "dead-interval-minimal" }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) SetParent(parent types.Entity) { deadIntervalMinimal.parent = parent }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) GetParent() types.Entity { return deadIntervalMinimal.parent }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) GetParentYangName() string { return "area-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute
// Fast-reroute configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // OspfFastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink

    // Fast-reroute per-prefix global configuration.
    PerPrefix Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetGoName(yname string) string {
    if yname == "fast-reroute-enable" { return "FastRerouteEnable" }
    if yname == "per-link" { return "PerLink" }
    if yname == "per-prefix" { return "PerPrefix" }
    return ""
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "per-link" {
        return &fastReroute.PerLink
    }
    if childYangName == "per-prefix" {
        return &fastReroute.PerPrefix
    }
    return nil
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["per-link"] = &fastReroute.PerLink
    children["per-prefix"] = &fastReroute.PerPrefix
    return children
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-enable"] = fastReroute.FastRerouteEnable
    return leafs
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetParentYangName() string { return "area-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetFilter() yfilter.YFilter { return perLink.YFilter }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) SetFilter(yf yfilter.YFilter) { perLink.YFilter = yf }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetSegmentPath() string {
    return "per-link"
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perLink.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perLink.ExcludeInterfaces
    }
    return nil
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perLink.CandidateInterfaces
    children["exclude-interfaces"] = &perLink.ExcludeInterfaces
    return children
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perLink.FastRerouteUseCandidateOnly
    return leafs
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetBundleName() string { return "cisco_ios_xr" }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetYangName() string { return "per-link" }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) SetParent(parent types.Entity) { perLink.parent = parent }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetParent() types.Entity { return perLink.parent }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetParentYangName() string { return "per-link" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetParentYangName() string { return "per-link" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix
// Fast-reroute per-prefix global configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Topology Independet LFA configuration. The type is bool.
    TopologyIndependentLfa interface{}

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Remote LFA configuration.
    RemoteLfa Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa

    // Fast-reroute tiebreakers configurations.
    Tiebreakers Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetFilter() yfilter.YFilter { return perPrefix.YFilter }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) SetFilter(yf yfilter.YFilter) { perPrefix.YFilter = yf }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetGoName(yname string) string {
    if yname == "topology-independent-lfa" { return "TopologyIndependentLfa" }
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "remote-lfa" { return "RemoteLfa" }
    if yname == "tiebreakers" { return "Tiebreakers" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetSegmentPath() string {
    return "per-prefix"
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-lfa" {
        return &perPrefix.RemoteLfa
    }
    if childYangName == "tiebreakers" {
        return &perPrefix.Tiebreakers
    }
    if childYangName == "candidate-interfaces" {
        return &perPrefix.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perPrefix.ExcludeInterfaces
    }
    return nil
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["remote-lfa"] = &perPrefix.RemoteLfa
    children["tiebreakers"] = &perPrefix.Tiebreakers
    children["candidate-interfaces"] = &perPrefix.CandidateInterfaces
    children["exclude-interfaces"] = &perPrefix.ExcludeInterfaces
    return children
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["topology-independent-lfa"] = perPrefix.TopologyIndependentLfa
    leafs["fast-reroute-use-candidate-only"] = perPrefix.FastRerouteUseCandidateOnly
    return leafs
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetYangName() string { return "per-prefix" }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) SetParent(parent types.Entity) { perPrefix.parent = parent }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetParent() types.Entity { return perPrefix.parent }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa
// Remote LFA configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable remote LFA computation. The type is OspfFrrRlfaTunnel.
    Tunnel interface{}

    // Maximum path cost to remote LFA. The type is interface{} with range:
    // 1..4294967295.
    MaximumCost interface{}
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetFilter() yfilter.YFilter { return remoteLfa.YFilter }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) SetFilter(yf yfilter.YFilter) { remoteLfa.YFilter = yf }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetGoName(yname string) string {
    if yname == "tunnel" { return "Tunnel" }
    if yname == "maximum-cost" { return "MaximumCost" }
    return ""
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetSegmentPath() string {
    return "remote-lfa"
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel"] = remoteLfa.Tunnel
    leafs["maximum-cost"] = remoteLfa.MaximumCost
    return leafs
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetBundleName() string { return "cisco_ios_xr" }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetYangName() string { return "remote-lfa" }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) SetParent(parent types.Entity) { remoteLfa.parent = parent }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetParent() types.Entity { return remoteLfa.parent }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers
// Fast-reroute tiebreakers configurations
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fast-reroute tiebreakers configuration. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker.
    Tiebreaker []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetFilter() yfilter.YFilter { return tiebreakers.YFilter }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) SetFilter(yf yfilter.YFilter) { tiebreakers.YFilter = yf }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetGoName(yname string) string {
    if yname == "tiebreaker" { return "Tiebreaker" }
    return ""
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetSegmentPath() string {
    return "tiebreakers"
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tiebreaker" {
        for _, c := range tiebreakers.Tiebreaker {
            if tiebreakers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker{}
        tiebreakers.Tiebreaker = append(tiebreakers.Tiebreaker, child)
        return &tiebreakers.Tiebreaker[len(tiebreakers.Tiebreaker)-1]
    }
    return nil
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range tiebreakers.Tiebreaker {
        children[tiebreakers.Tiebreaker[i].GetSegmentPath()] = &tiebreakers.Tiebreaker[i]
    }
    return children
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetYangName() string { return "tiebreakers" }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) SetParent(parent types.Entity) { tiebreakers.parent = parent }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetParent() types.Entity { return tiebreakers.parent }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
// Fast-reroute tiebreakers configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Tiebreaker type. The type is
    // OspfFastRerouteTiebreakersIntf.
    TiebreakerType interface{}

    // Index value for a tiebreaker, 0 to disable. The type is interface{} with
    // range: 0..255. This attribute is mandatory.
    TiebreakerIndex interface{}
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetFilter() yfilter.YFilter { return tiebreaker.YFilter }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetFilter(yf yfilter.YFilter) { tiebreaker.YFilter = yf }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetGoName(yname string) string {
    if yname == "tiebreaker-type" { return "TiebreakerType" }
    if yname == "tiebreaker-index" { return "TiebreakerIndex" }
    return ""
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetSegmentPath() string {
    return "tiebreaker" + "[tiebreaker-type='" + fmt.Sprintf("%v", tiebreaker.TiebreakerType) + "']"
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tiebreaker-type"] = tiebreaker.TiebreakerType
    leafs["tiebreaker-index"] = tiebreaker.TiebreakerIndex
    return leafs
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetYangName() string { return "tiebreaker" }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetParent(parent types.Entity) { tiebreaker.parent = parent }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParent() types.Entity { return tiebreaker.parent }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParentYangName() string { return "tiebreakers" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_CostFallback
// Interface fallback cost
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_CostFallback struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fallback cost of link. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Bandwidth threshold. The type is interface{} with range: 1..4294967.
    Threshold interface{}
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) GetFilter() yfilter.YFilter { return costFallback.YFilter }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) SetFilter(yf yfilter.YFilter) { costFallback.YFilter = yf }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) GetGoName(yname string) string {
    if yname == "cost" { return "Cost" }
    if yname == "threshold" { return "Threshold" }
    return ""
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) GetSegmentPath() string {
    return "cost-fallback"
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cost"] = costFallback.Cost
    leafs["threshold"] = costFallback.Threshold
    return leafs
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) GetBundleName() string { return "cisco_ios_xr" }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) GetYangName() string { return "cost-fallback" }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) SetParent(parent types.Entity) { costFallback.parent = parent }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) GetParent() types.Entity { return costFallback.parent }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) GetParentYangName() string { return "area-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes
// Name scope configurations
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name scope configuration. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope.
    NameScope []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope
}

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes) GetFilter() yfilter.YFilter { return nameScopes.YFilter }

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes) SetFilter(yf yfilter.YFilter) { nameScopes.YFilter = yf }

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes) GetGoName(yname string) string {
    if yname == "name-scope" { return "NameScope" }
    return ""
}

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes) GetSegmentPath() string {
    return "name-scopes"
}

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "name-scope" {
        for _, c := range nameScopes.NameScope {
            if nameScopes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope{}
        nameScopes.NameScope = append(nameScopes.NameScope, child)
        return &nameScopes.NameScope[len(nameScopes.NameScope)-1]
    }
    return nil
}

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nameScopes.NameScope {
        children[nameScopes.NameScope[i].GetSegmentPath()] = &nameScopes.NameScope[i]
    }
    return children
}

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes) GetBundleName() string { return "cisco_ios_xr" }

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes) GetYangName() string { return "name-scopes" }

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes) SetParent(parent types.Entity) { nameScopes.parent = parent }

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes) GetParent() types.Entity { return nameScopes.parent }

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes) GetParentYangName() string { return "area-address" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope
// Name scope configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of Interface to configure. The type is string
    // with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Enable/Disable prefix suppression for primary addresses. The type is bool.
    // The default value is false.
    PrefixSuppressionPrimary interface{}

    // Enable/Disable ignoring of MTU in DBD packets. The type is bool. The
    // default value is false.
    MtuIgnore interface{}

    // Enable/Disable MPLS LDP sync for igp-shortcuts. The type is bool.
    LdpSyncIgpShortcuts interface{}

    // Enable MPLS LDP Auto Config. The type is interface{}.
    LdpAutoConfig interface{}

    // Type of attached network. The type is OspfNetwork.
    NetworkType interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Enable/Disable advertising loopback as a stub network. The type is bool.
    // The default value is false.
    LoopbackStubNetwork interface{}

    // Enable/Disable prefix suppression for secondary addresses. The type is
    // bool. The default value is false.
    PrefixSuppressionSecondary interface{}

    // Enable/Disable OSPF demand circuit. The type is bool. The default value is
    // false.
    DemandCircuit interface{}

    // When enabled, prevent sending HELLO packets over link. The type is bool.
    // The default value is false.
    Passive interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Customize size of OSPF packets upto MTU. The type is interface{} with
    // range: 576..10000.
    PacketSize interface{}

    // Enable/Disable MPLS LDP sync. The type is bool.
    LdpSync interface{}

    // Filter OSPF LSA during synchronization and flooding. The type is bool. The
    // default value is false.
    DatabaseFilter interface{}

    // Enable/Disable registration for early interface down notifications. The
    // type is bool. The default value is false.
    LinkDownFastDetect interface{}

    // segment-routing forwarding configuration Applicableonly in Default VRF. The
    // type is OspfSegmentRoutingForwarding.
    SegmentRoutingForwarding interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Router priority for DR and BDR election. The type is interface{} with
    // range: 0..255. The default value is 1.
    Priority interface{}

    // Enable/Disable OSPF flood reduction. The type is bool. The default value is
    // false.
    FloodReduction interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Prefix SID.
    PrefixSid Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid

    // Strict Prefix SID.
    PrefixSidStrict Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict

    // Filter networks intalled to RIB (disable as ACL name means filtering is
    // disabled).
    DistributeList Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList

    // BFD configuration.
    Bfd Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd

    // Authentication.
    Authentication Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication

    // Container class for security related configuration parameters.
    Security Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security

    // Neighbor router configuration information.
    Neighbors Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal

    // Fast-reroute configuration.
    FastReroute Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute

    // Interface fallback cost.
    CostFallback Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback
}

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope) GetFilter() yfilter.YFilter { return nameScope.YFilter }

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope) SetFilter(yf yfilter.YFilter) { nameScope.YFilter = yf }

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "cost" { return "Cost" }
    if yname == "prefix-suppression-primary" { return "PrefixSuppressionPrimary" }
    if yname == "mtu-ignore" { return "MtuIgnore" }
    if yname == "ldp-sync-igp-shortcuts" { return "LdpSyncIgpShortcuts" }
    if yname == "ldp-auto-config" { return "LdpAutoConfig" }
    if yname == "network-type" { return "NetworkType" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "loopback-stub-network" { return "LoopbackStubNetwork" }
    if yname == "prefix-suppression-secondary" { return "PrefixSuppressionSecondary" }
    if yname == "demand-circuit" { return "DemandCircuit" }
    if yname == "passive" { return "Passive" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "packet-size" { return "PacketSize" }
    if yname == "ldp-sync" { return "LdpSync" }
    if yname == "database-filter" { return "DatabaseFilter" }
    if yname == "link-down-fast-detect" { return "LinkDownFastDetect" }
    if yname == "segment-routing-forwarding" { return "SegmentRoutingForwarding" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "priority" { return "Priority" }
    if yname == "flood-reduction" { return "FloodReduction" }
    if yname == "running" { return "Running" }
    if yname == "prefix-sid" { return "PrefixSid" }
    if yname == "prefix-sid-strict" { return "PrefixSidStrict" }
    if yname == "distribute-list" { return "DistributeList" }
    if yname == "bfd" { return "Bfd" }
    if yname == "authentication" { return "Authentication" }
    if yname == "security" { return "Security" }
    if yname == "neighbors" { return "Neighbors" }
    if yname == "dead-interval-minimal" { return "DeadIntervalMinimal" }
    if yname == "fast-reroute" { return "FastReroute" }
    if yname == "cost-fallback" { return "CostFallback" }
    return ""
}

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope) GetSegmentPath() string {
    return "name-scope" + "[interface-name='" + fmt.Sprintf("%v", nameScope.InterfaceName) + "']"
}

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "prefix-sid" {
        return &nameScope.PrefixSid
    }
    if childYangName == "prefix-sid-strict" {
        return &nameScope.PrefixSidStrict
    }
    if childYangName == "distribute-list" {
        return &nameScope.DistributeList
    }
    if childYangName == "bfd" {
        return &nameScope.Bfd
    }
    if childYangName == "authentication" {
        return &nameScope.Authentication
    }
    if childYangName == "security" {
        return &nameScope.Security
    }
    if childYangName == "neighbors" {
        return &nameScope.Neighbors
    }
    if childYangName == "dead-interval-minimal" {
        return &nameScope.DeadIntervalMinimal
    }
    if childYangName == "fast-reroute" {
        return &nameScope.FastReroute
    }
    if childYangName == "cost-fallback" {
        return &nameScope.CostFallback
    }
    return nil
}

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["prefix-sid"] = &nameScope.PrefixSid
    children["prefix-sid-strict"] = &nameScope.PrefixSidStrict
    children["distribute-list"] = &nameScope.DistributeList
    children["bfd"] = &nameScope.Bfd
    children["authentication"] = &nameScope.Authentication
    children["security"] = &nameScope.Security
    children["neighbors"] = &nameScope.Neighbors
    children["dead-interval-minimal"] = &nameScope.DeadIntervalMinimal
    children["fast-reroute"] = &nameScope.FastReroute
    children["cost-fallback"] = &nameScope.CostFallback
    return children
}

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = nameScope.InterfaceName
    leafs["cost"] = nameScope.Cost
    leafs["prefix-suppression-primary"] = nameScope.PrefixSuppressionPrimary
    leafs["mtu-ignore"] = nameScope.MtuIgnore
    leafs["ldp-sync-igp-shortcuts"] = nameScope.LdpSyncIgpShortcuts
    leafs["ldp-auto-config"] = nameScope.LdpAutoConfig
    leafs["network-type"] = nameScope.NetworkType
    leafs["hello-interval"] = nameScope.HelloInterval
    leafs["loopback-stub-network"] = nameScope.LoopbackStubNetwork
    leafs["prefix-suppression-secondary"] = nameScope.PrefixSuppressionSecondary
    leafs["demand-circuit"] = nameScope.DemandCircuit
    leafs["passive"] = nameScope.Passive
    leafs["transmit-delay"] = nameScope.TransmitDelay
    leafs["packet-size"] = nameScope.PacketSize
    leafs["ldp-sync"] = nameScope.LdpSync
    leafs["database-filter"] = nameScope.DatabaseFilter
    leafs["link-down-fast-detect"] = nameScope.LinkDownFastDetect
    leafs["segment-routing-forwarding"] = nameScope.SegmentRoutingForwarding
    leafs["retransmit-interval"] = nameScope.RetransmitInterval
    leafs["priority"] = nameScope.Priority
    leafs["flood-reduction"] = nameScope.FloodReduction
    leafs["running"] = nameScope.Running
    return leafs
}

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope) GetBundleName() string { return "cisco_ios_xr" }

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope) GetYangName() string { return "name-scope" }

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope) SetParent(parent types.Entity) { nameScope.parent = parent }

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope) GetParent() types.Entity { return nameScope.parent }

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope) GetParentYangName() string { return "name-scopes" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid
// Prefix SID
// This type is a presence type.
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SID value. The type is interface{} with range: 0..1048575. This attribute
    // is mandatory.
    SidValue interface{}

    // Force Penultimate Hop To Send Explicit-Null Label. The type is bool. The
    // default value is false.
    ExplicitNull interface{}

    // OSPF SID Type. The type is OspfSid. This attribute is mandatory.
    Type interface{}

    // Not a node SID. The type is bool. The default value is false.
    NFlagClear interface{}
}

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) GetFilter() yfilter.YFilter { return prefixSid.YFilter }

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) SetFilter(yf yfilter.YFilter) { prefixSid.YFilter = yf }

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) GetGoName(yname string) string {
    if yname == "sid-value" { return "SidValue" }
    if yname == "explicit-null" { return "ExplicitNull" }
    if yname == "type" { return "Type" }
    if yname == "n-flag-clear" { return "NFlagClear" }
    return ""
}

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) GetSegmentPath() string {
    return "prefix-sid"
}

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sid-value"] = prefixSid.SidValue
    leafs["explicit-null"] = prefixSid.ExplicitNull
    leafs["type"] = prefixSid.Type
    leafs["n-flag-clear"] = prefixSid.NFlagClear
    return leafs
}

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) GetBundleName() string { return "cisco_ios_xr" }

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) GetYangName() string { return "prefix-sid" }

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) SetParent(parent types.Entity) { prefixSid.parent = parent }

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) GetParent() types.Entity { return prefixSid.parent }

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict
// Strict Prefix SID
// This type is a presence type.
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SID value. The type is interface{} with range: 0..1048575. This attribute
    // is mandatory.
    SidValue interface{}

    // Force Penultimate Hop To Send Explicit-Null Label. The type is bool. The
    // default value is false.
    ExplicitNull interface{}

    // OSPF SID Type. The type is OspfSid. This attribute is mandatory.
    Type interface{}

    // Not a node SID. The type is bool. The default value is false.
    NFlagClear interface{}
}

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) GetFilter() yfilter.YFilter { return prefixSidStrict.YFilter }

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) SetFilter(yf yfilter.YFilter) { prefixSidStrict.YFilter = yf }

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) GetGoName(yname string) string {
    if yname == "sid-value" { return "SidValue" }
    if yname == "explicit-null" { return "ExplicitNull" }
    if yname == "type" { return "Type" }
    if yname == "n-flag-clear" { return "NFlagClear" }
    return ""
}

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) GetSegmentPath() string {
    return "prefix-sid-strict"
}

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sid-value"] = prefixSidStrict.SidValue
    leafs["explicit-null"] = prefixSidStrict.ExplicitNull
    leafs["type"] = prefixSidStrict.Type
    leafs["n-flag-clear"] = prefixSidStrict.NFlagClear
    return leafs
}

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) GetBundleName() string { return "cisco_ios_xr" }

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) GetYangName() string { return "prefix-sid-strict" }

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) SetParent(parent types.Entity) { prefixSidStrict.parent = parent }

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) GetParent() types.Entity { return prefixSidStrict.parent }

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList
// Filter networks intalled to RIB (disable as ACL
// name means filtering is disabled)
// This type is a presence type.
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Access Control List name. The type is string.
    AccessListName interface{}

    // Route Policy name. The type is string.
    RoutePolicyName interface{}
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) GetFilter() yfilter.YFilter { return distributeList.YFilter }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) SetFilter(yf yfilter.YFilter) { distributeList.YFilter = yf }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) GetGoName(yname string) string {
    if yname == "access-list-name" { return "AccessListName" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) GetSegmentPath() string {
    return "distribute-list"
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["access-list-name"] = distributeList.AccessListName
    leafs["route-policy-name"] = distributeList.RoutePolicyName
    return leafs
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) GetBundleName() string { return "cisco_ios_xr" }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) GetYangName() string { return "distribute-list" }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) SetParent(parent types.Entity) { distributeList.parent = parent }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) GetParent() types.Entity { return distributeList.parent }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd
// BFD configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hello interval for BFD sessions created by OSPF. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    Interval interface{}

    // Detection multiplier for BFD sessions created by OSPF. The type is
    // interface{} with range: 2..50.
    DetectionMultiplier interface{}

    // use of Bidirectional Forwarding Detection. The type is BfdEnableMode.
    FastDetectMode interface{}
}

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) GetFilter() yfilter.YFilter { return bfd.YFilter }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) SetFilter(yf yfilter.YFilter) { bfd.YFilter = yf }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "fast-detect-mode" { return "FastDetectMode" }
    return ""
}

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) GetSegmentPath() string {
    return "bfd"
}

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = bfd.Interval
    leafs["detection-multiplier"] = bfd.DetectionMultiplier
    leafs["fast-detect-mode"] = bfd.FastDetectMode
    return leafs
}

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) GetBundleName() string { return "cisco_ios_xr" }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) GetYangName() string { return "bfd" }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) SetParent(parent types.Entity) { bfd.parent = parent }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) GetParent() types.Entity { return bfd.parent }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication
// Authentication
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // (!.+)|([^!].+).
    Key interface{}

    // Authentication type.
    Type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) GetGoName(yname string) string {
    if yname == "key" { return "Key" }
    if yname == "type" { return "Type" }
    if yname == "message-digest-keies" { return "MessageDigestKeies" }
    return ""
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "type" {
        return &authentication.Type
    }
    if childYangName == "message-digest-keies" {
        return &authentication.MessageDigestKeies
    }
    return nil
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["type"] = &authentication.Type
    children["message-digest-keies"] = &authentication.MessageDigestKeies
    return children
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key"] = authentication.Key
    return leafs
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) GetGoName(yname string) string {
    if yname == "authen-type" { return "AuthenType" }
    if yname == "keychain-authen-type" { return "KeychainAuthenType" }
    if yname == "keychain-name" { return "KeychainName" }
    return ""
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) GetSegmentPath() string {
    return "type"
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["authen-type"] = self.AuthenType
    leafs["keychain-authen-type"] = self.KeychainAuthenType
    leafs["keychain-name"] = self.KeychainName
    return leafs
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) GetYangName() string { return "type" }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) GetParent() types.Entity { return self.parent }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) GetFilter() yfilter.YFilter { return messageDigestKeies.YFilter }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) SetFilter(yf yfilter.YFilter) { messageDigestKeies.YFilter = yf }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) GetGoName(yname string) string {
    if yname == "message-digest-key" { return "MessageDigestKey" }
    return ""
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) GetSegmentPath() string {
    return "message-digest-keies"
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "message-digest-key" {
        for _, c := range messageDigestKeies.MessageDigestKey {
            if messageDigestKeies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey{}
        messageDigestKeies.MessageDigestKey = append(messageDigestKeies.MessageDigestKey, child)
        return &messageDigestKeies.MessageDigestKey[len(messageDigestKeies.MessageDigestKey)-1]
    }
    return nil
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range messageDigestKeies.MessageDigestKey {
        children[messageDigestKeies.MessageDigestKey[i].GetSegmentPath()] = &messageDigestKeies.MessageDigestKey[i]
    }
    return children
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) GetYangName() string { return "message-digest-keies" }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) SetParent(parent types.Entity) { messageDigestKeies.parent = parent }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) GetParent() types.Entity { return messageDigestKeies.parent }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: (!.+)|([^!].+). This attribute
    // is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetFilter() yfilter.YFilter { return messageDigestKey.YFilter }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) SetFilter(yf yfilter.YFilter) { messageDigestKey.YFilter = yf }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetGoName(yname string) string {
    if yname == "key-id" { return "KeyId" }
    if yname == "password" { return "Password" }
    return ""
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetSegmentPath() string {
    return "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key-id"] = messageDigestKey.KeyId
    leafs["password"] = messageDigestKey.Password
    return leafs
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetYangName() string { return "message-digest-key" }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) SetParent(parent types.Entity) { messageDigestKey.parent = parent }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParent() types.Entity { return messageDigestKey.parent }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParentYangName() string { return "message-digest-keies" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security
// Container class for security related
// configuration parameters
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enabling turns on TTL security.
    Ttl Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl
}

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) GetFilter() yfilter.YFilter { return security.YFilter }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) SetFilter(yf yfilter.YFilter) { security.YFilter = yf }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) GetGoName(yname string) string {
    if yname == "ttl" { return "Ttl" }
    return ""
}

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) GetSegmentPath() string {
    return "security"
}

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ttl" {
        return &security.Ttl
    }
    return nil
}

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ttl"] = &security.Ttl
    return children
}

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) GetBundleName() string { return "cisco_ios_xr" }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) GetYangName() string { return "security" }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) SetParent(parent types.Entity) { security.parent = parent }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) GetParent() types.Entity { return security.parent }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl
// Enabling turns on TTL security
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable TTL security. The type is bool.
    Enable interface{}

    // Hop count. The type is interface{} with range: 1..254.
    HopCount interface{}
}

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) GetFilter() yfilter.YFilter { return ttl.YFilter }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) SetFilter(yf yfilter.YFilter) { ttl.YFilter = yf }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "hop-count" { return "HopCount" }
    return ""
}

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) GetSegmentPath() string {
    return "ttl"
}

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = ttl.Enable
    leafs["hop-count"] = ttl.HopCount
    return leafs
}

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) GetBundleName() string { return "cisco_ios_xr" }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) GetYangName() string { return "ttl" }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) SetParent(parent types.Entity) { ttl.parent = parent }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) GetParent() types.Entity { return ttl.parent }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) GetParentYangName() string { return "security" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors
// Neighbor router configuration information
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router configuration information for a particular neighbor. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor.
    Neighbor []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor
}

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) GetFilter() yfilter.YFilter { return neighbors.YFilter }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) SetFilter(yf yfilter.YFilter) { neighbors.YFilter = yf }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) GetGoName(yname string) string {
    if yname == "neighbor" { return "Neighbor" }
    return ""
}

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) GetSegmentPath() string {
    return "neighbors"
}

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor" {
        for _, c := range neighbors.Neighbor {
            if neighbors.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor{}
        neighbors.Neighbor = append(neighbors.Neighbor, child)
        return &neighbors.Neighbor[len(neighbors.Neighbor)-1]
    }
    return nil
}

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range neighbors.Neighbor {
        children[neighbors.Neighbor[i].GetSegmentPath()] = &neighbors.Neighbor[i]
    }
    return children
}

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) GetBundleName() string { return "cisco_ios_xr" }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) GetYangName() string { return "neighbors" }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) SetParent(parent types.Entity) { neighbors.parent = parent }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) GetParent() types.Entity { return neighbors.parent }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor
// Router configuration information for a
// particular neighbor
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Neighbor IP address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // OSPF priority of non-broadcast neighbor. The type is interface{} with
    // range: 0..255. The default value is 0.
    Priority interface{}

    // OSPF dead router poll-interval in seconds. The type is interface{} with
    // range: 0..65535. Units are second. The default value is 40.
    PollInterval interface{}

    // OSPF cost for point-to-multipoint neighbor. The type is interface{} with
    // range: 1..65535. The default value is 1.
    Cost interface{}

    // Database filter: Filter OSPF LSA during synchronization and flooding for
    // point-to-multipoint. The type is bool. The default value is false.
    DatabaseFilter interface{}
}

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) GetFilter() yfilter.YFilter { return neighbor.YFilter }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) SetFilter(yf yfilter.YFilter) { neighbor.YFilter = yf }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) GetGoName(yname string) string {
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "priority" { return "Priority" }
    if yname == "poll-interval" { return "PollInterval" }
    if yname == "cost" { return "Cost" }
    if yname == "database-filter" { return "DatabaseFilter" }
    return ""
}

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) GetSegmentPath() string {
    return "neighbor" + "[neighbor-address='" + fmt.Sprintf("%v", neighbor.NeighborAddress) + "']"
}

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-address"] = neighbor.NeighborAddress
    leafs["priority"] = neighbor.Priority
    leafs["poll-interval"] = neighbor.PollInterval
    leafs["cost"] = neighbor.Cost
    leafs["database-filter"] = neighbor.DatabaseFilter
    return leafs
}

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) GetBundleName() string { return "cisco_ios_xr" }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) GetYangName() string { return "neighbor" }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) SetParent(parent types.Entity) { neighbor.parent = parent }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) GetParent() types.Entity { return neighbor.parent }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) GetParentYangName() string { return "neighbors" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) GetFilter() yfilter.YFilter { return deadIntervalMinimal.YFilter }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) SetFilter(yf yfilter.YFilter) { deadIntervalMinimal.YFilter = yf }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "multiplier" { return "Multiplier" }
    return ""
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) GetSegmentPath() string {
    return "dead-interval-minimal"
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = deadIntervalMinimal.Interval
    leafs["multiplier"] = deadIntervalMinimal.Multiplier
    return leafs
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) GetBundleName() string { return "cisco_ios_xr" }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) GetYangName() string { return "dead-interval-minimal" }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) SetParent(parent types.Entity) { deadIntervalMinimal.parent = parent }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) GetParent() types.Entity { return deadIntervalMinimal.parent }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute
// Fast-reroute configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // OspfFastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink

    // Fast-reroute per-prefix global configuration.
    PerPrefix Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) GetGoName(yname string) string {
    if yname == "fast-reroute-enable" { return "FastRerouteEnable" }
    if yname == "per-link" { return "PerLink" }
    if yname == "per-prefix" { return "PerPrefix" }
    return ""
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "per-link" {
        return &fastReroute.PerLink
    }
    if childYangName == "per-prefix" {
        return &fastReroute.PerPrefix
    }
    return nil
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["per-link"] = &fastReroute.PerLink
    children["per-prefix"] = &fastReroute.PerPrefix
    return children
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-enable"] = fastReroute.FastRerouteEnable
    return leafs
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) GetFilter() yfilter.YFilter { return perLink.YFilter }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) SetFilter(yf yfilter.YFilter) { perLink.YFilter = yf }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) GetSegmentPath() string {
    return "per-link"
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perLink.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perLink.ExcludeInterfaces
    }
    return nil
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perLink.CandidateInterfaces
    children["exclude-interfaces"] = &perLink.ExcludeInterfaces
    return children
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perLink.FastRerouteUseCandidateOnly
    return leafs
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) GetBundleName() string { return "cisco_ios_xr" }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) GetYangName() string { return "per-link" }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) SetParent(parent types.Entity) { perLink.parent = parent }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) GetParent() types.Entity { return perLink.parent }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetParentYangName() string { return "per-link" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetParentYangName() string { return "per-link" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix
// Fast-reroute per-prefix global configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Topology Independet LFA configuration. The type is bool.
    TopologyIndependentLfa interface{}

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Remote LFA configuration.
    RemoteLfa Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa

    // Fast-reroute tiebreakers configurations.
    Tiebreakers Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) GetFilter() yfilter.YFilter { return perPrefix.YFilter }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) SetFilter(yf yfilter.YFilter) { perPrefix.YFilter = yf }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) GetGoName(yname string) string {
    if yname == "topology-independent-lfa" { return "TopologyIndependentLfa" }
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "remote-lfa" { return "RemoteLfa" }
    if yname == "tiebreakers" { return "Tiebreakers" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) GetSegmentPath() string {
    return "per-prefix"
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-lfa" {
        return &perPrefix.RemoteLfa
    }
    if childYangName == "tiebreakers" {
        return &perPrefix.Tiebreakers
    }
    if childYangName == "candidate-interfaces" {
        return &perPrefix.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perPrefix.ExcludeInterfaces
    }
    return nil
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["remote-lfa"] = &perPrefix.RemoteLfa
    children["tiebreakers"] = &perPrefix.Tiebreakers
    children["candidate-interfaces"] = &perPrefix.CandidateInterfaces
    children["exclude-interfaces"] = &perPrefix.ExcludeInterfaces
    return children
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["topology-independent-lfa"] = perPrefix.TopologyIndependentLfa
    leafs["fast-reroute-use-candidate-only"] = perPrefix.FastRerouteUseCandidateOnly
    return leafs
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) GetYangName() string { return "per-prefix" }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) SetParent(parent types.Entity) { perPrefix.parent = parent }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) GetParent() types.Entity { return perPrefix.parent }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa
// Remote LFA configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable remote LFA computation. The type is OspfFrrRlfaTunnel.
    Tunnel interface{}

    // Maximum path cost to remote LFA. The type is interface{} with range:
    // 1..4294967295.
    MaximumCost interface{}
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetFilter() yfilter.YFilter { return remoteLfa.YFilter }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) SetFilter(yf yfilter.YFilter) { remoteLfa.YFilter = yf }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetGoName(yname string) string {
    if yname == "tunnel" { return "Tunnel" }
    if yname == "maximum-cost" { return "MaximumCost" }
    return ""
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetSegmentPath() string {
    return "remote-lfa"
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel"] = remoteLfa.Tunnel
    leafs["maximum-cost"] = remoteLfa.MaximumCost
    return leafs
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetBundleName() string { return "cisco_ios_xr" }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetYangName() string { return "remote-lfa" }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) SetParent(parent types.Entity) { remoteLfa.parent = parent }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetParent() types.Entity { return remoteLfa.parent }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers
// Fast-reroute tiebreakers configurations
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fast-reroute tiebreakers configuration. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker.
    Tiebreaker []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetFilter() yfilter.YFilter { return tiebreakers.YFilter }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) SetFilter(yf yfilter.YFilter) { tiebreakers.YFilter = yf }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetGoName(yname string) string {
    if yname == "tiebreaker" { return "Tiebreaker" }
    return ""
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetSegmentPath() string {
    return "tiebreakers"
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tiebreaker" {
        for _, c := range tiebreakers.Tiebreaker {
            if tiebreakers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker{}
        tiebreakers.Tiebreaker = append(tiebreakers.Tiebreaker, child)
        return &tiebreakers.Tiebreaker[len(tiebreakers.Tiebreaker)-1]
    }
    return nil
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range tiebreakers.Tiebreaker {
        children[tiebreakers.Tiebreaker[i].GetSegmentPath()] = &tiebreakers.Tiebreaker[i]
    }
    return children
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetYangName() string { return "tiebreakers" }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) SetParent(parent types.Entity) { tiebreakers.parent = parent }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetParent() types.Entity { return tiebreakers.parent }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
// Fast-reroute tiebreakers configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Tiebreaker type. The type is
    // OspfFastRerouteTiebreakersIntf.
    TiebreakerType interface{}

    // Index value for a tiebreaker, 0 to disable. The type is interface{} with
    // range: 0..255. This attribute is mandatory.
    TiebreakerIndex interface{}
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetFilter() yfilter.YFilter { return tiebreaker.YFilter }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetFilter(yf yfilter.YFilter) { tiebreaker.YFilter = yf }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetGoName(yname string) string {
    if yname == "tiebreaker-type" { return "TiebreakerType" }
    if yname == "tiebreaker-index" { return "TiebreakerIndex" }
    return ""
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetSegmentPath() string {
    return "tiebreaker" + "[tiebreaker-type='" + fmt.Sprintf("%v", tiebreaker.TiebreakerType) + "']"
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tiebreaker-type"] = tiebreaker.TiebreakerType
    leafs["tiebreaker-index"] = tiebreaker.TiebreakerIndex
    return leafs
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetYangName() string { return "tiebreaker" }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetParent(parent types.Entity) { tiebreaker.parent = parent }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParent() types.Entity { return tiebreaker.parent }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParentYangName() string { return "tiebreakers" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback
// Interface fallback cost
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fallback cost of link. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Bandwidth threshold. The type is interface{} with range: 1..4294967.
    Threshold interface{}
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) GetFilter() yfilter.YFilter { return costFallback.YFilter }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) SetFilter(yf yfilter.YFilter) { costFallback.YFilter = yf }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) GetGoName(yname string) string {
    if yname == "cost" { return "Cost" }
    if yname == "threshold" { return "Threshold" }
    return ""
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) GetSegmentPath() string {
    return "cost-fallback"
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cost"] = costFallback.Cost
    leafs["threshold"] = costFallback.Threshold
    return leafs
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) GetBundleName() string { return "cisco_ios_xr" }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) GetYangName() string { return "cost-fallback" }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) SetParent(parent types.Entity) { costFallback.parent = parent }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) GetParent() types.Entity { return costFallback.parent }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes
// Multi Area Interface scope configurations
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Multi Area Interface configuration. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope.
    MultiAreaInterfaceScope []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope
}

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) GetFilter() yfilter.YFilter { return multiAreaInterfaceScopes.YFilter }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) SetFilter(yf yfilter.YFilter) { multiAreaInterfaceScopes.YFilter = yf }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) GetGoName(yname string) string {
    if yname == "multi-area-interface-scope" { return "MultiAreaInterfaceScope" }
    return ""
}

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) GetSegmentPath() string {
    return "multi-area-interface-scopes"
}

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "multi-area-interface-scope" {
        for _, c := range multiAreaInterfaceScopes.MultiAreaInterfaceScope {
            if multiAreaInterfaceScopes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope{}
        multiAreaInterfaceScopes.MultiAreaInterfaceScope = append(multiAreaInterfaceScopes.MultiAreaInterfaceScope, child)
        return &multiAreaInterfaceScopes.MultiAreaInterfaceScope[len(multiAreaInterfaceScopes.MultiAreaInterfaceScope)-1]
    }
    return nil
}

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range multiAreaInterfaceScopes.MultiAreaInterfaceScope {
        children[multiAreaInterfaceScopes.MultiAreaInterfaceScope[i].GetSegmentPath()] = &multiAreaInterfaceScopes.MultiAreaInterfaceScope[i]
    }
    return children
}

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) GetBundleName() string { return "cisco_ios_xr" }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) GetYangName() string { return "multi-area-interface-scopes" }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) SetParent(parent types.Entity) { multiAreaInterfaceScopes.parent = parent }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) GetParent() types.Entity { return multiAreaInterfaceScopes.parent }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) GetParentYangName() string { return "area-address" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope
// Multi Area Interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of Multi Area Interface to configure. The
    // type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Enable/Disable ignoring of MTU in DBD packets. The type is bool. The
    // default value is false.
    MtuIgnore interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // When enabled, prevent sending HELLO packets over link. The type is bool.
    // The default value is false.
    Passive interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Customize size of OSPF packets upto MTU. The type is interface{} with
    // range: 576..10000.
    PacketSize interface{}

    // Filter OSPF LSA during synchronization and flooding. The type is bool. The
    // default value is false.
    DatabaseFilter interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Filter networks intalled to RIB (disable as ACL name means filtering is
    // disabled).
    DistributeList Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList

    // Authentication.
    Authentication Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication

    // Neighbor router configuration information.
    Neighbors Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal

    // Fast-reroute configuration.
    FastReroute Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute

    // Interface fallback cost.
    CostFallback Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback
}

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetFilter() yfilter.YFilter { return multiAreaInterfaceScope.YFilter }

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) SetFilter(yf yfilter.YFilter) { multiAreaInterfaceScope.YFilter = yf }

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "cost" { return "Cost" }
    if yname == "mtu-ignore" { return "MtuIgnore" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "passive" { return "Passive" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "packet-size" { return "PacketSize" }
    if yname == "database-filter" { return "DatabaseFilter" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "running" { return "Running" }
    if yname == "distribute-list" { return "DistributeList" }
    if yname == "authentication" { return "Authentication" }
    if yname == "neighbors" { return "Neighbors" }
    if yname == "dead-interval-minimal" { return "DeadIntervalMinimal" }
    if yname == "fast-reroute" { return "FastReroute" }
    if yname == "cost-fallback" { return "CostFallback" }
    return ""
}

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetSegmentPath() string {
    return "multi-area-interface-scope" + "[interface-name='" + fmt.Sprintf("%v", multiAreaInterfaceScope.InterfaceName) + "']"
}

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "distribute-list" {
        return &multiAreaInterfaceScope.DistributeList
    }
    if childYangName == "authentication" {
        return &multiAreaInterfaceScope.Authentication
    }
    if childYangName == "neighbors" {
        return &multiAreaInterfaceScope.Neighbors
    }
    if childYangName == "dead-interval-minimal" {
        return &multiAreaInterfaceScope.DeadIntervalMinimal
    }
    if childYangName == "fast-reroute" {
        return &multiAreaInterfaceScope.FastReroute
    }
    if childYangName == "cost-fallback" {
        return &multiAreaInterfaceScope.CostFallback
    }
    return nil
}

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["distribute-list"] = &multiAreaInterfaceScope.DistributeList
    children["authentication"] = &multiAreaInterfaceScope.Authentication
    children["neighbors"] = &multiAreaInterfaceScope.Neighbors
    children["dead-interval-minimal"] = &multiAreaInterfaceScope.DeadIntervalMinimal
    children["fast-reroute"] = &multiAreaInterfaceScope.FastReroute
    children["cost-fallback"] = &multiAreaInterfaceScope.CostFallback
    return children
}

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = multiAreaInterfaceScope.InterfaceName
    leafs["cost"] = multiAreaInterfaceScope.Cost
    leafs["mtu-ignore"] = multiAreaInterfaceScope.MtuIgnore
    leafs["hello-interval"] = multiAreaInterfaceScope.HelloInterval
    leafs["passive"] = multiAreaInterfaceScope.Passive
    leafs["transmit-delay"] = multiAreaInterfaceScope.TransmitDelay
    leafs["packet-size"] = multiAreaInterfaceScope.PacketSize
    leafs["database-filter"] = multiAreaInterfaceScope.DatabaseFilter
    leafs["retransmit-interval"] = multiAreaInterfaceScope.RetransmitInterval
    leafs["running"] = multiAreaInterfaceScope.Running
    return leafs
}

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetBundleName() string { return "cisco_ios_xr" }

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetYangName() string { return "multi-area-interface-scope" }

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) SetParent(parent types.Entity) { multiAreaInterfaceScope.parent = parent }

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetParent() types.Entity { return multiAreaInterfaceScope.parent }

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetParentYangName() string { return "multi-area-interface-scopes" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList
// Filter networks intalled to RIB (disable as ACL
// name means filtering is disabled)
// This type is a presence type.
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Access Control List name. The type is string.
    AccessListName interface{}

    // Route Policy name. The type is string.
    RoutePolicyName interface{}
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetFilter() yfilter.YFilter { return distributeList.YFilter }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) SetFilter(yf yfilter.YFilter) { distributeList.YFilter = yf }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetGoName(yname string) string {
    if yname == "access-list-name" { return "AccessListName" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetSegmentPath() string {
    return "distribute-list"
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["access-list-name"] = distributeList.AccessListName
    leafs["route-policy-name"] = distributeList.RoutePolicyName
    return leafs
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetBundleName() string { return "cisco_ios_xr" }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetYangName() string { return "distribute-list" }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) SetParent(parent types.Entity) { distributeList.parent = parent }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetParent() types.Entity { return distributeList.parent }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetParentYangName() string { return "multi-area-interface-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication
// Authentication
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // (!.+)|([^!].+).
    Key interface{}

    // Authentication type.
    Type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetGoName(yname string) string {
    if yname == "key" { return "Key" }
    if yname == "type" { return "Type" }
    if yname == "message-digest-keies" { return "MessageDigestKeies" }
    return ""
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "type" {
        return &authentication.Type
    }
    if childYangName == "message-digest-keies" {
        return &authentication.MessageDigestKeies
    }
    return nil
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["type"] = &authentication.Type
    children["message-digest-keies"] = &authentication.MessageDigestKeies
    return children
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key"] = authentication.Key
    return leafs
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetParentYangName() string { return "multi-area-interface-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetGoName(yname string) string {
    if yname == "authen-type" { return "AuthenType" }
    if yname == "keychain-authen-type" { return "KeychainAuthenType" }
    if yname == "keychain-name" { return "KeychainName" }
    return ""
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetSegmentPath() string {
    return "type"
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["authen-type"] = self.AuthenType
    leafs["keychain-authen-type"] = self.KeychainAuthenType
    leafs["keychain-name"] = self.KeychainName
    return leafs
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetYangName() string { return "type" }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetParent() types.Entity { return self.parent }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetFilter() yfilter.YFilter { return messageDigestKeies.YFilter }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) SetFilter(yf yfilter.YFilter) { messageDigestKeies.YFilter = yf }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetGoName(yname string) string {
    if yname == "message-digest-key" { return "MessageDigestKey" }
    return ""
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetSegmentPath() string {
    return "message-digest-keies"
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "message-digest-key" {
        for _, c := range messageDigestKeies.MessageDigestKey {
            if messageDigestKeies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey{}
        messageDigestKeies.MessageDigestKey = append(messageDigestKeies.MessageDigestKey, child)
        return &messageDigestKeies.MessageDigestKey[len(messageDigestKeies.MessageDigestKey)-1]
    }
    return nil
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range messageDigestKeies.MessageDigestKey {
        children[messageDigestKeies.MessageDigestKey[i].GetSegmentPath()] = &messageDigestKeies.MessageDigestKey[i]
    }
    return children
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetYangName() string { return "message-digest-keies" }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) SetParent(parent types.Entity) { messageDigestKeies.parent = parent }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetParent() types.Entity { return messageDigestKeies.parent }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: (!.+)|([^!].+). This attribute
    // is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetFilter() yfilter.YFilter { return messageDigestKey.YFilter }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) SetFilter(yf yfilter.YFilter) { messageDigestKey.YFilter = yf }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetGoName(yname string) string {
    if yname == "key-id" { return "KeyId" }
    if yname == "password" { return "Password" }
    return ""
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetSegmentPath() string {
    return "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key-id"] = messageDigestKey.KeyId
    leafs["password"] = messageDigestKey.Password
    return leafs
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetYangName() string { return "message-digest-key" }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) SetParent(parent types.Entity) { messageDigestKey.parent = parent }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParent() types.Entity { return messageDigestKey.parent }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParentYangName() string { return "message-digest-keies" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors
// Neighbor router configuration information
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router configuration information for a particular neighbor. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor.
    Neighbor []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor
}

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetFilter() yfilter.YFilter { return neighbors.YFilter }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) SetFilter(yf yfilter.YFilter) { neighbors.YFilter = yf }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetGoName(yname string) string {
    if yname == "neighbor" { return "Neighbor" }
    return ""
}

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetSegmentPath() string {
    return "neighbors"
}

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor" {
        for _, c := range neighbors.Neighbor {
            if neighbors.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor{}
        neighbors.Neighbor = append(neighbors.Neighbor, child)
        return &neighbors.Neighbor[len(neighbors.Neighbor)-1]
    }
    return nil
}

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range neighbors.Neighbor {
        children[neighbors.Neighbor[i].GetSegmentPath()] = &neighbors.Neighbor[i]
    }
    return children
}

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetBundleName() string { return "cisco_ios_xr" }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetYangName() string { return "neighbors" }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) SetParent(parent types.Entity) { neighbors.parent = parent }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetParent() types.Entity { return neighbors.parent }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetParentYangName() string { return "multi-area-interface-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor
// Router configuration information for a
// particular neighbor
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Neighbor IP address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // OSPF priority of non-broadcast neighbor. The type is interface{} with
    // range: 0..255. The default value is 0.
    Priority interface{}

    // OSPF dead router poll-interval in seconds. The type is interface{} with
    // range: 0..65535. Units are second. The default value is 40.
    PollInterval interface{}

    // OSPF cost for point-to-multipoint neighbor. The type is interface{} with
    // range: 1..65535. The default value is 1.
    Cost interface{}

    // Database filter: Filter OSPF LSA during synchronization and flooding for
    // point-to-multipoint. The type is bool. The default value is false.
    DatabaseFilter interface{}
}

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetFilter() yfilter.YFilter { return neighbor.YFilter }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) SetFilter(yf yfilter.YFilter) { neighbor.YFilter = yf }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetGoName(yname string) string {
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "priority" { return "Priority" }
    if yname == "poll-interval" { return "PollInterval" }
    if yname == "cost" { return "Cost" }
    if yname == "database-filter" { return "DatabaseFilter" }
    return ""
}

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetSegmentPath() string {
    return "neighbor" + "[neighbor-address='" + fmt.Sprintf("%v", neighbor.NeighborAddress) + "']"
}

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-address"] = neighbor.NeighborAddress
    leafs["priority"] = neighbor.Priority
    leafs["poll-interval"] = neighbor.PollInterval
    leafs["cost"] = neighbor.Cost
    leafs["database-filter"] = neighbor.DatabaseFilter
    return leafs
}

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetBundleName() string { return "cisco_ios_xr" }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetYangName() string { return "neighbor" }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) SetParent(parent types.Entity) { neighbor.parent = parent }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetParent() types.Entity { return neighbor.parent }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetParentYangName() string { return "neighbors" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetFilter() yfilter.YFilter { return deadIntervalMinimal.YFilter }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) SetFilter(yf yfilter.YFilter) { deadIntervalMinimal.YFilter = yf }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "multiplier" { return "Multiplier" }
    return ""
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetSegmentPath() string {
    return "dead-interval-minimal"
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = deadIntervalMinimal.Interval
    leafs["multiplier"] = deadIntervalMinimal.Multiplier
    return leafs
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetBundleName() string { return "cisco_ios_xr" }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetYangName() string { return "dead-interval-minimal" }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) SetParent(parent types.Entity) { deadIntervalMinimal.parent = parent }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetParent() types.Entity { return deadIntervalMinimal.parent }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetParentYangName() string { return "multi-area-interface-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute
// Fast-reroute configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // OspfFastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink

    // Fast-reroute per-prefix global configuration.
    PerPrefix Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetGoName(yname string) string {
    if yname == "fast-reroute-enable" { return "FastRerouteEnable" }
    if yname == "per-link" { return "PerLink" }
    if yname == "per-prefix" { return "PerPrefix" }
    return ""
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "per-link" {
        return &fastReroute.PerLink
    }
    if childYangName == "per-prefix" {
        return &fastReroute.PerPrefix
    }
    return nil
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["per-link"] = &fastReroute.PerLink
    children["per-prefix"] = &fastReroute.PerPrefix
    return children
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-enable"] = fastReroute.FastRerouteEnable
    return leafs
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetParentYangName() string { return "multi-area-interface-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetFilter() yfilter.YFilter { return perLink.YFilter }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) SetFilter(yf yfilter.YFilter) { perLink.YFilter = yf }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetSegmentPath() string {
    return "per-link"
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perLink.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perLink.ExcludeInterfaces
    }
    return nil
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perLink.CandidateInterfaces
    children["exclude-interfaces"] = &perLink.ExcludeInterfaces
    return children
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perLink.FastRerouteUseCandidateOnly
    return leafs
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetBundleName() string { return "cisco_ios_xr" }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetYangName() string { return "per-link" }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) SetParent(parent types.Entity) { perLink.parent = parent }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetParent() types.Entity { return perLink.parent }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetParentYangName() string { return "per-link" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetParentYangName() string { return "per-link" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix
// Fast-reroute per-prefix global configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Topology Independet LFA configuration. The type is bool.
    TopologyIndependentLfa interface{}

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Remote LFA configuration.
    RemoteLfa Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa

    // Fast-reroute tiebreakers configurations.
    Tiebreakers Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetFilter() yfilter.YFilter { return perPrefix.YFilter }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) SetFilter(yf yfilter.YFilter) { perPrefix.YFilter = yf }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetGoName(yname string) string {
    if yname == "topology-independent-lfa" { return "TopologyIndependentLfa" }
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "remote-lfa" { return "RemoteLfa" }
    if yname == "tiebreakers" { return "Tiebreakers" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetSegmentPath() string {
    return "per-prefix"
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-lfa" {
        return &perPrefix.RemoteLfa
    }
    if childYangName == "tiebreakers" {
        return &perPrefix.Tiebreakers
    }
    if childYangName == "candidate-interfaces" {
        return &perPrefix.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perPrefix.ExcludeInterfaces
    }
    return nil
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["remote-lfa"] = &perPrefix.RemoteLfa
    children["tiebreakers"] = &perPrefix.Tiebreakers
    children["candidate-interfaces"] = &perPrefix.CandidateInterfaces
    children["exclude-interfaces"] = &perPrefix.ExcludeInterfaces
    return children
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["topology-independent-lfa"] = perPrefix.TopologyIndependentLfa
    leafs["fast-reroute-use-candidate-only"] = perPrefix.FastRerouteUseCandidateOnly
    return leafs
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetYangName() string { return "per-prefix" }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) SetParent(parent types.Entity) { perPrefix.parent = parent }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetParent() types.Entity { return perPrefix.parent }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa
// Remote LFA configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable remote LFA computation. The type is OspfFrrRlfaTunnel.
    Tunnel interface{}

    // Maximum path cost to remote LFA. The type is interface{} with range:
    // 1..4294967295.
    MaximumCost interface{}
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetFilter() yfilter.YFilter { return remoteLfa.YFilter }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) SetFilter(yf yfilter.YFilter) { remoteLfa.YFilter = yf }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetGoName(yname string) string {
    if yname == "tunnel" { return "Tunnel" }
    if yname == "maximum-cost" { return "MaximumCost" }
    return ""
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetSegmentPath() string {
    return "remote-lfa"
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel"] = remoteLfa.Tunnel
    leafs["maximum-cost"] = remoteLfa.MaximumCost
    return leafs
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetBundleName() string { return "cisco_ios_xr" }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetYangName() string { return "remote-lfa" }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) SetParent(parent types.Entity) { remoteLfa.parent = parent }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetParent() types.Entity { return remoteLfa.parent }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers
// Fast-reroute tiebreakers configurations
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fast-reroute tiebreakers configuration. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker.
    Tiebreaker []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetFilter() yfilter.YFilter { return tiebreakers.YFilter }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) SetFilter(yf yfilter.YFilter) { tiebreakers.YFilter = yf }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetGoName(yname string) string {
    if yname == "tiebreaker" { return "Tiebreaker" }
    return ""
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetSegmentPath() string {
    return "tiebreakers"
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tiebreaker" {
        for _, c := range tiebreakers.Tiebreaker {
            if tiebreakers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker{}
        tiebreakers.Tiebreaker = append(tiebreakers.Tiebreaker, child)
        return &tiebreakers.Tiebreaker[len(tiebreakers.Tiebreaker)-1]
    }
    return nil
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range tiebreakers.Tiebreaker {
        children[tiebreakers.Tiebreaker[i].GetSegmentPath()] = &tiebreakers.Tiebreaker[i]
    }
    return children
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetYangName() string { return "tiebreakers" }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) SetParent(parent types.Entity) { tiebreakers.parent = parent }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetParent() types.Entity { return tiebreakers.parent }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
// Fast-reroute tiebreakers configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Tiebreaker type. The type is
    // OspfFastRerouteTiebreakersIntf.
    TiebreakerType interface{}

    // Index value for a tiebreaker, 0 to disable. The type is interface{} with
    // range: 0..255. This attribute is mandatory.
    TiebreakerIndex interface{}
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetFilter() yfilter.YFilter { return tiebreaker.YFilter }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetFilter(yf yfilter.YFilter) { tiebreaker.YFilter = yf }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetGoName(yname string) string {
    if yname == "tiebreaker-type" { return "TiebreakerType" }
    if yname == "tiebreaker-index" { return "TiebreakerIndex" }
    return ""
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetSegmentPath() string {
    return "tiebreaker" + "[tiebreaker-type='" + fmt.Sprintf("%v", tiebreaker.TiebreakerType) + "']"
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tiebreaker-type"] = tiebreaker.TiebreakerType
    leafs["tiebreaker-index"] = tiebreaker.TiebreakerIndex
    return leafs
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetYangName() string { return "tiebreaker" }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetParent(parent types.Entity) { tiebreaker.parent = parent }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParent() types.Entity { return tiebreaker.parent }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParentYangName() string { return "tiebreakers" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback
// Interface fallback cost
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fallback cost of link. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Bandwidth threshold. The type is interface{} with range: 1..4294967.
    Threshold interface{}
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetFilter() yfilter.YFilter { return costFallback.YFilter }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) SetFilter(yf yfilter.YFilter) { costFallback.YFilter = yf }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetGoName(yname string) string {
    if yname == "cost" { return "Cost" }
    if yname == "threshold" { return "Threshold" }
    return ""
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetSegmentPath() string {
    return "cost-fallback"
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cost"] = costFallback.Cost
    leafs["threshold"] = costFallback.Threshold
    return leafs
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetBundleName() string { return "cisco_ios_xr" }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetYangName() string { return "cost-fallback" }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) SetParent(parent types.Entity) { costFallback.parent = parent }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetParent() types.Entity { return costFallback.parent }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetParentYangName() string { return "multi-area-interface-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges
// Summarize routes matching address/mask (border
// routers only)
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Ordering index. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange.
    AreaRange []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange
}

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges) GetFilter() yfilter.YFilter { return areaRanges.YFilter }

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges) SetFilter(yf yfilter.YFilter) { areaRanges.YFilter = yf }

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges) GetGoName(yname string) string {
    if yname == "area-range" { return "AreaRange" }
    return ""
}

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges) GetSegmentPath() string {
    return "area-ranges"
}

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "area-range" {
        for _, c := range areaRanges.AreaRange {
            if areaRanges.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange{}
        areaRanges.AreaRange = append(areaRanges.AreaRange, child)
        return &areaRanges.AreaRange[len(areaRanges.AreaRange)-1]
    }
    return nil
}

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range areaRanges.AreaRange {
        children[areaRanges.AreaRange[i].GetSegmentPath()] = &areaRanges.AreaRange[i]
    }
    return children
}

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges) GetBundleName() string { return "cisco_ios_xr" }

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges) GetYangName() string { return "area-ranges" }

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges) SetParent(parent types.Entity) { areaRanges.parent = parent }

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges) GetParent() types.Entity { return areaRanges.parent }

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges) GetParentYangName() string { return "area-address" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange
// Ordering index
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IP address to match. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // This attribute is a key. IP netmask for address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Netmask interface{}

    // Do not advertise this range. The type is bool.
    NotAdvertise interface{}
}

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) GetFilter() yfilter.YFilter { return areaRange.YFilter }

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) SetFilter(yf yfilter.YFilter) { areaRange.YFilter = yf }

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "netmask" { return "Netmask" }
    if yname == "not-advertise" { return "NotAdvertise" }
    return ""
}

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) GetSegmentPath() string {
    return "area-range" + "[address='" + fmt.Sprintf("%v", areaRange.Address) + "']" + "[netmask='" + fmt.Sprintf("%v", areaRange.Netmask) + "']"
}

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = areaRange.Address
    leafs["netmask"] = areaRange.Netmask
    leafs["not-advertise"] = areaRange.NotAdvertise
    return leafs
}

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) GetBundleName() string { return "cisco_ios_xr" }

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) GetYangName() string { return "area-range" }

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) SetParent(parent types.Entity) { areaRange.parent = parent }

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) GetParent() types.Entity { return areaRange.parent }

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) GetParentYangName() string { return "area-ranges" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa
// Specify area as a NSSA area
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // No redistribution into this NSSA area. The type is bool. The default value
    // is false.
    NoRedistribution interface{}

    // Originate Type 7 default into NSSA area. The type is bool. The default
    // value is false.
    DefaultInfoOriginate interface{}

    // Do not send summary LSA into NSSA. The type is bool. The default value is
    // false.
    NoSummary interface{}

    // OSPF default metric. The type is interface{} with range: 1..16777214.
    NssaDefMetric interface{}

    // OSPF External metric type. The type is OspfLinkStateMetric. The default
    // value is type2.
    MetricType interface{}
}

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa) GetFilter() yfilter.YFilter { return nssa.YFilter }

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa) SetFilter(yf yfilter.YFilter) { nssa.YFilter = yf }

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa) GetGoName(yname string) string {
    if yname == "no-redistribution" { return "NoRedistribution" }
    if yname == "default-info-originate" { return "DefaultInfoOriginate" }
    if yname == "no-summary" { return "NoSummary" }
    if yname == "nssa-def-metric" { return "NssaDefMetric" }
    if yname == "metric-type" { return "MetricType" }
    return ""
}

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa) GetSegmentPath() string {
    return "nssa"
}

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["no-redistribution"] = nssa.NoRedistribution
    leafs["default-info-originate"] = nssa.DefaultInfoOriginate
    leafs["no-summary"] = nssa.NoSummary
    leafs["nssa-def-metric"] = nssa.NssaDefMetric
    leafs["metric-type"] = nssa.MetricType
    return leafs
}

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa) GetBundleName() string { return "cisco_ios_xr" }

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa) GetYangName() string { return "nssa" }

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa) SetParent(parent types.Entity) { nssa.parent = parent }

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa) GetParent() types.Entity { return nssa.parent }

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa) GetParentYangName() string { return "area-address" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId
// Configuration for a particular area
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Area ID if in integer format. The type is
    // interface{} with range: 0..4294967295.
    AreaId interface{}

    // Configure a route policy for inbound type-3 lsa filtering. The type is
    // string.
    RoutePolicyIn interface{}

    // Set the summary default-cost of a NSSA/stub area. The type is interface{}
    // with range: 1..16777215. The default value is 1.
    DefaultCost interface{}

    // Configure a route policy for outbound type-3 lsa filtering. The type is
    // string.
    RoutePolicyOut interface{}

    // Specify the area as a stub area (send summary LSA stub area). The type is
    // bool.
    Stub interface{}

    // Configure an OSPF area to run MPLS Traffic Engineering. The type is
    // interface{}.
    MplsTrafficEng interface{}

    // Enable/Disable an OSPF area to advertise intra-area prefixes out of this
    // area as external. The type is bool.
    ExternalOut interface{}

    // Enable/Disable an OSPF area to advertise external prefixes into this area
    // as summary. The type is bool.
    SummaryIn interface{}

    // segment-routing configuration Applicable only in Default VRF. The type is
    // OspfSegmentRouting.
    SegmentRouting interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Virtual Link scope configurations.
    VirtualLinkScopes Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes

    // Sham Link scope configurations.
    ShamLinkScopes Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes

    // Area scope configuration.
    AreaScope Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope

    // Name scope configurations.
    NameScopes Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes

    // Multi Area Interface scope configurations.
    MultiAreaInterfaceScopes Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes

    // Summarize routes matching address/mask (border routers only).
    AreaRanges Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges

    // Specify area as a NSSA area.
    Nssa Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa
}

func (areaAreaId *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId) GetFilter() yfilter.YFilter { return areaAreaId.YFilter }

func (areaAreaId *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId) SetFilter(yf yfilter.YFilter) { areaAreaId.YFilter = yf }

func (areaAreaId *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId) GetGoName(yname string) string {
    if yname == "area-id" { return "AreaId" }
    if yname == "route-policy-in" { return "RoutePolicyIn" }
    if yname == "default-cost" { return "DefaultCost" }
    if yname == "route-policy-out" { return "RoutePolicyOut" }
    if yname == "stub" { return "Stub" }
    if yname == "mpls-traffic-eng" { return "MplsTrafficEng" }
    if yname == "external-out" { return "ExternalOut" }
    if yname == "summary-in" { return "SummaryIn" }
    if yname == "segment-routing" { return "SegmentRouting" }
    if yname == "running" { return "Running" }
    if yname == "virtual-link-scopes" { return "VirtualLinkScopes" }
    if yname == "sham-link-scopes" { return "ShamLinkScopes" }
    if yname == "area-scope" { return "AreaScope" }
    if yname == "name-scopes" { return "NameScopes" }
    if yname == "multi-area-interface-scopes" { return "MultiAreaInterfaceScopes" }
    if yname == "area-ranges" { return "AreaRanges" }
    if yname == "nssa" { return "Nssa" }
    return ""
}

func (areaAreaId *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId) GetSegmentPath() string {
    return "area-area-id" + "[area-id='" + fmt.Sprintf("%v", areaAreaId.AreaId) + "']"
}

func (areaAreaId *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "virtual-link-scopes" {
        return &areaAreaId.VirtualLinkScopes
    }
    if childYangName == "sham-link-scopes" {
        return &areaAreaId.ShamLinkScopes
    }
    if childYangName == "area-scope" {
        return &areaAreaId.AreaScope
    }
    if childYangName == "name-scopes" {
        return &areaAreaId.NameScopes
    }
    if childYangName == "multi-area-interface-scopes" {
        return &areaAreaId.MultiAreaInterfaceScopes
    }
    if childYangName == "area-ranges" {
        return &areaAreaId.AreaRanges
    }
    if childYangName == "nssa" {
        return &areaAreaId.Nssa
    }
    return nil
}

func (areaAreaId *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["virtual-link-scopes"] = &areaAreaId.VirtualLinkScopes
    children["sham-link-scopes"] = &areaAreaId.ShamLinkScopes
    children["area-scope"] = &areaAreaId.AreaScope
    children["name-scopes"] = &areaAreaId.NameScopes
    children["multi-area-interface-scopes"] = &areaAreaId.MultiAreaInterfaceScopes
    children["area-ranges"] = &areaAreaId.AreaRanges
    children["nssa"] = &areaAreaId.Nssa
    return children
}

func (areaAreaId *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["area-id"] = areaAreaId.AreaId
    leafs["route-policy-in"] = areaAreaId.RoutePolicyIn
    leafs["default-cost"] = areaAreaId.DefaultCost
    leafs["route-policy-out"] = areaAreaId.RoutePolicyOut
    leafs["stub"] = areaAreaId.Stub
    leafs["mpls-traffic-eng"] = areaAreaId.MplsTrafficEng
    leafs["external-out"] = areaAreaId.ExternalOut
    leafs["summary-in"] = areaAreaId.SummaryIn
    leafs["segment-routing"] = areaAreaId.SegmentRouting
    leafs["running"] = areaAreaId.Running
    return leafs
}

func (areaAreaId *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId) GetBundleName() string { return "cisco_ios_xr" }

func (areaAreaId *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId) GetYangName() string { return "area-area-id" }

func (areaAreaId *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaAreaId *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaAreaId *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaAreaId *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId) SetParent(parent types.Entity) { areaAreaId.parent = parent }

func (areaAreaId *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId) GetParent() types.Entity { return areaAreaId.parent }

func (areaAreaId *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId) GetParentYangName() string { return "area-addresses" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes
// Virtual Link scope configurations
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Virtual Link configuration. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope.
    VirtualLinkScope []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope
}

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) GetFilter() yfilter.YFilter { return virtualLinkScopes.YFilter }

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) SetFilter(yf yfilter.YFilter) { virtualLinkScopes.YFilter = yf }

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) GetGoName(yname string) string {
    if yname == "virtual-link-scope" { return "VirtualLinkScope" }
    return ""
}

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) GetSegmentPath() string {
    return "virtual-link-scopes"
}

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "virtual-link-scope" {
        for _, c := range virtualLinkScopes.VirtualLinkScope {
            if virtualLinkScopes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope{}
        virtualLinkScopes.VirtualLinkScope = append(virtualLinkScopes.VirtualLinkScope, child)
        return &virtualLinkScopes.VirtualLinkScope[len(virtualLinkScopes.VirtualLinkScope)-1]
    }
    return nil
}

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range virtualLinkScopes.VirtualLinkScope {
        children[virtualLinkScopes.VirtualLinkScope[i].GetSegmentPath()] = &virtualLinkScopes.VirtualLinkScope[i]
    }
    return children
}

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) GetBundleName() string { return "cisco_ios_xr" }

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) GetYangName() string { return "virtual-link-scopes" }

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) SetParent(parent types.Entity) { virtualLinkScopes.parent = parent }

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) GetParent() types.Entity { return virtualLinkScopes.parent }

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) GetParentYangName() string { return "area-area-id" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope
// Virtual Link configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Router ID of virtual link neighbor. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Authentication.
    Authentication Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal
}

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) GetFilter() yfilter.YFilter { return virtualLinkScope.YFilter }

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) SetFilter(yf yfilter.YFilter) { virtualLinkScope.YFilter = yf }

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "running" { return "Running" }
    if yname == "authentication" { return "Authentication" }
    if yname == "dead-interval-minimal" { return "DeadIntervalMinimal" }
    return ""
}

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) GetSegmentPath() string {
    return "virtual-link-scope" + "[address='" + fmt.Sprintf("%v", virtualLinkScope.Address) + "']"
}

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "authentication" {
        return &virtualLinkScope.Authentication
    }
    if childYangName == "dead-interval-minimal" {
        return &virtualLinkScope.DeadIntervalMinimal
    }
    return nil
}

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["authentication"] = &virtualLinkScope.Authentication
    children["dead-interval-minimal"] = &virtualLinkScope.DeadIntervalMinimal
    return children
}

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = virtualLinkScope.Address
    leafs["hello-interval"] = virtualLinkScope.HelloInterval
    leafs["transmit-delay"] = virtualLinkScope.TransmitDelay
    leafs["retransmit-interval"] = virtualLinkScope.RetransmitInterval
    leafs["running"] = virtualLinkScope.Running
    return leafs
}

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) GetBundleName() string { return "cisco_ios_xr" }

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) GetYangName() string { return "virtual-link-scope" }

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) SetParent(parent types.Entity) { virtualLinkScope.parent = parent }

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) GetParent() types.Entity { return virtualLinkScope.parent }

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) GetParentYangName() string { return "virtual-link-scopes" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication
// Authentication
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // (!.+)|([^!].+).
    Key interface{}

    // Authentication type.
    Type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) GetGoName(yname string) string {
    if yname == "key" { return "Key" }
    if yname == "type" { return "Type" }
    if yname == "message-digest-keies" { return "MessageDigestKeies" }
    return ""
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "type" {
        return &authentication.Type
    }
    if childYangName == "message-digest-keies" {
        return &authentication.MessageDigestKeies
    }
    return nil
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["type"] = &authentication.Type
    children["message-digest-keies"] = &authentication.MessageDigestKeies
    return children
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key"] = authentication.Key
    return leafs
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) GetParentYangName() string { return "virtual-link-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetGoName(yname string) string {
    if yname == "authen-type" { return "AuthenType" }
    if yname == "keychain-authen-type" { return "KeychainAuthenType" }
    if yname == "keychain-name" { return "KeychainName" }
    return ""
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetSegmentPath() string {
    return "type"
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["authen-type"] = self.AuthenType
    leafs["keychain-authen-type"] = self.KeychainAuthenType
    leafs["keychain-name"] = self.KeychainName
    return leafs
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetYangName() string { return "type" }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetParent() types.Entity { return self.parent }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetFilter() yfilter.YFilter { return messageDigestKeies.YFilter }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) SetFilter(yf yfilter.YFilter) { messageDigestKeies.YFilter = yf }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetGoName(yname string) string {
    if yname == "message-digest-key" { return "MessageDigestKey" }
    return ""
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetSegmentPath() string {
    return "message-digest-keies"
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "message-digest-key" {
        for _, c := range messageDigestKeies.MessageDigestKey {
            if messageDigestKeies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey{}
        messageDigestKeies.MessageDigestKey = append(messageDigestKeies.MessageDigestKey, child)
        return &messageDigestKeies.MessageDigestKey[len(messageDigestKeies.MessageDigestKey)-1]
    }
    return nil
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range messageDigestKeies.MessageDigestKey {
        children[messageDigestKeies.MessageDigestKey[i].GetSegmentPath()] = &messageDigestKeies.MessageDigestKey[i]
    }
    return children
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetYangName() string { return "message-digest-keies" }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) SetParent(parent types.Entity) { messageDigestKeies.parent = parent }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetParent() types.Entity { return messageDigestKeies.parent }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: (!.+)|([^!].+). This attribute
    // is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetFilter() yfilter.YFilter { return messageDigestKey.YFilter }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) SetFilter(yf yfilter.YFilter) { messageDigestKey.YFilter = yf }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetGoName(yname string) string {
    if yname == "key-id" { return "KeyId" }
    if yname == "password" { return "Password" }
    return ""
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetSegmentPath() string {
    return "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key-id"] = messageDigestKey.KeyId
    leafs["password"] = messageDigestKey.Password
    return leafs
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetYangName() string { return "message-digest-key" }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) SetParent(parent types.Entity) { messageDigestKey.parent = parent }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParent() types.Entity { return messageDigestKey.parent }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParentYangName() string { return "message-digest-keies" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetFilter() yfilter.YFilter { return deadIntervalMinimal.YFilter }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) SetFilter(yf yfilter.YFilter) { deadIntervalMinimal.YFilter = yf }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "multiplier" { return "Multiplier" }
    return ""
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetSegmentPath() string {
    return "dead-interval-minimal"
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = deadIntervalMinimal.Interval
    leafs["multiplier"] = deadIntervalMinimal.Multiplier
    return leafs
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetBundleName() string { return "cisco_ios_xr" }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetYangName() string { return "dead-interval-minimal" }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) SetParent(parent types.Entity) { deadIntervalMinimal.parent = parent }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetParent() types.Entity { return deadIntervalMinimal.parent }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetParentYangName() string { return "virtual-link-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes
// Sham Link scope configurations
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sham Link configuration. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope.
    ShamLinkScope []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope
}

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes) GetFilter() yfilter.YFilter { return shamLinkScopes.YFilter }

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes) SetFilter(yf yfilter.YFilter) { shamLinkScopes.YFilter = yf }

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes) GetGoName(yname string) string {
    if yname == "sham-link-scope" { return "ShamLinkScope" }
    return ""
}

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes) GetSegmentPath() string {
    return "sham-link-scopes"
}

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sham-link-scope" {
        for _, c := range shamLinkScopes.ShamLinkScope {
            if shamLinkScopes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope{}
        shamLinkScopes.ShamLinkScope = append(shamLinkScopes.ShamLinkScope, child)
        return &shamLinkScopes.ShamLinkScope[len(shamLinkScopes.ShamLinkScope)-1]
    }
    return nil
}

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range shamLinkScopes.ShamLinkScope {
        children[shamLinkScopes.ShamLinkScope[i].GetSegmentPath()] = &shamLinkScopes.ShamLinkScope[i]
    }
    return children
}

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes) GetBundleName() string { return "cisco_ios_xr" }

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes) GetYangName() string { return "sham-link-scopes" }

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes) SetParent(parent types.Entity) { shamLinkScopes.parent = parent }

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes) GetParent() types.Entity { return shamLinkScopes.parent }

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes) GetParentYangName() string { return "area-area-id" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope
// Sham Link configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Address of the local sham-link endpoint. The type
    // is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // This attribute is a key. Address of the remote sham-link endpoint. The type
    // is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Address of the local sham-link endpoint. Enter an IP Address. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Source interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Authentication.
    Authentication Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal
}

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) GetFilter() yfilter.YFilter { return shamLinkScope.YFilter }

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) SetFilter(yf yfilter.YFilter) { shamLinkScope.YFilter = yf }

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "source" { return "Source" }
    if yname == "cost" { return "Cost" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "running" { return "Running" }
    if yname == "authentication" { return "Authentication" }
    if yname == "dead-interval-minimal" { return "DeadIntervalMinimal" }
    return ""
}

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) GetSegmentPath() string {
    return "sham-link-scope" + "[source-address='" + fmt.Sprintf("%v", shamLinkScope.SourceAddress) + "']" + "[destination-address='" + fmt.Sprintf("%v", shamLinkScope.DestinationAddress) + "']"
}

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "authentication" {
        return &shamLinkScope.Authentication
    }
    if childYangName == "dead-interval-minimal" {
        return &shamLinkScope.DeadIntervalMinimal
    }
    return nil
}

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["authentication"] = &shamLinkScope.Authentication
    children["dead-interval-minimal"] = &shamLinkScope.DeadIntervalMinimal
    return children
}

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = shamLinkScope.SourceAddress
    leafs["destination-address"] = shamLinkScope.DestinationAddress
    leafs["source"] = shamLinkScope.Source
    leafs["cost"] = shamLinkScope.Cost
    leafs["hello-interval"] = shamLinkScope.HelloInterval
    leafs["transmit-delay"] = shamLinkScope.TransmitDelay
    leafs["retransmit-interval"] = shamLinkScope.RetransmitInterval
    leafs["running"] = shamLinkScope.Running
    return leafs
}

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) GetBundleName() string { return "cisco_ios_xr" }

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) GetYangName() string { return "sham-link-scope" }

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) SetParent(parent types.Entity) { shamLinkScope.parent = parent }

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) GetParent() types.Entity { return shamLinkScope.parent }

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) GetParentYangName() string { return "sham-link-scopes" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication
// Authentication
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // (!.+)|([^!].+).
    Key interface{}

    // Authentication type.
    Type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) GetGoName(yname string) string {
    if yname == "key" { return "Key" }
    if yname == "type" { return "Type" }
    if yname == "message-digest-keies" { return "MessageDigestKeies" }
    return ""
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "type" {
        return &authentication.Type
    }
    if childYangName == "message-digest-keies" {
        return &authentication.MessageDigestKeies
    }
    return nil
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["type"] = &authentication.Type
    children["message-digest-keies"] = &authentication.MessageDigestKeies
    return children
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key"] = authentication.Key
    return leafs
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) GetParentYangName() string { return "sham-link-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetGoName(yname string) string {
    if yname == "authen-type" { return "AuthenType" }
    if yname == "keychain-authen-type" { return "KeychainAuthenType" }
    if yname == "keychain-name" { return "KeychainName" }
    return ""
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetSegmentPath() string {
    return "type"
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["authen-type"] = self.AuthenType
    leafs["keychain-authen-type"] = self.KeychainAuthenType
    leafs["keychain-name"] = self.KeychainName
    return leafs
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetYangName() string { return "type" }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetParent() types.Entity { return self.parent }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetFilter() yfilter.YFilter { return messageDigestKeies.YFilter }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) SetFilter(yf yfilter.YFilter) { messageDigestKeies.YFilter = yf }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetGoName(yname string) string {
    if yname == "message-digest-key" { return "MessageDigestKey" }
    return ""
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetSegmentPath() string {
    return "message-digest-keies"
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "message-digest-key" {
        for _, c := range messageDigestKeies.MessageDigestKey {
            if messageDigestKeies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey{}
        messageDigestKeies.MessageDigestKey = append(messageDigestKeies.MessageDigestKey, child)
        return &messageDigestKeies.MessageDigestKey[len(messageDigestKeies.MessageDigestKey)-1]
    }
    return nil
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range messageDigestKeies.MessageDigestKey {
        children[messageDigestKeies.MessageDigestKey[i].GetSegmentPath()] = &messageDigestKeies.MessageDigestKey[i]
    }
    return children
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetYangName() string { return "message-digest-keies" }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) SetParent(parent types.Entity) { messageDigestKeies.parent = parent }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetParent() types.Entity { return messageDigestKeies.parent }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: (!.+)|([^!].+). This attribute
    // is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetFilter() yfilter.YFilter { return messageDigestKey.YFilter }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) SetFilter(yf yfilter.YFilter) { messageDigestKey.YFilter = yf }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetGoName(yname string) string {
    if yname == "key-id" { return "KeyId" }
    if yname == "password" { return "Password" }
    return ""
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetSegmentPath() string {
    return "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key-id"] = messageDigestKey.KeyId
    leafs["password"] = messageDigestKey.Password
    return leafs
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetYangName() string { return "message-digest-key" }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) SetParent(parent types.Entity) { messageDigestKey.parent = parent }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParent() types.Entity { return messageDigestKey.parent }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParentYangName() string { return "message-digest-keies" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetFilter() yfilter.YFilter { return deadIntervalMinimal.YFilter }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) SetFilter(yf yfilter.YFilter) { deadIntervalMinimal.YFilter = yf }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "multiplier" { return "Multiplier" }
    return ""
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetSegmentPath() string {
    return "dead-interval-minimal"
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = deadIntervalMinimal.Interval
    leafs["multiplier"] = deadIntervalMinimal.Multiplier
    return leafs
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetBundleName() string { return "cisco_ios_xr" }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetYangName() string { return "dead-interval-minimal" }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) SetParent(parent types.Entity) { deadIntervalMinimal.parent = parent }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetParent() types.Entity { return deadIntervalMinimal.parent }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetParentYangName() string { return "sham-link-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope
// Area scope configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Enable/Disable prefix suppression for primary addresses. The type is bool.
    // The default value is false.
    PrefixSuppressionPrimary interface{}

    // Enable/Disable ignoring of MTU in DBD packets. The type is bool. The
    // default value is false.
    MtuIgnore interface{}

    // Enable/Disable MPLS LDP sync for igp-shortcuts. The type is bool.
    LdpSyncIgpShortcuts interface{}

    // Enable MPLS LDP Auto Config. The type is interface{}.
    LdpAutoConfig interface{}

    // Type of attached network. The type is OspfNetwork.
    NetworkType interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Enable/Disable advertising loopback as a stub network. The type is bool.
    // The default value is false.
    LoopbackStubNetwork interface{}

    // Enable/Disable prefix suppression for secondary addresses. The type is
    // bool. The default value is false.
    PrefixSuppressionSecondary interface{}

    // Enable/Disable OSPF demand circuit. The type is bool. The default value is
    // false.
    DemandCircuit interface{}

    // When enabled, prevent sending HELLO packets over link. The type is bool.
    // The default value is false.
    Passive interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Customize size of OSPF packets upto MTU. The type is interface{} with
    // range: 576..10000.
    PacketSize interface{}

    // Enable/Disable MPLS LDP sync. The type is bool.
    LdpSync interface{}

    // Filter OSPF LSA during synchronization and flooding. The type is bool. The
    // default value is false.
    DatabaseFilter interface{}

    // Enable/Disable registration for early interface down notifications. The
    // type is bool. The default value is false.
    LinkDownFastDetect interface{}

    // segment-routing forwarding configuration Applicableonly in Default VRF. The
    // type is OspfSegmentRoutingForwarding.
    SegmentRoutingForwarding interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Router priority for DR and BDR election. The type is interface{} with
    // range: 0..255. The default value is 1.
    Priority interface{}

    // Enable/Disable OSPF flood reduction. The type is bool. The default value is
    // false.
    FloodReduction interface{}

    // Filter networks intalled to RIB (disable as ACL name means filtering is
    // disabled).
    DistributeList Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList

    // BFD configuration.
    Bfd Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Bfd

    // Authentication.
    Authentication Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication

    // Container class for security related configuration parameters.
    Security Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal

    // Fast-reroute configuration.
    FastReroute Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute

    // Interface fallback cost.
    CostFallback Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback
}

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope) GetFilter() yfilter.YFilter { return areaScope.YFilter }

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope) SetFilter(yf yfilter.YFilter) { areaScope.YFilter = yf }

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope) GetGoName(yname string) string {
    if yname == "cost" { return "Cost" }
    if yname == "prefix-suppression-primary" { return "PrefixSuppressionPrimary" }
    if yname == "mtu-ignore" { return "MtuIgnore" }
    if yname == "ldp-sync-igp-shortcuts" { return "LdpSyncIgpShortcuts" }
    if yname == "ldp-auto-config" { return "LdpAutoConfig" }
    if yname == "network-type" { return "NetworkType" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "loopback-stub-network" { return "LoopbackStubNetwork" }
    if yname == "prefix-suppression-secondary" { return "PrefixSuppressionSecondary" }
    if yname == "demand-circuit" { return "DemandCircuit" }
    if yname == "passive" { return "Passive" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "packet-size" { return "PacketSize" }
    if yname == "ldp-sync" { return "LdpSync" }
    if yname == "database-filter" { return "DatabaseFilter" }
    if yname == "link-down-fast-detect" { return "LinkDownFastDetect" }
    if yname == "segment-routing-forwarding" { return "SegmentRoutingForwarding" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "priority" { return "Priority" }
    if yname == "flood-reduction" { return "FloodReduction" }
    if yname == "distribute-list" { return "DistributeList" }
    if yname == "bfd" { return "Bfd" }
    if yname == "authentication" { return "Authentication" }
    if yname == "security" { return "Security" }
    if yname == "dead-interval-minimal" { return "DeadIntervalMinimal" }
    if yname == "fast-reroute" { return "FastReroute" }
    if yname == "cost-fallback" { return "CostFallback" }
    return ""
}

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope) GetSegmentPath() string {
    return "area-scope"
}

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "distribute-list" {
        return &areaScope.DistributeList
    }
    if childYangName == "bfd" {
        return &areaScope.Bfd
    }
    if childYangName == "authentication" {
        return &areaScope.Authentication
    }
    if childYangName == "security" {
        return &areaScope.Security
    }
    if childYangName == "dead-interval-minimal" {
        return &areaScope.DeadIntervalMinimal
    }
    if childYangName == "fast-reroute" {
        return &areaScope.FastReroute
    }
    if childYangName == "cost-fallback" {
        return &areaScope.CostFallback
    }
    return nil
}

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["distribute-list"] = &areaScope.DistributeList
    children["bfd"] = &areaScope.Bfd
    children["authentication"] = &areaScope.Authentication
    children["security"] = &areaScope.Security
    children["dead-interval-minimal"] = &areaScope.DeadIntervalMinimal
    children["fast-reroute"] = &areaScope.FastReroute
    children["cost-fallback"] = &areaScope.CostFallback
    return children
}

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cost"] = areaScope.Cost
    leafs["prefix-suppression-primary"] = areaScope.PrefixSuppressionPrimary
    leafs["mtu-ignore"] = areaScope.MtuIgnore
    leafs["ldp-sync-igp-shortcuts"] = areaScope.LdpSyncIgpShortcuts
    leafs["ldp-auto-config"] = areaScope.LdpAutoConfig
    leafs["network-type"] = areaScope.NetworkType
    leafs["hello-interval"] = areaScope.HelloInterval
    leafs["loopback-stub-network"] = areaScope.LoopbackStubNetwork
    leafs["prefix-suppression-secondary"] = areaScope.PrefixSuppressionSecondary
    leafs["demand-circuit"] = areaScope.DemandCircuit
    leafs["passive"] = areaScope.Passive
    leafs["transmit-delay"] = areaScope.TransmitDelay
    leafs["packet-size"] = areaScope.PacketSize
    leafs["ldp-sync"] = areaScope.LdpSync
    leafs["database-filter"] = areaScope.DatabaseFilter
    leafs["link-down-fast-detect"] = areaScope.LinkDownFastDetect
    leafs["segment-routing-forwarding"] = areaScope.SegmentRoutingForwarding
    leafs["retransmit-interval"] = areaScope.RetransmitInterval
    leafs["priority"] = areaScope.Priority
    leafs["flood-reduction"] = areaScope.FloodReduction
    return leafs
}

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope) GetBundleName() string { return "cisco_ios_xr" }

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope) GetYangName() string { return "area-scope" }

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope) SetParent(parent types.Entity) { areaScope.parent = parent }

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope) GetParent() types.Entity { return areaScope.parent }

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope) GetParentYangName() string { return "area-area-id" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList
// Filter networks intalled to RIB (disable as ACL
// name means filtering is disabled)
// This type is a presence type.
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Access Control List name. The type is string.
    AccessListName interface{}

    // Route Policy name. The type is string.
    RoutePolicyName interface{}
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) GetFilter() yfilter.YFilter { return distributeList.YFilter }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) SetFilter(yf yfilter.YFilter) { distributeList.YFilter = yf }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) GetGoName(yname string) string {
    if yname == "access-list-name" { return "AccessListName" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) GetSegmentPath() string {
    return "distribute-list"
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["access-list-name"] = distributeList.AccessListName
    leafs["route-policy-name"] = distributeList.RoutePolicyName
    return leafs
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) GetBundleName() string { return "cisco_ios_xr" }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) GetYangName() string { return "distribute-list" }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) SetParent(parent types.Entity) { distributeList.parent = parent }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) GetParent() types.Entity { return distributeList.parent }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) GetParentYangName() string { return "area-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Bfd
// BFD configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Bfd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hello interval for BFD sessions created by OSPF. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    Interval interface{}

    // Detection multiplier for BFD sessions created by OSPF. The type is
    // interface{} with range: 2..50.
    DetectionMultiplier interface{}

    // use of Bidirectional Forwarding Detection. The type is BfdEnableMode.
    FastDetectMode interface{}
}

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) GetFilter() yfilter.YFilter { return bfd.YFilter }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) SetFilter(yf yfilter.YFilter) { bfd.YFilter = yf }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "fast-detect-mode" { return "FastDetectMode" }
    return ""
}

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) GetSegmentPath() string {
    return "bfd"
}

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = bfd.Interval
    leafs["detection-multiplier"] = bfd.DetectionMultiplier
    leafs["fast-detect-mode"] = bfd.FastDetectMode
    return leafs
}

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) GetBundleName() string { return "cisco_ios_xr" }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) GetYangName() string { return "bfd" }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) SetParent(parent types.Entity) { bfd.parent = parent }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) GetParent() types.Entity { return bfd.parent }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) GetParentYangName() string { return "area-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication
// Authentication
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // (!.+)|([^!].+).
    Key interface{}

    // Authentication type.
    Type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) GetGoName(yname string) string {
    if yname == "key" { return "Key" }
    if yname == "type" { return "Type" }
    if yname == "message-digest-keies" { return "MessageDigestKeies" }
    return ""
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "type" {
        return &authentication.Type
    }
    if childYangName == "message-digest-keies" {
        return &authentication.MessageDigestKeies
    }
    return nil
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["type"] = &authentication.Type
    children["message-digest-keies"] = &authentication.MessageDigestKeies
    return children
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key"] = authentication.Key
    return leafs
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) GetParentYangName() string { return "area-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) GetGoName(yname string) string {
    if yname == "authen-type" { return "AuthenType" }
    if yname == "keychain-authen-type" { return "KeychainAuthenType" }
    if yname == "keychain-name" { return "KeychainName" }
    return ""
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) GetSegmentPath() string {
    return "type"
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["authen-type"] = self.AuthenType
    leafs["keychain-authen-type"] = self.KeychainAuthenType
    leafs["keychain-name"] = self.KeychainName
    return leafs
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) GetYangName() string { return "type" }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) GetParent() types.Entity { return self.parent }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) GetFilter() yfilter.YFilter { return messageDigestKeies.YFilter }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) SetFilter(yf yfilter.YFilter) { messageDigestKeies.YFilter = yf }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) GetGoName(yname string) string {
    if yname == "message-digest-key" { return "MessageDigestKey" }
    return ""
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) GetSegmentPath() string {
    return "message-digest-keies"
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "message-digest-key" {
        for _, c := range messageDigestKeies.MessageDigestKey {
            if messageDigestKeies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey{}
        messageDigestKeies.MessageDigestKey = append(messageDigestKeies.MessageDigestKey, child)
        return &messageDigestKeies.MessageDigestKey[len(messageDigestKeies.MessageDigestKey)-1]
    }
    return nil
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range messageDigestKeies.MessageDigestKey {
        children[messageDigestKeies.MessageDigestKey[i].GetSegmentPath()] = &messageDigestKeies.MessageDigestKey[i]
    }
    return children
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) GetYangName() string { return "message-digest-keies" }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) SetParent(parent types.Entity) { messageDigestKeies.parent = parent }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) GetParent() types.Entity { return messageDigestKeies.parent }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: (!.+)|([^!].+). This attribute
    // is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetFilter() yfilter.YFilter { return messageDigestKey.YFilter }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) SetFilter(yf yfilter.YFilter) { messageDigestKey.YFilter = yf }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetGoName(yname string) string {
    if yname == "key-id" { return "KeyId" }
    if yname == "password" { return "Password" }
    return ""
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetSegmentPath() string {
    return "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key-id"] = messageDigestKey.KeyId
    leafs["password"] = messageDigestKey.Password
    return leafs
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetYangName() string { return "message-digest-key" }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) SetParent(parent types.Entity) { messageDigestKey.parent = parent }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParent() types.Entity { return messageDigestKey.parent }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParentYangName() string { return "message-digest-keies" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security
// Container class for security related
// configuration parameters
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enabling turns on TTL security.
    Ttl Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl
}

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security) GetFilter() yfilter.YFilter { return security.YFilter }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security) SetFilter(yf yfilter.YFilter) { security.YFilter = yf }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security) GetGoName(yname string) string {
    if yname == "ttl" { return "Ttl" }
    return ""
}

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security) GetSegmentPath() string {
    return "security"
}

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ttl" {
        return &security.Ttl
    }
    return nil
}

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ttl"] = &security.Ttl
    return children
}

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security) GetBundleName() string { return "cisco_ios_xr" }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security) GetYangName() string { return "security" }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security) SetParent(parent types.Entity) { security.parent = parent }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security) GetParent() types.Entity { return security.parent }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security) GetParentYangName() string { return "area-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl
// Enabling turns on TTL security
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable TTL security. The type is bool.
    Enable interface{}

    // Hop count. The type is interface{} with range: 1..254.
    HopCount interface{}
}

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) GetFilter() yfilter.YFilter { return ttl.YFilter }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) SetFilter(yf yfilter.YFilter) { ttl.YFilter = yf }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "hop-count" { return "HopCount" }
    return ""
}

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) GetSegmentPath() string {
    return "ttl"
}

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = ttl.Enable
    leafs["hop-count"] = ttl.HopCount
    return leafs
}

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) GetBundleName() string { return "cisco_ios_xr" }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) GetYangName() string { return "ttl" }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) SetParent(parent types.Entity) { ttl.parent = parent }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) GetParent() types.Entity { return ttl.parent }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) GetParentYangName() string { return "security" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) GetFilter() yfilter.YFilter { return deadIntervalMinimal.YFilter }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) SetFilter(yf yfilter.YFilter) { deadIntervalMinimal.YFilter = yf }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "multiplier" { return "Multiplier" }
    return ""
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) GetSegmentPath() string {
    return "dead-interval-minimal"
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = deadIntervalMinimal.Interval
    leafs["multiplier"] = deadIntervalMinimal.Multiplier
    return leafs
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) GetBundleName() string { return "cisco_ios_xr" }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) GetYangName() string { return "dead-interval-minimal" }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) SetParent(parent types.Entity) { deadIntervalMinimal.parent = parent }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) GetParent() types.Entity { return deadIntervalMinimal.parent }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) GetParentYangName() string { return "area-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute
// Fast-reroute configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // OspfFastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink

    // Fast-reroute per-prefix global configuration.
    PerPrefix Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetGoName(yname string) string {
    if yname == "fast-reroute-enable" { return "FastRerouteEnable" }
    if yname == "per-link" { return "PerLink" }
    if yname == "per-prefix" { return "PerPrefix" }
    return ""
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "per-link" {
        return &fastReroute.PerLink
    }
    if childYangName == "per-prefix" {
        return &fastReroute.PerPrefix
    }
    return nil
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["per-link"] = &fastReroute.PerLink
    children["per-prefix"] = &fastReroute.PerPrefix
    return children
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-enable"] = fastReroute.FastRerouteEnable
    return leafs
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetParentYangName() string { return "area-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetFilter() yfilter.YFilter { return perLink.YFilter }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) SetFilter(yf yfilter.YFilter) { perLink.YFilter = yf }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetSegmentPath() string {
    return "per-link"
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perLink.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perLink.ExcludeInterfaces
    }
    return nil
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perLink.CandidateInterfaces
    children["exclude-interfaces"] = &perLink.ExcludeInterfaces
    return children
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perLink.FastRerouteUseCandidateOnly
    return leafs
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetBundleName() string { return "cisco_ios_xr" }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetYangName() string { return "per-link" }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) SetParent(parent types.Entity) { perLink.parent = parent }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetParent() types.Entity { return perLink.parent }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetParentYangName() string { return "per-link" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetParentYangName() string { return "per-link" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix
// Fast-reroute per-prefix global configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Topology Independet LFA configuration. The type is bool.
    TopologyIndependentLfa interface{}

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Remote LFA configuration.
    RemoteLfa Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa

    // Fast-reroute tiebreakers configurations.
    Tiebreakers Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetFilter() yfilter.YFilter { return perPrefix.YFilter }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) SetFilter(yf yfilter.YFilter) { perPrefix.YFilter = yf }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetGoName(yname string) string {
    if yname == "topology-independent-lfa" { return "TopologyIndependentLfa" }
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "remote-lfa" { return "RemoteLfa" }
    if yname == "tiebreakers" { return "Tiebreakers" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetSegmentPath() string {
    return "per-prefix"
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-lfa" {
        return &perPrefix.RemoteLfa
    }
    if childYangName == "tiebreakers" {
        return &perPrefix.Tiebreakers
    }
    if childYangName == "candidate-interfaces" {
        return &perPrefix.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perPrefix.ExcludeInterfaces
    }
    return nil
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["remote-lfa"] = &perPrefix.RemoteLfa
    children["tiebreakers"] = &perPrefix.Tiebreakers
    children["candidate-interfaces"] = &perPrefix.CandidateInterfaces
    children["exclude-interfaces"] = &perPrefix.ExcludeInterfaces
    return children
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["topology-independent-lfa"] = perPrefix.TopologyIndependentLfa
    leafs["fast-reroute-use-candidate-only"] = perPrefix.FastRerouteUseCandidateOnly
    return leafs
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetYangName() string { return "per-prefix" }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) SetParent(parent types.Entity) { perPrefix.parent = parent }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetParent() types.Entity { return perPrefix.parent }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa
// Remote LFA configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable remote LFA computation. The type is OspfFrrRlfaTunnel.
    Tunnel interface{}

    // Maximum path cost to remote LFA. The type is interface{} with range:
    // 1..4294967295.
    MaximumCost interface{}
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetFilter() yfilter.YFilter { return remoteLfa.YFilter }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) SetFilter(yf yfilter.YFilter) { remoteLfa.YFilter = yf }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetGoName(yname string) string {
    if yname == "tunnel" { return "Tunnel" }
    if yname == "maximum-cost" { return "MaximumCost" }
    return ""
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetSegmentPath() string {
    return "remote-lfa"
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel"] = remoteLfa.Tunnel
    leafs["maximum-cost"] = remoteLfa.MaximumCost
    return leafs
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetBundleName() string { return "cisco_ios_xr" }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetYangName() string { return "remote-lfa" }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) SetParent(parent types.Entity) { remoteLfa.parent = parent }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetParent() types.Entity { return remoteLfa.parent }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers
// Fast-reroute tiebreakers configurations
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fast-reroute tiebreakers configuration. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker.
    Tiebreaker []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetFilter() yfilter.YFilter { return tiebreakers.YFilter }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) SetFilter(yf yfilter.YFilter) { tiebreakers.YFilter = yf }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetGoName(yname string) string {
    if yname == "tiebreaker" { return "Tiebreaker" }
    return ""
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetSegmentPath() string {
    return "tiebreakers"
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tiebreaker" {
        for _, c := range tiebreakers.Tiebreaker {
            if tiebreakers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker{}
        tiebreakers.Tiebreaker = append(tiebreakers.Tiebreaker, child)
        return &tiebreakers.Tiebreaker[len(tiebreakers.Tiebreaker)-1]
    }
    return nil
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range tiebreakers.Tiebreaker {
        children[tiebreakers.Tiebreaker[i].GetSegmentPath()] = &tiebreakers.Tiebreaker[i]
    }
    return children
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetYangName() string { return "tiebreakers" }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) SetParent(parent types.Entity) { tiebreakers.parent = parent }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetParent() types.Entity { return tiebreakers.parent }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
// Fast-reroute tiebreakers configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Tiebreaker type. The type is
    // OspfFastRerouteTiebreakersIntf.
    TiebreakerType interface{}

    // Index value for a tiebreaker, 0 to disable. The type is interface{} with
    // range: 0..255. This attribute is mandatory.
    TiebreakerIndex interface{}
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetFilter() yfilter.YFilter { return tiebreaker.YFilter }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetFilter(yf yfilter.YFilter) { tiebreaker.YFilter = yf }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetGoName(yname string) string {
    if yname == "tiebreaker-type" { return "TiebreakerType" }
    if yname == "tiebreaker-index" { return "TiebreakerIndex" }
    return ""
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetSegmentPath() string {
    return "tiebreaker" + "[tiebreaker-type='" + fmt.Sprintf("%v", tiebreaker.TiebreakerType) + "']"
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tiebreaker-type"] = tiebreaker.TiebreakerType
    leafs["tiebreaker-index"] = tiebreaker.TiebreakerIndex
    return leafs
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetYangName() string { return "tiebreaker" }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetParent(parent types.Entity) { tiebreaker.parent = parent }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParent() types.Entity { return tiebreaker.parent }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParentYangName() string { return "tiebreakers" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback
// Interface fallback cost
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fallback cost of link. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Bandwidth threshold. The type is interface{} with range: 1..4294967.
    Threshold interface{}
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) GetFilter() yfilter.YFilter { return costFallback.YFilter }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) SetFilter(yf yfilter.YFilter) { costFallback.YFilter = yf }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) GetGoName(yname string) string {
    if yname == "cost" { return "Cost" }
    if yname == "threshold" { return "Threshold" }
    return ""
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) GetSegmentPath() string {
    return "cost-fallback"
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cost"] = costFallback.Cost
    leafs["threshold"] = costFallback.Threshold
    return leafs
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) GetBundleName() string { return "cisco_ios_xr" }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) GetYangName() string { return "cost-fallback" }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) SetParent(parent types.Entity) { costFallback.parent = parent }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) GetParent() types.Entity { return costFallback.parent }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) GetParentYangName() string { return "area-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes
// Name scope configurations
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name scope configuration. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope.
    NameScope []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope
}

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes) GetFilter() yfilter.YFilter { return nameScopes.YFilter }

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes) SetFilter(yf yfilter.YFilter) { nameScopes.YFilter = yf }

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes) GetGoName(yname string) string {
    if yname == "name-scope" { return "NameScope" }
    return ""
}

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes) GetSegmentPath() string {
    return "name-scopes"
}

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "name-scope" {
        for _, c := range nameScopes.NameScope {
            if nameScopes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope{}
        nameScopes.NameScope = append(nameScopes.NameScope, child)
        return &nameScopes.NameScope[len(nameScopes.NameScope)-1]
    }
    return nil
}

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nameScopes.NameScope {
        children[nameScopes.NameScope[i].GetSegmentPath()] = &nameScopes.NameScope[i]
    }
    return children
}

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes) GetBundleName() string { return "cisco_ios_xr" }

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes) GetYangName() string { return "name-scopes" }

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes) SetParent(parent types.Entity) { nameScopes.parent = parent }

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes) GetParent() types.Entity { return nameScopes.parent }

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes) GetParentYangName() string { return "area-area-id" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope
// Name scope configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of Interface to configure. The type is string
    // with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Enable/Disable prefix suppression for primary addresses. The type is bool.
    // The default value is false.
    PrefixSuppressionPrimary interface{}

    // Enable/Disable ignoring of MTU in DBD packets. The type is bool. The
    // default value is false.
    MtuIgnore interface{}

    // Enable/Disable MPLS LDP sync for igp-shortcuts. The type is bool.
    LdpSyncIgpShortcuts interface{}

    // Enable MPLS LDP Auto Config. The type is interface{}.
    LdpAutoConfig interface{}

    // Type of attached network. The type is OspfNetwork.
    NetworkType interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Enable/Disable advertising loopback as a stub network. The type is bool.
    // The default value is false.
    LoopbackStubNetwork interface{}

    // Enable/Disable prefix suppression for secondary addresses. The type is
    // bool. The default value is false.
    PrefixSuppressionSecondary interface{}

    // Enable/Disable OSPF demand circuit. The type is bool. The default value is
    // false.
    DemandCircuit interface{}

    // When enabled, prevent sending HELLO packets over link. The type is bool.
    // The default value is false.
    Passive interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Customize size of OSPF packets upto MTU. The type is interface{} with
    // range: 576..10000.
    PacketSize interface{}

    // Enable/Disable MPLS LDP sync. The type is bool.
    LdpSync interface{}

    // Filter OSPF LSA during synchronization and flooding. The type is bool. The
    // default value is false.
    DatabaseFilter interface{}

    // Enable/Disable registration for early interface down notifications. The
    // type is bool. The default value is false.
    LinkDownFastDetect interface{}

    // segment-routing forwarding configuration Applicableonly in Default VRF. The
    // type is OspfSegmentRoutingForwarding.
    SegmentRoutingForwarding interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Router priority for DR and BDR election. The type is interface{} with
    // range: 0..255. The default value is 1.
    Priority interface{}

    // Enable/Disable OSPF flood reduction. The type is bool. The default value is
    // false.
    FloodReduction interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Prefix SID.
    PrefixSid Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid

    // Strict Prefix SID.
    PrefixSidStrict Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict

    // Filter networks intalled to RIB (disable as ACL name means filtering is
    // disabled).
    DistributeList Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList

    // BFD configuration.
    Bfd Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd

    // Authentication.
    Authentication Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication

    // Container class for security related configuration parameters.
    Security Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security

    // Neighbor router configuration information.
    Neighbors Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal

    // Fast-reroute configuration.
    FastReroute Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute

    // Interface fallback cost.
    CostFallback Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback
}

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) GetFilter() yfilter.YFilter { return nameScope.YFilter }

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) SetFilter(yf yfilter.YFilter) { nameScope.YFilter = yf }

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "cost" { return "Cost" }
    if yname == "prefix-suppression-primary" { return "PrefixSuppressionPrimary" }
    if yname == "mtu-ignore" { return "MtuIgnore" }
    if yname == "ldp-sync-igp-shortcuts" { return "LdpSyncIgpShortcuts" }
    if yname == "ldp-auto-config" { return "LdpAutoConfig" }
    if yname == "network-type" { return "NetworkType" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "loopback-stub-network" { return "LoopbackStubNetwork" }
    if yname == "prefix-suppression-secondary" { return "PrefixSuppressionSecondary" }
    if yname == "demand-circuit" { return "DemandCircuit" }
    if yname == "passive" { return "Passive" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "packet-size" { return "PacketSize" }
    if yname == "ldp-sync" { return "LdpSync" }
    if yname == "database-filter" { return "DatabaseFilter" }
    if yname == "link-down-fast-detect" { return "LinkDownFastDetect" }
    if yname == "segment-routing-forwarding" { return "SegmentRoutingForwarding" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "priority" { return "Priority" }
    if yname == "flood-reduction" { return "FloodReduction" }
    if yname == "running" { return "Running" }
    if yname == "prefix-sid" { return "PrefixSid" }
    if yname == "prefix-sid-strict" { return "PrefixSidStrict" }
    if yname == "distribute-list" { return "DistributeList" }
    if yname == "bfd" { return "Bfd" }
    if yname == "authentication" { return "Authentication" }
    if yname == "security" { return "Security" }
    if yname == "neighbors" { return "Neighbors" }
    if yname == "dead-interval-minimal" { return "DeadIntervalMinimal" }
    if yname == "fast-reroute" { return "FastReroute" }
    if yname == "cost-fallback" { return "CostFallback" }
    return ""
}

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) GetSegmentPath() string {
    return "name-scope" + "[interface-name='" + fmt.Sprintf("%v", nameScope.InterfaceName) + "']"
}

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "prefix-sid" {
        return &nameScope.PrefixSid
    }
    if childYangName == "prefix-sid-strict" {
        return &nameScope.PrefixSidStrict
    }
    if childYangName == "distribute-list" {
        return &nameScope.DistributeList
    }
    if childYangName == "bfd" {
        return &nameScope.Bfd
    }
    if childYangName == "authentication" {
        return &nameScope.Authentication
    }
    if childYangName == "security" {
        return &nameScope.Security
    }
    if childYangName == "neighbors" {
        return &nameScope.Neighbors
    }
    if childYangName == "dead-interval-minimal" {
        return &nameScope.DeadIntervalMinimal
    }
    if childYangName == "fast-reroute" {
        return &nameScope.FastReroute
    }
    if childYangName == "cost-fallback" {
        return &nameScope.CostFallback
    }
    return nil
}

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["prefix-sid"] = &nameScope.PrefixSid
    children["prefix-sid-strict"] = &nameScope.PrefixSidStrict
    children["distribute-list"] = &nameScope.DistributeList
    children["bfd"] = &nameScope.Bfd
    children["authentication"] = &nameScope.Authentication
    children["security"] = &nameScope.Security
    children["neighbors"] = &nameScope.Neighbors
    children["dead-interval-minimal"] = &nameScope.DeadIntervalMinimal
    children["fast-reroute"] = &nameScope.FastReroute
    children["cost-fallback"] = &nameScope.CostFallback
    return children
}

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = nameScope.InterfaceName
    leafs["cost"] = nameScope.Cost
    leafs["prefix-suppression-primary"] = nameScope.PrefixSuppressionPrimary
    leafs["mtu-ignore"] = nameScope.MtuIgnore
    leafs["ldp-sync-igp-shortcuts"] = nameScope.LdpSyncIgpShortcuts
    leafs["ldp-auto-config"] = nameScope.LdpAutoConfig
    leafs["network-type"] = nameScope.NetworkType
    leafs["hello-interval"] = nameScope.HelloInterval
    leafs["loopback-stub-network"] = nameScope.LoopbackStubNetwork
    leafs["prefix-suppression-secondary"] = nameScope.PrefixSuppressionSecondary
    leafs["demand-circuit"] = nameScope.DemandCircuit
    leafs["passive"] = nameScope.Passive
    leafs["transmit-delay"] = nameScope.TransmitDelay
    leafs["packet-size"] = nameScope.PacketSize
    leafs["ldp-sync"] = nameScope.LdpSync
    leafs["database-filter"] = nameScope.DatabaseFilter
    leafs["link-down-fast-detect"] = nameScope.LinkDownFastDetect
    leafs["segment-routing-forwarding"] = nameScope.SegmentRoutingForwarding
    leafs["retransmit-interval"] = nameScope.RetransmitInterval
    leafs["priority"] = nameScope.Priority
    leafs["flood-reduction"] = nameScope.FloodReduction
    leafs["running"] = nameScope.Running
    return leafs
}

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) GetBundleName() string { return "cisco_ios_xr" }

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) GetYangName() string { return "name-scope" }

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) SetParent(parent types.Entity) { nameScope.parent = parent }

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) GetParent() types.Entity { return nameScope.parent }

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) GetParentYangName() string { return "name-scopes" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid
// Prefix SID
// This type is a presence type.
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SID value. The type is interface{} with range: 0..1048575. This attribute
    // is mandatory.
    SidValue interface{}

    // Force Penultimate Hop To Send Explicit-Null Label. The type is bool. The
    // default value is false.
    ExplicitNull interface{}

    // OSPF SID Type. The type is OspfSid. This attribute is mandatory.
    Type interface{}

    // Not a node SID. The type is bool. The default value is false.
    NFlagClear interface{}
}

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) GetFilter() yfilter.YFilter { return prefixSid.YFilter }

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) SetFilter(yf yfilter.YFilter) { prefixSid.YFilter = yf }

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) GetGoName(yname string) string {
    if yname == "sid-value" { return "SidValue" }
    if yname == "explicit-null" { return "ExplicitNull" }
    if yname == "type" { return "Type" }
    if yname == "n-flag-clear" { return "NFlagClear" }
    return ""
}

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) GetSegmentPath() string {
    return "prefix-sid"
}

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sid-value"] = prefixSid.SidValue
    leafs["explicit-null"] = prefixSid.ExplicitNull
    leafs["type"] = prefixSid.Type
    leafs["n-flag-clear"] = prefixSid.NFlagClear
    return leafs
}

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) GetBundleName() string { return "cisco_ios_xr" }

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) GetYangName() string { return "prefix-sid" }

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) SetParent(parent types.Entity) { prefixSid.parent = parent }

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) GetParent() types.Entity { return prefixSid.parent }

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict
// Strict Prefix SID
// This type is a presence type.
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SID value. The type is interface{} with range: 0..1048575. This attribute
    // is mandatory.
    SidValue interface{}

    // Force Penultimate Hop To Send Explicit-Null Label. The type is bool. The
    // default value is false.
    ExplicitNull interface{}

    // OSPF SID Type. The type is OspfSid. This attribute is mandatory.
    Type interface{}

    // Not a node SID. The type is bool. The default value is false.
    NFlagClear interface{}
}

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) GetFilter() yfilter.YFilter { return prefixSidStrict.YFilter }

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) SetFilter(yf yfilter.YFilter) { prefixSidStrict.YFilter = yf }

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) GetGoName(yname string) string {
    if yname == "sid-value" { return "SidValue" }
    if yname == "explicit-null" { return "ExplicitNull" }
    if yname == "type" { return "Type" }
    if yname == "n-flag-clear" { return "NFlagClear" }
    return ""
}

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) GetSegmentPath() string {
    return "prefix-sid-strict"
}

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sid-value"] = prefixSidStrict.SidValue
    leafs["explicit-null"] = prefixSidStrict.ExplicitNull
    leafs["type"] = prefixSidStrict.Type
    leafs["n-flag-clear"] = prefixSidStrict.NFlagClear
    return leafs
}

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) GetBundleName() string { return "cisco_ios_xr" }

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) GetYangName() string { return "prefix-sid-strict" }

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) SetParent(parent types.Entity) { prefixSidStrict.parent = parent }

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) GetParent() types.Entity { return prefixSidStrict.parent }

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList
// Filter networks intalled to RIB (disable as ACL
// name means filtering is disabled)
// This type is a presence type.
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Access Control List name. The type is string.
    AccessListName interface{}

    // Route Policy name. The type is string.
    RoutePolicyName interface{}
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) GetFilter() yfilter.YFilter { return distributeList.YFilter }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) SetFilter(yf yfilter.YFilter) { distributeList.YFilter = yf }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) GetGoName(yname string) string {
    if yname == "access-list-name" { return "AccessListName" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) GetSegmentPath() string {
    return "distribute-list"
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["access-list-name"] = distributeList.AccessListName
    leafs["route-policy-name"] = distributeList.RoutePolicyName
    return leafs
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) GetBundleName() string { return "cisco_ios_xr" }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) GetYangName() string { return "distribute-list" }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) SetParent(parent types.Entity) { distributeList.parent = parent }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) GetParent() types.Entity { return distributeList.parent }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd
// BFD configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hello interval for BFD sessions created by OSPF. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    Interval interface{}

    // Detection multiplier for BFD sessions created by OSPF. The type is
    // interface{} with range: 2..50.
    DetectionMultiplier interface{}

    // use of Bidirectional Forwarding Detection. The type is BfdEnableMode.
    FastDetectMode interface{}
}

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) GetFilter() yfilter.YFilter { return bfd.YFilter }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) SetFilter(yf yfilter.YFilter) { bfd.YFilter = yf }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "fast-detect-mode" { return "FastDetectMode" }
    return ""
}

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) GetSegmentPath() string {
    return "bfd"
}

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = bfd.Interval
    leafs["detection-multiplier"] = bfd.DetectionMultiplier
    leafs["fast-detect-mode"] = bfd.FastDetectMode
    return leafs
}

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) GetBundleName() string { return "cisco_ios_xr" }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) GetYangName() string { return "bfd" }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) SetParent(parent types.Entity) { bfd.parent = parent }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) GetParent() types.Entity { return bfd.parent }

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication
// Authentication
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // (!.+)|([^!].+).
    Key interface{}

    // Authentication type.
    Type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) GetGoName(yname string) string {
    if yname == "key" { return "Key" }
    if yname == "type" { return "Type" }
    if yname == "message-digest-keies" { return "MessageDigestKeies" }
    return ""
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "type" {
        return &authentication.Type
    }
    if childYangName == "message-digest-keies" {
        return &authentication.MessageDigestKeies
    }
    return nil
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["type"] = &authentication.Type
    children["message-digest-keies"] = &authentication.MessageDigestKeies
    return children
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key"] = authentication.Key
    return leafs
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) GetGoName(yname string) string {
    if yname == "authen-type" { return "AuthenType" }
    if yname == "keychain-authen-type" { return "KeychainAuthenType" }
    if yname == "keychain-name" { return "KeychainName" }
    return ""
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) GetSegmentPath() string {
    return "type"
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["authen-type"] = self.AuthenType
    leafs["keychain-authen-type"] = self.KeychainAuthenType
    leafs["keychain-name"] = self.KeychainName
    return leafs
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) GetYangName() string { return "type" }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) GetParent() types.Entity { return self.parent }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) GetFilter() yfilter.YFilter { return messageDigestKeies.YFilter }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) SetFilter(yf yfilter.YFilter) { messageDigestKeies.YFilter = yf }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) GetGoName(yname string) string {
    if yname == "message-digest-key" { return "MessageDigestKey" }
    return ""
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) GetSegmentPath() string {
    return "message-digest-keies"
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "message-digest-key" {
        for _, c := range messageDigestKeies.MessageDigestKey {
            if messageDigestKeies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey{}
        messageDigestKeies.MessageDigestKey = append(messageDigestKeies.MessageDigestKey, child)
        return &messageDigestKeies.MessageDigestKey[len(messageDigestKeies.MessageDigestKey)-1]
    }
    return nil
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range messageDigestKeies.MessageDigestKey {
        children[messageDigestKeies.MessageDigestKey[i].GetSegmentPath()] = &messageDigestKeies.MessageDigestKey[i]
    }
    return children
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) GetYangName() string { return "message-digest-keies" }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) SetParent(parent types.Entity) { messageDigestKeies.parent = parent }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) GetParent() types.Entity { return messageDigestKeies.parent }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: (!.+)|([^!].+). This attribute
    // is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetFilter() yfilter.YFilter { return messageDigestKey.YFilter }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) SetFilter(yf yfilter.YFilter) { messageDigestKey.YFilter = yf }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetGoName(yname string) string {
    if yname == "key-id" { return "KeyId" }
    if yname == "password" { return "Password" }
    return ""
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetSegmentPath() string {
    return "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key-id"] = messageDigestKey.KeyId
    leafs["password"] = messageDigestKey.Password
    return leafs
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetYangName() string { return "message-digest-key" }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) SetParent(parent types.Entity) { messageDigestKey.parent = parent }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParent() types.Entity { return messageDigestKey.parent }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParentYangName() string { return "message-digest-keies" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security
// Container class for security related
// configuration parameters
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enabling turns on TTL security.
    Ttl Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl
}

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) GetFilter() yfilter.YFilter { return security.YFilter }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) SetFilter(yf yfilter.YFilter) { security.YFilter = yf }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) GetGoName(yname string) string {
    if yname == "ttl" { return "Ttl" }
    return ""
}

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) GetSegmentPath() string {
    return "security"
}

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ttl" {
        return &security.Ttl
    }
    return nil
}

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ttl"] = &security.Ttl
    return children
}

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) GetBundleName() string { return "cisco_ios_xr" }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) GetYangName() string { return "security" }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) SetParent(parent types.Entity) { security.parent = parent }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) GetParent() types.Entity { return security.parent }

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl
// Enabling turns on TTL security
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable TTL security. The type is bool.
    Enable interface{}

    // Hop count. The type is interface{} with range: 1..254.
    HopCount interface{}
}

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) GetFilter() yfilter.YFilter { return ttl.YFilter }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) SetFilter(yf yfilter.YFilter) { ttl.YFilter = yf }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "hop-count" { return "HopCount" }
    return ""
}

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) GetSegmentPath() string {
    return "ttl"
}

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = ttl.Enable
    leafs["hop-count"] = ttl.HopCount
    return leafs
}

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) GetBundleName() string { return "cisco_ios_xr" }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) GetYangName() string { return "ttl" }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) SetParent(parent types.Entity) { ttl.parent = parent }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) GetParent() types.Entity { return ttl.parent }

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) GetParentYangName() string { return "security" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors
// Neighbor router configuration information
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router configuration information for a particular neighbor. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor.
    Neighbor []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor
}

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) GetFilter() yfilter.YFilter { return neighbors.YFilter }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) SetFilter(yf yfilter.YFilter) { neighbors.YFilter = yf }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) GetGoName(yname string) string {
    if yname == "neighbor" { return "Neighbor" }
    return ""
}

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) GetSegmentPath() string {
    return "neighbors"
}

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor" {
        for _, c := range neighbors.Neighbor {
            if neighbors.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor{}
        neighbors.Neighbor = append(neighbors.Neighbor, child)
        return &neighbors.Neighbor[len(neighbors.Neighbor)-1]
    }
    return nil
}

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range neighbors.Neighbor {
        children[neighbors.Neighbor[i].GetSegmentPath()] = &neighbors.Neighbor[i]
    }
    return children
}

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) GetBundleName() string { return "cisco_ios_xr" }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) GetYangName() string { return "neighbors" }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) SetParent(parent types.Entity) { neighbors.parent = parent }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) GetParent() types.Entity { return neighbors.parent }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor
// Router configuration information for a
// particular neighbor
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Neighbor IP address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // OSPF priority of non-broadcast neighbor. The type is interface{} with
    // range: 0..255. The default value is 0.
    Priority interface{}

    // OSPF dead router poll-interval in seconds. The type is interface{} with
    // range: 0..65535. Units are second. The default value is 40.
    PollInterval interface{}

    // OSPF cost for point-to-multipoint neighbor. The type is interface{} with
    // range: 1..65535. The default value is 1.
    Cost interface{}

    // Database filter: Filter OSPF LSA during synchronization and flooding for
    // point-to-multipoint. The type is bool. The default value is false.
    DatabaseFilter interface{}
}

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) GetFilter() yfilter.YFilter { return neighbor.YFilter }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) SetFilter(yf yfilter.YFilter) { neighbor.YFilter = yf }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) GetGoName(yname string) string {
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "priority" { return "Priority" }
    if yname == "poll-interval" { return "PollInterval" }
    if yname == "cost" { return "Cost" }
    if yname == "database-filter" { return "DatabaseFilter" }
    return ""
}

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) GetSegmentPath() string {
    return "neighbor" + "[neighbor-address='" + fmt.Sprintf("%v", neighbor.NeighborAddress) + "']"
}

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-address"] = neighbor.NeighborAddress
    leafs["priority"] = neighbor.Priority
    leafs["poll-interval"] = neighbor.PollInterval
    leafs["cost"] = neighbor.Cost
    leafs["database-filter"] = neighbor.DatabaseFilter
    return leafs
}

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) GetBundleName() string { return "cisco_ios_xr" }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) GetYangName() string { return "neighbor" }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) SetParent(parent types.Entity) { neighbor.parent = parent }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) GetParent() types.Entity { return neighbor.parent }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) GetParentYangName() string { return "neighbors" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) GetFilter() yfilter.YFilter { return deadIntervalMinimal.YFilter }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) SetFilter(yf yfilter.YFilter) { deadIntervalMinimal.YFilter = yf }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "multiplier" { return "Multiplier" }
    return ""
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) GetSegmentPath() string {
    return "dead-interval-minimal"
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = deadIntervalMinimal.Interval
    leafs["multiplier"] = deadIntervalMinimal.Multiplier
    return leafs
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) GetBundleName() string { return "cisco_ios_xr" }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) GetYangName() string { return "dead-interval-minimal" }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) SetParent(parent types.Entity) { deadIntervalMinimal.parent = parent }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) GetParent() types.Entity { return deadIntervalMinimal.parent }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute
// Fast-reroute configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // OspfFastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink

    // Fast-reroute per-prefix global configuration.
    PerPrefix Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) GetGoName(yname string) string {
    if yname == "fast-reroute-enable" { return "FastRerouteEnable" }
    if yname == "per-link" { return "PerLink" }
    if yname == "per-prefix" { return "PerPrefix" }
    return ""
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "per-link" {
        return &fastReroute.PerLink
    }
    if childYangName == "per-prefix" {
        return &fastReroute.PerPrefix
    }
    return nil
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["per-link"] = &fastReroute.PerLink
    children["per-prefix"] = &fastReroute.PerPrefix
    return children
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-enable"] = fastReroute.FastRerouteEnable
    return leafs
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) GetFilter() yfilter.YFilter { return perLink.YFilter }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) SetFilter(yf yfilter.YFilter) { perLink.YFilter = yf }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) GetSegmentPath() string {
    return "per-link"
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perLink.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perLink.ExcludeInterfaces
    }
    return nil
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perLink.CandidateInterfaces
    children["exclude-interfaces"] = &perLink.ExcludeInterfaces
    return children
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perLink.FastRerouteUseCandidateOnly
    return leafs
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) GetBundleName() string { return "cisco_ios_xr" }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) GetYangName() string { return "per-link" }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) SetParent(parent types.Entity) { perLink.parent = parent }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) GetParent() types.Entity { return perLink.parent }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetParentYangName() string { return "per-link" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetParentYangName() string { return "per-link" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix
// Fast-reroute per-prefix global configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Topology Independet LFA configuration. The type is bool.
    TopologyIndependentLfa interface{}

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Remote LFA configuration.
    RemoteLfa Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa

    // Fast-reroute tiebreakers configurations.
    Tiebreakers Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) GetFilter() yfilter.YFilter { return perPrefix.YFilter }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) SetFilter(yf yfilter.YFilter) { perPrefix.YFilter = yf }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) GetGoName(yname string) string {
    if yname == "topology-independent-lfa" { return "TopologyIndependentLfa" }
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "remote-lfa" { return "RemoteLfa" }
    if yname == "tiebreakers" { return "Tiebreakers" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) GetSegmentPath() string {
    return "per-prefix"
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-lfa" {
        return &perPrefix.RemoteLfa
    }
    if childYangName == "tiebreakers" {
        return &perPrefix.Tiebreakers
    }
    if childYangName == "candidate-interfaces" {
        return &perPrefix.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perPrefix.ExcludeInterfaces
    }
    return nil
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["remote-lfa"] = &perPrefix.RemoteLfa
    children["tiebreakers"] = &perPrefix.Tiebreakers
    children["candidate-interfaces"] = &perPrefix.CandidateInterfaces
    children["exclude-interfaces"] = &perPrefix.ExcludeInterfaces
    return children
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["topology-independent-lfa"] = perPrefix.TopologyIndependentLfa
    leafs["fast-reroute-use-candidate-only"] = perPrefix.FastRerouteUseCandidateOnly
    return leafs
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) GetYangName() string { return "per-prefix" }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) SetParent(parent types.Entity) { perPrefix.parent = parent }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) GetParent() types.Entity { return perPrefix.parent }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa
// Remote LFA configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable remote LFA computation. The type is OspfFrrRlfaTunnel.
    Tunnel interface{}

    // Maximum path cost to remote LFA. The type is interface{} with range:
    // 1..4294967295.
    MaximumCost interface{}
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetFilter() yfilter.YFilter { return remoteLfa.YFilter }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) SetFilter(yf yfilter.YFilter) { remoteLfa.YFilter = yf }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetGoName(yname string) string {
    if yname == "tunnel" { return "Tunnel" }
    if yname == "maximum-cost" { return "MaximumCost" }
    return ""
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetSegmentPath() string {
    return "remote-lfa"
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel"] = remoteLfa.Tunnel
    leafs["maximum-cost"] = remoteLfa.MaximumCost
    return leafs
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetBundleName() string { return "cisco_ios_xr" }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetYangName() string { return "remote-lfa" }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) SetParent(parent types.Entity) { remoteLfa.parent = parent }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetParent() types.Entity { return remoteLfa.parent }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers
// Fast-reroute tiebreakers configurations
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fast-reroute tiebreakers configuration. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker.
    Tiebreaker []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetFilter() yfilter.YFilter { return tiebreakers.YFilter }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) SetFilter(yf yfilter.YFilter) { tiebreakers.YFilter = yf }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetGoName(yname string) string {
    if yname == "tiebreaker" { return "Tiebreaker" }
    return ""
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetSegmentPath() string {
    return "tiebreakers"
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tiebreaker" {
        for _, c := range tiebreakers.Tiebreaker {
            if tiebreakers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker{}
        tiebreakers.Tiebreaker = append(tiebreakers.Tiebreaker, child)
        return &tiebreakers.Tiebreaker[len(tiebreakers.Tiebreaker)-1]
    }
    return nil
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range tiebreakers.Tiebreaker {
        children[tiebreakers.Tiebreaker[i].GetSegmentPath()] = &tiebreakers.Tiebreaker[i]
    }
    return children
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetYangName() string { return "tiebreakers" }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) SetParent(parent types.Entity) { tiebreakers.parent = parent }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetParent() types.Entity { return tiebreakers.parent }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
// Fast-reroute tiebreakers configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Tiebreaker type. The type is
    // OspfFastRerouteTiebreakersIntf.
    TiebreakerType interface{}

    // Index value for a tiebreaker, 0 to disable. The type is interface{} with
    // range: 0..255. This attribute is mandatory.
    TiebreakerIndex interface{}
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetFilter() yfilter.YFilter { return tiebreaker.YFilter }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetFilter(yf yfilter.YFilter) { tiebreaker.YFilter = yf }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetGoName(yname string) string {
    if yname == "tiebreaker-type" { return "TiebreakerType" }
    if yname == "tiebreaker-index" { return "TiebreakerIndex" }
    return ""
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetSegmentPath() string {
    return "tiebreaker" + "[tiebreaker-type='" + fmt.Sprintf("%v", tiebreaker.TiebreakerType) + "']"
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tiebreaker-type"] = tiebreaker.TiebreakerType
    leafs["tiebreaker-index"] = tiebreaker.TiebreakerIndex
    return leafs
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetYangName() string { return "tiebreaker" }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetParent(parent types.Entity) { tiebreaker.parent = parent }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParent() types.Entity { return tiebreaker.parent }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParentYangName() string { return "tiebreakers" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback
// Interface fallback cost
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fallback cost of link. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Bandwidth threshold. The type is interface{} with range: 1..4294967.
    Threshold interface{}
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) GetFilter() yfilter.YFilter { return costFallback.YFilter }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) SetFilter(yf yfilter.YFilter) { costFallback.YFilter = yf }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) GetGoName(yname string) string {
    if yname == "cost" { return "Cost" }
    if yname == "threshold" { return "Threshold" }
    return ""
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) GetSegmentPath() string {
    return "cost-fallback"
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cost"] = costFallback.Cost
    leafs["threshold"] = costFallback.Threshold
    return leafs
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) GetBundleName() string { return "cisco_ios_xr" }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) GetYangName() string { return "cost-fallback" }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) SetParent(parent types.Entity) { costFallback.parent = parent }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) GetParent() types.Entity { return costFallback.parent }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) GetParentYangName() string { return "name-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes
// Multi Area Interface scope configurations
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Multi Area Interface configuration. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope.
    MultiAreaInterfaceScope []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope
}

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) GetFilter() yfilter.YFilter { return multiAreaInterfaceScopes.YFilter }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) SetFilter(yf yfilter.YFilter) { multiAreaInterfaceScopes.YFilter = yf }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) GetGoName(yname string) string {
    if yname == "multi-area-interface-scope" { return "MultiAreaInterfaceScope" }
    return ""
}

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) GetSegmentPath() string {
    return "multi-area-interface-scopes"
}

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "multi-area-interface-scope" {
        for _, c := range multiAreaInterfaceScopes.MultiAreaInterfaceScope {
            if multiAreaInterfaceScopes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope{}
        multiAreaInterfaceScopes.MultiAreaInterfaceScope = append(multiAreaInterfaceScopes.MultiAreaInterfaceScope, child)
        return &multiAreaInterfaceScopes.MultiAreaInterfaceScope[len(multiAreaInterfaceScopes.MultiAreaInterfaceScope)-1]
    }
    return nil
}

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range multiAreaInterfaceScopes.MultiAreaInterfaceScope {
        children[multiAreaInterfaceScopes.MultiAreaInterfaceScope[i].GetSegmentPath()] = &multiAreaInterfaceScopes.MultiAreaInterfaceScope[i]
    }
    return children
}

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) GetBundleName() string { return "cisco_ios_xr" }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) GetYangName() string { return "multi-area-interface-scopes" }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) SetParent(parent types.Entity) { multiAreaInterfaceScopes.parent = parent }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) GetParent() types.Entity { return multiAreaInterfaceScopes.parent }

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) GetParentYangName() string { return "area-area-id" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope
// Multi Area Interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of Multi Area Interface to configure. The
    // type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Enable/Disable ignoring of MTU in DBD packets. The type is bool. The
    // default value is false.
    MtuIgnore interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // When enabled, prevent sending HELLO packets over link. The type is bool.
    // The default value is false.
    Passive interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Customize size of OSPF packets upto MTU. The type is interface{} with
    // range: 576..10000.
    PacketSize interface{}

    // Filter OSPF LSA during synchronization and flooding. The type is bool. The
    // default value is false.
    DatabaseFilter interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Filter networks intalled to RIB (disable as ACL name means filtering is
    // disabled).
    DistributeList Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList

    // Authentication.
    Authentication Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication

    // Neighbor router configuration information.
    Neighbors Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal

    // Fast-reroute configuration.
    FastReroute Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute

    // Interface fallback cost.
    CostFallback Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback
}

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetFilter() yfilter.YFilter { return multiAreaInterfaceScope.YFilter }

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) SetFilter(yf yfilter.YFilter) { multiAreaInterfaceScope.YFilter = yf }

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "cost" { return "Cost" }
    if yname == "mtu-ignore" { return "MtuIgnore" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "passive" { return "Passive" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "packet-size" { return "PacketSize" }
    if yname == "database-filter" { return "DatabaseFilter" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "running" { return "Running" }
    if yname == "distribute-list" { return "DistributeList" }
    if yname == "authentication" { return "Authentication" }
    if yname == "neighbors" { return "Neighbors" }
    if yname == "dead-interval-minimal" { return "DeadIntervalMinimal" }
    if yname == "fast-reroute" { return "FastReroute" }
    if yname == "cost-fallback" { return "CostFallback" }
    return ""
}

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetSegmentPath() string {
    return "multi-area-interface-scope" + "[interface-name='" + fmt.Sprintf("%v", multiAreaInterfaceScope.InterfaceName) + "']"
}

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "distribute-list" {
        return &multiAreaInterfaceScope.DistributeList
    }
    if childYangName == "authentication" {
        return &multiAreaInterfaceScope.Authentication
    }
    if childYangName == "neighbors" {
        return &multiAreaInterfaceScope.Neighbors
    }
    if childYangName == "dead-interval-minimal" {
        return &multiAreaInterfaceScope.DeadIntervalMinimal
    }
    if childYangName == "fast-reroute" {
        return &multiAreaInterfaceScope.FastReroute
    }
    if childYangName == "cost-fallback" {
        return &multiAreaInterfaceScope.CostFallback
    }
    return nil
}

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["distribute-list"] = &multiAreaInterfaceScope.DistributeList
    children["authentication"] = &multiAreaInterfaceScope.Authentication
    children["neighbors"] = &multiAreaInterfaceScope.Neighbors
    children["dead-interval-minimal"] = &multiAreaInterfaceScope.DeadIntervalMinimal
    children["fast-reroute"] = &multiAreaInterfaceScope.FastReroute
    children["cost-fallback"] = &multiAreaInterfaceScope.CostFallback
    return children
}

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = multiAreaInterfaceScope.InterfaceName
    leafs["cost"] = multiAreaInterfaceScope.Cost
    leafs["mtu-ignore"] = multiAreaInterfaceScope.MtuIgnore
    leafs["hello-interval"] = multiAreaInterfaceScope.HelloInterval
    leafs["passive"] = multiAreaInterfaceScope.Passive
    leafs["transmit-delay"] = multiAreaInterfaceScope.TransmitDelay
    leafs["packet-size"] = multiAreaInterfaceScope.PacketSize
    leafs["database-filter"] = multiAreaInterfaceScope.DatabaseFilter
    leafs["retransmit-interval"] = multiAreaInterfaceScope.RetransmitInterval
    leafs["running"] = multiAreaInterfaceScope.Running
    return leafs
}

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetBundleName() string { return "cisco_ios_xr" }

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetYangName() string { return "multi-area-interface-scope" }

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) SetParent(parent types.Entity) { multiAreaInterfaceScope.parent = parent }

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetParent() types.Entity { return multiAreaInterfaceScope.parent }

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetParentYangName() string { return "multi-area-interface-scopes" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList
// Filter networks intalled to RIB (disable as ACL
// name means filtering is disabled)
// This type is a presence type.
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Access Control List name. The type is string.
    AccessListName interface{}

    // Route Policy name. The type is string.
    RoutePolicyName interface{}
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetFilter() yfilter.YFilter { return distributeList.YFilter }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) SetFilter(yf yfilter.YFilter) { distributeList.YFilter = yf }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetGoName(yname string) string {
    if yname == "access-list-name" { return "AccessListName" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetSegmentPath() string {
    return "distribute-list"
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["access-list-name"] = distributeList.AccessListName
    leafs["route-policy-name"] = distributeList.RoutePolicyName
    return leafs
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetBundleName() string { return "cisco_ios_xr" }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetYangName() string { return "distribute-list" }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) SetParent(parent types.Entity) { distributeList.parent = parent }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetParent() types.Entity { return distributeList.parent }

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetParentYangName() string { return "multi-area-interface-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication
// Authentication
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // (!.+)|([^!].+).
    Key interface{}

    // Authentication type.
    Type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetGoName(yname string) string {
    if yname == "key" { return "Key" }
    if yname == "type" { return "Type" }
    if yname == "message-digest-keies" { return "MessageDigestKeies" }
    return ""
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "type" {
        return &authentication.Type
    }
    if childYangName == "message-digest-keies" {
        return &authentication.MessageDigestKeies
    }
    return nil
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["type"] = &authentication.Type
    children["message-digest-keies"] = &authentication.MessageDigestKeies
    return children
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key"] = authentication.Key
    return leafs
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetParentYangName() string { return "multi-area-interface-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetGoName(yname string) string {
    if yname == "authen-type" { return "AuthenType" }
    if yname == "keychain-authen-type" { return "KeychainAuthenType" }
    if yname == "keychain-name" { return "KeychainName" }
    return ""
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetSegmentPath() string {
    return "type"
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["authen-type"] = self.AuthenType
    leafs["keychain-authen-type"] = self.KeychainAuthenType
    leafs["keychain-name"] = self.KeychainName
    return leafs
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetYangName() string { return "type" }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetParent() types.Entity { return self.parent }

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetFilter() yfilter.YFilter { return messageDigestKeies.YFilter }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) SetFilter(yf yfilter.YFilter) { messageDigestKeies.YFilter = yf }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetGoName(yname string) string {
    if yname == "message-digest-key" { return "MessageDigestKey" }
    return ""
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetSegmentPath() string {
    return "message-digest-keies"
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "message-digest-key" {
        for _, c := range messageDigestKeies.MessageDigestKey {
            if messageDigestKeies.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey{}
        messageDigestKeies.MessageDigestKey = append(messageDigestKeies.MessageDigestKey, child)
        return &messageDigestKeies.MessageDigestKey[len(messageDigestKeies.MessageDigestKey)-1]
    }
    return nil
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range messageDigestKeies.MessageDigestKey {
        children[messageDigestKeies.MessageDigestKey[i].GetSegmentPath()] = &messageDigestKeies.MessageDigestKey[i]
    }
    return children
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetYangName() string { return "message-digest-keies" }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) SetParent(parent types.Entity) { messageDigestKeies.parent = parent }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetParent() types.Entity { return messageDigestKeies.parent }

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetParentYangName() string { return "authentication" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: (!.+)|([^!].+). This attribute
    // is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetFilter() yfilter.YFilter { return messageDigestKey.YFilter }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) SetFilter(yf yfilter.YFilter) { messageDigestKey.YFilter = yf }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetGoName(yname string) string {
    if yname == "key-id" { return "KeyId" }
    if yname == "password" { return "Password" }
    return ""
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetSegmentPath() string {
    return "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key-id"] = messageDigestKey.KeyId
    leafs["password"] = messageDigestKey.Password
    return leafs
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleName() string { return "cisco_ios_xr" }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetYangName() string { return "message-digest-key" }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) SetParent(parent types.Entity) { messageDigestKey.parent = parent }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParent() types.Entity { return messageDigestKey.parent }

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetParentYangName() string { return "message-digest-keies" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors
// Neighbor router configuration information
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router configuration information for a particular neighbor. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor.
    Neighbor []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor
}

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetFilter() yfilter.YFilter { return neighbors.YFilter }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) SetFilter(yf yfilter.YFilter) { neighbors.YFilter = yf }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetGoName(yname string) string {
    if yname == "neighbor" { return "Neighbor" }
    return ""
}

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetSegmentPath() string {
    return "neighbors"
}

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor" {
        for _, c := range neighbors.Neighbor {
            if neighbors.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor{}
        neighbors.Neighbor = append(neighbors.Neighbor, child)
        return &neighbors.Neighbor[len(neighbors.Neighbor)-1]
    }
    return nil
}

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range neighbors.Neighbor {
        children[neighbors.Neighbor[i].GetSegmentPath()] = &neighbors.Neighbor[i]
    }
    return children
}

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetBundleName() string { return "cisco_ios_xr" }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetYangName() string { return "neighbors" }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) SetParent(parent types.Entity) { neighbors.parent = parent }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetParent() types.Entity { return neighbors.parent }

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetParentYangName() string { return "multi-area-interface-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor
// Router configuration information for a
// particular neighbor
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Neighbor IP address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // OSPF priority of non-broadcast neighbor. The type is interface{} with
    // range: 0..255. The default value is 0.
    Priority interface{}

    // OSPF dead router poll-interval in seconds. The type is interface{} with
    // range: 0..65535. Units are second. The default value is 40.
    PollInterval interface{}

    // OSPF cost for point-to-multipoint neighbor. The type is interface{} with
    // range: 1..65535. The default value is 1.
    Cost interface{}

    // Database filter: Filter OSPF LSA during synchronization and flooding for
    // point-to-multipoint. The type is bool. The default value is false.
    DatabaseFilter interface{}
}

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetFilter() yfilter.YFilter { return neighbor.YFilter }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) SetFilter(yf yfilter.YFilter) { neighbor.YFilter = yf }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetGoName(yname string) string {
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "priority" { return "Priority" }
    if yname == "poll-interval" { return "PollInterval" }
    if yname == "cost" { return "Cost" }
    if yname == "database-filter" { return "DatabaseFilter" }
    return ""
}

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetSegmentPath() string {
    return "neighbor" + "[neighbor-address='" + fmt.Sprintf("%v", neighbor.NeighborAddress) + "']"
}

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-address"] = neighbor.NeighborAddress
    leafs["priority"] = neighbor.Priority
    leafs["poll-interval"] = neighbor.PollInterval
    leafs["cost"] = neighbor.Cost
    leafs["database-filter"] = neighbor.DatabaseFilter
    return leafs
}

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetBundleName() string { return "cisco_ios_xr" }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetYangName() string { return "neighbor" }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) SetParent(parent types.Entity) { neighbor.parent = parent }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetParent() types.Entity { return neighbor.parent }

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetParentYangName() string { return "neighbors" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetFilter() yfilter.YFilter { return deadIntervalMinimal.YFilter }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) SetFilter(yf yfilter.YFilter) { deadIntervalMinimal.YFilter = yf }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "multiplier" { return "Multiplier" }
    return ""
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetSegmentPath() string {
    return "dead-interval-minimal"
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = deadIntervalMinimal.Interval
    leafs["multiplier"] = deadIntervalMinimal.Multiplier
    return leafs
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetBundleName() string { return "cisco_ios_xr" }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetYangName() string { return "dead-interval-minimal" }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) SetParent(parent types.Entity) { deadIntervalMinimal.parent = parent }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetParent() types.Entity { return deadIntervalMinimal.parent }

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetParentYangName() string { return "multi-area-interface-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute
// Fast-reroute configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // OspfFastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink

    // Fast-reroute per-prefix global configuration.
    PerPrefix Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetGoName(yname string) string {
    if yname == "fast-reroute-enable" { return "FastRerouteEnable" }
    if yname == "per-link" { return "PerLink" }
    if yname == "per-prefix" { return "PerPrefix" }
    return ""
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "per-link" {
        return &fastReroute.PerLink
    }
    if childYangName == "per-prefix" {
        return &fastReroute.PerPrefix
    }
    return nil
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["per-link"] = &fastReroute.PerLink
    children["per-prefix"] = &fastReroute.PerPrefix
    return children
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-enable"] = fastReroute.FastRerouteEnable
    return leafs
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetParentYangName() string { return "multi-area-interface-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetFilter() yfilter.YFilter { return perLink.YFilter }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) SetFilter(yf yfilter.YFilter) { perLink.YFilter = yf }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetSegmentPath() string {
    return "per-link"
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perLink.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perLink.ExcludeInterfaces
    }
    return nil
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perLink.CandidateInterfaces
    children["exclude-interfaces"] = &perLink.ExcludeInterfaces
    return children
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perLink.FastRerouteUseCandidateOnly
    return leafs
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetBundleName() string { return "cisco_ios_xr" }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetYangName() string { return "per-link" }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) SetParent(parent types.Entity) { perLink.parent = parent }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetParent() types.Entity { return perLink.parent }

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetParentYangName() string { return "per-link" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetParentYangName() string { return "per-link" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix
// Fast-reroute per-prefix global configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Topology Independet LFA configuration. The type is bool.
    TopologyIndependentLfa interface{}

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Remote LFA configuration.
    RemoteLfa Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa

    // Fast-reroute tiebreakers configurations.
    Tiebreakers Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetFilter() yfilter.YFilter { return perPrefix.YFilter }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) SetFilter(yf yfilter.YFilter) { perPrefix.YFilter = yf }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetGoName(yname string) string {
    if yname == "topology-independent-lfa" { return "TopologyIndependentLfa" }
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "remote-lfa" { return "RemoteLfa" }
    if yname == "tiebreakers" { return "Tiebreakers" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetSegmentPath() string {
    return "per-prefix"
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-lfa" {
        return &perPrefix.RemoteLfa
    }
    if childYangName == "tiebreakers" {
        return &perPrefix.Tiebreakers
    }
    if childYangName == "candidate-interfaces" {
        return &perPrefix.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perPrefix.ExcludeInterfaces
    }
    return nil
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["remote-lfa"] = &perPrefix.RemoteLfa
    children["tiebreakers"] = &perPrefix.Tiebreakers
    children["candidate-interfaces"] = &perPrefix.CandidateInterfaces
    children["exclude-interfaces"] = &perPrefix.ExcludeInterfaces
    return children
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["topology-independent-lfa"] = perPrefix.TopologyIndependentLfa
    leafs["fast-reroute-use-candidate-only"] = perPrefix.FastRerouteUseCandidateOnly
    return leafs
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetYangName() string { return "per-prefix" }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) SetParent(parent types.Entity) { perPrefix.parent = parent }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetParent() types.Entity { return perPrefix.parent }

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetParentYangName() string { return "fast-reroute" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa
// Remote LFA configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable remote LFA computation. The type is OspfFrrRlfaTunnel.
    Tunnel interface{}

    // Maximum path cost to remote LFA. The type is interface{} with range:
    // 1..4294967295.
    MaximumCost interface{}
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetFilter() yfilter.YFilter { return remoteLfa.YFilter }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) SetFilter(yf yfilter.YFilter) { remoteLfa.YFilter = yf }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetGoName(yname string) string {
    if yname == "tunnel" { return "Tunnel" }
    if yname == "maximum-cost" { return "MaximumCost" }
    return ""
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetSegmentPath() string {
    return "remote-lfa"
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel"] = remoteLfa.Tunnel
    leafs["maximum-cost"] = remoteLfa.MaximumCost
    return leafs
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetBundleName() string { return "cisco_ios_xr" }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetYangName() string { return "remote-lfa" }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) SetParent(parent types.Entity) { remoteLfa.parent = parent }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetParent() types.Entity { return remoteLfa.parent }

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers
// Fast-reroute tiebreakers configurations
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fast-reroute tiebreakers configuration. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker.
    Tiebreaker []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetFilter() yfilter.YFilter { return tiebreakers.YFilter }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) SetFilter(yf yfilter.YFilter) { tiebreakers.YFilter = yf }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetGoName(yname string) string {
    if yname == "tiebreaker" { return "Tiebreaker" }
    return ""
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetSegmentPath() string {
    return "tiebreakers"
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tiebreaker" {
        for _, c := range tiebreakers.Tiebreaker {
            if tiebreakers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker{}
        tiebreakers.Tiebreaker = append(tiebreakers.Tiebreaker, child)
        return &tiebreakers.Tiebreaker[len(tiebreakers.Tiebreaker)-1]
    }
    return nil
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range tiebreakers.Tiebreaker {
        children[tiebreakers.Tiebreaker[i].GetSegmentPath()] = &tiebreakers.Tiebreaker[i]
    }
    return children
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetYangName() string { return "tiebreakers" }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) SetParent(parent types.Entity) { tiebreakers.parent = parent }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetParent() types.Entity { return tiebreakers.parent }

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
// Fast-reroute tiebreakers configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Tiebreaker type. The type is
    // OspfFastRerouteTiebreakersIntf.
    TiebreakerType interface{}

    // Index value for a tiebreaker, 0 to disable. The type is interface{} with
    // range: 0..255. This attribute is mandatory.
    TiebreakerIndex interface{}
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetFilter() yfilter.YFilter { return tiebreaker.YFilter }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetFilter(yf yfilter.YFilter) { tiebreaker.YFilter = yf }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetGoName(yname string) string {
    if yname == "tiebreaker-type" { return "TiebreakerType" }
    if yname == "tiebreaker-index" { return "TiebreakerIndex" }
    return ""
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetSegmentPath() string {
    return "tiebreaker" + "[tiebreaker-type='" + fmt.Sprintf("%v", tiebreaker.TiebreakerType) + "']"
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tiebreaker-type"] = tiebreaker.TiebreakerType
    leafs["tiebreaker-index"] = tiebreaker.TiebreakerIndex
    return leafs
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetYangName() string { return "tiebreaker" }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetParent(parent types.Entity) { tiebreaker.parent = parent }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParent() types.Entity { return tiebreaker.parent }

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParentYangName() string { return "tiebreakers" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback
// Interface fallback cost
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fallback cost of link. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Bandwidth threshold. The type is interface{} with range: 1..4294967.
    Threshold interface{}
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetFilter() yfilter.YFilter { return costFallback.YFilter }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) SetFilter(yf yfilter.YFilter) { costFallback.YFilter = yf }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetGoName(yname string) string {
    if yname == "cost" { return "Cost" }
    if yname == "threshold" { return "Threshold" }
    return ""
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetSegmentPath() string {
    return "cost-fallback"
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cost"] = costFallback.Cost
    leafs["threshold"] = costFallback.Threshold
    return leafs
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetBundleName() string { return "cisco_ios_xr" }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetYangName() string { return "cost-fallback" }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) SetParent(parent types.Entity) { costFallback.parent = parent }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetParent() types.Entity { return costFallback.parent }

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetParentYangName() string { return "multi-area-interface-scope" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges
// Summarize routes matching address/mask (border
// routers only)
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Ordering index. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange.
    AreaRange []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange
}

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges) GetFilter() yfilter.YFilter { return areaRanges.YFilter }

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges) SetFilter(yf yfilter.YFilter) { areaRanges.YFilter = yf }

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges) GetGoName(yname string) string {
    if yname == "area-range" { return "AreaRange" }
    return ""
}

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges) GetSegmentPath() string {
    return "area-ranges"
}

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "area-range" {
        for _, c := range areaRanges.AreaRange {
            if areaRanges.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange{}
        areaRanges.AreaRange = append(areaRanges.AreaRange, child)
        return &areaRanges.AreaRange[len(areaRanges.AreaRange)-1]
    }
    return nil
}

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range areaRanges.AreaRange {
        children[areaRanges.AreaRange[i].GetSegmentPath()] = &areaRanges.AreaRange[i]
    }
    return children
}

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges) GetBundleName() string { return "cisco_ios_xr" }

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges) GetYangName() string { return "area-ranges" }

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges) SetParent(parent types.Entity) { areaRanges.parent = parent }

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges) GetParent() types.Entity { return areaRanges.parent }

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges) GetParentYangName() string { return "area-area-id" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange
// Ordering index
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IP address to match. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // This attribute is a key. IP netmask for address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Netmask interface{}

    // Do not advertise this range. The type is bool.
    NotAdvertise interface{}
}

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) GetFilter() yfilter.YFilter { return areaRange.YFilter }

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) SetFilter(yf yfilter.YFilter) { areaRange.YFilter = yf }

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "netmask" { return "Netmask" }
    if yname == "not-advertise" { return "NotAdvertise" }
    return ""
}

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) GetSegmentPath() string {
    return "area-range" + "[address='" + fmt.Sprintf("%v", areaRange.Address) + "']" + "[netmask='" + fmt.Sprintf("%v", areaRange.Netmask) + "']"
}

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = areaRange.Address
    leafs["netmask"] = areaRange.Netmask
    leafs["not-advertise"] = areaRange.NotAdvertise
    return leafs
}

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) GetBundleName() string { return "cisco_ios_xr" }

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) GetYangName() string { return "area-range" }

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) SetParent(parent types.Entity) { areaRange.parent = parent }

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) GetParent() types.Entity { return areaRange.parent }

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) GetParentYangName() string { return "area-ranges" }

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa
// Specify area as a NSSA area
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // No redistribution into this NSSA area. The type is bool. The default value
    // is false.
    NoRedistribution interface{}

    // Originate Type 7 default into NSSA area. The type is bool. The default
    // value is false.
    DefaultInfoOriginate interface{}

    // Do not send summary LSA into NSSA. The type is bool. The default value is
    // false.
    NoSummary interface{}

    // OSPF default metric. The type is interface{} with range: 1..16777214.
    NssaDefMetric interface{}

    // OSPF External metric type. The type is OspfLinkStateMetric. The default
    // value is type2.
    MetricType interface{}
}

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa) GetFilter() yfilter.YFilter { return nssa.YFilter }

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa) SetFilter(yf yfilter.YFilter) { nssa.YFilter = yf }

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa) GetGoName(yname string) string {
    if yname == "no-redistribution" { return "NoRedistribution" }
    if yname == "default-info-originate" { return "DefaultInfoOriginate" }
    if yname == "no-summary" { return "NoSummary" }
    if yname == "nssa-def-metric" { return "NssaDefMetric" }
    if yname == "metric-type" { return "MetricType" }
    return ""
}

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa) GetSegmentPath() string {
    return "nssa"
}

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["no-redistribution"] = nssa.NoRedistribution
    leafs["default-info-originate"] = nssa.DefaultInfoOriginate
    leafs["no-summary"] = nssa.NoSummary
    leafs["nssa-def-metric"] = nssa.NssaDefMetric
    leafs["metric-type"] = nssa.MetricType
    return leafs
}

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa) GetBundleName() string { return "cisco_ios_xr" }

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa) GetYangName() string { return "nssa" }

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa) SetParent(parent types.Entity) { nssa.parent = parent }

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa) GetParent() types.Entity { return nssa.parent }

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa) GetParentYangName() string { return "area-area-id" }

// Ospf_Processes_Process_DefaultVrf_Timers
// Adjust routing timers
type Ospf_Processes_Process_DefaultVrf_Timers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Seconds between group of LSAs being refreshed or maxaged. The type is
    // interface{} with range: 5..100. Units are second.
    LsaPacingFlood interface{}

    // Number of ms between end of SPF and start of IPFRR computation. The type is
    // interface{} with range: 50..600000. Units are millisecond. The default
    // value is 500.
    FastRerouteTimer interface{}

    // How often self-originated LSAs should be refreshed. The type is interface{}
    // with range: 1800..2700. Units are second. The default value is 1800.
    LsaRefresh interface{}

    // LSA group pacing timer (Seconds between group of LSAs being refreshed or
    // maxaged). The type is interface{} with range: 10..1800. Units are second.
    // The default value is 240.
    LsaGroupPacing interface{}

    // MinLSArrival timer (minimum interval in milliseconds between accepting the
    // same LSA). The type is interface{} with range: 0..600000. Units are
    // millisecond. The default value is 100.
    LsaMinArrival interface{}

    // OSPF SPF timers (in milliseconds).
    SpfTimer Ospf_Processes_Process_DefaultVrf_Timers_SpfTimer

    // OSPF LSA timers (in milliseconds).
    LsaGenerationTimer Ospf_Processes_Process_DefaultVrf_Timers_LsaGenerationTimer
}

func (timers *Ospf_Processes_Process_DefaultVrf_Timers) GetFilter() yfilter.YFilter { return timers.YFilter }

func (timers *Ospf_Processes_Process_DefaultVrf_Timers) SetFilter(yf yfilter.YFilter) { timers.YFilter = yf }

func (timers *Ospf_Processes_Process_DefaultVrf_Timers) GetGoName(yname string) string {
    if yname == "lsa-pacing-flood" { return "LsaPacingFlood" }
    if yname == "fast-reroute-timer" { return "FastRerouteTimer" }
    if yname == "lsa-refresh" { return "LsaRefresh" }
    if yname == "lsa-group-pacing" { return "LsaGroupPacing" }
    if yname == "lsa-min-arrival" { return "LsaMinArrival" }
    if yname == "spf-timer" { return "SpfTimer" }
    if yname == "lsa-generation-timer" { return "LsaGenerationTimer" }
    return ""
}

func (timers *Ospf_Processes_Process_DefaultVrf_Timers) GetSegmentPath() string {
    return "timers"
}

func (timers *Ospf_Processes_Process_DefaultVrf_Timers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "spf-timer" {
        return &timers.SpfTimer
    }
    if childYangName == "lsa-generation-timer" {
        return &timers.LsaGenerationTimer
    }
    return nil
}

func (timers *Ospf_Processes_Process_DefaultVrf_Timers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["spf-timer"] = &timers.SpfTimer
    children["lsa-generation-timer"] = &timers.LsaGenerationTimer
    return children
}

func (timers *Ospf_Processes_Process_DefaultVrf_Timers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-pacing-flood"] = timers.LsaPacingFlood
    leafs["fast-reroute-timer"] = timers.FastRerouteTimer
    leafs["lsa-refresh"] = timers.LsaRefresh
    leafs["lsa-group-pacing"] = timers.LsaGroupPacing
    leafs["lsa-min-arrival"] = timers.LsaMinArrival
    return leafs
}

func (timers *Ospf_Processes_Process_DefaultVrf_Timers) GetBundleName() string { return "cisco_ios_xr" }

func (timers *Ospf_Processes_Process_DefaultVrf_Timers) GetYangName() string { return "timers" }

func (timers *Ospf_Processes_Process_DefaultVrf_Timers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timers *Ospf_Processes_Process_DefaultVrf_Timers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timers *Ospf_Processes_Process_DefaultVrf_Timers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timers *Ospf_Processes_Process_DefaultVrf_Timers) SetParent(parent types.Entity) { timers.parent = parent }

func (timers *Ospf_Processes_Process_DefaultVrf_Timers) GetParent() types.Entity { return timers.parent }

func (timers *Ospf_Processes_Process_DefaultVrf_Timers) GetParentYangName() string { return "default-vrf" }

// Ospf_Processes_Process_DefaultVrf_Timers_SpfTimer
// OSPF SPF timers (in milliseconds)
type Ospf_Processes_Process_DefaultVrf_Timers_SpfTimer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of milliseconds before first SPF run. The type is interface{} with
    // range: 1..600000. Units are millisecond. The default value is 5000.
    InitialDelay interface{}

    // Number of milliseconds delay between successive SPF runs. The type is
    // interface{} with range: 1..600000. Units are millisecond. The default value
    // is 10000.
    BackoffIncrement interface{}

    // Max number of milliseconds between consecutive SPF calculations. The type
    // is interface{} with range: 1..600000. Units are millisecond. The default
    // value is 10000.
    MaxDelay interface{}
}

func (spfTimer *Ospf_Processes_Process_DefaultVrf_Timers_SpfTimer) GetFilter() yfilter.YFilter { return spfTimer.YFilter }

func (spfTimer *Ospf_Processes_Process_DefaultVrf_Timers_SpfTimer) SetFilter(yf yfilter.YFilter) { spfTimer.YFilter = yf }

func (spfTimer *Ospf_Processes_Process_DefaultVrf_Timers_SpfTimer) GetGoName(yname string) string {
    if yname == "initial-delay" { return "InitialDelay" }
    if yname == "backoff-increment" { return "BackoffIncrement" }
    if yname == "max-delay" { return "MaxDelay" }
    return ""
}

func (spfTimer *Ospf_Processes_Process_DefaultVrf_Timers_SpfTimer) GetSegmentPath() string {
    return "spf-timer"
}

func (spfTimer *Ospf_Processes_Process_DefaultVrf_Timers_SpfTimer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (spfTimer *Ospf_Processes_Process_DefaultVrf_Timers_SpfTimer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (spfTimer *Ospf_Processes_Process_DefaultVrf_Timers_SpfTimer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initial-delay"] = spfTimer.InitialDelay
    leafs["backoff-increment"] = spfTimer.BackoffIncrement
    leafs["max-delay"] = spfTimer.MaxDelay
    return leafs
}

func (spfTimer *Ospf_Processes_Process_DefaultVrf_Timers_SpfTimer) GetBundleName() string { return "cisco_ios_xr" }

func (spfTimer *Ospf_Processes_Process_DefaultVrf_Timers_SpfTimer) GetYangName() string { return "spf-timer" }

func (spfTimer *Ospf_Processes_Process_DefaultVrf_Timers_SpfTimer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spfTimer *Ospf_Processes_Process_DefaultVrf_Timers_SpfTimer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spfTimer *Ospf_Processes_Process_DefaultVrf_Timers_SpfTimer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spfTimer *Ospf_Processes_Process_DefaultVrf_Timers_SpfTimer) SetParent(parent types.Entity) { spfTimer.parent = parent }

func (spfTimer *Ospf_Processes_Process_DefaultVrf_Timers_SpfTimer) GetParent() types.Entity { return spfTimer.parent }

func (spfTimer *Ospf_Processes_Process_DefaultVrf_Timers_SpfTimer) GetParentYangName() string { return "timers" }

// Ospf_Processes_Process_DefaultVrf_Timers_LsaGenerationTimer
// OSPF LSA timers (in milliseconds)
type Ospf_Processes_Process_DefaultVrf_Timers_LsaGenerationTimer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of milliseconds before generating first LSA. The type is interface{}
    // with range: 0..600000. Units are millisecond. The default value is 50.
    InitialDelay interface{}

    // Number of milliseconds delay between successive LSA builds. The type is
    // interface{} with range: 1..600000. Units are millisecond. The default value
    // is 200.
    BackoffIncrement interface{}

    // Max number of milliseconds between consecutive LSA builds . The type is
    // interface{} with range: 1..600000. Units are millisecond. The default value
    // is 200.
    MaxDelay interface{}
}

func (lsaGenerationTimer *Ospf_Processes_Process_DefaultVrf_Timers_LsaGenerationTimer) GetFilter() yfilter.YFilter { return lsaGenerationTimer.YFilter }

func (lsaGenerationTimer *Ospf_Processes_Process_DefaultVrf_Timers_LsaGenerationTimer) SetFilter(yf yfilter.YFilter) { lsaGenerationTimer.YFilter = yf }

func (lsaGenerationTimer *Ospf_Processes_Process_DefaultVrf_Timers_LsaGenerationTimer) GetGoName(yname string) string {
    if yname == "initial-delay" { return "InitialDelay" }
    if yname == "backoff-increment" { return "BackoffIncrement" }
    if yname == "max-delay" { return "MaxDelay" }
    return ""
}

func (lsaGenerationTimer *Ospf_Processes_Process_DefaultVrf_Timers_LsaGenerationTimer) GetSegmentPath() string {
    return "lsa-generation-timer"
}

func (lsaGenerationTimer *Ospf_Processes_Process_DefaultVrf_Timers_LsaGenerationTimer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaGenerationTimer *Ospf_Processes_Process_DefaultVrf_Timers_LsaGenerationTimer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaGenerationTimer *Ospf_Processes_Process_DefaultVrf_Timers_LsaGenerationTimer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["initial-delay"] = lsaGenerationTimer.InitialDelay
    leafs["backoff-increment"] = lsaGenerationTimer.BackoffIncrement
    leafs["max-delay"] = lsaGenerationTimer.MaxDelay
    return leafs
}

func (lsaGenerationTimer *Ospf_Processes_Process_DefaultVrf_Timers_LsaGenerationTimer) GetBundleName() string { return "cisco_ios_xr" }

func (lsaGenerationTimer *Ospf_Processes_Process_DefaultVrf_Timers_LsaGenerationTimer) GetYangName() string { return "lsa-generation-timer" }

func (lsaGenerationTimer *Ospf_Processes_Process_DefaultVrf_Timers_LsaGenerationTimer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaGenerationTimer *Ospf_Processes_Process_DefaultVrf_Timers_LsaGenerationTimer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaGenerationTimer *Ospf_Processes_Process_DefaultVrf_Timers_LsaGenerationTimer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaGenerationTimer *Ospf_Processes_Process_DefaultVrf_Timers_LsaGenerationTimer) SetParent(parent types.Entity) { lsaGenerationTimer.parent = parent }

func (lsaGenerationTimer *Ospf_Processes_Process_DefaultVrf_Timers_LsaGenerationTimer) GetParent() types.Entity { return lsaGenerationTimer.parent }

func (lsaGenerationTimer *Ospf_Processes_Process_DefaultVrf_Timers_LsaGenerationTimer) GetParentYangName() string { return "timers" }

// Ospf_Global
// OSPF global configuration data
type Ospf_Global struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Display OSPF router ids as DNS names. The type is interface{}.
    DnsNameLookup interface{}
}

func (global *Ospf_Global) GetFilter() yfilter.YFilter { return global.YFilter }

func (global *Ospf_Global) SetFilter(yf yfilter.YFilter) { global.YFilter = yf }

func (global *Ospf_Global) GetGoName(yname string) string {
    if yname == "dns-name-lookup" { return "DnsNameLookup" }
    return ""
}

func (global *Ospf_Global) GetSegmentPath() string {
    return "global"
}

func (global *Ospf_Global) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (global *Ospf_Global) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (global *Ospf_Global) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dns-name-lookup"] = global.DnsNameLookup
    return leafs
}

func (global *Ospf_Global) GetBundleName() string { return "cisco_ios_xr" }

func (global *Ospf_Global) GetYangName() string { return "global" }

func (global *Ospf_Global) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (global *Ospf_Global) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (global *Ospf_Global) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (global *Ospf_Global) SetParent(parent types.Entity) { global.parent = parent }

func (global *Ospf_Global) GetParent() types.Entity { return global.parent }

func (global *Ospf_Global) GetParentYangName() string { return "ospf" }

