// This module contains a collection of YANG definitions
// for Cisco IOS-XR ipv4-ospf package configuration.
// 
// This module contains definitions
// for the following management objects:
//   ospf: OSPF configuration data
// 
// This YANG module augments the
//   Cisco-IOS-XR-snmp-agent-cfg
// module with configuration data.
// 
// Copyright (c) 2013-2017 by Cisco Systems, Inc.
// All rights reserved.
package ipv4_ospf_cfg

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package ipv4_ospf_cfg"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-ospf-cfg ospf}", reflect.TypeOf(Ospf{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-ospf-cfg:ospf", reflect.TypeOf(Ospf{}))
}

// OspfProcFrrRlfaTunnel represents Ospf proc frr rlfa tunnel
type OspfProcFrrRlfaTunnel string

const (
    // Disabled
    OspfProcFrrRlfaTunnel_none OspfProcFrrRlfaTunnel = "none"

    // MPLS LDP
    OspfProcFrrRlfaTunnel_mpls_ldp OspfProcFrrRlfaTunnel = "mpls-ldp"
)

// OspfSubAddressFamily represents Ospf sub address family
type OspfSubAddressFamily string

const (
    // Unicast
    OspfSubAddressFamily_unicast OspfSubAddressFamily = "unicast"
)

// OspfNetwork represents Ospf network
type OspfNetwork string

const (
    // Broadcast
    OspfNetwork_broadcast OspfNetwork = "broadcast"

    // NonBroadcast
    OspfNetwork_non_broadcast OspfNetwork = "non-broadcast"

    // Point to Point
    OspfNetwork_point_to_point OspfNetwork = "point-to-point"

    // Point to Multipoint
    OspfNetwork_point_to_multipoint OspfNetwork = "point-to-multipoint"

    // NonBroadcast Point to Multipoint
    OspfNetwork_non_broadcast_point_to_multipoint OspfNetwork = "non-broadcast-point-to-multipoint"
)

// OspfFastRerouteTiebreakersIntf represents Ospf fast reroute tiebreakers intf
type OspfFastRerouteTiebreakersIntf string

const (
    // Downstream
    OspfFastRerouteTiebreakersIntf_downstream OspfFastRerouteTiebreakersIntf = "downstream"

    // LC Disjoint
    OspfFastRerouteTiebreakersIntf_line_card_disjoint OspfFastRerouteTiebreakersIntf = "line-card-disjoint"

    // Lowest metric
    OspfFastRerouteTiebreakersIntf_lowest_metric OspfFastRerouteTiebreakersIntf = "lowest-metric"

    // Node protection
    OspfFastRerouteTiebreakersIntf_node_protect OspfFastRerouteTiebreakersIntf = "node-protect"

    // Primary path
    OspfFastRerouteTiebreakersIntf_primary_path OspfFastRerouteTiebreakersIntf = "primary-path"

    // Secondar path
    OspfFastRerouteTiebreakersIntf_secondary_path OspfFastRerouteTiebreakersIntf = "secondary-path"

    // SRLG
    OspfFastRerouteTiebreakersIntf_srlg_disjoint OspfFastRerouteTiebreakersIntf = "srlg-disjoint"
)

// OspfAuthentication represents Ospf authentication
type OspfAuthentication string

const (
    // No Authentication
    OspfAuthentication_none OspfAuthentication = "none"

    // Plain Text Authentication
    OspfAuthentication_plain OspfAuthentication = "plain"

    // MD5 Message Digest
    OspfAuthentication_md5 OspfAuthentication = "md5"
)

// OspfEigrpRoute represents Ospf eigrp route
type OspfEigrpRoute string

const (
    // EIGRP Internal Type
    OspfEigrpRoute_internal OspfEigrpRoute = "internal"

    // EIGRP External Type
    OspfEigrpRoute_external OspfEigrpRoute = "external"
)

// OspfSid represents Ospf sid
type OspfSid string

const (
    // Index
    OspfSid_index OspfSid = "index"

    // Absolute
    OspfSid_absolute OspfSid = "absolute"
)

// OspfLinkStateMetric represents Ospf link state metric
type OspfLinkStateMetric string

const (
    // Type 1 External
    OspfLinkStateMetric_type1 OspfLinkStateMetric = "type1"

    // Type 2 External
    OspfLinkStateMetric_type2 OspfLinkStateMetric = "type2"
)

// OspfKeychainAuth represents Ospf keychain auth
type OspfKeychainAuth string

const (
    // No Keychain Authentication
    OspfKeychainAuth_none OspfKeychainAuth = "none"

    // Keychain Authentication
    OspfKeychainAuth_keychain OspfKeychainAuth = "keychain"
)

// OspfFastRerouteTiebreakers represents Ospf fast reroute tiebreakers
type OspfFastRerouteTiebreakers string

const (
    // Downstream
    OspfFastRerouteTiebreakers_downstream OspfFastRerouteTiebreakers = "downstream"

    // LC Disjoint
    OspfFastRerouteTiebreakers_line_card_disjoint OspfFastRerouteTiebreakers = "line-card-disjoint"

    // Lowest metric
    OspfFastRerouteTiebreakers_lowest_metric OspfFastRerouteTiebreakers = "lowest-metric"

    // Node protection
    OspfFastRerouteTiebreakers_node_protect OspfFastRerouteTiebreakers = "node-protect"

    // Primary path
    OspfFastRerouteTiebreakers_primary_path OspfFastRerouteTiebreakers = "primary-path"

    // Secondar path
    OspfFastRerouteTiebreakers_secondary_path OspfFastRerouteTiebreakers = "secondary-path"

    // SRLG
    OspfFastRerouteTiebreakers_srlg_disjoint OspfFastRerouteTiebreakers = "srlg-disjoint"
)

// OspfUloopAvoidance represents Ospf uloop avoidance
type OspfUloopAvoidance string

const (
    // Protected prefixes only
    OspfUloopAvoidance_protected OspfUloopAvoidance = "protected"

    // All prefixes
    OspfUloopAvoidance_all OspfUloopAvoidance = "all"

    // Microloop avoidance using Segment Routing
    OspfUloopAvoidance_segment_routing OspfUloopAvoidance = "segment-routing"
)

// OspfShutdown represents Ospf shutdown
type OspfShutdown string

const (
    // Full graceful shutdown
    OspfShutdown_full OspfShutdown = "full"

    // Enter host only mode
    OspfShutdown_hostmode OspfShutdown = "hostmode"

    // Full graceful shutdown post reload
    OspfShutdown_onreload OspfShutdown = "onreload"
)

// OspfDomainId represents Ospf domain id
type OspfDomainId string

const (
    // Type 0x0005
    OspfDomainId_type0005 OspfDomainId = "type0005"

    // Type 0x0105
    OspfDomainId_type0105 OspfDomainId = "type0105"

    // Type 0x0205
    OspfDomainId_type0205 OspfDomainId = "type0205"

    // Type 0x8005
    OspfDomainId_type8005 OspfDomainId = "type8005"
)

// OspfFrrRlfaTunnel represents Ospf frr rlfa tunnel
type OspfFrrRlfaTunnel string

const (
    // Disabled
    OspfFrrRlfaTunnel_none OspfFrrRlfaTunnel = "none"

    // MPLS LDP
    OspfFrrRlfaTunnel_mpls_ldp OspfFrrRlfaTunnel = "mpls-ldp"
)

// OspfLogAdj represents Ospf log adj
type OspfLogAdj string

const (
    // Limited output
    OspfLogAdj_brief OspfLogAdj = "brief"

    // Verbose output
    OspfLogAdj_detail OspfLogAdj = "detail"

    // No output
    OspfLogAdj_suppress OspfLogAdj = "suppress"
)

// OspfFastReroute represents Ospf fast reroute
type OspfFastReroute string

const (
    // None
    OspfFastReroute_none OspfFastReroute = "none"

    // Per link
    OspfFastReroute_per_link OspfFastReroute = "per-link"

    // Per prefix
    OspfFastReroute_per_prefix OspfFastReroute = "per-prefix"
)

// OspfCiscoNsf represents Ospf cisco nsf
type OspfCiscoNsf string

const (
    // Do not require all neighbors to run NSF
    OspfCiscoNsf_always OspfCiscoNsf = "always"

    // Require all neighbors to run NSF
    OspfCiscoNsf_require_nsf_neighbors OspfCiscoNsf = "require-nsf-neighbors"
)

// OspfProcFastReroute represents Ospf proc fast reroute
type OspfProcFastReroute string

const (
    // None
    OspfProcFastReroute_none OspfProcFastReroute = "none"

    // Per link
    OspfProcFastReroute_per_link OspfProcFastReroute = "per-link"

    // Per prefix
    OspfProcFastReroute_per_prefix OspfProcFastReroute = "per-prefix"
)

// OspfRedistLsa represents Ospf redist lsa
type OspfRedistLsa string

const (
    // Type 3 (summary) LSA
    OspfRedistLsa_summary OspfRedistLsa = "summary"

    // Type 5 (external) LSA
    OspfRedistLsa_external OspfRedistLsa = "external"
)

// OspfDistListProtocol represents Ospf dist list protocol
type OspfDistListProtocol string

const (
    // Default
    OspfDistListProtocol_all OspfDistListProtocol = "all"

    // Connected Routes
    OspfDistListProtocol_connected OspfDistListProtocol = "connected"

    // Static Routes
    OspfDistListProtocol_static OspfDistListProtocol = "static"

    // BGP
    OspfDistListProtocol_bgp OspfDistListProtocol = "bgp"

    // OSPF
    OspfDistListProtocol_ospf OspfDistListProtocol = "ospf"

    // DAGR
    OspfDistListProtocol_dagr OspfDistListProtocol = "dagr"
)

// BfdEnableMode represents Bfd enable mode
type BfdEnableMode string

const (
    // Disable Mode - Prevent inheritance
    BfdEnableMode_disable BfdEnableMode = "disable"

    // Default Mode - Default BFD behavior
    BfdEnableMode_default_ BfdEnableMode = "default"

    // Strict Mode - Hold down adj until BFD sesion up
    BfdEnableMode_strict BfdEnableMode = "strict"
)

// OspfSegmentRoutingForwarding represents Ospf segment routing forwarding
type OspfSegmentRoutingForwarding string

const (
    // Disable
    OspfSegmentRoutingForwarding_disable OspfSegmentRoutingForwarding = "disable"

    // Mpls
    OspfSegmentRoutingForwarding_mpls OspfSegmentRoutingForwarding = "mpls"
)

// OspfIetfNsf represents Ospf ietf nsf
type OspfIetfNsf string

const (
    // Use IETF NSF in planned and unplanned cases
    OspfIetfNsf_all OspfIetfNsf = "all"
)

// Nsr represents Nsr
type Nsr string

const (
    // Enable non-stop routing
    Nsr_true Nsr = "true"

    // Disable non-stop routing
    Nsr_false Nsr = "false"
)

// OspfTraceBufSize represents Ospf trace buf size
type OspfTraceBufSize string

const (
    // Disable trace
    OspfTraceBufSize_size0 OspfTraceBufSize = "size0"

    // Buffer size 256
    OspfTraceBufSize_size256 OspfTraceBufSize = "size256"

    // Buffer size 512
    OspfTraceBufSize_size512 OspfTraceBufSize = "size512"

    // Buffer size 1024
    OspfTraceBufSize_size1024 OspfTraceBufSize = "size1024"

    // Buffer size 2048
    OspfTraceBufSize_size2048 OspfTraceBufSize = "size2048"

    // Buffer size 4096
    OspfTraceBufSize_size4096 OspfTraceBufSize = "size4096"

    // Buffer size 8192
    OspfTraceBufSize_size8192 OspfTraceBufSize = "size8192"

    // Buffer size 16384
    OspfTraceBufSize_size16384 OspfTraceBufSize = "size16384"

    // Buffer size 32768
    OspfTraceBufSize_size32768 OspfTraceBufSize = "size32768"

    // Buffer size 65536
    OspfTraceBufSize_size65536 OspfTraceBufSize = "size65536"
)

// OspfRedistProtocol represents Ospf redist protocol
type OspfRedistProtocol string

const (
    // Default
    OspfRedistProtocol_all OspfRedistProtocol = "all"

    // Connected Routes
    OspfRedistProtocol_connected OspfRedistProtocol = "connected"

    // Static Routes
    OspfRedistProtocol_static OspfRedistProtocol = "static"

    // BGP
    OspfRedistProtocol_bgp OspfRedistProtocol = "bgp"

    // RIP
    OspfRedistProtocol_rip OspfRedistProtocol = "rip"

    // ISIS
    OspfRedistProtocol_isis OspfRedistProtocol = "isis"

    // OSPF
    OspfRedistProtocol_ospf OspfRedistProtocol = "ospf"

    // EIGRP
    OspfRedistProtocol_eigrp OspfRedistProtocol = "eigrp"

    // DAGR
    OspfRedistProtocol_dagr OspfRedistProtocol = "dagr"

    // Subscriber Routes
    OspfRedistProtocol_subscriber OspfRedistProtocol = "subscriber"

    // Application Routes
    OspfRedistProtocol_application OspfRedistProtocol = "application"

    // Mobile Routes
    OspfRedistProtocol_mobile OspfRedistProtocol = "mobile"
)

// OspfRouteLevel represents Ospf route level
type OspfRouteLevel string

const (
    // Type 1 only
    OspfRouteLevel_type1 OspfRouteLevel = "type1"

    // Type 2 only
    OspfRouteLevel_type2 OspfRouteLevel = "type2"

    // Both Type 1 and Type 2
    OspfRouteLevel_type1_and2 OspfRouteLevel = "type1-and2"
)

// OspfIetfNsfSupport represents Ospf ietf nsf support
type OspfIetfNsfSupport string

const (
    // Do not perform IETF NSF helper role
    OspfIetfNsfSupport_never OspfIetfNsfSupport = "never"
)

// OspfSegmentRouting represents Ospf segment routing
type OspfSegmentRouting string

const (
    // Disable
    OspfSegmentRouting_disable OspfSegmentRouting = "disable"

    // Mpls
    OspfSegmentRouting_mpls OspfSegmentRouting = "mpls"
)

// OspfAddressFamily represents Ospf address family
type OspfAddressFamily string

const (
    // IPv4
    OspfAddressFamily_ipv4 OspfAddressFamily = "ipv4"
)

// OspfFastReroutePriority represents Ospf fast reroute priority
type OspfFastReroutePriority string

const (
    // Critical
    OspfFastReroutePriority_critical OspfFastReroutePriority = "critical"

    // High
    OspfFastReroutePriority_high OspfFastReroutePriority = "high"

    // Medium
    OspfFastReroutePriority_medium OspfFastReroutePriority = "medium"

    // low
    OspfFastReroutePriority_low OspfFastReroutePriority = "low"
)

// Ospf
// OSPF configuration data
type Ospf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Process related configuration.
    Processes Ospf_Processes

    // OSPF global configuration data.
    Global Ospf_Global
}

func (ospf *Ospf) GetEntityData() *types.CommonEntityData {
    ospf.EntityData.YFilter = ospf.YFilter
    ospf.EntityData.YangName = "ospf"
    ospf.EntityData.BundleName = "cisco_ios_xr"
    ospf.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-ospf-cfg"
    ospf.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-ospf-cfg:ospf"
    ospf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ospf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ospf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ospf.EntityData.Children = make(map[string]types.YChild)
    ospf.EntityData.Children["processes"] = types.YChild{"Processes", &ospf.Processes}
    ospf.EntityData.Children["global"] = types.YChild{"Global", &ospf.Global}
    ospf.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ospf.EntityData)
}

// Ospf_Processes
// Process related configuration
type Ospf_Processes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration for a particular OSPF process and associated default VRF. The
    // type is slice of Ospf_Processes_Process.
    Process []Ospf_Processes_Process
}

func (processes *Ospf_Processes) GetEntityData() *types.CommonEntityData {
    processes.EntityData.YFilter = processes.YFilter
    processes.EntityData.YangName = "processes"
    processes.EntityData.BundleName = "cisco_ios_xr"
    processes.EntityData.ParentYangName = "ospf"
    processes.EntityData.SegmentPath = "processes"
    processes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    processes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    processes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    processes.EntityData.Children = make(map[string]types.YChild)
    processes.EntityData.Children["process"] = types.YChild{"Process", nil}
    for i := range processes.Process {
        processes.EntityData.Children[types.GetSegmentPath(&processes.Process[i])] = types.YChild{"Process", &processes.Process[i]}
    }
    processes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(processes.EntityData)
}

// Ospf_Processes_Process
// Configuration for a particular OSPF process and
// associated default VRF
type Ospf_Processes_Process struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name for this OSPF process. The type is string
    // with length: 1..32.
    ProcessName interface{}

    // Start OSPF configuration. The type is interface{}.
    Start interface{}

    // Enable non-stop routing. The type is Nsr. The default value is true.
    Nsr interface{}

    // Type of protocol shutdown. The type is OspfShutdown.
    ProtocolShutdown interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // OSPF SNMP configuration.
    Snmp Ospf_Processes_Process_Snmp

    // Enable distribution of link-state database services.
    Distribute Ospf_Processes_Process_Distribute

    // VRF related configuration.
    Vrfs Ospf_Processes_Process_Vrfs

    // Configuration to change size of trace buffer.
    TraceBufs Ospf_Processes_Process_TraceBufs

    // Adjust routing timers.
    GracefulShutdownTimers Ospf_Processes_Process_GracefulShutdownTimers

    // Default VRF related configuration.
    DefaultVrf Ospf_Processes_Process_DefaultVrf
}

func (process *Ospf_Processes_Process) GetEntityData() *types.CommonEntityData {
    process.EntityData.YFilter = process.YFilter
    process.EntityData.YangName = "process"
    process.EntityData.BundleName = "cisco_ios_xr"
    process.EntityData.ParentYangName = "processes"
    process.EntityData.SegmentPath = "process" + "[process-name='" + fmt.Sprintf("%v", process.ProcessName) + "']"
    process.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    process.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    process.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    process.EntityData.Children = make(map[string]types.YChild)
    process.EntityData.Children["snmp"] = types.YChild{"Snmp", &process.Snmp}
    process.EntityData.Children["distribute"] = types.YChild{"Distribute", &process.Distribute}
    process.EntityData.Children["vrfs"] = types.YChild{"Vrfs", &process.Vrfs}
    process.EntityData.Children["trace-bufs"] = types.YChild{"TraceBufs", &process.TraceBufs}
    process.EntityData.Children["graceful-shutdown-timers"] = types.YChild{"GracefulShutdownTimers", &process.GracefulShutdownTimers}
    process.EntityData.Children["default-vrf"] = types.YChild{"DefaultVrf", &process.DefaultVrf}
    process.EntityData.Leafs = make(map[string]types.YLeaf)
    process.EntityData.Leafs["process-name"] = types.YLeaf{"ProcessName", process.ProcessName}
    process.EntityData.Leafs["start"] = types.YLeaf{"Start", process.Start}
    process.EntityData.Leafs["nsr"] = types.YLeaf{"Nsr", process.Nsr}
    process.EntityData.Leafs["protocol-shutdown"] = types.YLeaf{"ProtocolShutdown", process.ProtocolShutdown}
    process.EntityData.Leafs["running"] = types.YLeaf{"Running", process.Running}
    return &(process.EntityData)
}

// Ospf_Processes_Process_Snmp
// OSPF SNMP configuration
type Ospf_Processes_Process_Snmp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Per OSPF process SNMP trap rate-limit.
    TrapRateLimit Ospf_Processes_Process_Snmp_TrapRateLimit
}

func (snmp *Ospf_Processes_Process_Snmp) GetEntityData() *types.CommonEntityData {
    snmp.EntityData.YFilter = snmp.YFilter
    snmp.EntityData.YangName = "snmp"
    snmp.EntityData.BundleName = "cisco_ios_xr"
    snmp.EntityData.ParentYangName = "process"
    snmp.EntityData.SegmentPath = "snmp"
    snmp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    snmp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    snmp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    snmp.EntityData.Children = make(map[string]types.YChild)
    snmp.EntityData.Children["trap-rate-limit"] = types.YChild{"TrapRateLimit", &snmp.TrapRateLimit}
    snmp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(snmp.EntityData)
}

// Ospf_Processes_Process_Snmp_TrapRateLimit
// Per OSPF process SNMP trap rate-limit
// This type is a presence type.
type Ospf_Processes_Process_Snmp_TrapRateLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Trap rate limit sliding window size. The type is interface{} with range:
    // 2..60. This attribute is mandatory.
    WindowSize interface{}

    // Max number of traps to send in window time. The type is interface{} with
    // range: 0..300. This attribute is mandatory.
    MaxWindowTraps interface{}
}

func (trapRateLimit *Ospf_Processes_Process_Snmp_TrapRateLimit) GetEntityData() *types.CommonEntityData {
    trapRateLimit.EntityData.YFilter = trapRateLimit.YFilter
    trapRateLimit.EntityData.YangName = "trap-rate-limit"
    trapRateLimit.EntityData.BundleName = "cisco_ios_xr"
    trapRateLimit.EntityData.ParentYangName = "snmp"
    trapRateLimit.EntityData.SegmentPath = "trap-rate-limit"
    trapRateLimit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trapRateLimit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trapRateLimit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trapRateLimit.EntityData.Children = make(map[string]types.YChild)
    trapRateLimit.EntityData.Leafs = make(map[string]types.YLeaf)
    trapRateLimit.EntityData.Leafs["window-size"] = types.YLeaf{"WindowSize", trapRateLimit.WindowSize}
    trapRateLimit.EntityData.Leafs["max-window-traps"] = types.YLeaf{"MaxWindowTraps", trapRateLimit.MaxWindowTraps}
    return &(trapRateLimit.EntityData)
}

// Ospf_Processes_Process_Distribute
// Enable distribution of link-state database
// services
// This type is a presence type.
type Ospf_Processes_Process_Distribute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Seconds. The type is interface{} with range: 1..3600. Units are second.
    Throttle interface{}

    // Instance ID. The type is interface{} with range: 0..4294967295.
    InstanceId interface{}
}

func (distribute *Ospf_Processes_Process_Distribute) GetEntityData() *types.CommonEntityData {
    distribute.EntityData.YFilter = distribute.YFilter
    distribute.EntityData.YangName = "distribute"
    distribute.EntityData.BundleName = "cisco_ios_xr"
    distribute.EntityData.ParentYangName = "process"
    distribute.EntityData.SegmentPath = "distribute"
    distribute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    distribute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    distribute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    distribute.EntityData.Children = make(map[string]types.YChild)
    distribute.EntityData.Leafs = make(map[string]types.YLeaf)
    distribute.EntityData.Leafs["throttle"] = types.YLeaf{"Throttle", distribute.Throttle}
    distribute.EntityData.Leafs["instance-id"] = types.YLeaf{"InstanceId", distribute.InstanceId}
    return &(distribute.EntityData)
}

// Ospf_Processes_Process_Vrfs
// VRF related configuration
type Ospf_Processes_Process_Vrfs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration for a particular OSPF vrf. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf.
    Vrf []Ospf_Processes_Process_Vrfs_Vrf
}

func (vrfs *Ospf_Processes_Process_Vrfs) GetEntityData() *types.CommonEntityData {
    vrfs.EntityData.YFilter = vrfs.YFilter
    vrfs.EntityData.YangName = "vrfs"
    vrfs.EntityData.BundleName = "cisco_ios_xr"
    vrfs.EntityData.ParentYangName = "process"
    vrfs.EntityData.SegmentPath = "vrfs"
    vrfs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfs.EntityData.Children = make(map[string]types.YChild)
    vrfs.EntityData.Children["vrf"] = types.YChild{"Vrf", nil}
    for i := range vrfs.Vrf {
        vrfs.EntityData.Children[types.GetSegmentPath(&vrfs.Vrf[i])] = types.YChild{"Vrf", &vrfs.Vrf[i]}
    }
    vrfs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(vrfs.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf
// Configuration for a particular OSPF vrf
type Ospf_Processes_Process_Vrfs_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name for this vrf. The type is string with
    // pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    VrfName interface{}

    // Start OSPF VRF configuration. The type is interface{}.
    VrfStart interface{}

    // Enable/disable OSPF SNMP trap. The type is bool. The default value is
    // false.
    SnmpTrapEnabled interface{}

    // 32 bit Domain tag value. The type is interface{} with range: 1..4294967295.
    DomainTag interface{}

    // VRF lite capability. The type is interface{}.
    VrfLite interface{}

    // Disable DN bit check. The type is interface{}.
    DisableDnBitCheck interface{}

    // Ignore MOSPF (Type 6) LSAs. The type is interface{}.
    IgnoreMospf interface{}

    // Router ID for this OSPF process. Enter an IP Address. The type is string
    // with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RouterId interface{}

    // Prefer type7 externals over type5. The type is interface{}.
    Type7 interface{}

    // OSPF SNMP context configuration. The type is string.
    SnmpContext interface{}

    // Max number of interfaces allowed to be configured. The type is interface{}
    // with range: 1..4294967295. The default value is 1024.
    MaximumInterfaces interface{}

    // Disable opaque LSAs. The type is interface{}.
    NoOpaque interface{}

    // Configure a route-policy for prioritizing RIB route install. The type is
    // string.
    SpfPrefixPriority interface{}

    // Forward packets over multiple paths (number of paths). The type is
    // interface{} with range: 1..64.
    MaximumPaths interface{}

    // Log changes in adjacency state. The type is OspfLogAdj.
    AdjacencyChanges interface{}

    // Set default metric of redistributed routes. The type is interface{} with
    // range: 1..16777214. The default value is 1.
    DefaultMetric interface{}

    // OSPF Domain ID.
    DomainId Ospf_Processes_Process_Vrfs_Vrf_DomainId

    // Microloop configuration.
    Microloop Ospf_Processes_Process_Vrfs_Vrf_Microloop

    // Maximum number of prefixes redistributed into OSPF.
    MaximumRedistributePrefix Ospf_Processes_Process_Vrfs_Vrf_MaximumRedistributePrefix

    // Control distribution of default information.
    DefaultInformation Ospf_Processes_Process_Vrfs_Vrf_DefaultInformation

    // OSPF address family.
    Af Ospf_Processes_Process_Vrfs_Vrf_Af

    // Adjust OSPF input queue sizes and processing quantums.
    Queue Ospf_Processes_Process_Vrfs_Vrf_Queue

    // Set maximum metric configuration.
    MaxMetric Ospf_Processes_Process_Vrfs_Vrf_MaxMetric

    // Non Stop Forwarding configuration.
    Nsf Ospf_Processes_Process_Vrfs_Vrf_Nsf

    // Process scope configuration.
    ProcessScope Ospf_Processes_Process_Vrfs_Vrf_ProcessScope

    // Redistribute configurations.
    Redistribution Ospf_Processes_Process_Vrfs_Vrf_Redistribution

    // Staggering OSPF adjacency bring up.
    AdjacencyStagger Ospf_Processes_Process_Vrfs_Vrf_AdjacencyStagger

    // Set max-lsa configuration.
    MaxLsa Ospf_Processes_Process_Vrfs_Vrf_MaxLsa

    // Controls automatic cost based on bandwidth.
    AutoCost Ospf_Processes_Process_Vrfs_Vrf_AutoCost

    // Unequal Cost Multi-ptah configuration.
    Ucmp Ospf_Processes_Process_Vrfs_Vrf_Ucmp

    // Fast-reroute instance scoped parameters.
    FastReroute Ospf_Processes_Process_Vrfs_Vrf_FastReroute

    // Configure IP prefix summary.
    SummaryPrefixes Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes

    // Filter outgoing routing updates.
    OutgoingRouteUpdates Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates

    // Administrative distance configuration.
    Distance Ospf_Processes_Process_Vrfs_Vrf_Distance

    // Area configuration.
    AreaAddresses Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses

    // Adjust routing timers.
    Timers Ospf_Processes_Process_Vrfs_Vrf_Timers
}

func (vrf *Ospf_Processes_Process_Vrfs_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "vrfs"
    vrf.EntityData.SegmentPath = "vrf" + "[vrf-name='" + fmt.Sprintf("%v", vrf.VrfName) + "']"
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = make(map[string]types.YChild)
    vrf.EntityData.Children["domain-id"] = types.YChild{"DomainId", &vrf.DomainId}
    vrf.EntityData.Children["microloop"] = types.YChild{"Microloop", &vrf.Microloop}
    vrf.EntityData.Children["maximum-redistribute-prefix"] = types.YChild{"MaximumRedistributePrefix", &vrf.MaximumRedistributePrefix}
    vrf.EntityData.Children["default-information"] = types.YChild{"DefaultInformation", &vrf.DefaultInformation}
    vrf.EntityData.Children["af"] = types.YChild{"Af", &vrf.Af}
    vrf.EntityData.Children["queue"] = types.YChild{"Queue", &vrf.Queue}
    vrf.EntityData.Children["max-metric"] = types.YChild{"MaxMetric", &vrf.MaxMetric}
    vrf.EntityData.Children["nsf"] = types.YChild{"Nsf", &vrf.Nsf}
    vrf.EntityData.Children["process-scope"] = types.YChild{"ProcessScope", &vrf.ProcessScope}
    vrf.EntityData.Children["redistribution"] = types.YChild{"Redistribution", &vrf.Redistribution}
    vrf.EntityData.Children["adjacency-stagger"] = types.YChild{"AdjacencyStagger", &vrf.AdjacencyStagger}
    vrf.EntityData.Children["max-lsa"] = types.YChild{"MaxLsa", &vrf.MaxLsa}
    vrf.EntityData.Children["auto-cost"] = types.YChild{"AutoCost", &vrf.AutoCost}
    vrf.EntityData.Children["ucmp"] = types.YChild{"Ucmp", &vrf.Ucmp}
    vrf.EntityData.Children["fast-reroute"] = types.YChild{"FastReroute", &vrf.FastReroute}
    vrf.EntityData.Children["summary-prefixes"] = types.YChild{"SummaryPrefixes", &vrf.SummaryPrefixes}
    vrf.EntityData.Children["outgoing-route-updates"] = types.YChild{"OutgoingRouteUpdates", &vrf.OutgoingRouteUpdates}
    vrf.EntityData.Children["distance"] = types.YChild{"Distance", &vrf.Distance}
    vrf.EntityData.Children["area-addresses"] = types.YChild{"AreaAddresses", &vrf.AreaAddresses}
    vrf.EntityData.Children["timers"] = types.YChild{"Timers", &vrf.Timers}
    vrf.EntityData.Leafs = make(map[string]types.YLeaf)
    vrf.EntityData.Leafs["vrf-name"] = types.YLeaf{"VrfName", vrf.VrfName}
    vrf.EntityData.Leafs["vrf-start"] = types.YLeaf{"VrfStart", vrf.VrfStart}
    vrf.EntityData.Leafs["snmp-trap-enabled"] = types.YLeaf{"SnmpTrapEnabled", vrf.SnmpTrapEnabled}
    vrf.EntityData.Leafs["domain-tag"] = types.YLeaf{"DomainTag", vrf.DomainTag}
    vrf.EntityData.Leafs["vrf-lite"] = types.YLeaf{"VrfLite", vrf.VrfLite}
    vrf.EntityData.Leafs["disable-dn-bit-check"] = types.YLeaf{"DisableDnBitCheck", vrf.DisableDnBitCheck}
    vrf.EntityData.Leafs["ignore-mospf"] = types.YLeaf{"IgnoreMospf", vrf.IgnoreMospf}
    vrf.EntityData.Leafs["router-id"] = types.YLeaf{"RouterId", vrf.RouterId}
    vrf.EntityData.Leafs["type7"] = types.YLeaf{"Type7", vrf.Type7}
    vrf.EntityData.Leafs["snmp-context"] = types.YLeaf{"SnmpContext", vrf.SnmpContext}
    vrf.EntityData.Leafs["maximum-interfaces"] = types.YLeaf{"MaximumInterfaces", vrf.MaximumInterfaces}
    vrf.EntityData.Leafs["no-opaque"] = types.YLeaf{"NoOpaque", vrf.NoOpaque}
    vrf.EntityData.Leafs["spf-prefix-priority"] = types.YLeaf{"SpfPrefixPriority", vrf.SpfPrefixPriority}
    vrf.EntityData.Leafs["maximum-paths"] = types.YLeaf{"MaximumPaths", vrf.MaximumPaths}
    vrf.EntityData.Leafs["adjacency-changes"] = types.YLeaf{"AdjacencyChanges", vrf.AdjacencyChanges}
    vrf.EntityData.Leafs["default-metric"] = types.YLeaf{"DefaultMetric", vrf.DefaultMetric}
    return &(vrf.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_DomainId
// OSPF Domain ID
type Ospf_Processes_Process_Vrfs_Vrf_DomainId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF Primary domain ID.
    PrimaryDomainId Ospf_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId

    // Secondary domain ID Table.
    SecondaryDomainIds Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds
}

func (domainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId) GetEntityData() *types.CommonEntityData {
    domainId.EntityData.YFilter = domainId.YFilter
    domainId.EntityData.YangName = "domain-id"
    domainId.EntityData.BundleName = "cisco_ios_xr"
    domainId.EntityData.ParentYangName = "vrf"
    domainId.EntityData.SegmentPath = "domain-id"
    domainId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    domainId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    domainId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    domainId.EntityData.Children = make(map[string]types.YChild)
    domainId.EntityData.Children["primary-domain-id"] = types.YChild{"PrimaryDomainId", &domainId.PrimaryDomainId}
    domainId.EntityData.Children["secondary-domain-ids"] = types.YChild{"SecondaryDomainIds", &domainId.SecondaryDomainIds}
    domainId.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(domainId.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId
// OSPF Primary domain ID
type Ospf_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Primary domain ID type. The type is OspfDomainId.
    DomainIdType interface{}

    // Primary domain ID value. The type is string.
    DomainIdName interface{}
}

func (primaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId) GetEntityData() *types.CommonEntityData {
    primaryDomainId.EntityData.YFilter = primaryDomainId.YFilter
    primaryDomainId.EntityData.YangName = "primary-domain-id"
    primaryDomainId.EntityData.BundleName = "cisco_ios_xr"
    primaryDomainId.EntityData.ParentYangName = "domain-id"
    primaryDomainId.EntityData.SegmentPath = "primary-domain-id"
    primaryDomainId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    primaryDomainId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    primaryDomainId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    primaryDomainId.EntityData.Children = make(map[string]types.YChild)
    primaryDomainId.EntityData.Leafs = make(map[string]types.YLeaf)
    primaryDomainId.EntityData.Leafs["domain-id-type"] = types.YLeaf{"DomainIdType", primaryDomainId.DomainIdType}
    primaryDomainId.EntityData.Leafs["domain-id-name"] = types.YLeaf{"DomainIdName", primaryDomainId.DomainIdName}
    return &(primaryDomainId.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds
// Secondary domain ID Table
type Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OSPF Secondary domain ID. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId.
    SecondaryDomainId []Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId
}

func (secondaryDomainIds *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds) GetEntityData() *types.CommonEntityData {
    secondaryDomainIds.EntityData.YFilter = secondaryDomainIds.YFilter
    secondaryDomainIds.EntityData.YangName = "secondary-domain-ids"
    secondaryDomainIds.EntityData.BundleName = "cisco_ios_xr"
    secondaryDomainIds.EntityData.ParentYangName = "domain-id"
    secondaryDomainIds.EntityData.SegmentPath = "secondary-domain-ids"
    secondaryDomainIds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    secondaryDomainIds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    secondaryDomainIds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    secondaryDomainIds.EntityData.Children = make(map[string]types.YChild)
    secondaryDomainIds.EntityData.Children["secondary-domain-id"] = types.YChild{"SecondaryDomainId", nil}
    for i := range secondaryDomainIds.SecondaryDomainId {
        secondaryDomainIds.EntityData.Children[types.GetSegmentPath(&secondaryDomainIds.SecondaryDomainId[i])] = types.YChild{"SecondaryDomainId", &secondaryDomainIds.SecondaryDomainId[i]}
    }
    secondaryDomainIds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(secondaryDomainIds.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId
// OSPF Secondary domain ID
type Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Secondary domain ID type. The type is
    // OspfDomainId.
    DomainIdType interface{}

    // This attribute is a key. Secondary domain ID value. The type is string with
    // pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    DomainIdName interface{}
}

func (secondaryDomainId *Ospf_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId) GetEntityData() *types.CommonEntityData {
    secondaryDomainId.EntityData.YFilter = secondaryDomainId.YFilter
    secondaryDomainId.EntityData.YangName = "secondary-domain-id"
    secondaryDomainId.EntityData.BundleName = "cisco_ios_xr"
    secondaryDomainId.EntityData.ParentYangName = "secondary-domain-ids"
    secondaryDomainId.EntityData.SegmentPath = "secondary-domain-id" + "[domain-id-type='" + fmt.Sprintf("%v", secondaryDomainId.DomainIdType) + "']" + "[domain-id-name='" + fmt.Sprintf("%v", secondaryDomainId.DomainIdName) + "']"
    secondaryDomainId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    secondaryDomainId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    secondaryDomainId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    secondaryDomainId.EntityData.Children = make(map[string]types.YChild)
    secondaryDomainId.EntityData.Leafs = make(map[string]types.YLeaf)
    secondaryDomainId.EntityData.Leafs["domain-id-type"] = types.YLeaf{"DomainIdType", secondaryDomainId.DomainIdType}
    secondaryDomainId.EntityData.Leafs["domain-id-name"] = types.YLeaf{"DomainIdName", secondaryDomainId.DomainIdName}
    return &(secondaryDomainId.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Microloop
// Microloop configuration
type Ospf_Processes_Process_Vrfs_Vrf_Microloop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Microloop avoidance configuration.
    Avoidance Ospf_Processes_Process_Vrfs_Vrf_Microloop_Avoidance
}

func (microloop *Ospf_Processes_Process_Vrfs_Vrf_Microloop) GetEntityData() *types.CommonEntityData {
    microloop.EntityData.YFilter = microloop.YFilter
    microloop.EntityData.YangName = "microloop"
    microloop.EntityData.BundleName = "cisco_ios_xr"
    microloop.EntityData.ParentYangName = "vrf"
    microloop.EntityData.SegmentPath = "microloop"
    microloop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    microloop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    microloop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    microloop.EntityData.Children = make(map[string]types.YChild)
    microloop.EntityData.Children["avoidance"] = types.YChild{"Avoidance", &microloop.Avoidance}
    microloop.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(microloop.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Microloop_Avoidance
// Microloop avoidance configuration
type Ospf_Processes_Process_Vrfs_Vrf_Microloop_Avoidance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MicroLoop avoidance feature enable configuration. The type is
    // OspfUloopAvoidance. The default value is all.
    Enable interface{}

    // Delay to introduce between SPF and RIB update in msecs. The type is
    // interface{} with range: 1..600000. Units are millisecond. The default value
    // is 5000.
    RibUpdateDelay interface{}
}

func (avoidance *Ospf_Processes_Process_Vrfs_Vrf_Microloop_Avoidance) GetEntityData() *types.CommonEntityData {
    avoidance.EntityData.YFilter = avoidance.YFilter
    avoidance.EntityData.YangName = "avoidance"
    avoidance.EntityData.BundleName = "cisco_ios_xr"
    avoidance.EntityData.ParentYangName = "microloop"
    avoidance.EntityData.SegmentPath = "avoidance"
    avoidance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    avoidance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    avoidance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    avoidance.EntityData.Children = make(map[string]types.YChild)
    avoidance.EntityData.Leafs = make(map[string]types.YLeaf)
    avoidance.EntityData.Leafs["enable"] = types.YLeaf{"Enable", avoidance.Enable}
    avoidance.EntityData.Leafs["rib-update-delay"] = types.YLeaf{"RibUpdateDelay", avoidance.RibUpdateDelay}
    return &(avoidance.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MaximumRedistributePrefix
// Maximum number of prefixes redistributed into
// OSPF
type Ospf_Processes_Process_Vrfs_Vrf_MaximumRedistributePrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes redistributed. The type is interface{} with
    // range: 1..4294967295.
    NumberOfPrefixes interface{}

    // Threshold value (%) at which to generate a warning msg. The type is
    // interface{} with range: 1..100.
    Threshold interface{}

    // Only give warning messsage when limit is exceeded. The type is bool.
    WarningOnly interface{}
}

func (maximumRedistributePrefix *Ospf_Processes_Process_Vrfs_Vrf_MaximumRedistributePrefix) GetEntityData() *types.CommonEntityData {
    maximumRedistributePrefix.EntityData.YFilter = maximumRedistributePrefix.YFilter
    maximumRedistributePrefix.EntityData.YangName = "maximum-redistribute-prefix"
    maximumRedistributePrefix.EntityData.BundleName = "cisco_ios_xr"
    maximumRedistributePrefix.EntityData.ParentYangName = "vrf"
    maximumRedistributePrefix.EntityData.SegmentPath = "maximum-redistribute-prefix"
    maximumRedistributePrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maximumRedistributePrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maximumRedistributePrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maximumRedistributePrefix.EntityData.Children = make(map[string]types.YChild)
    maximumRedistributePrefix.EntityData.Leafs = make(map[string]types.YLeaf)
    maximumRedistributePrefix.EntityData.Leafs["number-of-prefixes"] = types.YLeaf{"NumberOfPrefixes", maximumRedistributePrefix.NumberOfPrefixes}
    maximumRedistributePrefix.EntityData.Leafs["threshold"] = types.YLeaf{"Threshold", maximumRedistributePrefix.Threshold}
    maximumRedistributePrefix.EntityData.Leafs["warning-only"] = types.YLeaf{"WarningOnly", maximumRedistributePrefix.WarningOnly}
    return &(maximumRedistributePrefix.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_DefaultInformation
// Control distribution of default information
type Ospf_Processes_Process_Vrfs_Vrf_DefaultInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Always advertise default route. The type is bool. The default value is
    // false.
    AlwaysAdvertise interface{}

    // OSPF metric. The type is interface{} with range: 1..16777214. The default
    // value is 1.
    Metric interface{}

    // OSPF External metric type. The type is OspfLinkStateMetric. The default
    // value is type2.
    MetricType interface{}

    // Routing policy name. The type is string.
    RoutePolicyName interface{}
}

func (defaultInformation *Ospf_Processes_Process_Vrfs_Vrf_DefaultInformation) GetEntityData() *types.CommonEntityData {
    defaultInformation.EntityData.YFilter = defaultInformation.YFilter
    defaultInformation.EntityData.YangName = "default-information"
    defaultInformation.EntityData.BundleName = "cisco_ios_xr"
    defaultInformation.EntityData.ParentYangName = "vrf"
    defaultInformation.EntityData.SegmentPath = "default-information"
    defaultInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultInformation.EntityData.Children = make(map[string]types.YChild)
    defaultInformation.EntityData.Leafs = make(map[string]types.YLeaf)
    defaultInformation.EntityData.Leafs["always-advertise"] = types.YLeaf{"AlwaysAdvertise", defaultInformation.AlwaysAdvertise}
    defaultInformation.EntityData.Leafs["metric"] = types.YLeaf{"Metric", defaultInformation.Metric}
    defaultInformation.EntityData.Leafs["metric-type"] = types.YLeaf{"MetricType", defaultInformation.MetricType}
    defaultInformation.EntityData.Leafs["route-policy-name"] = types.YLeaf{"RoutePolicyName", defaultInformation.RoutePolicyName}
    return &(defaultInformation.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Af
// OSPF address family
// This type is a presence type.
type Ospf_Processes_Process_Vrfs_Vrf_Af struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is OspfAddressFamily. This attribute is mandatory.
    AfName interface{}

    // Sub-Address family. The type is OspfSubAddressFamily.
    SafName interface{}
}

func (af *Ospf_Processes_Process_Vrfs_Vrf_Af) GetEntityData() *types.CommonEntityData {
    af.EntityData.YFilter = af.YFilter
    af.EntityData.YangName = "af"
    af.EntityData.BundleName = "cisco_ios_xr"
    af.EntityData.ParentYangName = "vrf"
    af.EntityData.SegmentPath = "af"
    af.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    af.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    af.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    af.EntityData.Children = make(map[string]types.YChild)
    af.EntityData.Leafs = make(map[string]types.YLeaf)
    af.EntityData.Leafs["af-name"] = types.YLeaf{"AfName", af.AfName}
    af.EntityData.Leafs["saf-name"] = types.YLeaf{"SafName", af.SafName}
    return &(af.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Queue
// Adjust OSPF input queue sizes and processing
// quantums
type Ospf_Processes_Process_Vrfs_Vrf_Queue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of continuous rate-limited LSAs processed for FLUSH. The
    // type is interface{} with range: 30..3000. The default value is 150.
    DispatchRateLimitedFlush interface{}

    // Hello events are dropped when incoming event queue exceeds this. The type
    // is interface{} with range: 1000..30000. The default value is 9500.
    LimitHigh interface{}

    // Maximum number of continuous summary or external LSAs processed. The type
    // is interface{} with range: 30..3000. The default value is 150.
    DispatchSpfLsaLimit interface{}

    // DBDs/Updates are dropped when incoming event queue exceeds this. The type
    // is interface{} with range: 1000..30000. The default value is 8000.
    LimitLow interface{}

    // Maximum number of continuous rate-limited LSAs processed. The type is
    // interface{} with range: 30..3000. The default value is 150.
    DispatchRateLimited interface{}

    // LSA ACKs are dropped when incoming event queue exceeds this. The type is
    // interface{} with range: 1000..30000. The default value is 9000.
    LimitMedium interface{}

    // Maximum number of continuous incoming packet-related events processed. The
    // type is interface{} with range: 30..3000. The default value is 300.
    DispatchIncoming interface{}
}

func (queue *Ospf_Processes_Process_Vrfs_Vrf_Queue) GetEntityData() *types.CommonEntityData {
    queue.EntityData.YFilter = queue.YFilter
    queue.EntityData.YangName = "queue"
    queue.EntityData.BundleName = "cisco_ios_xr"
    queue.EntityData.ParentYangName = "vrf"
    queue.EntityData.SegmentPath = "queue"
    queue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    queue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    queue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    queue.EntityData.Children = make(map[string]types.YChild)
    queue.EntityData.Leafs = make(map[string]types.YLeaf)
    queue.EntityData.Leafs["dispatch-rate-limited-flush"] = types.YLeaf{"DispatchRateLimitedFlush", queue.DispatchRateLimitedFlush}
    queue.EntityData.Leafs["limit-high"] = types.YLeaf{"LimitHigh", queue.LimitHigh}
    queue.EntityData.Leafs["dispatch-spf-lsa-limit"] = types.YLeaf{"DispatchSpfLsaLimit", queue.DispatchSpfLsaLimit}
    queue.EntityData.Leafs["limit-low"] = types.YLeaf{"LimitLow", queue.LimitLow}
    queue.EntityData.Leafs["dispatch-rate-limited"] = types.YLeaf{"DispatchRateLimited", queue.DispatchRateLimited}
    queue.EntityData.Leafs["limit-medium"] = types.YLeaf{"LimitMedium", queue.LimitMedium}
    queue.EntityData.Leafs["dispatch-incoming"] = types.YLeaf{"DispatchIncoming", queue.DispatchIncoming}
    return &(queue.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MaxMetric
// Set maximum metric configuration
type Ospf_Processes_Process_Vrfs_Vrf_MaxMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Block ABR-disable mode entry while in max-metric mode. The type is
    // interface{}.
    MaxMetricNoAbrOff interface{}

    // Set maximum metric on-proc-restart configuration.
    MaxMetricOnProcRestart Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcRestart

    // Set maximum metric on-startup configuration.
    MaxMetricOnStartup Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnStartup

    // Set maximum metric on-proc-migration configuration.
    MaxMetricOnProcMigration Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcMigration

    // Set maximum metric always configuration.
    MaxMetricAlways Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricAlways

    // Set maximum metric on-switchover configuration.
    MaxMetricOnSwitchover Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnSwitchover
}

func (maxMetric *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric) GetEntityData() *types.CommonEntityData {
    maxMetric.EntityData.YFilter = maxMetric.YFilter
    maxMetric.EntityData.YangName = "max-metric"
    maxMetric.EntityData.BundleName = "cisco_ios_xr"
    maxMetric.EntityData.ParentYangName = "vrf"
    maxMetric.EntityData.SegmentPath = "max-metric"
    maxMetric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxMetric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxMetric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxMetric.EntityData.Children = make(map[string]types.YChild)
    maxMetric.EntityData.Children["max-metric-on-proc-restart"] = types.YChild{"MaxMetricOnProcRestart", &maxMetric.MaxMetricOnProcRestart}
    maxMetric.EntityData.Children["max-metric-on-startup"] = types.YChild{"MaxMetricOnStartup", &maxMetric.MaxMetricOnStartup}
    maxMetric.EntityData.Children["max-metric-on-proc-migration"] = types.YChild{"MaxMetricOnProcMigration", &maxMetric.MaxMetricOnProcMigration}
    maxMetric.EntityData.Children["max-metric-always"] = types.YChild{"MaxMetricAlways", &maxMetric.MaxMetricAlways}
    maxMetric.EntityData.Children["max-metric-on-switchover"] = types.YChild{"MaxMetricOnSwitchover", &maxMetric.MaxMetricOnSwitchover}
    maxMetric.EntityData.Leafs = make(map[string]types.YLeaf)
    maxMetric.EntityData.Leafs["max-metric-no-abr-off"] = types.YLeaf{"MaxMetricNoAbrOff", maxMetric.MaxMetricNoAbrOff}
    return &(maxMetric.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcRestart
// Set maximum metric on-proc-restart
// configuration
type Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Let BGP decide when to originate router-LSA with normal metric. The type is
    // bool. The default value is false.
    WaitForBgp interface{}

    // Time in seconds to originate router-LSA with max-metric. The type is
    // interface{} with range: 5..86400. Units are second.
    StartupMax interface{}

    // Set maximum metric for stub links in router-LSAs. The type is bool.
    IncludeStub interface{}

    // Override summary-lsa metric with max-metric value. The type is bool.
    SummaryLsa interface{}

    // Overriding metric in summary-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    SummaryLsaMaximumMetric interface{}

    // Override external-lsa metric with max-metric value. The type is bool.
    ExternalLsa interface{}

    // Overriding metric in external-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    ExternalLsaMaximumMetric interface{}
}

func (maxMetricOnProcRestart *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcRestart) GetEntityData() *types.CommonEntityData {
    maxMetricOnProcRestart.EntityData.YFilter = maxMetricOnProcRestart.YFilter
    maxMetricOnProcRestart.EntityData.YangName = "max-metric-on-proc-restart"
    maxMetricOnProcRestart.EntityData.BundleName = "cisco_ios_xr"
    maxMetricOnProcRestart.EntityData.ParentYangName = "max-metric"
    maxMetricOnProcRestart.EntityData.SegmentPath = "max-metric-on-proc-restart"
    maxMetricOnProcRestart.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxMetricOnProcRestart.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxMetricOnProcRestart.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxMetricOnProcRestart.EntityData.Children = make(map[string]types.YChild)
    maxMetricOnProcRestart.EntityData.Leafs = make(map[string]types.YLeaf)
    maxMetricOnProcRestart.EntityData.Leafs["wait-for-bgp"] = types.YLeaf{"WaitForBgp", maxMetricOnProcRestart.WaitForBgp}
    maxMetricOnProcRestart.EntityData.Leafs["startup-max"] = types.YLeaf{"StartupMax", maxMetricOnProcRestart.StartupMax}
    maxMetricOnProcRestart.EntityData.Leafs["include-stub"] = types.YLeaf{"IncludeStub", maxMetricOnProcRestart.IncludeStub}
    maxMetricOnProcRestart.EntityData.Leafs["summary-lsa"] = types.YLeaf{"SummaryLsa", maxMetricOnProcRestart.SummaryLsa}
    maxMetricOnProcRestart.EntityData.Leafs["summary-lsa-maximum-metric"] = types.YLeaf{"SummaryLsaMaximumMetric", maxMetricOnProcRestart.SummaryLsaMaximumMetric}
    maxMetricOnProcRestart.EntityData.Leafs["external-lsa"] = types.YLeaf{"ExternalLsa", maxMetricOnProcRestart.ExternalLsa}
    maxMetricOnProcRestart.EntityData.Leafs["external-lsa-maximum-metric"] = types.YLeaf{"ExternalLsaMaximumMetric", maxMetricOnProcRestart.ExternalLsaMaximumMetric}
    return &(maxMetricOnProcRestart.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnStartup
// Set maximum metric on-startup configuration
type Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnStartup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Let BGP decide when to originate router-LSA with normal metric. The type is
    // bool. The default value is false.
    WaitForBgp interface{}

    // Time in seconds to originate router-LSA with max-metric. The type is
    // interface{} with range: 5..86400. Units are second.
    StartupMax interface{}

    // Set maximum metric for stub links in router-LSAs. The type is bool.
    IncludeStub interface{}

    // Override summary-lsa metric with max-metric value. The type is bool.
    SummaryLsa interface{}

    // Overriding metric in summary-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    SummaryLsaMaximumMetric interface{}

    // Override external-lsa metric with max-metric value. The type is bool.
    ExternalLsa interface{}

    // Overriding metric in external-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    ExternalLsaMaximumMetric interface{}
}

func (maxMetricOnStartup *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnStartup) GetEntityData() *types.CommonEntityData {
    maxMetricOnStartup.EntityData.YFilter = maxMetricOnStartup.YFilter
    maxMetricOnStartup.EntityData.YangName = "max-metric-on-startup"
    maxMetricOnStartup.EntityData.BundleName = "cisco_ios_xr"
    maxMetricOnStartup.EntityData.ParentYangName = "max-metric"
    maxMetricOnStartup.EntityData.SegmentPath = "max-metric-on-startup"
    maxMetricOnStartup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxMetricOnStartup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxMetricOnStartup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxMetricOnStartup.EntityData.Children = make(map[string]types.YChild)
    maxMetricOnStartup.EntityData.Leafs = make(map[string]types.YLeaf)
    maxMetricOnStartup.EntityData.Leafs["wait-for-bgp"] = types.YLeaf{"WaitForBgp", maxMetricOnStartup.WaitForBgp}
    maxMetricOnStartup.EntityData.Leafs["startup-max"] = types.YLeaf{"StartupMax", maxMetricOnStartup.StartupMax}
    maxMetricOnStartup.EntityData.Leafs["include-stub"] = types.YLeaf{"IncludeStub", maxMetricOnStartup.IncludeStub}
    maxMetricOnStartup.EntityData.Leafs["summary-lsa"] = types.YLeaf{"SummaryLsa", maxMetricOnStartup.SummaryLsa}
    maxMetricOnStartup.EntityData.Leafs["summary-lsa-maximum-metric"] = types.YLeaf{"SummaryLsaMaximumMetric", maxMetricOnStartup.SummaryLsaMaximumMetric}
    maxMetricOnStartup.EntityData.Leafs["external-lsa"] = types.YLeaf{"ExternalLsa", maxMetricOnStartup.ExternalLsa}
    maxMetricOnStartup.EntityData.Leafs["external-lsa-maximum-metric"] = types.YLeaf{"ExternalLsaMaximumMetric", maxMetricOnStartup.ExternalLsaMaximumMetric}
    return &(maxMetricOnStartup.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcMigration
// Set maximum metric on-proc-migration
// configuration
type Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcMigration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Let BGP decide when to originate router-LSA with normal metric. The type is
    // bool. The default value is false.
    WaitForBgp interface{}

    // Time in seconds to originate router-LSA with max-metric. The type is
    // interface{} with range: 5..86400. Units are second.
    StartupMax interface{}

    // Set maximum metric for stub links in router-LSAs. The type is bool.
    IncludeStub interface{}

    // Override summary-lsa metric with max-metric value. The type is bool.
    SummaryLsa interface{}

    // Overriding metric in summary-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    SummaryLsaMaximumMetric interface{}

    // Override external-lsa metric with max-metric value. The type is bool.
    ExternalLsa interface{}

    // Overriding metric in external-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    ExternalLsaMaximumMetric interface{}
}

func (maxMetricOnProcMigration *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnProcMigration) GetEntityData() *types.CommonEntityData {
    maxMetricOnProcMigration.EntityData.YFilter = maxMetricOnProcMigration.YFilter
    maxMetricOnProcMigration.EntityData.YangName = "max-metric-on-proc-migration"
    maxMetricOnProcMigration.EntityData.BundleName = "cisco_ios_xr"
    maxMetricOnProcMigration.EntityData.ParentYangName = "max-metric"
    maxMetricOnProcMigration.EntityData.SegmentPath = "max-metric-on-proc-migration"
    maxMetricOnProcMigration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxMetricOnProcMigration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxMetricOnProcMigration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxMetricOnProcMigration.EntityData.Children = make(map[string]types.YChild)
    maxMetricOnProcMigration.EntityData.Leafs = make(map[string]types.YLeaf)
    maxMetricOnProcMigration.EntityData.Leafs["wait-for-bgp"] = types.YLeaf{"WaitForBgp", maxMetricOnProcMigration.WaitForBgp}
    maxMetricOnProcMigration.EntityData.Leafs["startup-max"] = types.YLeaf{"StartupMax", maxMetricOnProcMigration.StartupMax}
    maxMetricOnProcMigration.EntityData.Leafs["include-stub"] = types.YLeaf{"IncludeStub", maxMetricOnProcMigration.IncludeStub}
    maxMetricOnProcMigration.EntityData.Leafs["summary-lsa"] = types.YLeaf{"SummaryLsa", maxMetricOnProcMigration.SummaryLsa}
    maxMetricOnProcMigration.EntityData.Leafs["summary-lsa-maximum-metric"] = types.YLeaf{"SummaryLsaMaximumMetric", maxMetricOnProcMigration.SummaryLsaMaximumMetric}
    maxMetricOnProcMigration.EntityData.Leafs["external-lsa"] = types.YLeaf{"ExternalLsa", maxMetricOnProcMigration.ExternalLsa}
    maxMetricOnProcMigration.EntityData.Leafs["external-lsa-maximum-metric"] = types.YLeaf{"ExternalLsaMaximumMetric", maxMetricOnProcMigration.ExternalLsaMaximumMetric}
    return &(maxMetricOnProcMigration.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricAlways
// Set maximum metric always configuration
type Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricAlways struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set maximum metric for stub links in router-LSAs. The type is bool. The
    // default value is false.
    IncludeStub interface{}

    // Override summary-lsa metric with max-metric value. The type is bool.
    SummaryLsa interface{}

    // Overriding metric in summary-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    SummaryLsaMaximumMetric interface{}

    // Override external-lsa metric with max-metric value. The type is bool.
    ExternalLsa interface{}

    // Overriding metric in external-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    ExternalLsaMaximumMetric interface{}
}

func (maxMetricAlways *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricAlways) GetEntityData() *types.CommonEntityData {
    maxMetricAlways.EntityData.YFilter = maxMetricAlways.YFilter
    maxMetricAlways.EntityData.YangName = "max-metric-always"
    maxMetricAlways.EntityData.BundleName = "cisco_ios_xr"
    maxMetricAlways.EntityData.ParentYangName = "max-metric"
    maxMetricAlways.EntityData.SegmentPath = "max-metric-always"
    maxMetricAlways.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxMetricAlways.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxMetricAlways.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxMetricAlways.EntityData.Children = make(map[string]types.YChild)
    maxMetricAlways.EntityData.Leafs = make(map[string]types.YLeaf)
    maxMetricAlways.EntityData.Leafs["include-stub"] = types.YLeaf{"IncludeStub", maxMetricAlways.IncludeStub}
    maxMetricAlways.EntityData.Leafs["summary-lsa"] = types.YLeaf{"SummaryLsa", maxMetricAlways.SummaryLsa}
    maxMetricAlways.EntityData.Leafs["summary-lsa-maximum-metric"] = types.YLeaf{"SummaryLsaMaximumMetric", maxMetricAlways.SummaryLsaMaximumMetric}
    maxMetricAlways.EntityData.Leafs["external-lsa"] = types.YLeaf{"ExternalLsa", maxMetricAlways.ExternalLsa}
    maxMetricAlways.EntityData.Leafs["external-lsa-maximum-metric"] = types.YLeaf{"ExternalLsaMaximumMetric", maxMetricAlways.ExternalLsaMaximumMetric}
    return &(maxMetricAlways.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnSwitchover
// Set maximum metric on-switchover configuration
type Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnSwitchover struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Let BGP decide when to originate router-LSA with normal metric. The type is
    // bool. The default value is false.
    WaitForBgp interface{}

    // Time in seconds to originate router-LSA with max-metric. The type is
    // interface{} with range: 5..86400. Units are second.
    StartupMax interface{}

    // Set maximum metric for stub links in router-LSAs. The type is bool.
    IncludeStub interface{}

    // Override summary-lsa metric with max-metric value. The type is bool.
    SummaryLsa interface{}

    // Overriding metric in summary-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    SummaryLsaMaximumMetric interface{}

    // Override external-lsa metric with max-metric value. The type is bool.
    ExternalLsa interface{}

    // Overriding metric in external-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    ExternalLsaMaximumMetric interface{}
}

func (maxMetricOnSwitchover *Ospf_Processes_Process_Vrfs_Vrf_MaxMetric_MaxMetricOnSwitchover) GetEntityData() *types.CommonEntityData {
    maxMetricOnSwitchover.EntityData.YFilter = maxMetricOnSwitchover.YFilter
    maxMetricOnSwitchover.EntityData.YangName = "max-metric-on-switchover"
    maxMetricOnSwitchover.EntityData.BundleName = "cisco_ios_xr"
    maxMetricOnSwitchover.EntityData.ParentYangName = "max-metric"
    maxMetricOnSwitchover.EntityData.SegmentPath = "max-metric-on-switchover"
    maxMetricOnSwitchover.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxMetricOnSwitchover.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxMetricOnSwitchover.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxMetricOnSwitchover.EntityData.Children = make(map[string]types.YChild)
    maxMetricOnSwitchover.EntityData.Leafs = make(map[string]types.YLeaf)
    maxMetricOnSwitchover.EntityData.Leafs["wait-for-bgp"] = types.YLeaf{"WaitForBgp", maxMetricOnSwitchover.WaitForBgp}
    maxMetricOnSwitchover.EntityData.Leafs["startup-max"] = types.YLeaf{"StartupMax", maxMetricOnSwitchover.StartupMax}
    maxMetricOnSwitchover.EntityData.Leafs["include-stub"] = types.YLeaf{"IncludeStub", maxMetricOnSwitchover.IncludeStub}
    maxMetricOnSwitchover.EntityData.Leafs["summary-lsa"] = types.YLeaf{"SummaryLsa", maxMetricOnSwitchover.SummaryLsa}
    maxMetricOnSwitchover.EntityData.Leafs["summary-lsa-maximum-metric"] = types.YLeaf{"SummaryLsaMaximumMetric", maxMetricOnSwitchover.SummaryLsaMaximumMetric}
    maxMetricOnSwitchover.EntityData.Leafs["external-lsa"] = types.YLeaf{"ExternalLsa", maxMetricOnSwitchover.ExternalLsa}
    maxMetricOnSwitchover.EntityData.Leafs["external-lsa-maximum-metric"] = types.YLeaf{"ExternalLsaMaximumMetric", maxMetricOnSwitchover.ExternalLsaMaximumMetric}
    return &(maxMetricOnSwitchover.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Nsf
// Non Stop Forwarding configuration
type Ospf_Processes_Process_Vrfs_Vrf_Nsf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum route lifetime following restart in seconds. The type is
    // interface{} with range: 90..1800. Units are second. The default value is
    // 90.
    Lifetime interface{}

    // Enable IETF Non Stop Forwarding. The type is OspfIetfNsf.
    Ietf interface{}

    // Disable helper support role for IETF Non Stop Forwarding. The type is
    // OspfIetfNsfSupport.
    IetfSupportRole interface{}

    // Enable Cisco Non Stop Forwarding. The type is OspfCiscoNsf.
    Cisco interface{}

    // Minimum interval between Non Stop Forwarding restarts in seconds. The type
    // is interface{} with range: 90..3600. Units are second. The default value is
    // 90.
    Interval interface{}

    // Maximum time allowed for external route learning (seconds). The type is
    // interface{} with range: 1..3600. Units are second. The default value is 60.
    FlushDelayTime interface{}

    // Enable Strict LSA checking of IETF NSF. The type is interface{}.
    IetfStrictLsaChecking interface{}
}

func (nsf *Ospf_Processes_Process_Vrfs_Vrf_Nsf) GetEntityData() *types.CommonEntityData {
    nsf.EntityData.YFilter = nsf.YFilter
    nsf.EntityData.YangName = "nsf"
    nsf.EntityData.BundleName = "cisco_ios_xr"
    nsf.EntityData.ParentYangName = "vrf"
    nsf.EntityData.SegmentPath = "nsf"
    nsf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsf.EntityData.Children = make(map[string]types.YChild)
    nsf.EntityData.Leafs = make(map[string]types.YLeaf)
    nsf.EntityData.Leafs["lifetime"] = types.YLeaf{"Lifetime", nsf.Lifetime}
    nsf.EntityData.Leafs["ietf"] = types.YLeaf{"Ietf", nsf.Ietf}
    nsf.EntityData.Leafs["ietf-support-role"] = types.YLeaf{"IetfSupportRole", nsf.IetfSupportRole}
    nsf.EntityData.Leafs["cisco"] = types.YLeaf{"Cisco", nsf.Cisco}
    nsf.EntityData.Leafs["interval"] = types.YLeaf{"Interval", nsf.Interval}
    nsf.EntityData.Leafs["flush-delay-time"] = types.YLeaf{"FlushDelayTime", nsf.FlushDelayTime}
    nsf.EntityData.Leafs["ietf-strict-lsa-checking"] = types.YLeaf{"IetfStrictLsaChecking", nsf.IetfStrictLsaChecking}
    return &(nsf.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope
// Process scope configuration
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Enable/Disable an OSPF area to advertise intra-area prefixes out of this
    // area as external. The type is bool.
    ExternalOut interface{}

    // Enable/Disable prefix suppression for primary addresses. The type is bool.
    // The default value is false.
    PrefixSuppressionPrimary interface{}

    // Enable/Disable ignoring of MTU in DBD packets. The type is bool. The
    // default value is false.
    MtuIgnore interface{}

    // Enable/Disable MPLS LDP sync for igp-shortcuts. The type is bool.
    LdpSyncIgpShortcuts interface{}

    // Enable MPLS LDP Auto Config. The type is interface{}.
    LdpAutoConfig interface{}

    // Enable/Disable an OSPF area to advertise external prefixes into this area
    // as summary. The type is bool.
    SummaryIn interface{}

    // Type of attached network. The type is OspfNetwork.
    NetworkType interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Enable/Disable advertising loopback as a stub network. The type is bool.
    // The default value is false.
    LoopbackStubNetwork interface{}

    // Enable/Disable prefix suppression for secondary addresses. The type is
    // bool. The default value is false.
    PrefixSuppressionSecondary interface{}

    // Enable/Disable OSPF demand circuit. The type is bool. The default value is
    // false.
    DemandCircuit interface{}

    // segment-routing configuration Applicable only in Default VRF. The type is
    // OspfSegmentRouting.
    SegmentRouting interface{}

    // When enabled, prevent sending HELLO packets over link. The type is bool.
    // The default value is false.
    Passive interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Customize size of OSPF packets upto MTU. The type is interface{} with
    // range: 576..10000.
    PacketSize interface{}

    // Enable/Disable MPLS LDP sync. The type is bool.
    LdpSync interface{}

    // Filter OSPF LSA during synchronization and flooding. The type is bool. The
    // default value is false.
    DatabaseFilter interface{}

    // Enable/Disable registration for early interface down notifications. The
    // type is bool. The default value is false.
    LinkDownFastDetect interface{}

    // segment-routing forwarding configuration Applicableonly in Default VRF. The
    // type is OspfSegmentRoutingForwarding.
    SegmentRoutingForwarding interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Router priority for DR and BDR election. The type is interface{} with
    // range: 0..255. The default value is 1.
    Priority interface{}

    // Enable/Disable OSPF flood reduction. The type is bool. The default value is
    // false.
    FloodReduction interface{}

    // Segment Routing Global Block configuration.
    Srgb Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Srgb

    // Fast-reroute configuration.
    FastReroute Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute

    // Filter networks intalled to RIB (disable as ACL name means filtering is
    // disabled).
    DistributeList Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DistributeList

    // BFD configuration.
    Bfd Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Bfd

    // Authentication.
    Authentication Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication

    // Container class for security related configuration parameters.
    Security Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DeadIntervalMinimal

    // Interface fallback cost.
    CostFallback Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_CostFallback
}

func (processScope *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope) GetEntityData() *types.CommonEntityData {
    processScope.EntityData.YFilter = processScope.YFilter
    processScope.EntityData.YangName = "process-scope"
    processScope.EntityData.BundleName = "cisco_ios_xr"
    processScope.EntityData.ParentYangName = "vrf"
    processScope.EntityData.SegmentPath = "process-scope"
    processScope.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    processScope.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    processScope.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    processScope.EntityData.Children = make(map[string]types.YChild)
    processScope.EntityData.Children["srgb"] = types.YChild{"Srgb", &processScope.Srgb}
    processScope.EntityData.Children["fast-reroute"] = types.YChild{"FastReroute", &processScope.FastReroute}
    processScope.EntityData.Children["distribute-list"] = types.YChild{"DistributeList", &processScope.DistributeList}
    processScope.EntityData.Children["bfd"] = types.YChild{"Bfd", &processScope.Bfd}
    processScope.EntityData.Children["authentication"] = types.YChild{"Authentication", &processScope.Authentication}
    processScope.EntityData.Children["security"] = types.YChild{"Security", &processScope.Security}
    processScope.EntityData.Children["dead-interval-minimal"] = types.YChild{"DeadIntervalMinimal", &processScope.DeadIntervalMinimal}
    processScope.EntityData.Children["cost-fallback"] = types.YChild{"CostFallback", &processScope.CostFallback}
    processScope.EntityData.Leafs = make(map[string]types.YLeaf)
    processScope.EntityData.Leafs["cost"] = types.YLeaf{"Cost", processScope.Cost}
    processScope.EntityData.Leafs["external-out"] = types.YLeaf{"ExternalOut", processScope.ExternalOut}
    processScope.EntityData.Leafs["prefix-suppression-primary"] = types.YLeaf{"PrefixSuppressionPrimary", processScope.PrefixSuppressionPrimary}
    processScope.EntityData.Leafs["mtu-ignore"] = types.YLeaf{"MtuIgnore", processScope.MtuIgnore}
    processScope.EntityData.Leafs["ldp-sync-igp-shortcuts"] = types.YLeaf{"LdpSyncIgpShortcuts", processScope.LdpSyncIgpShortcuts}
    processScope.EntityData.Leafs["ldp-auto-config"] = types.YLeaf{"LdpAutoConfig", processScope.LdpAutoConfig}
    processScope.EntityData.Leafs["summary-in"] = types.YLeaf{"SummaryIn", processScope.SummaryIn}
    processScope.EntityData.Leafs["network-type"] = types.YLeaf{"NetworkType", processScope.NetworkType}
    processScope.EntityData.Leafs["hello-interval"] = types.YLeaf{"HelloInterval", processScope.HelloInterval}
    processScope.EntityData.Leafs["loopback-stub-network"] = types.YLeaf{"LoopbackStubNetwork", processScope.LoopbackStubNetwork}
    processScope.EntityData.Leafs["prefix-suppression-secondary"] = types.YLeaf{"PrefixSuppressionSecondary", processScope.PrefixSuppressionSecondary}
    processScope.EntityData.Leafs["demand-circuit"] = types.YLeaf{"DemandCircuit", processScope.DemandCircuit}
    processScope.EntityData.Leafs["segment-routing"] = types.YLeaf{"SegmentRouting", processScope.SegmentRouting}
    processScope.EntityData.Leafs["passive"] = types.YLeaf{"Passive", processScope.Passive}
    processScope.EntityData.Leafs["transmit-delay"] = types.YLeaf{"TransmitDelay", processScope.TransmitDelay}
    processScope.EntityData.Leafs["packet-size"] = types.YLeaf{"PacketSize", processScope.PacketSize}
    processScope.EntityData.Leafs["ldp-sync"] = types.YLeaf{"LdpSync", processScope.LdpSync}
    processScope.EntityData.Leafs["database-filter"] = types.YLeaf{"DatabaseFilter", processScope.DatabaseFilter}
    processScope.EntityData.Leafs["link-down-fast-detect"] = types.YLeaf{"LinkDownFastDetect", processScope.LinkDownFastDetect}
    processScope.EntityData.Leafs["segment-routing-forwarding"] = types.YLeaf{"SegmentRoutingForwarding", processScope.SegmentRoutingForwarding}
    processScope.EntityData.Leafs["retransmit-interval"] = types.YLeaf{"RetransmitInterval", processScope.RetransmitInterval}
    processScope.EntityData.Leafs["priority"] = types.YLeaf{"Priority", processScope.Priority}
    processScope.EntityData.Leafs["flood-reduction"] = types.YLeaf{"FloodReduction", processScope.FloodReduction}
    return &(processScope.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Srgb
// Segment Routing Global Block configuration
// This type is a presence type.
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Srgb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The lower bound of the SRGB. The type is interface{} with range:
    // 16000..1048575. This attribute is mandatory.
    LowerBound interface{}

    // The upper bound of the SRGB. The type is interface{} with range:
    // 16000..1048575. This attribute is mandatory.
    UpperBound interface{}
}

func (srgb *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Srgb) GetEntityData() *types.CommonEntityData {
    srgb.EntityData.YFilter = srgb.YFilter
    srgb.EntityData.YangName = "srgb"
    srgb.EntityData.BundleName = "cisco_ios_xr"
    srgb.EntityData.ParentYangName = "process-scope"
    srgb.EntityData.SegmentPath = "srgb"
    srgb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srgb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srgb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srgb.EntityData.Children = make(map[string]types.YChild)
    srgb.EntityData.Leafs = make(map[string]types.YLeaf)
    srgb.EntityData.Leafs["lower-bound"] = types.YLeaf{"LowerBound", srgb.LowerBound}
    srgb.EntityData.Leafs["upper-bound"] = types.YLeaf{"UpperBound", srgb.UpperBound}
    return &(srgb.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute
// Fast-reroute configuration
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // OspfProcFastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink

    // Fast-reroute per-prefix configuration.
    PerPrefix Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute) GetEntityData() *types.CommonEntityData {
    fastReroute.EntityData.YFilter = fastReroute.YFilter
    fastReroute.EntityData.YangName = "fast-reroute"
    fastReroute.EntityData.BundleName = "cisco_ios_xr"
    fastReroute.EntityData.ParentYangName = "process-scope"
    fastReroute.EntityData.SegmentPath = "fast-reroute"
    fastReroute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fastReroute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fastReroute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fastReroute.EntityData.Children = make(map[string]types.YChild)
    fastReroute.EntityData.Children["per-link"] = types.YChild{"PerLink", &fastReroute.PerLink}
    fastReroute.EntityData.Children["per-prefix"] = types.YChild{"PerPrefix", &fastReroute.PerPrefix}
    fastReroute.EntityData.Leafs = make(map[string]types.YLeaf)
    fastReroute.EntityData.Leafs["fast-reroute-enable"] = types.YLeaf{"FastRerouteEnable", fastReroute.FastRerouteEnable}
    return &(fastReroute.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink) GetEntityData() *types.CommonEntityData {
    perLink.EntityData.YFilter = perLink.YFilter
    perLink.EntityData.YangName = "per-link"
    perLink.EntityData.BundleName = "cisco_ios_xr"
    perLink.EntityData.ParentYangName = "fast-reroute"
    perLink.EntityData.SegmentPath = "per-link"
    perLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perLink.EntityData.Children = make(map[string]types.YChild)
    perLink.EntityData.Children["candidate-interfaces"] = types.YChild{"CandidateInterfaces", &perLink.CandidateInterfaces}
    perLink.EntityData.Children["exclude-interfaces"] = types.YChild{"ExcludeInterfaces", &perLink.ExcludeInterfaces}
    perLink.EntityData.Leafs = make(map[string]types.YLeaf)
    perLink.EntityData.Leafs["fast-reroute-use-candidate-only"] = types.YLeaf{"FastRerouteUseCandidateOnly", perLink.FastRerouteUseCandidateOnly}
    return &(perLink.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetEntityData() *types.CommonEntityData {
    candidateInterfaces.EntityData.YFilter = candidateInterfaces.YFilter
    candidateInterfaces.EntityData.YangName = "candidate-interfaces"
    candidateInterfaces.EntityData.BundleName = "cisco_ios_xr"
    candidateInterfaces.EntityData.ParentYangName = "per-link"
    candidateInterfaces.EntityData.SegmentPath = "candidate-interfaces"
    candidateInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterfaces.EntityData.Children = make(map[string]types.YChild)
    candidateInterfaces.EntityData.Children["candidate-interface"] = types.YChild{"CandidateInterface", nil}
    for i := range candidateInterfaces.CandidateInterface {
        candidateInterfaces.EntityData.Children[types.GetSegmentPath(&candidateInterfaces.CandidateInterface[i])] = types.YChild{"CandidateInterface", &candidateInterfaces.CandidateInterface[i]}
    }
    candidateInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(candidateInterfaces.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetEntityData() *types.CommonEntityData {
    candidateInterface.EntityData.YFilter = candidateInterface.YFilter
    candidateInterface.EntityData.YangName = "candidate-interface"
    candidateInterface.EntityData.BundleName = "cisco_ios_xr"
    candidateInterface.EntityData.ParentYangName = "candidate-interfaces"
    candidateInterface.EntityData.SegmentPath = "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
    candidateInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterface.EntityData.Children = make(map[string]types.YChild)
    candidateInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    candidateInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", candidateInterface.InterfaceName}
    return &(candidateInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetEntityData() *types.CommonEntityData {
    excludeInterfaces.EntityData.YFilter = excludeInterfaces.YFilter
    excludeInterfaces.EntityData.YangName = "exclude-interfaces"
    excludeInterfaces.EntityData.BundleName = "cisco_ios_xr"
    excludeInterfaces.EntityData.ParentYangName = "per-link"
    excludeInterfaces.EntityData.SegmentPath = "exclude-interfaces"
    excludeInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterfaces.EntityData.Children = make(map[string]types.YChild)
    excludeInterfaces.EntityData.Children["exclude-interface"] = types.YChild{"ExcludeInterface", nil}
    for i := range excludeInterfaces.ExcludeInterface {
        excludeInterfaces.EntityData.Children[types.GetSegmentPath(&excludeInterfaces.ExcludeInterface[i])] = types.YChild{"ExcludeInterface", &excludeInterfaces.ExcludeInterface[i]}
    }
    excludeInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(excludeInterfaces.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetEntityData() *types.CommonEntityData {
    excludeInterface.EntityData.YFilter = excludeInterface.YFilter
    excludeInterface.EntityData.YangName = "exclude-interface"
    excludeInterface.EntityData.BundleName = "cisco_ios_xr"
    excludeInterface.EntityData.ParentYangName = "exclude-interfaces"
    excludeInterface.EntityData.SegmentPath = "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
    excludeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterface.EntityData.Children = make(map[string]types.YChild)
    excludeInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    excludeInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", excludeInterface.InterfaceName}
    return &(excludeInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix
// Fast-reroute per-prefix configuration
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology Independet LFA configuration. The type is bool.
    TopologyIndependentLfa interface{}

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Remote LFA configuration.
    RemoteLfa Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix) GetEntityData() *types.CommonEntityData {
    perPrefix.EntityData.YFilter = perPrefix.YFilter
    perPrefix.EntityData.YangName = "per-prefix"
    perPrefix.EntityData.BundleName = "cisco_ios_xr"
    perPrefix.EntityData.ParentYangName = "fast-reroute"
    perPrefix.EntityData.SegmentPath = "per-prefix"
    perPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perPrefix.EntityData.Children = make(map[string]types.YChild)
    perPrefix.EntityData.Children["remote-lfa"] = types.YChild{"RemoteLfa", &perPrefix.RemoteLfa}
    perPrefix.EntityData.Children["candidate-interfaces"] = types.YChild{"CandidateInterfaces", &perPrefix.CandidateInterfaces}
    perPrefix.EntityData.Children["exclude-interfaces"] = types.YChild{"ExcludeInterfaces", &perPrefix.ExcludeInterfaces}
    perPrefix.EntityData.Leafs = make(map[string]types.YLeaf)
    perPrefix.EntityData.Leafs["topology-independent-lfa"] = types.YLeaf{"TopologyIndependentLfa", perPrefix.TopologyIndependentLfa}
    perPrefix.EntityData.Leafs["fast-reroute-use-candidate-only"] = types.YLeaf{"FastRerouteUseCandidateOnly", perPrefix.FastRerouteUseCandidateOnly}
    return &(perPrefix.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa
// Remote LFA configuration
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable/Disable remote LFA computation. The type is OspfProcFrrRlfaTunnel.
    Tunnel interface{}

    // Maximum path cost to remote LFA. The type is interface{} with range:
    // 1..4294967295.
    MaximumCost interface{}
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) GetEntityData() *types.CommonEntityData {
    remoteLfa.EntityData.YFilter = remoteLfa.YFilter
    remoteLfa.EntityData.YangName = "remote-lfa"
    remoteLfa.EntityData.BundleName = "cisco_ios_xr"
    remoteLfa.EntityData.ParentYangName = "per-prefix"
    remoteLfa.EntityData.SegmentPath = "remote-lfa"
    remoteLfa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteLfa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteLfa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteLfa.EntityData.Children = make(map[string]types.YChild)
    remoteLfa.EntityData.Leafs = make(map[string]types.YLeaf)
    remoteLfa.EntityData.Leafs["tunnel"] = types.YLeaf{"Tunnel", remoteLfa.Tunnel}
    remoteLfa.EntityData.Leafs["maximum-cost"] = types.YLeaf{"MaximumCost", remoteLfa.MaximumCost}
    return &(remoteLfa.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetEntityData() *types.CommonEntityData {
    candidateInterfaces.EntityData.YFilter = candidateInterfaces.YFilter
    candidateInterfaces.EntityData.YangName = "candidate-interfaces"
    candidateInterfaces.EntityData.BundleName = "cisco_ios_xr"
    candidateInterfaces.EntityData.ParentYangName = "per-prefix"
    candidateInterfaces.EntityData.SegmentPath = "candidate-interfaces"
    candidateInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterfaces.EntityData.Children = make(map[string]types.YChild)
    candidateInterfaces.EntityData.Children["candidate-interface"] = types.YChild{"CandidateInterface", nil}
    for i := range candidateInterfaces.CandidateInterface {
        candidateInterfaces.EntityData.Children[types.GetSegmentPath(&candidateInterfaces.CandidateInterface[i])] = types.YChild{"CandidateInterface", &candidateInterfaces.CandidateInterface[i]}
    }
    candidateInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(candidateInterfaces.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetEntityData() *types.CommonEntityData {
    candidateInterface.EntityData.YFilter = candidateInterface.YFilter
    candidateInterface.EntityData.YangName = "candidate-interface"
    candidateInterface.EntityData.BundleName = "cisco_ios_xr"
    candidateInterface.EntityData.ParentYangName = "candidate-interfaces"
    candidateInterface.EntityData.SegmentPath = "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
    candidateInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterface.EntityData.Children = make(map[string]types.YChild)
    candidateInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    candidateInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", candidateInterface.InterfaceName}
    return &(candidateInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetEntityData() *types.CommonEntityData {
    excludeInterfaces.EntityData.YFilter = excludeInterfaces.YFilter
    excludeInterfaces.EntityData.YangName = "exclude-interfaces"
    excludeInterfaces.EntityData.BundleName = "cisco_ios_xr"
    excludeInterfaces.EntityData.ParentYangName = "per-prefix"
    excludeInterfaces.EntityData.SegmentPath = "exclude-interfaces"
    excludeInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterfaces.EntityData.Children = make(map[string]types.YChild)
    excludeInterfaces.EntityData.Children["exclude-interface"] = types.YChild{"ExcludeInterface", nil}
    for i := range excludeInterfaces.ExcludeInterface {
        excludeInterfaces.EntityData.Children[types.GetSegmentPath(&excludeInterfaces.ExcludeInterface[i])] = types.YChild{"ExcludeInterface", &excludeInterfaces.ExcludeInterface[i]}
    }
    excludeInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(excludeInterfaces.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetEntityData() *types.CommonEntityData {
    excludeInterface.EntityData.YFilter = excludeInterface.YFilter
    excludeInterface.EntityData.YangName = "exclude-interface"
    excludeInterface.EntityData.BundleName = "cisco_ios_xr"
    excludeInterface.EntityData.ParentYangName = "exclude-interfaces"
    excludeInterface.EntityData.SegmentPath = "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
    excludeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterface.EntityData.Children = make(map[string]types.YChild)
    excludeInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    excludeInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", excludeInterface.InterfaceName}
    return &(excludeInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DistributeList
// Filter networks intalled to RIB (disable as ACL
// name means filtering is disabled)
// This type is a presence type.
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DistributeList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Access Control List name. The type is string.
    AccessListName interface{}

    // Route Policy name. The type is string.
    RoutePolicyName interface{}
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DistributeList) GetEntityData() *types.CommonEntityData {
    distributeList.EntityData.YFilter = distributeList.YFilter
    distributeList.EntityData.YangName = "distribute-list"
    distributeList.EntityData.BundleName = "cisco_ios_xr"
    distributeList.EntityData.ParentYangName = "process-scope"
    distributeList.EntityData.SegmentPath = "distribute-list"
    distributeList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    distributeList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    distributeList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    distributeList.EntityData.Children = make(map[string]types.YChild)
    distributeList.EntityData.Leafs = make(map[string]types.YLeaf)
    distributeList.EntityData.Leafs["access-list-name"] = types.YLeaf{"AccessListName", distributeList.AccessListName}
    distributeList.EntityData.Leafs["route-policy-name"] = types.YLeaf{"RoutePolicyName", distributeList.RoutePolicyName}
    return &(distributeList.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Bfd
// BFD configuration
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Bfd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Hello interval for BFD sessions created by OSPF. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    Interval interface{}

    // Detection multiplier for BFD sessions created by OSPF. The type is
    // interface{} with range: 2..50.
    DetectionMultiplier interface{}

    // use of Bidirectional Forwarding Detection. The type is BfdEnableMode.
    FastDetectMode interface{}
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Bfd) GetEntityData() *types.CommonEntityData {
    bfd.EntityData.YFilter = bfd.YFilter
    bfd.EntityData.YangName = "bfd"
    bfd.EntityData.BundleName = "cisco_ios_xr"
    bfd.EntityData.ParentYangName = "process-scope"
    bfd.EntityData.SegmentPath = "bfd"
    bfd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfd.EntityData.Children = make(map[string]types.YChild)
    bfd.EntityData.Leafs = make(map[string]types.YLeaf)
    bfd.EntityData.Leafs["interval"] = types.YLeaf{"Interval", bfd.Interval}
    bfd.EntityData.Leafs["detection-multiplier"] = types.YLeaf{"DetectionMultiplier", bfd.DetectionMultiplier}
    bfd.EntityData.Leafs["fast-detect-mode"] = types.YLeaf{"FastDetectMode", bfd.FastDetectMode}
    return &(bfd.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication
// Authentication
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // b'(!.+)|([^!].+)'.
    Key interface{}

    // Authentication type.
    Type_ Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "cisco_ios_xr"
    authentication.EntityData.ParentYangName = "process-scope"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authentication.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authentication.EntityData.Children = make(map[string]types.YChild)
    authentication.EntityData.Children["type"] = types.YChild{"Type_", &authentication.Type_}
    authentication.EntityData.Children["message-digest-keies"] = types.YChild{"MessageDigestKeies", &authentication.MessageDigestKeies}
    authentication.EntityData.Leafs = make(map[string]types.YLeaf)
    authentication.EntityData.Leafs["key"] = types.YLeaf{"Key", authentication.Key}
    return &(authentication.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_Type struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_Type) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "type"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "authentication"
    self.EntityData.SegmentPath = "type"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    self.EntityData.Leafs["authen-type"] = types.YLeaf{"AuthenType", self.AuthenType}
    self.EntityData.Leafs["keychain-authen-type"] = types.YLeaf{"KeychainAuthenType", self.KeychainAuthenType}
    self.EntityData.Leafs["keychain-name"] = types.YLeaf{"KeychainName", self.KeychainName}
    return &(self.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies) GetEntityData() *types.CommonEntityData {
    messageDigestKeies.EntityData.YFilter = messageDigestKeies.YFilter
    messageDigestKeies.EntityData.YangName = "message-digest-keies"
    messageDigestKeies.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKeies.EntityData.ParentYangName = "authentication"
    messageDigestKeies.EntityData.SegmentPath = "message-digest-keies"
    messageDigestKeies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKeies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKeies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKeies.EntityData.Children = make(map[string]types.YChild)
    messageDigestKeies.EntityData.Children["message-digest-key"] = types.YChild{"MessageDigestKey", nil}
    for i := range messageDigestKeies.MessageDigestKey {
        messageDigestKeies.EntityData.Children[types.GetSegmentPath(&messageDigestKeies.MessageDigestKey[i])] = types.YChild{"MessageDigestKey", &messageDigestKeies.MessageDigestKey[i]}
    }
    messageDigestKeies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(messageDigestKeies.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: b'(!.+)|([^!].+)'. This
    // attribute is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) GetEntityData() *types.CommonEntityData {
    messageDigestKey.EntityData.YFilter = messageDigestKey.YFilter
    messageDigestKey.EntityData.YangName = "message-digest-key"
    messageDigestKey.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKey.EntityData.ParentYangName = "message-digest-keies"
    messageDigestKey.EntityData.SegmentPath = "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
    messageDigestKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKey.EntityData.Children = make(map[string]types.YChild)
    messageDigestKey.EntityData.Leafs = make(map[string]types.YLeaf)
    messageDigestKey.EntityData.Leafs["key-id"] = types.YLeaf{"KeyId", messageDigestKey.KeyId}
    messageDigestKey.EntityData.Leafs["password"] = types.YLeaf{"Password", messageDigestKey.Password}
    return &(messageDigestKey.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security
// Container class for security related
// configuration parameters
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enabling turns on TTL security.
    Ttl Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security_Ttl
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security) GetEntityData() *types.CommonEntityData {
    security.EntityData.YFilter = security.YFilter
    security.EntityData.YangName = "security"
    security.EntityData.BundleName = "cisco_ios_xr"
    security.EntityData.ParentYangName = "process-scope"
    security.EntityData.SegmentPath = "security"
    security.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    security.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    security.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    security.EntityData.Children = make(map[string]types.YChild)
    security.EntityData.Children["ttl"] = types.YChild{"Ttl", &security.Ttl}
    security.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(security.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security_Ttl
// Enabling turns on TTL security
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security_Ttl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable TTL security. The type is bool.
    Enable interface{}

    // Hop count. The type is interface{} with range: 1..254.
    HopCount interface{}
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_Security_Ttl) GetEntityData() *types.CommonEntityData {
    ttl.EntityData.YFilter = ttl.YFilter
    ttl.EntityData.YangName = "ttl"
    ttl.EntityData.BundleName = "cisco_ios_xr"
    ttl.EntityData.ParentYangName = "security"
    ttl.EntityData.SegmentPath = "ttl"
    ttl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ttl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ttl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ttl.EntityData.Children = make(map[string]types.YChild)
    ttl.EntityData.Leafs = make(map[string]types.YLeaf)
    ttl.EntityData.Leafs["enable"] = types.YLeaf{"Enable", ttl.Enable}
    ttl.EntityData.Leafs["hop-count"] = types.YLeaf{"HopCount", ttl.HopCount}
    return &(ttl.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DeadIntervalMinimal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_DeadIntervalMinimal) GetEntityData() *types.CommonEntityData {
    deadIntervalMinimal.EntityData.YFilter = deadIntervalMinimal.YFilter
    deadIntervalMinimal.EntityData.YangName = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.BundleName = "cisco_ios_xr"
    deadIntervalMinimal.EntityData.ParentYangName = "process-scope"
    deadIntervalMinimal.EntityData.SegmentPath = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    deadIntervalMinimal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    deadIntervalMinimal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    deadIntervalMinimal.EntityData.Children = make(map[string]types.YChild)
    deadIntervalMinimal.EntityData.Leafs = make(map[string]types.YLeaf)
    deadIntervalMinimal.EntityData.Leafs["interval"] = types.YLeaf{"Interval", deadIntervalMinimal.Interval}
    deadIntervalMinimal.EntityData.Leafs["multiplier"] = types.YLeaf{"Multiplier", deadIntervalMinimal.Multiplier}
    return &(deadIntervalMinimal.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_CostFallback
// Interface fallback cost
type Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_CostFallback struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fallback cost of link. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Bandwidth threshold. The type is interface{} with range: 1..4294967.
    Threshold interface{}
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_ProcessScope_CostFallback) GetEntityData() *types.CommonEntityData {
    costFallback.EntityData.YFilter = costFallback.YFilter
    costFallback.EntityData.YangName = "cost-fallback"
    costFallback.EntityData.BundleName = "cisco_ios_xr"
    costFallback.EntityData.ParentYangName = "process-scope"
    costFallback.EntityData.SegmentPath = "cost-fallback"
    costFallback.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    costFallback.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    costFallback.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    costFallback.EntityData.Children = make(map[string]types.YChild)
    costFallback.EntityData.Leafs = make(map[string]types.YLeaf)
    costFallback.EntityData.Leafs["cost"] = types.YLeaf{"Cost", costFallback.Cost}
    costFallback.EntityData.Leafs["threshold"] = types.YLeaf{"Threshold", costFallback.Threshold}
    return &(costFallback.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Redistribution
// Redistribute configurations
type Ospf_Processes_Process_Vrfs_Vrf_Redistribution struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Redistribute information from another routing protocol.
    Redistributes Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes
}

func (redistribution *Ospf_Processes_Process_Vrfs_Vrf_Redistribution) GetEntityData() *types.CommonEntityData {
    redistribution.EntityData.YFilter = redistribution.YFilter
    redistribution.EntityData.YangName = "redistribution"
    redistribution.EntityData.BundleName = "cisco_ios_xr"
    redistribution.EntityData.ParentYangName = "vrf"
    redistribution.EntityData.SegmentPath = "redistribution"
    redistribution.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistribution.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistribution.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistribution.EntityData.Children = make(map[string]types.YChild)
    redistribution.EntityData.Children["redistributes"] = types.YChild{"Redistributes", &redistribution.Redistributes}
    redistribution.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(redistribution.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes
// Redistribute information from another routing
// protocol
type Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Redistribute information from another routing protocol. The type is slice
    // of
    // Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute.
    Redistribute []Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute
}

func (redistributes *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes) GetEntityData() *types.CommonEntityData {
    redistributes.EntityData.YFilter = redistributes.YFilter
    redistributes.EntityData.YangName = "redistributes"
    redistributes.EntityData.BundleName = "cisco_ios_xr"
    redistributes.EntityData.ParentYangName = "redistribution"
    redistributes.EntityData.SegmentPath = "redistributes"
    redistributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistributes.EntityData.Children = make(map[string]types.YChild)
    redistributes.EntityData.Children["redistribute"] = types.YChild{"Redistribute", nil}
    for i := range redistributes.Redistribute {
        redistributes.EntityData.Children[types.GetSegmentPath(&redistributes.Redistribute[i])] = types.YChild{"Redistribute", &redistributes.Redistribute[i]}
    }
    redistributes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(redistributes.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute
// Redistribute information from another routing
// protocol
type Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Distribute list protocol type. The type is
    // OspfRedistProtocol.
    ProtocolName interface{}

    // connected or static or dagr or subscriber or mobile or rip.
    ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip

    // application or isis or ospf. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf.
    ApplicationOrIsisOrOspf []Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf

    // bgp. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Bgp.
    Bgp []Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Bgp

    // eigrp. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Eigrp.
    Eigrp []Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Eigrp
}

func (redistribute *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute) GetEntityData() *types.CommonEntityData {
    redistribute.EntityData.YFilter = redistribute.YFilter
    redistribute.EntityData.YangName = "redistribute"
    redistribute.EntityData.BundleName = "cisco_ios_xr"
    redistribute.EntityData.ParentYangName = "redistributes"
    redistribute.EntityData.SegmentPath = "redistribute" + "[protocol-name='" + fmt.Sprintf("%v", redistribute.ProtocolName) + "']"
    redistribute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistribute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistribute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistribute.EntityData.Children = make(map[string]types.YChild)
    redistribute.EntityData.Children["connected-or-static-or-dagr-or-subscriber-or-mobile-or-rip"] = types.YChild{"ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip", &redistribute.ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip}
    redistribute.EntityData.Children["application-or-isis-or-ospf"] = types.YChild{"ApplicationOrIsisOrOspf", nil}
    for i := range redistribute.ApplicationOrIsisOrOspf {
        redistribute.EntityData.Children[types.GetSegmentPath(&redistribute.ApplicationOrIsisOrOspf[i])] = types.YChild{"ApplicationOrIsisOrOspf", &redistribute.ApplicationOrIsisOrOspf[i]}
    }
    redistribute.EntityData.Children["bgp"] = types.YChild{"Bgp", nil}
    for i := range redistribute.Bgp {
        redistribute.EntityData.Children[types.GetSegmentPath(&redistribute.Bgp[i])] = types.YChild{"Bgp", &redistribute.Bgp[i]}
    }
    redistribute.EntityData.Children["eigrp"] = types.YChild{"Eigrp", nil}
    for i := range redistribute.Eigrp {
        redistribute.EntityData.Children[types.GetSegmentPath(&redistribute.Eigrp[i])] = types.YChild{"Eigrp", &redistribute.Eigrp[i]}
    }
    redistribute.EntityData.Leafs = make(map[string]types.YLeaf)
    redistribute.EntityData.Leafs["protocol-name"] = types.YLeaf{"ProtocolName", redistribute.ProtocolName}
    return &(redistribute.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip
// connected or static or dagr or subscriber or
// mobile or rip
// This type is a presence type.
type Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Disallow subnetting. The type is bool. The default value is false.
    Classful interface{}

    // Default metric for routes being redistributed into OSPF. The type is
    // interface{} with range: 1..16777214.
    DefaultRedistributedRouteMetric interface{}

    // Set tag for routes redistributed into OSPF. The type is interface{} with
    // range: 0..4294967295.
    Tag interface{}

    // Set OSPF External metric type. The type is OspfLinkStateMetric.
    MetricType interface{}

    // EIGRP route type. The type is OspfEigrpRoute.
    EigrpRouteType interface{}

    // Levels of ISIS routes. The type is OspfRouteLevel.
    IsisLevels interface{}

    // OSPF_Internal route type. The type is bool.
    OspfInternal interface{}

    // OSPF external route types. The type is OspfRouteLevel.
    OspfExternal interface{}

    // OSPF NSSA external route types. The type is OspfRouteLevel.
    OspfNssaLevel interface{}

    // Routing policy name. The type is string.
    RoutePolicyName interface{}

    // Preserve MED of BGP routes. The type is bool.
    BgpPreserveMed interface{}

    // Preserve Metric and Metric Type of BGP Default Route. The type is bool.
    BgpPreserveDefaultInfo interface{}

    // LSA type for redistributed routes. The type is OspfRedistLsa. The default
    // value is external.
    OspfRedistLsaType interface{}

    // Only redistribute to NSSA areas. The type is bool.
    OspfnssaOnly interface{}

    // Use metric from RIB for redistributed routes. The type is bool.
    OspfUseRibMetric interface{}
}

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) GetEntityData() *types.CommonEntityData {
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.YFilter = connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.YFilter
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.YangName = "connected-or-static-or-dagr-or-subscriber-or-mobile-or-rip"
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.BundleName = "cisco_ios_xr"
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.ParentYangName = "redistribute"
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.SegmentPath = "connected-or-static-or-dagr-or-subscriber-or-mobile-or-rip"
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Children = make(map[string]types.YChild)
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs = make(map[string]types.YLeaf)
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs["classful"] = types.YLeaf{"Classful", connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.Classful}
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs["default-redistributed-route-metric"] = types.YLeaf{"DefaultRedistributedRouteMetric", connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.DefaultRedistributedRouteMetric}
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs["tag"] = types.YLeaf{"Tag", connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.Tag}
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs["metric-type"] = types.YLeaf{"MetricType", connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.MetricType}
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs["eigrp-route-type"] = types.YLeaf{"EigrpRouteType", connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EigrpRouteType}
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs["isis-levels"] = types.YLeaf{"IsisLevels", connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.IsisLevels}
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs["ospf-internal"] = types.YLeaf{"OspfInternal", connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.OspfInternal}
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs["ospf-external"] = types.YLeaf{"OspfExternal", connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.OspfExternal}
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs["ospf-nssa-level"] = types.YLeaf{"OspfNssaLevel", connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.OspfNssaLevel}
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs["route-policy-name"] = types.YLeaf{"RoutePolicyName", connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.RoutePolicyName}
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs["bgp-preserve-med"] = types.YLeaf{"BgpPreserveMed", connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.BgpPreserveMed}
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs["bgp-preserve-default-info"] = types.YLeaf{"BgpPreserveDefaultInfo", connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.BgpPreserveDefaultInfo}
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs["ospf-redist-lsa-type"] = types.YLeaf{"OspfRedistLsaType", connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.OspfRedistLsaType}
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs["ospfnssa-only"] = types.YLeaf{"OspfnssaOnly", connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.OspfnssaOnly}
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs["ospf-use-rib-metric"] = types.YLeaf{"OspfUseRibMetric", connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.OspfUseRibMetric}
    return &(connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf
// application or isis or ospf
type Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. OSPF or ISIS process name or protocol name: bgp,
    // eigrp, connected. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    InstanceName interface{}

    // Disallow subnetting. The type is bool. The default value is false.
    Classful interface{}

    // Default metric for routes being redistributed into OSPF. The type is
    // interface{} with range: 1..16777214.
    DefaultRedistributedRouteMetric interface{}

    // Set tag for routes redistributed into OSPF. The type is interface{} with
    // range: 0..4294967295.
    Tag interface{}

    // Set OSPF External metric type. The type is OspfLinkStateMetric.
    MetricType interface{}

    // EIGRP route type. The type is OspfEigrpRoute.
    EigrpRouteType interface{}

    // Levels of ISIS routes. The type is OspfRouteLevel.
    IsisLevels interface{}

    // OSPF_Internal route type. The type is bool.
    OspfInternal interface{}

    // OSPF external route types. The type is OspfRouteLevel.
    OspfExternal interface{}

    // OSPF NSSA external route types. The type is OspfRouteLevel.
    OspfNssaLevel interface{}

    // Routing policy name. The type is string.
    RoutePolicyName interface{}

    // Preserve MED of BGP routes. The type is bool.
    BgpPreserveMed interface{}

    // Preserve Metric and Metric Type of BGP Default Route. The type is bool.
    BgpPreserveDefaultInfo interface{}

    // LSA type for redistributed routes. The type is OspfRedistLsa. The default
    // value is external.
    OspfRedistLsaType interface{}

    // Only redistribute to NSSA areas. The type is bool.
    OspfnssaOnly interface{}

    // Use metric from RIB for redistributed routes. The type is bool.
    OspfUseRibMetric interface{}
}

func (applicationOrIsisOrOspf *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) GetEntityData() *types.CommonEntityData {
    applicationOrIsisOrOspf.EntityData.YFilter = applicationOrIsisOrOspf.YFilter
    applicationOrIsisOrOspf.EntityData.YangName = "application-or-isis-or-ospf"
    applicationOrIsisOrOspf.EntityData.BundleName = "cisco_ios_xr"
    applicationOrIsisOrOspf.EntityData.ParentYangName = "redistribute"
    applicationOrIsisOrOspf.EntityData.SegmentPath = "application-or-isis-or-ospf" + "[instance-name='" + fmt.Sprintf("%v", applicationOrIsisOrOspf.InstanceName) + "']"
    applicationOrIsisOrOspf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationOrIsisOrOspf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationOrIsisOrOspf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationOrIsisOrOspf.EntityData.Children = make(map[string]types.YChild)
    applicationOrIsisOrOspf.EntityData.Leafs = make(map[string]types.YLeaf)
    applicationOrIsisOrOspf.EntityData.Leafs["instance-name"] = types.YLeaf{"InstanceName", applicationOrIsisOrOspf.InstanceName}
    applicationOrIsisOrOspf.EntityData.Leafs["classful"] = types.YLeaf{"Classful", applicationOrIsisOrOspf.Classful}
    applicationOrIsisOrOspf.EntityData.Leafs["default-redistributed-route-metric"] = types.YLeaf{"DefaultRedistributedRouteMetric", applicationOrIsisOrOspf.DefaultRedistributedRouteMetric}
    applicationOrIsisOrOspf.EntityData.Leafs["tag"] = types.YLeaf{"Tag", applicationOrIsisOrOspf.Tag}
    applicationOrIsisOrOspf.EntityData.Leafs["metric-type"] = types.YLeaf{"MetricType", applicationOrIsisOrOspf.MetricType}
    applicationOrIsisOrOspf.EntityData.Leafs["eigrp-route-type"] = types.YLeaf{"EigrpRouteType", applicationOrIsisOrOspf.EigrpRouteType}
    applicationOrIsisOrOspf.EntityData.Leafs["isis-levels"] = types.YLeaf{"IsisLevels", applicationOrIsisOrOspf.IsisLevels}
    applicationOrIsisOrOspf.EntityData.Leafs["ospf-internal"] = types.YLeaf{"OspfInternal", applicationOrIsisOrOspf.OspfInternal}
    applicationOrIsisOrOspf.EntityData.Leafs["ospf-external"] = types.YLeaf{"OspfExternal", applicationOrIsisOrOspf.OspfExternal}
    applicationOrIsisOrOspf.EntityData.Leafs["ospf-nssa-level"] = types.YLeaf{"OspfNssaLevel", applicationOrIsisOrOspf.OspfNssaLevel}
    applicationOrIsisOrOspf.EntityData.Leafs["route-policy-name"] = types.YLeaf{"RoutePolicyName", applicationOrIsisOrOspf.RoutePolicyName}
    applicationOrIsisOrOspf.EntityData.Leafs["bgp-preserve-med"] = types.YLeaf{"BgpPreserveMed", applicationOrIsisOrOspf.BgpPreserveMed}
    applicationOrIsisOrOspf.EntityData.Leafs["bgp-preserve-default-info"] = types.YLeaf{"BgpPreserveDefaultInfo", applicationOrIsisOrOspf.BgpPreserveDefaultInfo}
    applicationOrIsisOrOspf.EntityData.Leafs["ospf-redist-lsa-type"] = types.YLeaf{"OspfRedistLsaType", applicationOrIsisOrOspf.OspfRedistLsaType}
    applicationOrIsisOrOspf.EntityData.Leafs["ospfnssa-only"] = types.YLeaf{"OspfnssaOnly", applicationOrIsisOrOspf.OspfnssaOnly}
    applicationOrIsisOrOspf.EntityData.Leafs["ospf-use-rib-metric"] = types.YLeaf{"OspfUseRibMetric", applicationOrIsisOrOspf.OspfUseRibMetric}
    return &(applicationOrIsisOrOspf.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Bgp
// bgp
type Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Bgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. OSPF or ISIS process name or protocol name: bgp,
    // eigrp, connected. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    InstanceName interface{}

    // This attribute is a key. First half of BGP AS number in XX.YY format.
    // Mandatory if Protocol is BGP and must not be specified otherwise. Must be a
    // non-zero value if second half is zero. The type is interface{} with range:
    // 0..65535.
    AsXx interface{}

    // This attribute is a key. Second half of BGP AS number in XX.YY format .
    // Mandatory if Protocol is BGP or EIGRP and must not be specified otherwise.
    // Must be a non-zero value if first half is zero. The type is interface{}
    // with range: 0..4294967295.
    AsYy interface{}

    // Disallow subnetting. The type is bool. The default value is false.
    Classful interface{}

    // Default metric for routes being redistributed into OSPF. The type is
    // interface{} with range: 1..16777214.
    DefaultRedistributedRouteMetric interface{}

    // Set tag for routes redistributed into OSPF. The type is interface{} with
    // range: 0..4294967295.
    Tag interface{}

    // Set OSPF External metric type. The type is OspfLinkStateMetric.
    MetricType interface{}

    // EIGRP route type. The type is OspfEigrpRoute.
    EigrpRouteType interface{}

    // Levels of ISIS routes. The type is OspfRouteLevel.
    IsisLevels interface{}

    // OSPF_Internal route type. The type is bool.
    OspfInternal interface{}

    // OSPF external route types. The type is OspfRouteLevel.
    OspfExternal interface{}

    // OSPF NSSA external route types. The type is OspfRouteLevel.
    OspfNssaLevel interface{}

    // Routing policy name. The type is string.
    RoutePolicyName interface{}

    // Preserve MED of BGP routes. The type is bool.
    BgpPreserveMed interface{}

    // Preserve Metric and Metric Type of BGP Default Route. The type is bool.
    BgpPreserveDefaultInfo interface{}

    // LSA type for redistributed routes. The type is OspfRedistLsa. The default
    // value is external.
    OspfRedistLsaType interface{}

    // Only redistribute to NSSA areas. The type is bool.
    OspfnssaOnly interface{}

    // Use metric from RIB for redistributed routes. The type is bool.
    OspfUseRibMetric interface{}
}

func (bgp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Bgp) GetEntityData() *types.CommonEntityData {
    bgp.EntityData.YFilter = bgp.YFilter
    bgp.EntityData.YangName = "bgp"
    bgp.EntityData.BundleName = "cisco_ios_xr"
    bgp.EntityData.ParentYangName = "redistribute"
    bgp.EntityData.SegmentPath = "bgp" + "[instance-name='" + fmt.Sprintf("%v", bgp.InstanceName) + "']" + "[as-xx='" + fmt.Sprintf("%v", bgp.AsXx) + "']" + "[as-yy='" + fmt.Sprintf("%v", bgp.AsYy) + "']"
    bgp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bgp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bgp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bgp.EntityData.Children = make(map[string]types.YChild)
    bgp.EntityData.Leafs = make(map[string]types.YLeaf)
    bgp.EntityData.Leafs["instance-name"] = types.YLeaf{"InstanceName", bgp.InstanceName}
    bgp.EntityData.Leafs["as-xx"] = types.YLeaf{"AsXx", bgp.AsXx}
    bgp.EntityData.Leafs["as-yy"] = types.YLeaf{"AsYy", bgp.AsYy}
    bgp.EntityData.Leafs["classful"] = types.YLeaf{"Classful", bgp.Classful}
    bgp.EntityData.Leafs["default-redistributed-route-metric"] = types.YLeaf{"DefaultRedistributedRouteMetric", bgp.DefaultRedistributedRouteMetric}
    bgp.EntityData.Leafs["tag"] = types.YLeaf{"Tag", bgp.Tag}
    bgp.EntityData.Leafs["metric-type"] = types.YLeaf{"MetricType", bgp.MetricType}
    bgp.EntityData.Leafs["eigrp-route-type"] = types.YLeaf{"EigrpRouteType", bgp.EigrpRouteType}
    bgp.EntityData.Leafs["isis-levels"] = types.YLeaf{"IsisLevels", bgp.IsisLevels}
    bgp.EntityData.Leafs["ospf-internal"] = types.YLeaf{"OspfInternal", bgp.OspfInternal}
    bgp.EntityData.Leafs["ospf-external"] = types.YLeaf{"OspfExternal", bgp.OspfExternal}
    bgp.EntityData.Leafs["ospf-nssa-level"] = types.YLeaf{"OspfNssaLevel", bgp.OspfNssaLevel}
    bgp.EntityData.Leafs["route-policy-name"] = types.YLeaf{"RoutePolicyName", bgp.RoutePolicyName}
    bgp.EntityData.Leafs["bgp-preserve-med"] = types.YLeaf{"BgpPreserveMed", bgp.BgpPreserveMed}
    bgp.EntityData.Leafs["bgp-preserve-default-info"] = types.YLeaf{"BgpPreserveDefaultInfo", bgp.BgpPreserveDefaultInfo}
    bgp.EntityData.Leafs["ospf-redist-lsa-type"] = types.YLeaf{"OspfRedistLsaType", bgp.OspfRedistLsaType}
    bgp.EntityData.Leafs["ospfnssa-only"] = types.YLeaf{"OspfnssaOnly", bgp.OspfnssaOnly}
    bgp.EntityData.Leafs["ospf-use-rib-metric"] = types.YLeaf{"OspfUseRibMetric", bgp.OspfUseRibMetric}
    return &(bgp.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Eigrp
// eigrp
type Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Eigrp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. OSPF or ISIS process name or protocol name: bgp,
    // eigrp, connected. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    InstanceName interface{}

    // This attribute is a key. First half of BGP AS number in XX.YY format.
    // Mandatory if Protocol is BGP and must not be specified otherwise. Must be a
    // non-zero value if second half is zero. The type is interface{} with range:
    // 0..65535.
    AsXx interface{}

    // Disallow subnetting. The type is bool. The default value is false.
    Classful interface{}

    // Default metric for routes being redistributed into OSPF. The type is
    // interface{} with range: 1..16777214.
    DefaultRedistributedRouteMetric interface{}

    // Set tag for routes redistributed into OSPF. The type is interface{} with
    // range: 0..4294967295.
    Tag interface{}

    // Set OSPF External metric type. The type is OspfLinkStateMetric.
    MetricType interface{}

    // EIGRP route type. The type is OspfEigrpRoute.
    EigrpRouteType interface{}

    // Levels of ISIS routes. The type is OspfRouteLevel.
    IsisLevels interface{}

    // OSPF_Internal route type. The type is bool.
    OspfInternal interface{}

    // OSPF external route types. The type is OspfRouteLevel.
    OspfExternal interface{}

    // OSPF NSSA external route types. The type is OspfRouteLevel.
    OspfNssaLevel interface{}

    // Routing policy name. The type is string.
    RoutePolicyName interface{}

    // Preserve MED of BGP routes. The type is bool.
    BgpPreserveMed interface{}

    // Preserve Metric and Metric Type of BGP Default Route. The type is bool.
    BgpPreserveDefaultInfo interface{}

    // LSA type for redistributed routes. The type is OspfRedistLsa. The default
    // value is external.
    OspfRedistLsaType interface{}

    // Only redistribute to NSSA areas. The type is bool.
    OspfnssaOnly interface{}

    // Use metric from RIB for redistributed routes. The type is bool.
    OspfUseRibMetric interface{}
}

func (eigrp *Ospf_Processes_Process_Vrfs_Vrf_Redistribution_Redistributes_Redistribute_Eigrp) GetEntityData() *types.CommonEntityData {
    eigrp.EntityData.YFilter = eigrp.YFilter
    eigrp.EntityData.YangName = "eigrp"
    eigrp.EntityData.BundleName = "cisco_ios_xr"
    eigrp.EntityData.ParentYangName = "redistribute"
    eigrp.EntityData.SegmentPath = "eigrp" + "[instance-name='" + fmt.Sprintf("%v", eigrp.InstanceName) + "']" + "[as-xx='" + fmt.Sprintf("%v", eigrp.AsXx) + "']"
    eigrp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eigrp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eigrp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eigrp.EntityData.Children = make(map[string]types.YChild)
    eigrp.EntityData.Leafs = make(map[string]types.YLeaf)
    eigrp.EntityData.Leafs["instance-name"] = types.YLeaf{"InstanceName", eigrp.InstanceName}
    eigrp.EntityData.Leafs["as-xx"] = types.YLeaf{"AsXx", eigrp.AsXx}
    eigrp.EntityData.Leafs["classful"] = types.YLeaf{"Classful", eigrp.Classful}
    eigrp.EntityData.Leafs["default-redistributed-route-metric"] = types.YLeaf{"DefaultRedistributedRouteMetric", eigrp.DefaultRedistributedRouteMetric}
    eigrp.EntityData.Leafs["tag"] = types.YLeaf{"Tag", eigrp.Tag}
    eigrp.EntityData.Leafs["metric-type"] = types.YLeaf{"MetricType", eigrp.MetricType}
    eigrp.EntityData.Leafs["eigrp-route-type"] = types.YLeaf{"EigrpRouteType", eigrp.EigrpRouteType}
    eigrp.EntityData.Leafs["isis-levels"] = types.YLeaf{"IsisLevels", eigrp.IsisLevels}
    eigrp.EntityData.Leafs["ospf-internal"] = types.YLeaf{"OspfInternal", eigrp.OspfInternal}
    eigrp.EntityData.Leafs["ospf-external"] = types.YLeaf{"OspfExternal", eigrp.OspfExternal}
    eigrp.EntityData.Leafs["ospf-nssa-level"] = types.YLeaf{"OspfNssaLevel", eigrp.OspfNssaLevel}
    eigrp.EntityData.Leafs["route-policy-name"] = types.YLeaf{"RoutePolicyName", eigrp.RoutePolicyName}
    eigrp.EntityData.Leafs["bgp-preserve-med"] = types.YLeaf{"BgpPreserveMed", eigrp.BgpPreserveMed}
    eigrp.EntityData.Leafs["bgp-preserve-default-info"] = types.YLeaf{"BgpPreserveDefaultInfo", eigrp.BgpPreserveDefaultInfo}
    eigrp.EntityData.Leafs["ospf-redist-lsa-type"] = types.YLeaf{"OspfRedistLsaType", eigrp.OspfRedistLsaType}
    eigrp.EntityData.Leafs["ospfnssa-only"] = types.YLeaf{"OspfnssaOnly", eigrp.OspfnssaOnly}
    eigrp.EntityData.Leafs["ospf-use-rib-metric"] = types.YLeaf{"OspfUseRibMetric", eigrp.OspfUseRibMetric}
    return &(eigrp.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AdjacencyStagger
// Staggering OSPF adjacency bring up
type Ospf_Processes_Process_Vrfs_Vrf_AdjacencyStagger struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Disable OSPF adjacency stagger. The type is interface{}.
    Disable interface{}

    // Adjacency Stagger: Initial number of neighbors to bring up per area. The
    // type is interface{} with range: 1..65535. The default value is 2.
    InitialNbr interface{}

    // Adjacency Stagger: Subsequent simultaneous number of neighbors to bring up.
    // The type is interface{} with range: 1..65535. The default value is 64.
    MaxNbr interface{}
}

func (adjacencyStagger *Ospf_Processes_Process_Vrfs_Vrf_AdjacencyStagger) GetEntityData() *types.CommonEntityData {
    adjacencyStagger.EntityData.YFilter = adjacencyStagger.YFilter
    adjacencyStagger.EntityData.YangName = "adjacency-stagger"
    adjacencyStagger.EntityData.BundleName = "cisco_ios_xr"
    adjacencyStagger.EntityData.ParentYangName = "vrf"
    adjacencyStagger.EntityData.SegmentPath = "adjacency-stagger"
    adjacencyStagger.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyStagger.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyStagger.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyStagger.EntityData.Children = make(map[string]types.YChild)
    adjacencyStagger.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencyStagger.EntityData.Leafs["disable"] = types.YLeaf{"Disable", adjacencyStagger.Disable}
    adjacencyStagger.EntityData.Leafs["initial-nbr"] = types.YLeaf{"InitialNbr", adjacencyStagger.InitialNbr}
    adjacencyStagger.EntityData.Leafs["max-nbr"] = types.YLeaf{"MaxNbr", adjacencyStagger.MaxNbr}
    return &(adjacencyStagger.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_MaxLsa
// Set max-lsa configuration
// This type is a presence type.
type Ospf_Processes_Process_Vrfs_Vrf_MaxLsa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set maximum number of non self-generated LSAs. The type is interface{} with
    // range: 1..4294967294. This attribute is mandatory.
    MaxLsaLimit interface{}

    // Set max-lsa threshold for generating a warning message. The type is
    // interface{} with range: 1..100.
    MaxLsaThreshold interface{}

    // Only give warning message when limit is exceeded. The type is bool.
    MaxLsaWarningOnly interface{}

    // Set time during which all adjacencies are suppressed. The type is
    // interface{} with range: 1..35791394.
    MaxLsaIgnoreTime interface{}

    // Set count on how many times adjacencies can be suppressed. The type is
    // interface{} with range: 1..4294967294.
    MaxLsaIgnoreCount interface{}

    // Set number of minutes after which ignore-count is reset to zero. The type
    // is interface{} with range: 2..71582788. Units are minute.
    MaxLsaResetTime interface{}
}

func (maxLsa *Ospf_Processes_Process_Vrfs_Vrf_MaxLsa) GetEntityData() *types.CommonEntityData {
    maxLsa.EntityData.YFilter = maxLsa.YFilter
    maxLsa.EntityData.YangName = "max-lsa"
    maxLsa.EntityData.BundleName = "cisco_ios_xr"
    maxLsa.EntityData.ParentYangName = "vrf"
    maxLsa.EntityData.SegmentPath = "max-lsa"
    maxLsa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxLsa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxLsa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxLsa.EntityData.Children = make(map[string]types.YChild)
    maxLsa.EntityData.Leafs = make(map[string]types.YLeaf)
    maxLsa.EntityData.Leafs["max-lsa-limit"] = types.YLeaf{"MaxLsaLimit", maxLsa.MaxLsaLimit}
    maxLsa.EntityData.Leafs["max-lsa-threshold"] = types.YLeaf{"MaxLsaThreshold", maxLsa.MaxLsaThreshold}
    maxLsa.EntityData.Leafs["max-lsa-warning-only"] = types.YLeaf{"MaxLsaWarningOnly", maxLsa.MaxLsaWarningOnly}
    maxLsa.EntityData.Leafs["max-lsa-ignore-time"] = types.YLeaf{"MaxLsaIgnoreTime", maxLsa.MaxLsaIgnoreTime}
    maxLsa.EntityData.Leafs["max-lsa-ignore-count"] = types.YLeaf{"MaxLsaIgnoreCount", maxLsa.MaxLsaIgnoreCount}
    maxLsa.EntityData.Leafs["max-lsa-reset-time"] = types.YLeaf{"MaxLsaResetTime", maxLsa.MaxLsaResetTime}
    return &(maxLsa.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AutoCost
// Controls automatic cost based on bandwidth
type Ospf_Processes_Process_Vrfs_Vrf_AutoCost struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Disabling auto costing. The type is bool. The default value is false.
    Disable interface{}

    // The reference bandwidth in terms of Mbits per second. The type is
    // interface{} with range: 1..4294967. Units are Mbit/s. The default value is
    // 100.
    Bandwidth interface{}
}

func (autoCost *Ospf_Processes_Process_Vrfs_Vrf_AutoCost) GetEntityData() *types.CommonEntityData {
    autoCost.EntityData.YFilter = autoCost.YFilter
    autoCost.EntityData.YangName = "auto-cost"
    autoCost.EntityData.BundleName = "cisco_ios_xr"
    autoCost.EntityData.ParentYangName = "vrf"
    autoCost.EntityData.SegmentPath = "auto-cost"
    autoCost.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    autoCost.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    autoCost.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    autoCost.EntityData.Children = make(map[string]types.YChild)
    autoCost.EntityData.Leafs = make(map[string]types.YLeaf)
    autoCost.EntityData.Leafs["disable"] = types.YLeaf{"Disable", autoCost.Disable}
    autoCost.EntityData.Leafs["bandwidth"] = types.YLeaf{"Bandwidth", autoCost.Bandwidth}
    return &(autoCost.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Ucmp
// Unequal Cost Multi-ptah configuration
type Ospf_Processes_Process_Vrfs_Vrf_Ucmp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Delay in msecs between primary SPF and UCMP computation. The type is
    // interface{} with range: 1..5000. Units are millisecond. The default value
    // is 100.
    DelayInterval interface{}

    // UCMP feature enable configuration.
    Enable Ospf_Processes_Process_Vrfs_Vrf_Ucmp_Enable

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces
}

func (ucmp *Ospf_Processes_Process_Vrfs_Vrf_Ucmp) GetEntityData() *types.CommonEntityData {
    ucmp.EntityData.YFilter = ucmp.YFilter
    ucmp.EntityData.YangName = "ucmp"
    ucmp.EntityData.BundleName = "cisco_ios_xr"
    ucmp.EntityData.ParentYangName = "vrf"
    ucmp.EntityData.SegmentPath = "ucmp"
    ucmp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ucmp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ucmp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ucmp.EntityData.Children = make(map[string]types.YChild)
    ucmp.EntityData.Children["enable"] = types.YChild{"Enable", &ucmp.Enable}
    ucmp.EntityData.Children["exclude-interfaces"] = types.YChild{"ExcludeInterfaces", &ucmp.ExcludeInterfaces}
    ucmp.EntityData.Leafs = make(map[string]types.YLeaf)
    ucmp.EntityData.Leafs["delay-interval"] = types.YLeaf{"DelayInterval", ucmp.DelayInterval}
    return &(ucmp.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Ucmp_Enable
// UCMP feature enable configuration
type Ospf_Processes_Process_Vrfs_Vrf_Ucmp_Enable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Value of variance. The type is interface{} with range: 101..10000. The
    // default value is 200.
    Variance interface{}

    // Name of the Prefix List. The type is string.
    PrefixListName interface{}
}

func (enable *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_Enable) GetEntityData() *types.CommonEntityData {
    enable.EntityData.YFilter = enable.YFilter
    enable.EntityData.YangName = "enable"
    enable.EntityData.BundleName = "cisco_ios_xr"
    enable.EntityData.ParentYangName = "ucmp"
    enable.EntityData.SegmentPath = "enable"
    enable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    enable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    enable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    enable.EntityData.Children = make(map[string]types.YChild)
    enable.EntityData.Leafs = make(map[string]types.YLeaf)
    enable.EntityData.Leafs["variance"] = types.YLeaf{"Variance", enable.Variance}
    enable.EntityData.Leafs["prefix-list-name"] = types.YLeaf{"PrefixListName", enable.PrefixListName}
    return &(enable.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces) GetEntityData() *types.CommonEntityData {
    excludeInterfaces.EntityData.YFilter = excludeInterfaces.YFilter
    excludeInterfaces.EntityData.YangName = "exclude-interfaces"
    excludeInterfaces.EntityData.BundleName = "cisco_ios_xr"
    excludeInterfaces.EntityData.ParentYangName = "ucmp"
    excludeInterfaces.EntityData.SegmentPath = "exclude-interfaces"
    excludeInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterfaces.EntityData.Children = make(map[string]types.YChild)
    excludeInterfaces.EntityData.Children["exclude-interface"] = types.YChild{"ExcludeInterface", nil}
    for i := range excludeInterfaces.ExcludeInterface {
        excludeInterfaces.EntityData.Children[types.GetSegmentPath(&excludeInterfaces.ExcludeInterface[i])] = types.YChild{"ExcludeInterface", &excludeInterfaces.ExcludeInterface[i]}
    }
    excludeInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(excludeInterfaces.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces_ExcludeInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_Ucmp_ExcludeInterfaces_ExcludeInterface) GetEntityData() *types.CommonEntityData {
    excludeInterface.EntityData.YFilter = excludeInterface.YFilter
    excludeInterface.EntityData.YangName = "exclude-interface"
    excludeInterface.EntityData.BundleName = "cisco_ios_xr"
    excludeInterface.EntityData.ParentYangName = "exclude-interfaces"
    excludeInterface.EntityData.SegmentPath = "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
    excludeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterface.EntityData.Children = make(map[string]types.YChild)
    excludeInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    excludeInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", excludeInterface.InterfaceName}
    return &(excludeInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_FastReroute
// Fast-reroute instance scoped parameters
type Ospf_Processes_Process_Vrfs_Vrf_FastReroute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fast-reroute per-link global configuration.
    PerLink Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerLink

    // Fast-reroute per-prefix global configuration.
    PerPrefix Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_FastReroute) GetEntityData() *types.CommonEntityData {
    fastReroute.EntityData.YFilter = fastReroute.YFilter
    fastReroute.EntityData.YangName = "fast-reroute"
    fastReroute.EntityData.BundleName = "cisco_ios_xr"
    fastReroute.EntityData.ParentYangName = "vrf"
    fastReroute.EntityData.SegmentPath = "fast-reroute"
    fastReroute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fastReroute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fastReroute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fastReroute.EntityData.Children = make(map[string]types.YChild)
    fastReroute.EntityData.Children["per-link"] = types.YChild{"PerLink", &fastReroute.PerLink}
    fastReroute.EntityData.Children["per-prefix"] = types.YChild{"PerPrefix", &fastReroute.PerPrefix}
    fastReroute.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(fastReroute.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerLink
// Fast-reroute per-link global configuration
type Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fast-reroute per-link/per-prefix priority-limit command. The type is
    // OspfFastReroutePriority.
    Priority interface{}
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerLink) GetEntityData() *types.CommonEntityData {
    perLink.EntityData.YFilter = perLink.YFilter
    perLink.EntityData.YangName = "per-link"
    perLink.EntityData.BundleName = "cisco_ios_xr"
    perLink.EntityData.ParentYangName = "fast-reroute"
    perLink.EntityData.SegmentPath = "per-link"
    perLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perLink.EntityData.Children = make(map[string]types.YChild)
    perLink.EntityData.Leafs = make(map[string]types.YLeaf)
    perLink.EntityData.Leafs["priority"] = types.YLeaf{"Priority", perLink.Priority}
    return &(perLink.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix
// Fast-reroute per-prefix global configuration
type Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Disable load sharing between multiple backups. The type is interface{}.
    LoadSharingDisable interface{}

    // Fast-reroute per-link/per-prefix priority-limit command. The type is
    // OspfFastReroutePriority.
    Priority interface{}

    // Fast-reroute tiebreakers configurations.
    Tiebreakers Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix) GetEntityData() *types.CommonEntityData {
    perPrefix.EntityData.YFilter = perPrefix.YFilter
    perPrefix.EntityData.YangName = "per-prefix"
    perPrefix.EntityData.BundleName = "cisco_ios_xr"
    perPrefix.EntityData.ParentYangName = "fast-reroute"
    perPrefix.EntityData.SegmentPath = "per-prefix"
    perPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perPrefix.EntityData.Children = make(map[string]types.YChild)
    perPrefix.EntityData.Children["tiebreakers"] = types.YChild{"Tiebreakers", &perPrefix.Tiebreakers}
    perPrefix.EntityData.Leafs = make(map[string]types.YLeaf)
    perPrefix.EntityData.Leafs["load-sharing-disable"] = types.YLeaf{"LoadSharingDisable", perPrefix.LoadSharingDisable}
    perPrefix.EntityData.Leafs["priority"] = types.YLeaf{"Priority", perPrefix.Priority}
    return &(perPrefix.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers
// Fast-reroute tiebreakers configurations
type Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fast-reroute tiebreakers configuration. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker.
    Tiebreaker []Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers) GetEntityData() *types.CommonEntityData {
    tiebreakers.EntityData.YFilter = tiebreakers.YFilter
    tiebreakers.EntityData.YangName = "tiebreakers"
    tiebreakers.EntityData.BundleName = "cisco_ios_xr"
    tiebreakers.EntityData.ParentYangName = "per-prefix"
    tiebreakers.EntityData.SegmentPath = "tiebreakers"
    tiebreakers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tiebreakers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tiebreakers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tiebreakers.EntityData.Children = make(map[string]types.YChild)
    tiebreakers.EntityData.Children["tiebreaker"] = types.YChild{"Tiebreaker", nil}
    for i := range tiebreakers.Tiebreaker {
        tiebreakers.EntityData.Children[types.GetSegmentPath(&tiebreakers.Tiebreaker[i])] = types.YChild{"Tiebreaker", &tiebreakers.Tiebreaker[i]}
    }
    tiebreakers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tiebreakers.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
// Fast-reroute tiebreakers configuration
type Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Tiebreaker type. The type is
    // OspfFastRerouteTiebreakers.
    TiebreakerType interface{}

    // Index value for a tiebreaker, 0 to disable. The type is interface{} with
    // range: 0..255. This attribute is mandatory.
    TiebreakerIndex interface{}
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetEntityData() *types.CommonEntityData {
    tiebreaker.EntityData.YFilter = tiebreaker.YFilter
    tiebreaker.EntityData.YangName = "tiebreaker"
    tiebreaker.EntityData.BundleName = "cisco_ios_xr"
    tiebreaker.EntityData.ParentYangName = "tiebreakers"
    tiebreaker.EntityData.SegmentPath = "tiebreaker" + "[tiebreaker-type='" + fmt.Sprintf("%v", tiebreaker.TiebreakerType) + "']"
    tiebreaker.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tiebreaker.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tiebreaker.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tiebreaker.EntityData.Children = make(map[string]types.YChild)
    tiebreaker.EntityData.Leafs = make(map[string]types.YLeaf)
    tiebreaker.EntityData.Leafs["tiebreaker-type"] = types.YLeaf{"TiebreakerType", tiebreaker.TiebreakerType}
    tiebreaker.EntityData.Leafs["tiebreaker-index"] = types.YLeaf{"TiebreakerIndex", tiebreaker.TiebreakerIndex}
    return &(tiebreaker.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes
// Configure IP prefix summary
type Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Data container.
    SummaryPrefixData Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefixData

    // keys: prefix, netmask. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_PrefixAndNetmask.
    PrefixAndNetmask []Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_PrefixAndNetmask

    // keys: prefix. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Prefix.
    Prefix []Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Prefix

    // keys: netmask. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Netmask.
    Netmask []Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Netmask
}

func (summaryPrefixes *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetEntityData() *types.CommonEntityData {
    summaryPrefixes.EntityData.YFilter = summaryPrefixes.YFilter
    summaryPrefixes.EntityData.YangName = "summary-prefixes"
    summaryPrefixes.EntityData.BundleName = "cisco_ios_xr"
    summaryPrefixes.EntityData.ParentYangName = "vrf"
    summaryPrefixes.EntityData.SegmentPath = "summary-prefixes"
    summaryPrefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryPrefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryPrefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryPrefixes.EntityData.Children = make(map[string]types.YChild)
    summaryPrefixes.EntityData.Children["summary-prefix-data"] = types.YChild{"SummaryPrefixData", &summaryPrefixes.SummaryPrefixData}
    summaryPrefixes.EntityData.Children["prefix-and-netmask"] = types.YChild{"PrefixAndNetmask", nil}
    for i := range summaryPrefixes.PrefixAndNetmask {
        summaryPrefixes.EntityData.Children[types.GetSegmentPath(&summaryPrefixes.PrefixAndNetmask[i])] = types.YChild{"PrefixAndNetmask", &summaryPrefixes.PrefixAndNetmask[i]}
    }
    summaryPrefixes.EntityData.Children["prefix"] = types.YChild{"Prefix", nil}
    for i := range summaryPrefixes.Prefix {
        summaryPrefixes.EntityData.Children[types.GetSegmentPath(&summaryPrefixes.Prefix[i])] = types.YChild{"Prefix", &summaryPrefixes.Prefix[i]}
    }
    summaryPrefixes.EntityData.Children["netmask"] = types.YChild{"Netmask", nil}
    for i := range summaryPrefixes.Netmask {
        summaryPrefixes.EntityData.Children[types.GetSegmentPath(&summaryPrefixes.Netmask[i])] = types.YChild{"Netmask", &summaryPrefixes.Netmask[i]}
    }
    summaryPrefixes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(summaryPrefixes.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefixData
// Data container.
type Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefixData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Do not advertise when translating OSPF type-7 LSA. The type is bool. The
    // default value is false.
    NotAdvertise interface{}

    // 32-bit tag value. The type is interface{} with range: 0..4294967295.
    Tag interface{}
}

func (summaryPrefixData *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefixData) GetEntityData() *types.CommonEntityData {
    summaryPrefixData.EntityData.YFilter = summaryPrefixData.YFilter
    summaryPrefixData.EntityData.YangName = "summary-prefix-data"
    summaryPrefixData.EntityData.BundleName = "cisco_ios_xr"
    summaryPrefixData.EntityData.ParentYangName = "summary-prefixes"
    summaryPrefixData.EntityData.SegmentPath = "summary-prefix-data"
    summaryPrefixData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryPrefixData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryPrefixData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryPrefixData.EntityData.Children = make(map[string]types.YChild)
    summaryPrefixData.EntityData.Leafs = make(map[string]types.YLeaf)
    summaryPrefixData.EntityData.Leafs["not-advertise"] = types.YLeaf{"NotAdvertise", summaryPrefixData.NotAdvertise}
    summaryPrefixData.EntityData.Leafs["tag"] = types.YLeaf{"Tag", summaryPrefixData.Tag}
    return &(summaryPrefixData.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_PrefixAndNetmask
// keys: prefix, netmask
type Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_PrefixAndNetmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. IP summary prefix. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Prefix interface{}

    // This attribute is a key. Summary netmask. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Netmask interface{}

    // Do not advertise when translating OSPF type-7 LSA. The type is bool. The
    // default value is false.
    NotAdvertise interface{}

    // 32-bit tag value. The type is interface{} with range: 0..4294967295.
    Tag interface{}
}

func (prefixAndNetmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_PrefixAndNetmask) GetEntityData() *types.CommonEntityData {
    prefixAndNetmask.EntityData.YFilter = prefixAndNetmask.YFilter
    prefixAndNetmask.EntityData.YangName = "prefix-and-netmask"
    prefixAndNetmask.EntityData.BundleName = "cisco_ios_xr"
    prefixAndNetmask.EntityData.ParentYangName = "summary-prefixes"
    prefixAndNetmask.EntityData.SegmentPath = "prefix-and-netmask" + "[prefix='" + fmt.Sprintf("%v", prefixAndNetmask.Prefix) + "']" + "[netmask='" + fmt.Sprintf("%v", prefixAndNetmask.Netmask) + "']"
    prefixAndNetmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixAndNetmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixAndNetmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixAndNetmask.EntityData.Children = make(map[string]types.YChild)
    prefixAndNetmask.EntityData.Leafs = make(map[string]types.YLeaf)
    prefixAndNetmask.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", prefixAndNetmask.Prefix}
    prefixAndNetmask.EntityData.Leafs["netmask"] = types.YLeaf{"Netmask", prefixAndNetmask.Netmask}
    prefixAndNetmask.EntityData.Leafs["not-advertise"] = types.YLeaf{"NotAdvertise", prefixAndNetmask.NotAdvertise}
    prefixAndNetmask.EntityData.Leafs["tag"] = types.YLeaf{"Tag", prefixAndNetmask.Tag}
    return &(prefixAndNetmask.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Prefix
// keys: prefix
type Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. IP summary prefix. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Prefix interface{}

    // Do not advertise when translating OSPF type-7 LSA. The type is bool. The
    // default value is false.
    NotAdvertise interface{}

    // 32-bit tag value. The type is interface{} with range: 0..4294967295.
    Tag interface{}
}

func (prefix *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Prefix) GetEntityData() *types.CommonEntityData {
    prefix.EntityData.YFilter = prefix.YFilter
    prefix.EntityData.YangName = "prefix"
    prefix.EntityData.BundleName = "cisco_ios_xr"
    prefix.EntityData.ParentYangName = "summary-prefixes"
    prefix.EntityData.SegmentPath = "prefix" + "[prefix='" + fmt.Sprintf("%v", prefix.Prefix) + "']"
    prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefix.EntityData.Children = make(map[string]types.YChild)
    prefix.EntityData.Leafs = make(map[string]types.YLeaf)
    prefix.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", prefix.Prefix}
    prefix.EntityData.Leafs["not-advertise"] = types.YLeaf{"NotAdvertise", prefix.NotAdvertise}
    prefix.EntityData.Leafs["tag"] = types.YLeaf{"Tag", prefix.Tag}
    return &(prefix.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Netmask
// keys: netmask
type Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Netmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Summary netmask. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Netmask interface{}

    // Do not advertise when translating OSPF type-7 LSA. The type is bool. The
    // default value is false.
    NotAdvertise interface{}

    // 32-bit tag value. The type is interface{} with range: 0..4294967295.
    Tag interface{}
}

func (netmask *Ospf_Processes_Process_Vrfs_Vrf_SummaryPrefixes_Netmask) GetEntityData() *types.CommonEntityData {
    netmask.EntityData.YFilter = netmask.YFilter
    netmask.EntityData.YangName = "netmask"
    netmask.EntityData.BundleName = "cisco_ios_xr"
    netmask.EntityData.ParentYangName = "summary-prefixes"
    netmask.EntityData.SegmentPath = "netmask" + "[netmask='" + fmt.Sprintf("%v", netmask.Netmask) + "']"
    netmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    netmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    netmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    netmask.EntityData.Children = make(map[string]types.YChild)
    netmask.EntityData.Leafs = make(map[string]types.YLeaf)
    netmask.EntityData.Leafs["netmask"] = types.YLeaf{"Netmask", netmask.Netmask}
    netmask.EntityData.Leafs["not-advertise"] = types.YLeaf{"NotAdvertise", netmask.NotAdvertise}
    netmask.EntityData.Leafs["tag"] = types.YLeaf{"Tag", netmask.Tag}
    return &(netmask.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates
// Filter outgoing routing updates
type Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Filter outgoing routing updates for a particular protocol. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates_OutgoingRouteUpdate.
    OutgoingRouteUpdate []Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates_OutgoingRouteUpdate
}

func (outgoingRouteUpdates *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates) GetEntityData() *types.CommonEntityData {
    outgoingRouteUpdates.EntityData.YFilter = outgoingRouteUpdates.YFilter
    outgoingRouteUpdates.EntityData.YangName = "outgoing-route-updates"
    outgoingRouteUpdates.EntityData.BundleName = "cisco_ios_xr"
    outgoingRouteUpdates.EntityData.ParentYangName = "vrf"
    outgoingRouteUpdates.EntityData.SegmentPath = "outgoing-route-updates"
    outgoingRouteUpdates.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    outgoingRouteUpdates.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    outgoingRouteUpdates.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    outgoingRouteUpdates.EntityData.Children = make(map[string]types.YChild)
    outgoingRouteUpdates.EntityData.Children["outgoing-route-update"] = types.YChild{"OutgoingRouteUpdate", nil}
    for i := range outgoingRouteUpdates.OutgoingRouteUpdate {
        outgoingRouteUpdates.EntityData.Children[types.GetSegmentPath(&outgoingRouteUpdates.OutgoingRouteUpdate[i])] = types.YChild{"OutgoingRouteUpdate", &outgoingRouteUpdates.OutgoingRouteUpdate[i]}
    }
    outgoingRouteUpdates.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(outgoingRouteUpdates.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates_OutgoingRouteUpdate
// Filter outgoing routing updates for a
// particular protocol
type Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates_OutgoingRouteUpdate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Distribute list protocol type. The type is
    // OspfDistListProtocol.
    ProtocolName interface{}

    // Access Control List name. The type is string.
    AccessListName interface{}

    // First half of BGP AS number in XX.YY format.  Mandatory if Protocol is BGP
    // and must not be specified otherwise. Must be a non-zero value if second
    // half is zero. The type is interface{} with range: 0..65535.
    AsXx interface{}

    // Second half of BGP AS number in XX.YY format. Mandatory if Protocol is BGP
    // and must not be specified otherwise. Must be a non-zero value if first half
    // is zero. The type is interface{} with range: 0..4294967295.
    AsYy interface{}

    // OSPF process name. The type is string.
    OspfProcessName interface{}
}

func (outgoingRouteUpdate *Ospf_Processes_Process_Vrfs_Vrf_OutgoingRouteUpdates_OutgoingRouteUpdate) GetEntityData() *types.CommonEntityData {
    outgoingRouteUpdate.EntityData.YFilter = outgoingRouteUpdate.YFilter
    outgoingRouteUpdate.EntityData.YangName = "outgoing-route-update"
    outgoingRouteUpdate.EntityData.BundleName = "cisco_ios_xr"
    outgoingRouteUpdate.EntityData.ParentYangName = "outgoing-route-updates"
    outgoingRouteUpdate.EntityData.SegmentPath = "outgoing-route-update" + "[protocol-name='" + fmt.Sprintf("%v", outgoingRouteUpdate.ProtocolName) + "']"
    outgoingRouteUpdate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    outgoingRouteUpdate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    outgoingRouteUpdate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    outgoingRouteUpdate.EntityData.Children = make(map[string]types.YChild)
    outgoingRouteUpdate.EntityData.Leafs = make(map[string]types.YLeaf)
    outgoingRouteUpdate.EntityData.Leafs["protocol-name"] = types.YLeaf{"ProtocolName", outgoingRouteUpdate.ProtocolName}
    outgoingRouteUpdate.EntityData.Leafs["access-list-name"] = types.YLeaf{"AccessListName", outgoingRouteUpdate.AccessListName}
    outgoingRouteUpdate.EntityData.Leafs["as-xx"] = types.YLeaf{"AsXx", outgoingRouteUpdate.AsXx}
    outgoingRouteUpdate.EntityData.Leafs["as-yy"] = types.YLeaf{"AsYy", outgoingRouteUpdate.AsYy}
    outgoingRouteUpdate.EntityData.Leafs["ospf-process-name"] = types.YLeaf{"OspfProcessName", outgoingRouteUpdate.OspfProcessName}
    return &(outgoingRouteUpdate.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Distance
// Administrative distance configuration
type Ospf_Processes_Process_Vrfs_Vrf_Distance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Define an administrative distance. The type is interface{} with range:
    // 1..255. The default value is 110.
    AdminDistance interface{}

    // OSPF distance configuration.
    OspfDistance Ospf_Processes_Process_Vrfs_Vrf_Distance_OspfDistance

    // IP specific administrative distance configuration.
    IpDistances Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances
}

func (distance *Ospf_Processes_Process_Vrfs_Vrf_Distance) GetEntityData() *types.CommonEntityData {
    distance.EntityData.YFilter = distance.YFilter
    distance.EntityData.YangName = "distance"
    distance.EntityData.BundleName = "cisco_ios_xr"
    distance.EntityData.ParentYangName = "vrf"
    distance.EntityData.SegmentPath = "distance"
    distance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    distance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    distance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    distance.EntityData.Children = make(map[string]types.YChild)
    distance.EntityData.Children["ospf-distance"] = types.YChild{"OspfDistance", &distance.OspfDistance}
    distance.EntityData.Children["ip-distances"] = types.YChild{"IpDistances", &distance.IpDistances}
    distance.EntityData.Leafs = make(map[string]types.YLeaf)
    distance.EntityData.Leafs["admin-distance"] = types.YLeaf{"AdminDistance", distance.AdminDistance}
    return &(distance.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Distance_OspfDistance
// OSPF distance configuration
type Ospf_Processes_Process_Vrfs_Vrf_Distance_OspfDistance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Distance for intra-area routes. The type is interface{} with range: 1..255.
    // The default value is 110.
    IntraArea interface{}

    // Distance for inter-area routes. The type is interface{} with range: 1..255.
    // The default value is 110.
    InterArea interface{}

    // Distance for external type 5 and type 7 routes. The type is interface{}
    // with range: 1..255. The default value is 110.
    ExternalRoutes interface{}
}

func (ospfDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_OspfDistance) GetEntityData() *types.CommonEntityData {
    ospfDistance.EntityData.YFilter = ospfDistance.YFilter
    ospfDistance.EntityData.YangName = "ospf-distance"
    ospfDistance.EntityData.BundleName = "cisco_ios_xr"
    ospfDistance.EntityData.ParentYangName = "distance"
    ospfDistance.EntityData.SegmentPath = "ospf-distance"
    ospfDistance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ospfDistance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ospfDistance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ospfDistance.EntityData.Children = make(map[string]types.YChild)
    ospfDistance.EntityData.Leafs = make(map[string]types.YLeaf)
    ospfDistance.EntityData.Leafs["intra-area"] = types.YLeaf{"IntraArea", ospfDistance.IntraArea}
    ospfDistance.EntityData.Leafs["inter-area"] = types.YLeaf{"InterArea", ospfDistance.InterArea}
    ospfDistance.EntityData.Leafs["external-routes"] = types.YLeaf{"ExternalRoutes", ospfDistance.ExternalRoutes}
    return &(ospfDistance.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances
// IP specific administrative distance
// configuration
type Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Administrative distance configuration for a particular IP address. The type
    // is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances_IpDistance.
    IpDistance []Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances_IpDistance
}

func (ipDistances *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances) GetEntityData() *types.CommonEntityData {
    ipDistances.EntityData.YFilter = ipDistances.YFilter
    ipDistances.EntityData.YangName = "ip-distances"
    ipDistances.EntityData.BundleName = "cisco_ios_xr"
    ipDistances.EntityData.ParentYangName = "distance"
    ipDistances.EntityData.SegmentPath = "ip-distances"
    ipDistances.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipDistances.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipDistances.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipDistances.EntityData.Children = make(map[string]types.YChild)
    ipDistances.EntityData.Children["ip-distance"] = types.YChild{"IpDistance", nil}
    for i := range ipDistances.IpDistance {
        ipDistances.EntityData.Children[types.GetSegmentPath(&ipDistances.IpDistance[i])] = types.YChild{"IpDistance", &ipDistances.IpDistance[i]}
    }
    ipDistances.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipDistances.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances_IpDistance
// Administrative distance configuration for a
// particular IP address
type Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances_IpDistance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. IP source address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Address interface{}

    // This attribute is a key. IP wild card bits -- inverted mask. The type is
    // string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Wildcard interface{}

    // Administrative distance. The type is interface{} with range: 1..255. The
    // default value is 110.
    Distance interface{}

    // Access Control List name. The type is string.
    AccessListName interface{}
}

func (ipDistance *Ospf_Processes_Process_Vrfs_Vrf_Distance_IpDistances_IpDistance) GetEntityData() *types.CommonEntityData {
    ipDistance.EntityData.YFilter = ipDistance.YFilter
    ipDistance.EntityData.YangName = "ip-distance"
    ipDistance.EntityData.BundleName = "cisco_ios_xr"
    ipDistance.EntityData.ParentYangName = "ip-distances"
    ipDistance.EntityData.SegmentPath = "ip-distance" + "[address='" + fmt.Sprintf("%v", ipDistance.Address) + "']" + "[wildcard='" + fmt.Sprintf("%v", ipDistance.Wildcard) + "']"
    ipDistance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipDistance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipDistance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipDistance.EntityData.Children = make(map[string]types.YChild)
    ipDistance.EntityData.Leafs = make(map[string]types.YLeaf)
    ipDistance.EntityData.Leafs["address"] = types.YLeaf{"Address", ipDistance.Address}
    ipDistance.EntityData.Leafs["wildcard"] = types.YLeaf{"Wildcard", ipDistance.Wildcard}
    ipDistance.EntityData.Leafs["distance"] = types.YLeaf{"Distance", ipDistance.Distance}
    ipDistance.EntityData.Leafs["access-list-name"] = types.YLeaf{"AccessListName", ipDistance.AccessListName}
    return &(ipDistance.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses
// Area configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration for a particular area. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress.
    AreaAddress []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress

    // Configuration for a particular area. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId.
    AreaAreaId []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId
}

func (areaAddresses *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses) GetEntityData() *types.CommonEntityData {
    areaAddresses.EntityData.YFilter = areaAddresses.YFilter
    areaAddresses.EntityData.YangName = "area-addresses"
    areaAddresses.EntityData.BundleName = "cisco_ios_xr"
    areaAddresses.EntityData.ParentYangName = "vrf"
    areaAddresses.EntityData.SegmentPath = "area-addresses"
    areaAddresses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaAddresses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaAddresses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaAddresses.EntityData.Children = make(map[string]types.YChild)
    areaAddresses.EntityData.Children["area-address"] = types.YChild{"AreaAddress", nil}
    for i := range areaAddresses.AreaAddress {
        areaAddresses.EntityData.Children[types.GetSegmentPath(&areaAddresses.AreaAddress[i])] = types.YChild{"AreaAddress", &areaAddresses.AreaAddress[i]}
    }
    areaAddresses.EntityData.Children["area-area-id"] = types.YChild{"AreaAreaId", nil}
    for i := range areaAddresses.AreaAreaId {
        areaAddresses.EntityData.Children[types.GetSegmentPath(&areaAddresses.AreaAreaId[i])] = types.YChild{"AreaAreaId", &areaAddresses.AreaAreaId[i]}
    }
    areaAddresses.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(areaAddresses.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress
// Configuration for a particular area
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Area ID if in IP address format. The type is
    // string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Address interface{}

    // Configure a route policy for inbound type-3 lsa filtering. The type is
    // string.
    RoutePolicyIn interface{}

    // Set the summary default-cost of a NSSA/stub area. The type is interface{}
    // with range: 1..16777215. The default value is 1.
    DefaultCost interface{}

    // Configure a route policy for outbound type-3 lsa filtering. The type is
    // string.
    RoutePolicyOut interface{}

    // Specify the area as a stub area (send summary LSA stub area). The type is
    // bool.
    Stub interface{}

    // Configure an OSPF area to run MPLS Traffic Engineering. The type is
    // interface{}.
    MplsTrafficEng interface{}

    // Enable/Disable an OSPF area to advertise intra-area prefixes out of this
    // area as external. The type is bool.
    ExternalOut interface{}

    // Enable/Disable an OSPF area to advertise external prefixes into this area
    // as summary. The type is bool.
    SummaryIn interface{}

    // segment-routing configuration Applicable only in Default VRF. The type is
    // OspfSegmentRouting.
    SegmentRouting interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Virtual Link scope configurations.
    VirtualLinkScopes Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes

    // Sham Link scope configurations.
    ShamLinkScopes Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes

    // Area scope configuration.
    AreaScope Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope

    // Name scope configurations.
    NameScopes Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes

    // Multi Area Interface scope configurations.
    MultiAreaInterfaceScopes Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes

    // Summarize routes matching address/mask (border routers only).
    AreaRanges Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges

    // Specify area as a NSSA area.
    Nssa Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa
}

func (areaAddress *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress) GetEntityData() *types.CommonEntityData {
    areaAddress.EntityData.YFilter = areaAddress.YFilter
    areaAddress.EntityData.YangName = "area-address"
    areaAddress.EntityData.BundleName = "cisco_ios_xr"
    areaAddress.EntityData.ParentYangName = "area-addresses"
    areaAddress.EntityData.SegmentPath = "area-address" + "[address='" + fmt.Sprintf("%v", areaAddress.Address) + "']"
    areaAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaAddress.EntityData.Children = make(map[string]types.YChild)
    areaAddress.EntityData.Children["virtual-link-scopes"] = types.YChild{"VirtualLinkScopes", &areaAddress.VirtualLinkScopes}
    areaAddress.EntityData.Children["sham-link-scopes"] = types.YChild{"ShamLinkScopes", &areaAddress.ShamLinkScopes}
    areaAddress.EntityData.Children["area-scope"] = types.YChild{"AreaScope", &areaAddress.AreaScope}
    areaAddress.EntityData.Children["name-scopes"] = types.YChild{"NameScopes", &areaAddress.NameScopes}
    areaAddress.EntityData.Children["multi-area-interface-scopes"] = types.YChild{"MultiAreaInterfaceScopes", &areaAddress.MultiAreaInterfaceScopes}
    areaAddress.EntityData.Children["area-ranges"] = types.YChild{"AreaRanges", &areaAddress.AreaRanges}
    areaAddress.EntityData.Children["nssa"] = types.YChild{"Nssa", &areaAddress.Nssa}
    areaAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    areaAddress.EntityData.Leafs["address"] = types.YLeaf{"Address", areaAddress.Address}
    areaAddress.EntityData.Leafs["route-policy-in"] = types.YLeaf{"RoutePolicyIn", areaAddress.RoutePolicyIn}
    areaAddress.EntityData.Leafs["default-cost"] = types.YLeaf{"DefaultCost", areaAddress.DefaultCost}
    areaAddress.EntityData.Leafs["route-policy-out"] = types.YLeaf{"RoutePolicyOut", areaAddress.RoutePolicyOut}
    areaAddress.EntityData.Leafs["stub"] = types.YLeaf{"Stub", areaAddress.Stub}
    areaAddress.EntityData.Leafs["mpls-traffic-eng"] = types.YLeaf{"MplsTrafficEng", areaAddress.MplsTrafficEng}
    areaAddress.EntityData.Leafs["external-out"] = types.YLeaf{"ExternalOut", areaAddress.ExternalOut}
    areaAddress.EntityData.Leafs["summary-in"] = types.YLeaf{"SummaryIn", areaAddress.SummaryIn}
    areaAddress.EntityData.Leafs["segment-routing"] = types.YLeaf{"SegmentRouting", areaAddress.SegmentRouting}
    areaAddress.EntityData.Leafs["running"] = types.YLeaf{"Running", areaAddress.Running}
    return &(areaAddress.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes
// Virtual Link scope configurations
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Virtual Link configuration. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope.
    VirtualLinkScope []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope
}

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes) GetEntityData() *types.CommonEntityData {
    virtualLinkScopes.EntityData.YFilter = virtualLinkScopes.YFilter
    virtualLinkScopes.EntityData.YangName = "virtual-link-scopes"
    virtualLinkScopes.EntityData.BundleName = "cisco_ios_xr"
    virtualLinkScopes.EntityData.ParentYangName = "area-address"
    virtualLinkScopes.EntityData.SegmentPath = "virtual-link-scopes"
    virtualLinkScopes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    virtualLinkScopes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    virtualLinkScopes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    virtualLinkScopes.EntityData.Children = make(map[string]types.YChild)
    virtualLinkScopes.EntityData.Children["virtual-link-scope"] = types.YChild{"VirtualLinkScope", nil}
    for i := range virtualLinkScopes.VirtualLinkScope {
        virtualLinkScopes.EntityData.Children[types.GetSegmentPath(&virtualLinkScopes.VirtualLinkScope[i])] = types.YChild{"VirtualLinkScope", &virtualLinkScopes.VirtualLinkScope[i]}
    }
    virtualLinkScopes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(virtualLinkScopes.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope
// Virtual Link configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Router ID of virtual link neighbor. The type is
    // string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Address interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Authentication.
    Authentication Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal
}

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) GetEntityData() *types.CommonEntityData {
    virtualLinkScope.EntityData.YFilter = virtualLinkScope.YFilter
    virtualLinkScope.EntityData.YangName = "virtual-link-scope"
    virtualLinkScope.EntityData.BundleName = "cisco_ios_xr"
    virtualLinkScope.EntityData.ParentYangName = "virtual-link-scopes"
    virtualLinkScope.EntityData.SegmentPath = "virtual-link-scope" + "[address='" + fmt.Sprintf("%v", virtualLinkScope.Address) + "']"
    virtualLinkScope.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    virtualLinkScope.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    virtualLinkScope.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    virtualLinkScope.EntityData.Children = make(map[string]types.YChild)
    virtualLinkScope.EntityData.Children["authentication"] = types.YChild{"Authentication", &virtualLinkScope.Authentication}
    virtualLinkScope.EntityData.Children["dead-interval-minimal"] = types.YChild{"DeadIntervalMinimal", &virtualLinkScope.DeadIntervalMinimal}
    virtualLinkScope.EntityData.Leafs = make(map[string]types.YLeaf)
    virtualLinkScope.EntityData.Leafs["address"] = types.YLeaf{"Address", virtualLinkScope.Address}
    virtualLinkScope.EntityData.Leafs["hello-interval"] = types.YLeaf{"HelloInterval", virtualLinkScope.HelloInterval}
    virtualLinkScope.EntityData.Leafs["transmit-delay"] = types.YLeaf{"TransmitDelay", virtualLinkScope.TransmitDelay}
    virtualLinkScope.EntityData.Leafs["retransmit-interval"] = types.YLeaf{"RetransmitInterval", virtualLinkScope.RetransmitInterval}
    virtualLinkScope.EntityData.Leafs["running"] = types.YLeaf{"Running", virtualLinkScope.Running}
    return &(virtualLinkScope.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication
// Authentication
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // b'(!.+)|([^!].+)'.
    Key interface{}

    // Authentication type.
    Type_ Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "cisco_ios_xr"
    authentication.EntityData.ParentYangName = "virtual-link-scope"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authentication.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authentication.EntityData.Children = make(map[string]types.YChild)
    authentication.EntityData.Children["type"] = types.YChild{"Type_", &authentication.Type_}
    authentication.EntityData.Children["message-digest-keies"] = types.YChild{"MessageDigestKeies", &authentication.MessageDigestKeies}
    authentication.EntityData.Leafs = make(map[string]types.YLeaf)
    authentication.EntityData.Leafs["key"] = types.YLeaf{"Key", authentication.Key}
    return &(authentication.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "type"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "authentication"
    self.EntityData.SegmentPath = "type"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    self.EntityData.Leafs["authen-type"] = types.YLeaf{"AuthenType", self.AuthenType}
    self.EntityData.Leafs["keychain-authen-type"] = types.YLeaf{"KeychainAuthenType", self.KeychainAuthenType}
    self.EntityData.Leafs["keychain-name"] = types.YLeaf{"KeychainName", self.KeychainName}
    return &(self.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetEntityData() *types.CommonEntityData {
    messageDigestKeies.EntityData.YFilter = messageDigestKeies.YFilter
    messageDigestKeies.EntityData.YangName = "message-digest-keies"
    messageDigestKeies.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKeies.EntityData.ParentYangName = "authentication"
    messageDigestKeies.EntityData.SegmentPath = "message-digest-keies"
    messageDigestKeies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKeies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKeies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKeies.EntityData.Children = make(map[string]types.YChild)
    messageDigestKeies.EntityData.Children["message-digest-key"] = types.YChild{"MessageDigestKey", nil}
    for i := range messageDigestKeies.MessageDigestKey {
        messageDigestKeies.EntityData.Children[types.GetSegmentPath(&messageDigestKeies.MessageDigestKey[i])] = types.YChild{"MessageDigestKey", &messageDigestKeies.MessageDigestKey[i]}
    }
    messageDigestKeies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(messageDigestKeies.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: b'(!.+)|([^!].+)'. This
    // attribute is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetEntityData() *types.CommonEntityData {
    messageDigestKey.EntityData.YFilter = messageDigestKey.YFilter
    messageDigestKey.EntityData.YangName = "message-digest-key"
    messageDigestKey.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKey.EntityData.ParentYangName = "message-digest-keies"
    messageDigestKey.EntityData.SegmentPath = "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
    messageDigestKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKey.EntityData.Children = make(map[string]types.YChild)
    messageDigestKey.EntityData.Leafs = make(map[string]types.YLeaf)
    messageDigestKey.EntityData.Leafs["key-id"] = types.YLeaf{"KeyId", messageDigestKey.KeyId}
    messageDigestKey.EntityData.Leafs["password"] = types.YLeaf{"Password", messageDigestKey.Password}
    return &(messageDigestKey.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetEntityData() *types.CommonEntityData {
    deadIntervalMinimal.EntityData.YFilter = deadIntervalMinimal.YFilter
    deadIntervalMinimal.EntityData.YangName = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.BundleName = "cisco_ios_xr"
    deadIntervalMinimal.EntityData.ParentYangName = "virtual-link-scope"
    deadIntervalMinimal.EntityData.SegmentPath = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    deadIntervalMinimal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    deadIntervalMinimal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    deadIntervalMinimal.EntityData.Children = make(map[string]types.YChild)
    deadIntervalMinimal.EntityData.Leafs = make(map[string]types.YLeaf)
    deadIntervalMinimal.EntityData.Leafs["interval"] = types.YLeaf{"Interval", deadIntervalMinimal.Interval}
    deadIntervalMinimal.EntityData.Leafs["multiplier"] = types.YLeaf{"Multiplier", deadIntervalMinimal.Multiplier}
    return &(deadIntervalMinimal.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes
// Sham Link scope configurations
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sham Link configuration. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope.
    ShamLinkScope []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope
}

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes) GetEntityData() *types.CommonEntityData {
    shamLinkScopes.EntityData.YFilter = shamLinkScopes.YFilter
    shamLinkScopes.EntityData.YangName = "sham-link-scopes"
    shamLinkScopes.EntityData.BundleName = "cisco_ios_xr"
    shamLinkScopes.EntityData.ParentYangName = "area-address"
    shamLinkScopes.EntityData.SegmentPath = "sham-link-scopes"
    shamLinkScopes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    shamLinkScopes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    shamLinkScopes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    shamLinkScopes.EntityData.Children = make(map[string]types.YChild)
    shamLinkScopes.EntityData.Children["sham-link-scope"] = types.YChild{"ShamLinkScope", nil}
    for i := range shamLinkScopes.ShamLinkScope {
        shamLinkScopes.EntityData.Children[types.GetSegmentPath(&shamLinkScopes.ShamLinkScope[i])] = types.YChild{"ShamLinkScope", &shamLinkScopes.ShamLinkScope[i]}
    }
    shamLinkScopes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(shamLinkScopes.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope
// Sham Link configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Address of the local sham-link endpoint. The type
    // is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // This attribute is a key. Address of the remote sham-link endpoint. The type
    // is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Address of the local sham-link endpoint. Enter an IP Address. The type is
    // string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Source interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Authentication.
    Authentication Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal
}

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) GetEntityData() *types.CommonEntityData {
    shamLinkScope.EntityData.YFilter = shamLinkScope.YFilter
    shamLinkScope.EntityData.YangName = "sham-link-scope"
    shamLinkScope.EntityData.BundleName = "cisco_ios_xr"
    shamLinkScope.EntityData.ParentYangName = "sham-link-scopes"
    shamLinkScope.EntityData.SegmentPath = "sham-link-scope" + "[source-address='" + fmt.Sprintf("%v", shamLinkScope.SourceAddress) + "']" + "[destination-address='" + fmt.Sprintf("%v", shamLinkScope.DestinationAddress) + "']"
    shamLinkScope.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    shamLinkScope.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    shamLinkScope.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    shamLinkScope.EntityData.Children = make(map[string]types.YChild)
    shamLinkScope.EntityData.Children["authentication"] = types.YChild{"Authentication", &shamLinkScope.Authentication}
    shamLinkScope.EntityData.Children["dead-interval-minimal"] = types.YChild{"DeadIntervalMinimal", &shamLinkScope.DeadIntervalMinimal}
    shamLinkScope.EntityData.Leafs = make(map[string]types.YLeaf)
    shamLinkScope.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", shamLinkScope.SourceAddress}
    shamLinkScope.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", shamLinkScope.DestinationAddress}
    shamLinkScope.EntityData.Leafs["source"] = types.YLeaf{"Source", shamLinkScope.Source}
    shamLinkScope.EntityData.Leafs["cost"] = types.YLeaf{"Cost", shamLinkScope.Cost}
    shamLinkScope.EntityData.Leafs["hello-interval"] = types.YLeaf{"HelloInterval", shamLinkScope.HelloInterval}
    shamLinkScope.EntityData.Leafs["transmit-delay"] = types.YLeaf{"TransmitDelay", shamLinkScope.TransmitDelay}
    shamLinkScope.EntityData.Leafs["retransmit-interval"] = types.YLeaf{"RetransmitInterval", shamLinkScope.RetransmitInterval}
    shamLinkScope.EntityData.Leafs["running"] = types.YLeaf{"Running", shamLinkScope.Running}
    return &(shamLinkScope.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication
// Authentication
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // b'(!.+)|([^!].+)'.
    Key interface{}

    // Authentication type.
    Type_ Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "cisco_ios_xr"
    authentication.EntityData.ParentYangName = "sham-link-scope"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authentication.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authentication.EntityData.Children = make(map[string]types.YChild)
    authentication.EntityData.Children["type"] = types.YChild{"Type_", &authentication.Type_}
    authentication.EntityData.Children["message-digest-keies"] = types.YChild{"MessageDigestKeies", &authentication.MessageDigestKeies}
    authentication.EntityData.Leafs = make(map[string]types.YLeaf)
    authentication.EntityData.Leafs["key"] = types.YLeaf{"Key", authentication.Key}
    return &(authentication.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "type"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "authentication"
    self.EntityData.SegmentPath = "type"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    self.EntityData.Leafs["authen-type"] = types.YLeaf{"AuthenType", self.AuthenType}
    self.EntityData.Leafs["keychain-authen-type"] = types.YLeaf{"KeychainAuthenType", self.KeychainAuthenType}
    self.EntityData.Leafs["keychain-name"] = types.YLeaf{"KeychainName", self.KeychainName}
    return &(self.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetEntityData() *types.CommonEntityData {
    messageDigestKeies.EntityData.YFilter = messageDigestKeies.YFilter
    messageDigestKeies.EntityData.YangName = "message-digest-keies"
    messageDigestKeies.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKeies.EntityData.ParentYangName = "authentication"
    messageDigestKeies.EntityData.SegmentPath = "message-digest-keies"
    messageDigestKeies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKeies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKeies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKeies.EntityData.Children = make(map[string]types.YChild)
    messageDigestKeies.EntityData.Children["message-digest-key"] = types.YChild{"MessageDigestKey", nil}
    for i := range messageDigestKeies.MessageDigestKey {
        messageDigestKeies.EntityData.Children[types.GetSegmentPath(&messageDigestKeies.MessageDigestKey[i])] = types.YChild{"MessageDigestKey", &messageDigestKeies.MessageDigestKey[i]}
    }
    messageDigestKeies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(messageDigestKeies.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: b'(!.+)|([^!].+)'. This
    // attribute is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetEntityData() *types.CommonEntityData {
    messageDigestKey.EntityData.YFilter = messageDigestKey.YFilter
    messageDigestKey.EntityData.YangName = "message-digest-key"
    messageDigestKey.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKey.EntityData.ParentYangName = "message-digest-keies"
    messageDigestKey.EntityData.SegmentPath = "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
    messageDigestKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKey.EntityData.Children = make(map[string]types.YChild)
    messageDigestKey.EntityData.Leafs = make(map[string]types.YLeaf)
    messageDigestKey.EntityData.Leafs["key-id"] = types.YLeaf{"KeyId", messageDigestKey.KeyId}
    messageDigestKey.EntityData.Leafs["password"] = types.YLeaf{"Password", messageDigestKey.Password}
    return &(messageDigestKey.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetEntityData() *types.CommonEntityData {
    deadIntervalMinimal.EntityData.YFilter = deadIntervalMinimal.YFilter
    deadIntervalMinimal.EntityData.YangName = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.BundleName = "cisco_ios_xr"
    deadIntervalMinimal.EntityData.ParentYangName = "sham-link-scope"
    deadIntervalMinimal.EntityData.SegmentPath = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    deadIntervalMinimal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    deadIntervalMinimal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    deadIntervalMinimal.EntityData.Children = make(map[string]types.YChild)
    deadIntervalMinimal.EntityData.Leafs = make(map[string]types.YLeaf)
    deadIntervalMinimal.EntityData.Leafs["interval"] = types.YLeaf{"Interval", deadIntervalMinimal.Interval}
    deadIntervalMinimal.EntityData.Leafs["multiplier"] = types.YLeaf{"Multiplier", deadIntervalMinimal.Multiplier}
    return &(deadIntervalMinimal.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope
// Area scope configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Enable/Disable prefix suppression for primary addresses. The type is bool.
    // The default value is false.
    PrefixSuppressionPrimary interface{}

    // Enable/Disable ignoring of MTU in DBD packets. The type is bool. The
    // default value is false.
    MtuIgnore interface{}

    // Enable/Disable MPLS LDP sync for igp-shortcuts. The type is bool.
    LdpSyncIgpShortcuts interface{}

    // Enable MPLS LDP Auto Config. The type is interface{}.
    LdpAutoConfig interface{}

    // Type of attached network. The type is OspfNetwork.
    NetworkType interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Enable/Disable advertising loopback as a stub network. The type is bool.
    // The default value is false.
    LoopbackStubNetwork interface{}

    // Enable/Disable prefix suppression for secondary addresses. The type is
    // bool. The default value is false.
    PrefixSuppressionSecondary interface{}

    // Enable/Disable OSPF demand circuit. The type is bool. The default value is
    // false.
    DemandCircuit interface{}

    // When enabled, prevent sending HELLO packets over link. The type is bool.
    // The default value is false.
    Passive interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Customize size of OSPF packets upto MTU. The type is interface{} with
    // range: 576..10000.
    PacketSize interface{}

    // Enable/Disable MPLS LDP sync. The type is bool.
    LdpSync interface{}

    // Filter OSPF LSA during synchronization and flooding. The type is bool. The
    // default value is false.
    DatabaseFilter interface{}

    // Enable/Disable registration for early interface down notifications. The
    // type is bool. The default value is false.
    LinkDownFastDetect interface{}

    // segment-routing forwarding configuration Applicableonly in Default VRF. The
    // type is OspfSegmentRoutingForwarding.
    SegmentRoutingForwarding interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Router priority for DR and BDR election. The type is interface{} with
    // range: 0..255. The default value is 1.
    Priority interface{}

    // Enable/Disable OSPF flood reduction. The type is bool. The default value is
    // false.
    FloodReduction interface{}

    // Filter networks intalled to RIB (disable as ACL name means filtering is
    // disabled).
    DistributeList Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DistributeList

    // BFD configuration.
    Bfd Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Bfd

    // Authentication.
    Authentication Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication

    // Container class for security related configuration parameters.
    Security Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal

    // Fast-reroute configuration.
    FastReroute Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute

    // Interface fallback cost.
    CostFallback Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_CostFallback
}

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope) GetEntityData() *types.CommonEntityData {
    areaScope.EntityData.YFilter = areaScope.YFilter
    areaScope.EntityData.YangName = "area-scope"
    areaScope.EntityData.BundleName = "cisco_ios_xr"
    areaScope.EntityData.ParentYangName = "area-address"
    areaScope.EntityData.SegmentPath = "area-scope"
    areaScope.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaScope.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaScope.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaScope.EntityData.Children = make(map[string]types.YChild)
    areaScope.EntityData.Children["distribute-list"] = types.YChild{"DistributeList", &areaScope.DistributeList}
    areaScope.EntityData.Children["bfd"] = types.YChild{"Bfd", &areaScope.Bfd}
    areaScope.EntityData.Children["authentication"] = types.YChild{"Authentication", &areaScope.Authentication}
    areaScope.EntityData.Children["security"] = types.YChild{"Security", &areaScope.Security}
    areaScope.EntityData.Children["dead-interval-minimal"] = types.YChild{"DeadIntervalMinimal", &areaScope.DeadIntervalMinimal}
    areaScope.EntityData.Children["fast-reroute"] = types.YChild{"FastReroute", &areaScope.FastReroute}
    areaScope.EntityData.Children["cost-fallback"] = types.YChild{"CostFallback", &areaScope.CostFallback}
    areaScope.EntityData.Leafs = make(map[string]types.YLeaf)
    areaScope.EntityData.Leafs["cost"] = types.YLeaf{"Cost", areaScope.Cost}
    areaScope.EntityData.Leafs["prefix-suppression-primary"] = types.YLeaf{"PrefixSuppressionPrimary", areaScope.PrefixSuppressionPrimary}
    areaScope.EntityData.Leafs["mtu-ignore"] = types.YLeaf{"MtuIgnore", areaScope.MtuIgnore}
    areaScope.EntityData.Leafs["ldp-sync-igp-shortcuts"] = types.YLeaf{"LdpSyncIgpShortcuts", areaScope.LdpSyncIgpShortcuts}
    areaScope.EntityData.Leafs["ldp-auto-config"] = types.YLeaf{"LdpAutoConfig", areaScope.LdpAutoConfig}
    areaScope.EntityData.Leafs["network-type"] = types.YLeaf{"NetworkType", areaScope.NetworkType}
    areaScope.EntityData.Leafs["hello-interval"] = types.YLeaf{"HelloInterval", areaScope.HelloInterval}
    areaScope.EntityData.Leafs["loopback-stub-network"] = types.YLeaf{"LoopbackStubNetwork", areaScope.LoopbackStubNetwork}
    areaScope.EntityData.Leafs["prefix-suppression-secondary"] = types.YLeaf{"PrefixSuppressionSecondary", areaScope.PrefixSuppressionSecondary}
    areaScope.EntityData.Leafs["demand-circuit"] = types.YLeaf{"DemandCircuit", areaScope.DemandCircuit}
    areaScope.EntityData.Leafs["passive"] = types.YLeaf{"Passive", areaScope.Passive}
    areaScope.EntityData.Leafs["transmit-delay"] = types.YLeaf{"TransmitDelay", areaScope.TransmitDelay}
    areaScope.EntityData.Leafs["packet-size"] = types.YLeaf{"PacketSize", areaScope.PacketSize}
    areaScope.EntityData.Leafs["ldp-sync"] = types.YLeaf{"LdpSync", areaScope.LdpSync}
    areaScope.EntityData.Leafs["database-filter"] = types.YLeaf{"DatabaseFilter", areaScope.DatabaseFilter}
    areaScope.EntityData.Leafs["link-down-fast-detect"] = types.YLeaf{"LinkDownFastDetect", areaScope.LinkDownFastDetect}
    areaScope.EntityData.Leafs["segment-routing-forwarding"] = types.YLeaf{"SegmentRoutingForwarding", areaScope.SegmentRoutingForwarding}
    areaScope.EntityData.Leafs["retransmit-interval"] = types.YLeaf{"RetransmitInterval", areaScope.RetransmitInterval}
    areaScope.EntityData.Leafs["priority"] = types.YLeaf{"Priority", areaScope.Priority}
    areaScope.EntityData.Leafs["flood-reduction"] = types.YLeaf{"FloodReduction", areaScope.FloodReduction}
    return &(areaScope.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DistributeList
// Filter networks intalled to RIB (disable as ACL
// name means filtering is disabled)
// This type is a presence type.
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DistributeList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Access Control List name. The type is string.
    AccessListName interface{}

    // Route Policy name. The type is string.
    RoutePolicyName interface{}
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) GetEntityData() *types.CommonEntityData {
    distributeList.EntityData.YFilter = distributeList.YFilter
    distributeList.EntityData.YangName = "distribute-list"
    distributeList.EntityData.BundleName = "cisco_ios_xr"
    distributeList.EntityData.ParentYangName = "area-scope"
    distributeList.EntityData.SegmentPath = "distribute-list"
    distributeList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    distributeList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    distributeList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    distributeList.EntityData.Children = make(map[string]types.YChild)
    distributeList.EntityData.Leafs = make(map[string]types.YLeaf)
    distributeList.EntityData.Leafs["access-list-name"] = types.YLeaf{"AccessListName", distributeList.AccessListName}
    distributeList.EntityData.Leafs["route-policy-name"] = types.YLeaf{"RoutePolicyName", distributeList.RoutePolicyName}
    return &(distributeList.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Bfd
// BFD configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Bfd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Hello interval for BFD sessions created by OSPF. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    Interval interface{}

    // Detection multiplier for BFD sessions created by OSPF. The type is
    // interface{} with range: 2..50.
    DetectionMultiplier interface{}

    // use of Bidirectional Forwarding Detection. The type is BfdEnableMode.
    FastDetectMode interface{}
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Bfd) GetEntityData() *types.CommonEntityData {
    bfd.EntityData.YFilter = bfd.YFilter
    bfd.EntityData.YangName = "bfd"
    bfd.EntityData.BundleName = "cisco_ios_xr"
    bfd.EntityData.ParentYangName = "area-scope"
    bfd.EntityData.SegmentPath = "bfd"
    bfd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfd.EntityData.Children = make(map[string]types.YChild)
    bfd.EntityData.Leafs = make(map[string]types.YLeaf)
    bfd.EntityData.Leafs["interval"] = types.YLeaf{"Interval", bfd.Interval}
    bfd.EntityData.Leafs["detection-multiplier"] = types.YLeaf{"DetectionMultiplier", bfd.DetectionMultiplier}
    bfd.EntityData.Leafs["fast-detect-mode"] = types.YLeaf{"FastDetectMode", bfd.FastDetectMode}
    return &(bfd.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication
// Authentication
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // b'(!.+)|([^!].+)'.
    Key interface{}

    // Authentication type.
    Type_ Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "cisco_ios_xr"
    authentication.EntityData.ParentYangName = "area-scope"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authentication.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authentication.EntityData.Children = make(map[string]types.YChild)
    authentication.EntityData.Children["type"] = types.YChild{"Type_", &authentication.Type_}
    authentication.EntityData.Children["message-digest-keies"] = types.YChild{"MessageDigestKeies", &authentication.MessageDigestKeies}
    authentication.EntityData.Leafs = make(map[string]types.YLeaf)
    authentication.EntityData.Leafs["key"] = types.YLeaf{"Key", authentication.Key}
    return &(authentication.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "type"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "authentication"
    self.EntityData.SegmentPath = "type"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    self.EntityData.Leafs["authen-type"] = types.YLeaf{"AuthenType", self.AuthenType}
    self.EntityData.Leafs["keychain-authen-type"] = types.YLeaf{"KeychainAuthenType", self.KeychainAuthenType}
    self.EntityData.Leafs["keychain-name"] = types.YLeaf{"KeychainName", self.KeychainName}
    return &(self.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) GetEntityData() *types.CommonEntityData {
    messageDigestKeies.EntityData.YFilter = messageDigestKeies.YFilter
    messageDigestKeies.EntityData.YangName = "message-digest-keies"
    messageDigestKeies.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKeies.EntityData.ParentYangName = "authentication"
    messageDigestKeies.EntityData.SegmentPath = "message-digest-keies"
    messageDigestKeies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKeies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKeies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKeies.EntityData.Children = make(map[string]types.YChild)
    messageDigestKeies.EntityData.Children["message-digest-key"] = types.YChild{"MessageDigestKey", nil}
    for i := range messageDigestKeies.MessageDigestKey {
        messageDigestKeies.EntityData.Children[types.GetSegmentPath(&messageDigestKeies.MessageDigestKey[i])] = types.YChild{"MessageDigestKey", &messageDigestKeies.MessageDigestKey[i]}
    }
    messageDigestKeies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(messageDigestKeies.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: b'(!.+)|([^!].+)'. This
    // attribute is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetEntityData() *types.CommonEntityData {
    messageDigestKey.EntityData.YFilter = messageDigestKey.YFilter
    messageDigestKey.EntityData.YangName = "message-digest-key"
    messageDigestKey.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKey.EntityData.ParentYangName = "message-digest-keies"
    messageDigestKey.EntityData.SegmentPath = "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
    messageDigestKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKey.EntityData.Children = make(map[string]types.YChild)
    messageDigestKey.EntityData.Leafs = make(map[string]types.YLeaf)
    messageDigestKey.EntityData.Leafs["key-id"] = types.YLeaf{"KeyId", messageDigestKey.KeyId}
    messageDigestKey.EntityData.Leafs["password"] = types.YLeaf{"Password", messageDigestKey.Password}
    return &(messageDigestKey.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security
// Container class for security related
// configuration parameters
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enabling turns on TTL security.
    Ttl Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security) GetEntityData() *types.CommonEntityData {
    security.EntityData.YFilter = security.YFilter
    security.EntityData.YangName = "security"
    security.EntityData.BundleName = "cisco_ios_xr"
    security.EntityData.ParentYangName = "area-scope"
    security.EntityData.SegmentPath = "security"
    security.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    security.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    security.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    security.EntityData.Children = make(map[string]types.YChild)
    security.EntityData.Children["ttl"] = types.YChild{"Ttl", &security.Ttl}
    security.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(security.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl
// Enabling turns on TTL security
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable TTL security. The type is bool.
    Enable interface{}

    // Hop count. The type is interface{} with range: 1..254.
    HopCount interface{}
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) GetEntityData() *types.CommonEntityData {
    ttl.EntityData.YFilter = ttl.YFilter
    ttl.EntityData.YangName = "ttl"
    ttl.EntityData.BundleName = "cisco_ios_xr"
    ttl.EntityData.ParentYangName = "security"
    ttl.EntityData.SegmentPath = "ttl"
    ttl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ttl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ttl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ttl.EntityData.Children = make(map[string]types.YChild)
    ttl.EntityData.Leafs = make(map[string]types.YLeaf)
    ttl.EntityData.Leafs["enable"] = types.YLeaf{"Enable", ttl.Enable}
    ttl.EntityData.Leafs["hop-count"] = types.YLeaf{"HopCount", ttl.HopCount}
    return &(ttl.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) GetEntityData() *types.CommonEntityData {
    deadIntervalMinimal.EntityData.YFilter = deadIntervalMinimal.YFilter
    deadIntervalMinimal.EntityData.YangName = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.BundleName = "cisco_ios_xr"
    deadIntervalMinimal.EntityData.ParentYangName = "area-scope"
    deadIntervalMinimal.EntityData.SegmentPath = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    deadIntervalMinimal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    deadIntervalMinimal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    deadIntervalMinimal.EntityData.Children = make(map[string]types.YChild)
    deadIntervalMinimal.EntityData.Leafs = make(map[string]types.YLeaf)
    deadIntervalMinimal.EntityData.Leafs["interval"] = types.YLeaf{"Interval", deadIntervalMinimal.Interval}
    deadIntervalMinimal.EntityData.Leafs["multiplier"] = types.YLeaf{"Multiplier", deadIntervalMinimal.Multiplier}
    return &(deadIntervalMinimal.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute
// Fast-reroute configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // OspfFastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink

    // Fast-reroute per-prefix global configuration.
    PerPrefix Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetEntityData() *types.CommonEntityData {
    fastReroute.EntityData.YFilter = fastReroute.YFilter
    fastReroute.EntityData.YangName = "fast-reroute"
    fastReroute.EntityData.BundleName = "cisco_ios_xr"
    fastReroute.EntityData.ParentYangName = "area-scope"
    fastReroute.EntityData.SegmentPath = "fast-reroute"
    fastReroute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fastReroute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fastReroute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fastReroute.EntityData.Children = make(map[string]types.YChild)
    fastReroute.EntityData.Children["per-link"] = types.YChild{"PerLink", &fastReroute.PerLink}
    fastReroute.EntityData.Children["per-prefix"] = types.YChild{"PerPrefix", &fastReroute.PerPrefix}
    fastReroute.EntityData.Leafs = make(map[string]types.YLeaf)
    fastReroute.EntityData.Leafs["fast-reroute-enable"] = types.YLeaf{"FastRerouteEnable", fastReroute.FastRerouteEnable}
    return &(fastReroute.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetEntityData() *types.CommonEntityData {
    perLink.EntityData.YFilter = perLink.YFilter
    perLink.EntityData.YangName = "per-link"
    perLink.EntityData.BundleName = "cisco_ios_xr"
    perLink.EntityData.ParentYangName = "fast-reroute"
    perLink.EntityData.SegmentPath = "per-link"
    perLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perLink.EntityData.Children = make(map[string]types.YChild)
    perLink.EntityData.Children["candidate-interfaces"] = types.YChild{"CandidateInterfaces", &perLink.CandidateInterfaces}
    perLink.EntityData.Children["exclude-interfaces"] = types.YChild{"ExcludeInterfaces", &perLink.ExcludeInterfaces}
    perLink.EntityData.Leafs = make(map[string]types.YLeaf)
    perLink.EntityData.Leafs["fast-reroute-use-candidate-only"] = types.YLeaf{"FastRerouteUseCandidateOnly", perLink.FastRerouteUseCandidateOnly}
    return &(perLink.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetEntityData() *types.CommonEntityData {
    candidateInterfaces.EntityData.YFilter = candidateInterfaces.YFilter
    candidateInterfaces.EntityData.YangName = "candidate-interfaces"
    candidateInterfaces.EntityData.BundleName = "cisco_ios_xr"
    candidateInterfaces.EntityData.ParentYangName = "per-link"
    candidateInterfaces.EntityData.SegmentPath = "candidate-interfaces"
    candidateInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterfaces.EntityData.Children = make(map[string]types.YChild)
    candidateInterfaces.EntityData.Children["candidate-interface"] = types.YChild{"CandidateInterface", nil}
    for i := range candidateInterfaces.CandidateInterface {
        candidateInterfaces.EntityData.Children[types.GetSegmentPath(&candidateInterfaces.CandidateInterface[i])] = types.YChild{"CandidateInterface", &candidateInterfaces.CandidateInterface[i]}
    }
    candidateInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(candidateInterfaces.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetEntityData() *types.CommonEntityData {
    candidateInterface.EntityData.YFilter = candidateInterface.YFilter
    candidateInterface.EntityData.YangName = "candidate-interface"
    candidateInterface.EntityData.BundleName = "cisco_ios_xr"
    candidateInterface.EntityData.ParentYangName = "candidate-interfaces"
    candidateInterface.EntityData.SegmentPath = "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
    candidateInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterface.EntityData.Children = make(map[string]types.YChild)
    candidateInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    candidateInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", candidateInterface.InterfaceName}
    return &(candidateInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetEntityData() *types.CommonEntityData {
    excludeInterfaces.EntityData.YFilter = excludeInterfaces.YFilter
    excludeInterfaces.EntityData.YangName = "exclude-interfaces"
    excludeInterfaces.EntityData.BundleName = "cisco_ios_xr"
    excludeInterfaces.EntityData.ParentYangName = "per-link"
    excludeInterfaces.EntityData.SegmentPath = "exclude-interfaces"
    excludeInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterfaces.EntityData.Children = make(map[string]types.YChild)
    excludeInterfaces.EntityData.Children["exclude-interface"] = types.YChild{"ExcludeInterface", nil}
    for i := range excludeInterfaces.ExcludeInterface {
        excludeInterfaces.EntityData.Children[types.GetSegmentPath(&excludeInterfaces.ExcludeInterface[i])] = types.YChild{"ExcludeInterface", &excludeInterfaces.ExcludeInterface[i]}
    }
    excludeInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(excludeInterfaces.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetEntityData() *types.CommonEntityData {
    excludeInterface.EntityData.YFilter = excludeInterface.YFilter
    excludeInterface.EntityData.YangName = "exclude-interface"
    excludeInterface.EntityData.BundleName = "cisco_ios_xr"
    excludeInterface.EntityData.ParentYangName = "exclude-interfaces"
    excludeInterface.EntityData.SegmentPath = "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
    excludeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterface.EntityData.Children = make(map[string]types.YChild)
    excludeInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    excludeInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", excludeInterface.InterfaceName}
    return &(excludeInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix
// Fast-reroute per-prefix global configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology Independet LFA configuration. The type is bool.
    TopologyIndependentLfa interface{}

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Remote LFA configuration.
    RemoteLfa Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa

    // Fast-reroute tiebreakers configurations.
    Tiebreakers Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetEntityData() *types.CommonEntityData {
    perPrefix.EntityData.YFilter = perPrefix.YFilter
    perPrefix.EntityData.YangName = "per-prefix"
    perPrefix.EntityData.BundleName = "cisco_ios_xr"
    perPrefix.EntityData.ParentYangName = "fast-reroute"
    perPrefix.EntityData.SegmentPath = "per-prefix"
    perPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perPrefix.EntityData.Children = make(map[string]types.YChild)
    perPrefix.EntityData.Children["remote-lfa"] = types.YChild{"RemoteLfa", &perPrefix.RemoteLfa}
    perPrefix.EntityData.Children["tiebreakers"] = types.YChild{"Tiebreakers", &perPrefix.Tiebreakers}
    perPrefix.EntityData.Children["candidate-interfaces"] = types.YChild{"CandidateInterfaces", &perPrefix.CandidateInterfaces}
    perPrefix.EntityData.Children["exclude-interfaces"] = types.YChild{"ExcludeInterfaces", &perPrefix.ExcludeInterfaces}
    perPrefix.EntityData.Leafs = make(map[string]types.YLeaf)
    perPrefix.EntityData.Leafs["topology-independent-lfa"] = types.YLeaf{"TopologyIndependentLfa", perPrefix.TopologyIndependentLfa}
    perPrefix.EntityData.Leafs["fast-reroute-use-candidate-only"] = types.YLeaf{"FastRerouteUseCandidateOnly", perPrefix.FastRerouteUseCandidateOnly}
    return &(perPrefix.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa
// Remote LFA configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable/Disable remote LFA computation. The type is OspfFrrRlfaTunnel.
    Tunnel interface{}

    // Maximum path cost to remote LFA. The type is interface{} with range:
    // 1..4294967295.
    MaximumCost interface{}
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetEntityData() *types.CommonEntityData {
    remoteLfa.EntityData.YFilter = remoteLfa.YFilter
    remoteLfa.EntityData.YangName = "remote-lfa"
    remoteLfa.EntityData.BundleName = "cisco_ios_xr"
    remoteLfa.EntityData.ParentYangName = "per-prefix"
    remoteLfa.EntityData.SegmentPath = "remote-lfa"
    remoteLfa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteLfa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteLfa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteLfa.EntityData.Children = make(map[string]types.YChild)
    remoteLfa.EntityData.Leafs = make(map[string]types.YLeaf)
    remoteLfa.EntityData.Leafs["tunnel"] = types.YLeaf{"Tunnel", remoteLfa.Tunnel}
    remoteLfa.EntityData.Leafs["maximum-cost"] = types.YLeaf{"MaximumCost", remoteLfa.MaximumCost}
    return &(remoteLfa.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers
// Fast-reroute tiebreakers configurations
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fast-reroute tiebreakers configuration. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker.
    Tiebreaker []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetEntityData() *types.CommonEntityData {
    tiebreakers.EntityData.YFilter = tiebreakers.YFilter
    tiebreakers.EntityData.YangName = "tiebreakers"
    tiebreakers.EntityData.BundleName = "cisco_ios_xr"
    tiebreakers.EntityData.ParentYangName = "per-prefix"
    tiebreakers.EntityData.SegmentPath = "tiebreakers"
    tiebreakers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tiebreakers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tiebreakers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tiebreakers.EntityData.Children = make(map[string]types.YChild)
    tiebreakers.EntityData.Children["tiebreaker"] = types.YChild{"Tiebreaker", nil}
    for i := range tiebreakers.Tiebreaker {
        tiebreakers.EntityData.Children[types.GetSegmentPath(&tiebreakers.Tiebreaker[i])] = types.YChild{"Tiebreaker", &tiebreakers.Tiebreaker[i]}
    }
    tiebreakers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tiebreakers.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
// Fast-reroute tiebreakers configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Tiebreaker type. The type is
    // OspfFastRerouteTiebreakersIntf.
    TiebreakerType interface{}

    // Index value for a tiebreaker, 0 to disable. The type is interface{} with
    // range: 0..255. This attribute is mandatory.
    TiebreakerIndex interface{}
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetEntityData() *types.CommonEntityData {
    tiebreaker.EntityData.YFilter = tiebreaker.YFilter
    tiebreaker.EntityData.YangName = "tiebreaker"
    tiebreaker.EntityData.BundleName = "cisco_ios_xr"
    tiebreaker.EntityData.ParentYangName = "tiebreakers"
    tiebreaker.EntityData.SegmentPath = "tiebreaker" + "[tiebreaker-type='" + fmt.Sprintf("%v", tiebreaker.TiebreakerType) + "']"
    tiebreaker.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tiebreaker.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tiebreaker.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tiebreaker.EntityData.Children = make(map[string]types.YChild)
    tiebreaker.EntityData.Leafs = make(map[string]types.YLeaf)
    tiebreaker.EntityData.Leafs["tiebreaker-type"] = types.YLeaf{"TiebreakerType", tiebreaker.TiebreakerType}
    tiebreaker.EntityData.Leafs["tiebreaker-index"] = types.YLeaf{"TiebreakerIndex", tiebreaker.TiebreakerIndex}
    return &(tiebreaker.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetEntityData() *types.CommonEntityData {
    candidateInterfaces.EntityData.YFilter = candidateInterfaces.YFilter
    candidateInterfaces.EntityData.YangName = "candidate-interfaces"
    candidateInterfaces.EntityData.BundleName = "cisco_ios_xr"
    candidateInterfaces.EntityData.ParentYangName = "per-prefix"
    candidateInterfaces.EntityData.SegmentPath = "candidate-interfaces"
    candidateInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterfaces.EntityData.Children = make(map[string]types.YChild)
    candidateInterfaces.EntityData.Children["candidate-interface"] = types.YChild{"CandidateInterface", nil}
    for i := range candidateInterfaces.CandidateInterface {
        candidateInterfaces.EntityData.Children[types.GetSegmentPath(&candidateInterfaces.CandidateInterface[i])] = types.YChild{"CandidateInterface", &candidateInterfaces.CandidateInterface[i]}
    }
    candidateInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(candidateInterfaces.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetEntityData() *types.CommonEntityData {
    candidateInterface.EntityData.YFilter = candidateInterface.YFilter
    candidateInterface.EntityData.YangName = "candidate-interface"
    candidateInterface.EntityData.BundleName = "cisco_ios_xr"
    candidateInterface.EntityData.ParentYangName = "candidate-interfaces"
    candidateInterface.EntityData.SegmentPath = "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
    candidateInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterface.EntityData.Children = make(map[string]types.YChild)
    candidateInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    candidateInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", candidateInterface.InterfaceName}
    return &(candidateInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetEntityData() *types.CommonEntityData {
    excludeInterfaces.EntityData.YFilter = excludeInterfaces.YFilter
    excludeInterfaces.EntityData.YangName = "exclude-interfaces"
    excludeInterfaces.EntityData.BundleName = "cisco_ios_xr"
    excludeInterfaces.EntityData.ParentYangName = "per-prefix"
    excludeInterfaces.EntityData.SegmentPath = "exclude-interfaces"
    excludeInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterfaces.EntityData.Children = make(map[string]types.YChild)
    excludeInterfaces.EntityData.Children["exclude-interface"] = types.YChild{"ExcludeInterface", nil}
    for i := range excludeInterfaces.ExcludeInterface {
        excludeInterfaces.EntityData.Children[types.GetSegmentPath(&excludeInterfaces.ExcludeInterface[i])] = types.YChild{"ExcludeInterface", &excludeInterfaces.ExcludeInterface[i]}
    }
    excludeInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(excludeInterfaces.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetEntityData() *types.CommonEntityData {
    excludeInterface.EntityData.YFilter = excludeInterface.YFilter
    excludeInterface.EntityData.YangName = "exclude-interface"
    excludeInterface.EntityData.BundleName = "cisco_ios_xr"
    excludeInterface.EntityData.ParentYangName = "exclude-interfaces"
    excludeInterface.EntityData.SegmentPath = "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
    excludeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterface.EntityData.Children = make(map[string]types.YChild)
    excludeInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    excludeInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", excludeInterface.InterfaceName}
    return &(excludeInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_CostFallback
// Interface fallback cost
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_CostFallback struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fallback cost of link. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Bandwidth threshold. The type is interface{} with range: 1..4294967.
    Threshold interface{}
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) GetEntityData() *types.CommonEntityData {
    costFallback.EntityData.YFilter = costFallback.YFilter
    costFallback.EntityData.YangName = "cost-fallback"
    costFallback.EntityData.BundleName = "cisco_ios_xr"
    costFallback.EntityData.ParentYangName = "area-scope"
    costFallback.EntityData.SegmentPath = "cost-fallback"
    costFallback.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    costFallback.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    costFallback.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    costFallback.EntityData.Children = make(map[string]types.YChild)
    costFallback.EntityData.Leafs = make(map[string]types.YLeaf)
    costFallback.EntityData.Leafs["cost"] = types.YLeaf{"Cost", costFallback.Cost}
    costFallback.EntityData.Leafs["threshold"] = types.YLeaf{"Threshold", costFallback.Threshold}
    return &(costFallback.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes
// Name scope configurations
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name scope configuration. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope.
    NameScope []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope
}

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes) GetEntityData() *types.CommonEntityData {
    nameScopes.EntityData.YFilter = nameScopes.YFilter
    nameScopes.EntityData.YangName = "name-scopes"
    nameScopes.EntityData.BundleName = "cisco_ios_xr"
    nameScopes.EntityData.ParentYangName = "area-address"
    nameScopes.EntityData.SegmentPath = "name-scopes"
    nameScopes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nameScopes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nameScopes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nameScopes.EntityData.Children = make(map[string]types.YChild)
    nameScopes.EntityData.Children["name-scope"] = types.YChild{"NameScope", nil}
    for i := range nameScopes.NameScope {
        nameScopes.EntityData.Children[types.GetSegmentPath(&nameScopes.NameScope[i])] = types.YChild{"NameScope", &nameScopes.NameScope[i]}
    }
    nameScopes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(nameScopes.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope
// Name scope configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of Interface to configure. The type is string
    // with pattern: b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Enable/Disable prefix suppression for primary addresses. The type is bool.
    // The default value is false.
    PrefixSuppressionPrimary interface{}

    // Enable/Disable ignoring of MTU in DBD packets. The type is bool. The
    // default value is false.
    MtuIgnore interface{}

    // Enable/Disable MPLS LDP sync for igp-shortcuts. The type is bool.
    LdpSyncIgpShortcuts interface{}

    // Enable MPLS LDP Auto Config. The type is interface{}.
    LdpAutoConfig interface{}

    // Type of attached network. The type is OspfNetwork.
    NetworkType interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Enable/Disable advertising loopback as a stub network. The type is bool.
    // The default value is false.
    LoopbackStubNetwork interface{}

    // Enable/Disable prefix suppression for secondary addresses. The type is
    // bool. The default value is false.
    PrefixSuppressionSecondary interface{}

    // Enable/Disable OSPF demand circuit. The type is bool. The default value is
    // false.
    DemandCircuit interface{}

    // When enabled, prevent sending HELLO packets over link. The type is bool.
    // The default value is false.
    Passive interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Customize size of OSPF packets upto MTU. The type is interface{} with
    // range: 576..10000.
    PacketSize interface{}

    // Enable/Disable MPLS LDP sync. The type is bool.
    LdpSync interface{}

    // Filter OSPF LSA during synchronization and flooding. The type is bool. The
    // default value is false.
    DatabaseFilter interface{}

    // Enable/Disable registration for early interface down notifications. The
    // type is bool. The default value is false.
    LinkDownFastDetect interface{}

    // segment-routing forwarding configuration Applicableonly in Default VRF. The
    // type is OspfSegmentRoutingForwarding.
    SegmentRoutingForwarding interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Router priority for DR and BDR election. The type is interface{} with
    // range: 0..255. The default value is 1.
    Priority interface{}

    // Enable/Disable OSPF flood reduction. The type is bool. The default value is
    // false.
    FloodReduction interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Prefix SID.
    PrefixSid Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid

    // Strict Prefix SID.
    PrefixSidStrict Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict

    // Filter networks intalled to RIB (disable as ACL name means filtering is
    // disabled).
    DistributeList Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList

    // BFD configuration.
    Bfd Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd

    // Authentication.
    Authentication Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication

    // Container class for security related configuration parameters.
    Security Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security

    // Neighbor router configuration information.
    Neighbors Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal

    // Fast-reroute configuration.
    FastReroute Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute

    // Interface fallback cost.
    CostFallback Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback
}

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope) GetEntityData() *types.CommonEntityData {
    nameScope.EntityData.YFilter = nameScope.YFilter
    nameScope.EntityData.YangName = "name-scope"
    nameScope.EntityData.BundleName = "cisco_ios_xr"
    nameScope.EntityData.ParentYangName = "name-scopes"
    nameScope.EntityData.SegmentPath = "name-scope" + "[interface-name='" + fmt.Sprintf("%v", nameScope.InterfaceName) + "']"
    nameScope.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nameScope.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nameScope.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nameScope.EntityData.Children = make(map[string]types.YChild)
    nameScope.EntityData.Children["prefix-sid"] = types.YChild{"PrefixSid", &nameScope.PrefixSid}
    nameScope.EntityData.Children["prefix-sid-strict"] = types.YChild{"PrefixSidStrict", &nameScope.PrefixSidStrict}
    nameScope.EntityData.Children["distribute-list"] = types.YChild{"DistributeList", &nameScope.DistributeList}
    nameScope.EntityData.Children["bfd"] = types.YChild{"Bfd", &nameScope.Bfd}
    nameScope.EntityData.Children["authentication"] = types.YChild{"Authentication", &nameScope.Authentication}
    nameScope.EntityData.Children["security"] = types.YChild{"Security", &nameScope.Security}
    nameScope.EntityData.Children["neighbors"] = types.YChild{"Neighbors", &nameScope.Neighbors}
    nameScope.EntityData.Children["dead-interval-minimal"] = types.YChild{"DeadIntervalMinimal", &nameScope.DeadIntervalMinimal}
    nameScope.EntityData.Children["fast-reroute"] = types.YChild{"FastReroute", &nameScope.FastReroute}
    nameScope.EntityData.Children["cost-fallback"] = types.YChild{"CostFallback", &nameScope.CostFallback}
    nameScope.EntityData.Leafs = make(map[string]types.YLeaf)
    nameScope.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", nameScope.InterfaceName}
    nameScope.EntityData.Leafs["cost"] = types.YLeaf{"Cost", nameScope.Cost}
    nameScope.EntityData.Leafs["prefix-suppression-primary"] = types.YLeaf{"PrefixSuppressionPrimary", nameScope.PrefixSuppressionPrimary}
    nameScope.EntityData.Leafs["mtu-ignore"] = types.YLeaf{"MtuIgnore", nameScope.MtuIgnore}
    nameScope.EntityData.Leafs["ldp-sync-igp-shortcuts"] = types.YLeaf{"LdpSyncIgpShortcuts", nameScope.LdpSyncIgpShortcuts}
    nameScope.EntityData.Leafs["ldp-auto-config"] = types.YLeaf{"LdpAutoConfig", nameScope.LdpAutoConfig}
    nameScope.EntityData.Leafs["network-type"] = types.YLeaf{"NetworkType", nameScope.NetworkType}
    nameScope.EntityData.Leafs["hello-interval"] = types.YLeaf{"HelloInterval", nameScope.HelloInterval}
    nameScope.EntityData.Leafs["loopback-stub-network"] = types.YLeaf{"LoopbackStubNetwork", nameScope.LoopbackStubNetwork}
    nameScope.EntityData.Leafs["prefix-suppression-secondary"] = types.YLeaf{"PrefixSuppressionSecondary", nameScope.PrefixSuppressionSecondary}
    nameScope.EntityData.Leafs["demand-circuit"] = types.YLeaf{"DemandCircuit", nameScope.DemandCircuit}
    nameScope.EntityData.Leafs["passive"] = types.YLeaf{"Passive", nameScope.Passive}
    nameScope.EntityData.Leafs["transmit-delay"] = types.YLeaf{"TransmitDelay", nameScope.TransmitDelay}
    nameScope.EntityData.Leafs["packet-size"] = types.YLeaf{"PacketSize", nameScope.PacketSize}
    nameScope.EntityData.Leafs["ldp-sync"] = types.YLeaf{"LdpSync", nameScope.LdpSync}
    nameScope.EntityData.Leafs["database-filter"] = types.YLeaf{"DatabaseFilter", nameScope.DatabaseFilter}
    nameScope.EntityData.Leafs["link-down-fast-detect"] = types.YLeaf{"LinkDownFastDetect", nameScope.LinkDownFastDetect}
    nameScope.EntityData.Leafs["segment-routing-forwarding"] = types.YLeaf{"SegmentRoutingForwarding", nameScope.SegmentRoutingForwarding}
    nameScope.EntityData.Leafs["retransmit-interval"] = types.YLeaf{"RetransmitInterval", nameScope.RetransmitInterval}
    nameScope.EntityData.Leafs["priority"] = types.YLeaf{"Priority", nameScope.Priority}
    nameScope.EntityData.Leafs["flood-reduction"] = types.YLeaf{"FloodReduction", nameScope.FloodReduction}
    nameScope.EntityData.Leafs["running"] = types.YLeaf{"Running", nameScope.Running}
    return &(nameScope.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid
// Prefix SID
// This type is a presence type.
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SID value. The type is interface{} with range: 0..1048575. This attribute
    // is mandatory.
    SidValue interface{}

    // Force Penultimate Hop To Send Explicit-Null Label. The type is bool. The
    // default value is false.
    ExplicitNull interface{}

    // OSPF SID Type. The type is OspfSid. This attribute is mandatory.
    Type_ interface{}

    // Not a node SID. The type is bool. The default value is false.
    NFlagClear interface{}
}

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) GetEntityData() *types.CommonEntityData {
    prefixSid.EntityData.YFilter = prefixSid.YFilter
    prefixSid.EntityData.YangName = "prefix-sid"
    prefixSid.EntityData.BundleName = "cisco_ios_xr"
    prefixSid.EntityData.ParentYangName = "name-scope"
    prefixSid.EntityData.SegmentPath = "prefix-sid"
    prefixSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixSid.EntityData.Children = make(map[string]types.YChild)
    prefixSid.EntityData.Leafs = make(map[string]types.YLeaf)
    prefixSid.EntityData.Leafs["sid-value"] = types.YLeaf{"SidValue", prefixSid.SidValue}
    prefixSid.EntityData.Leafs["explicit-null"] = types.YLeaf{"ExplicitNull", prefixSid.ExplicitNull}
    prefixSid.EntityData.Leafs["type"] = types.YLeaf{"Type_", prefixSid.Type_}
    prefixSid.EntityData.Leafs["n-flag-clear"] = types.YLeaf{"NFlagClear", prefixSid.NFlagClear}
    return &(prefixSid.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict
// Strict Prefix SID
// This type is a presence type.
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SID value. The type is interface{} with range: 0..1048575. This attribute
    // is mandatory.
    SidValue interface{}

    // Force Penultimate Hop To Send Explicit-Null Label. The type is bool. The
    // default value is false.
    ExplicitNull interface{}

    // OSPF SID Type. The type is OspfSid. This attribute is mandatory.
    Type_ interface{}

    // Not a node SID. The type is bool. The default value is false.
    NFlagClear interface{}
}

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) GetEntityData() *types.CommonEntityData {
    prefixSidStrict.EntityData.YFilter = prefixSidStrict.YFilter
    prefixSidStrict.EntityData.YangName = "prefix-sid-strict"
    prefixSidStrict.EntityData.BundleName = "cisco_ios_xr"
    prefixSidStrict.EntityData.ParentYangName = "name-scope"
    prefixSidStrict.EntityData.SegmentPath = "prefix-sid-strict"
    prefixSidStrict.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixSidStrict.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixSidStrict.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixSidStrict.EntityData.Children = make(map[string]types.YChild)
    prefixSidStrict.EntityData.Leafs = make(map[string]types.YLeaf)
    prefixSidStrict.EntityData.Leafs["sid-value"] = types.YLeaf{"SidValue", prefixSidStrict.SidValue}
    prefixSidStrict.EntityData.Leafs["explicit-null"] = types.YLeaf{"ExplicitNull", prefixSidStrict.ExplicitNull}
    prefixSidStrict.EntityData.Leafs["type"] = types.YLeaf{"Type_", prefixSidStrict.Type_}
    prefixSidStrict.EntityData.Leafs["n-flag-clear"] = types.YLeaf{"NFlagClear", prefixSidStrict.NFlagClear}
    return &(prefixSidStrict.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList
// Filter networks intalled to RIB (disable as ACL
// name means filtering is disabled)
// This type is a presence type.
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Access Control List name. The type is string.
    AccessListName interface{}

    // Route Policy name. The type is string.
    RoutePolicyName interface{}
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) GetEntityData() *types.CommonEntityData {
    distributeList.EntityData.YFilter = distributeList.YFilter
    distributeList.EntityData.YangName = "distribute-list"
    distributeList.EntityData.BundleName = "cisco_ios_xr"
    distributeList.EntityData.ParentYangName = "name-scope"
    distributeList.EntityData.SegmentPath = "distribute-list"
    distributeList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    distributeList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    distributeList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    distributeList.EntityData.Children = make(map[string]types.YChild)
    distributeList.EntityData.Leafs = make(map[string]types.YLeaf)
    distributeList.EntityData.Leafs["access-list-name"] = types.YLeaf{"AccessListName", distributeList.AccessListName}
    distributeList.EntityData.Leafs["route-policy-name"] = types.YLeaf{"RoutePolicyName", distributeList.RoutePolicyName}
    return &(distributeList.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd
// BFD configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Hello interval for BFD sessions created by OSPF. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    Interval interface{}

    // Detection multiplier for BFD sessions created by OSPF. The type is
    // interface{} with range: 2..50.
    DetectionMultiplier interface{}

    // use of Bidirectional Forwarding Detection. The type is BfdEnableMode.
    FastDetectMode interface{}
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) GetEntityData() *types.CommonEntityData {
    bfd.EntityData.YFilter = bfd.YFilter
    bfd.EntityData.YangName = "bfd"
    bfd.EntityData.BundleName = "cisco_ios_xr"
    bfd.EntityData.ParentYangName = "name-scope"
    bfd.EntityData.SegmentPath = "bfd"
    bfd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfd.EntityData.Children = make(map[string]types.YChild)
    bfd.EntityData.Leafs = make(map[string]types.YLeaf)
    bfd.EntityData.Leafs["interval"] = types.YLeaf{"Interval", bfd.Interval}
    bfd.EntityData.Leafs["detection-multiplier"] = types.YLeaf{"DetectionMultiplier", bfd.DetectionMultiplier}
    bfd.EntityData.Leafs["fast-detect-mode"] = types.YLeaf{"FastDetectMode", bfd.FastDetectMode}
    return &(bfd.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication
// Authentication
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // b'(!.+)|([^!].+)'.
    Key interface{}

    // Authentication type.
    Type_ Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "cisco_ios_xr"
    authentication.EntityData.ParentYangName = "name-scope"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authentication.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authentication.EntityData.Children = make(map[string]types.YChild)
    authentication.EntityData.Children["type"] = types.YChild{"Type_", &authentication.Type_}
    authentication.EntityData.Children["message-digest-keies"] = types.YChild{"MessageDigestKeies", &authentication.MessageDigestKeies}
    authentication.EntityData.Leafs = make(map[string]types.YLeaf)
    authentication.EntityData.Leafs["key"] = types.YLeaf{"Key", authentication.Key}
    return &(authentication.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "type"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "authentication"
    self.EntityData.SegmentPath = "type"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    self.EntityData.Leafs["authen-type"] = types.YLeaf{"AuthenType", self.AuthenType}
    self.EntityData.Leafs["keychain-authen-type"] = types.YLeaf{"KeychainAuthenType", self.KeychainAuthenType}
    self.EntityData.Leafs["keychain-name"] = types.YLeaf{"KeychainName", self.KeychainName}
    return &(self.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) GetEntityData() *types.CommonEntityData {
    messageDigestKeies.EntityData.YFilter = messageDigestKeies.YFilter
    messageDigestKeies.EntityData.YangName = "message-digest-keies"
    messageDigestKeies.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKeies.EntityData.ParentYangName = "authentication"
    messageDigestKeies.EntityData.SegmentPath = "message-digest-keies"
    messageDigestKeies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKeies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKeies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKeies.EntityData.Children = make(map[string]types.YChild)
    messageDigestKeies.EntityData.Children["message-digest-key"] = types.YChild{"MessageDigestKey", nil}
    for i := range messageDigestKeies.MessageDigestKey {
        messageDigestKeies.EntityData.Children[types.GetSegmentPath(&messageDigestKeies.MessageDigestKey[i])] = types.YChild{"MessageDigestKey", &messageDigestKeies.MessageDigestKey[i]}
    }
    messageDigestKeies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(messageDigestKeies.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: b'(!.+)|([^!].+)'. This
    // attribute is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetEntityData() *types.CommonEntityData {
    messageDigestKey.EntityData.YFilter = messageDigestKey.YFilter
    messageDigestKey.EntityData.YangName = "message-digest-key"
    messageDigestKey.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKey.EntityData.ParentYangName = "message-digest-keies"
    messageDigestKey.EntityData.SegmentPath = "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
    messageDigestKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKey.EntityData.Children = make(map[string]types.YChild)
    messageDigestKey.EntityData.Leafs = make(map[string]types.YLeaf)
    messageDigestKey.EntityData.Leafs["key-id"] = types.YLeaf{"KeyId", messageDigestKey.KeyId}
    messageDigestKey.EntityData.Leafs["password"] = types.YLeaf{"Password", messageDigestKey.Password}
    return &(messageDigestKey.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security
// Container class for security related
// configuration parameters
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enabling turns on TTL security.
    Ttl Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) GetEntityData() *types.CommonEntityData {
    security.EntityData.YFilter = security.YFilter
    security.EntityData.YangName = "security"
    security.EntityData.BundleName = "cisco_ios_xr"
    security.EntityData.ParentYangName = "name-scope"
    security.EntityData.SegmentPath = "security"
    security.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    security.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    security.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    security.EntityData.Children = make(map[string]types.YChild)
    security.EntityData.Children["ttl"] = types.YChild{"Ttl", &security.Ttl}
    security.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(security.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl
// Enabling turns on TTL security
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable TTL security. The type is bool.
    Enable interface{}

    // Hop count. The type is interface{} with range: 1..254.
    HopCount interface{}
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) GetEntityData() *types.CommonEntityData {
    ttl.EntityData.YFilter = ttl.YFilter
    ttl.EntityData.YangName = "ttl"
    ttl.EntityData.BundleName = "cisco_ios_xr"
    ttl.EntityData.ParentYangName = "security"
    ttl.EntityData.SegmentPath = "ttl"
    ttl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ttl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ttl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ttl.EntityData.Children = make(map[string]types.YChild)
    ttl.EntityData.Leafs = make(map[string]types.YLeaf)
    ttl.EntityData.Leafs["enable"] = types.YLeaf{"Enable", ttl.Enable}
    ttl.EntityData.Leafs["hop-count"] = types.YLeaf{"HopCount", ttl.HopCount}
    return &(ttl.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors
// Neighbor router configuration information
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Router configuration information for a particular neighbor. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor.
    Neighbor []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor
}

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "cisco_ios_xr"
    neighbors.EntityData.ParentYangName = "name-scope"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbors.EntityData.Children = make(map[string]types.YChild)
    neighbors.EntityData.Children["neighbor"] = types.YChild{"Neighbor", nil}
    for i := range neighbors.Neighbor {
        neighbors.EntityData.Children[types.GetSegmentPath(&neighbors.Neighbor[i])] = types.YChild{"Neighbor", &neighbors.Neighbor[i]}
    }
    neighbors.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(neighbors.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor
// Router configuration information for a
// particular neighbor
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Neighbor IP address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // OSPF priority of non-broadcast neighbor. The type is interface{} with
    // range: 0..255. The default value is 0.
    Priority interface{}

    // OSPF dead router poll-interval in seconds. The type is interface{} with
    // range: 0..65535. Units are second. The default value is 40.
    PollInterval interface{}

    // OSPF cost for point-to-multipoint neighbor. The type is interface{} with
    // range: 1..65535. The default value is 1.
    Cost interface{}

    // Database filter: Filter OSPF LSA during synchronization and flooding for
    // point-to-multipoint. The type is bool. The default value is false.
    DatabaseFilter interface{}
}

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "cisco_ios_xr"
    neighbor.EntityData.ParentYangName = "neighbors"
    neighbor.EntityData.SegmentPath = "neighbor" + "[neighbor-address='" + fmt.Sprintf("%v", neighbor.NeighborAddress) + "']"
    neighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbor.EntityData.Children = make(map[string]types.YChild)
    neighbor.EntityData.Leafs = make(map[string]types.YLeaf)
    neighbor.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", neighbor.NeighborAddress}
    neighbor.EntityData.Leafs["priority"] = types.YLeaf{"Priority", neighbor.Priority}
    neighbor.EntityData.Leafs["poll-interval"] = types.YLeaf{"PollInterval", neighbor.PollInterval}
    neighbor.EntityData.Leafs["cost"] = types.YLeaf{"Cost", neighbor.Cost}
    neighbor.EntityData.Leafs["database-filter"] = types.YLeaf{"DatabaseFilter", neighbor.DatabaseFilter}
    return &(neighbor.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) GetEntityData() *types.CommonEntityData {
    deadIntervalMinimal.EntityData.YFilter = deadIntervalMinimal.YFilter
    deadIntervalMinimal.EntityData.YangName = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.BundleName = "cisco_ios_xr"
    deadIntervalMinimal.EntityData.ParentYangName = "name-scope"
    deadIntervalMinimal.EntityData.SegmentPath = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    deadIntervalMinimal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    deadIntervalMinimal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    deadIntervalMinimal.EntityData.Children = make(map[string]types.YChild)
    deadIntervalMinimal.EntityData.Leafs = make(map[string]types.YLeaf)
    deadIntervalMinimal.EntityData.Leafs["interval"] = types.YLeaf{"Interval", deadIntervalMinimal.Interval}
    deadIntervalMinimal.EntityData.Leafs["multiplier"] = types.YLeaf{"Multiplier", deadIntervalMinimal.Multiplier}
    return &(deadIntervalMinimal.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute
// Fast-reroute configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // OspfFastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink

    // Fast-reroute per-prefix global configuration.
    PerPrefix Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) GetEntityData() *types.CommonEntityData {
    fastReroute.EntityData.YFilter = fastReroute.YFilter
    fastReroute.EntityData.YangName = "fast-reroute"
    fastReroute.EntityData.BundleName = "cisco_ios_xr"
    fastReroute.EntityData.ParentYangName = "name-scope"
    fastReroute.EntityData.SegmentPath = "fast-reroute"
    fastReroute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fastReroute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fastReroute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fastReroute.EntityData.Children = make(map[string]types.YChild)
    fastReroute.EntityData.Children["per-link"] = types.YChild{"PerLink", &fastReroute.PerLink}
    fastReroute.EntityData.Children["per-prefix"] = types.YChild{"PerPrefix", &fastReroute.PerPrefix}
    fastReroute.EntityData.Leafs = make(map[string]types.YLeaf)
    fastReroute.EntityData.Leafs["fast-reroute-enable"] = types.YLeaf{"FastRerouteEnable", fastReroute.FastRerouteEnable}
    return &(fastReroute.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) GetEntityData() *types.CommonEntityData {
    perLink.EntityData.YFilter = perLink.YFilter
    perLink.EntityData.YangName = "per-link"
    perLink.EntityData.BundleName = "cisco_ios_xr"
    perLink.EntityData.ParentYangName = "fast-reroute"
    perLink.EntityData.SegmentPath = "per-link"
    perLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perLink.EntityData.Children = make(map[string]types.YChild)
    perLink.EntityData.Children["candidate-interfaces"] = types.YChild{"CandidateInterfaces", &perLink.CandidateInterfaces}
    perLink.EntityData.Children["exclude-interfaces"] = types.YChild{"ExcludeInterfaces", &perLink.ExcludeInterfaces}
    perLink.EntityData.Leafs = make(map[string]types.YLeaf)
    perLink.EntityData.Leafs["fast-reroute-use-candidate-only"] = types.YLeaf{"FastRerouteUseCandidateOnly", perLink.FastRerouteUseCandidateOnly}
    return &(perLink.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetEntityData() *types.CommonEntityData {
    candidateInterfaces.EntityData.YFilter = candidateInterfaces.YFilter
    candidateInterfaces.EntityData.YangName = "candidate-interfaces"
    candidateInterfaces.EntityData.BundleName = "cisco_ios_xr"
    candidateInterfaces.EntityData.ParentYangName = "per-link"
    candidateInterfaces.EntityData.SegmentPath = "candidate-interfaces"
    candidateInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterfaces.EntityData.Children = make(map[string]types.YChild)
    candidateInterfaces.EntityData.Children["candidate-interface"] = types.YChild{"CandidateInterface", nil}
    for i := range candidateInterfaces.CandidateInterface {
        candidateInterfaces.EntityData.Children[types.GetSegmentPath(&candidateInterfaces.CandidateInterface[i])] = types.YChild{"CandidateInterface", &candidateInterfaces.CandidateInterface[i]}
    }
    candidateInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(candidateInterfaces.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetEntityData() *types.CommonEntityData {
    candidateInterface.EntityData.YFilter = candidateInterface.YFilter
    candidateInterface.EntityData.YangName = "candidate-interface"
    candidateInterface.EntityData.BundleName = "cisco_ios_xr"
    candidateInterface.EntityData.ParentYangName = "candidate-interfaces"
    candidateInterface.EntityData.SegmentPath = "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
    candidateInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterface.EntityData.Children = make(map[string]types.YChild)
    candidateInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    candidateInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", candidateInterface.InterfaceName}
    return &(candidateInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetEntityData() *types.CommonEntityData {
    excludeInterfaces.EntityData.YFilter = excludeInterfaces.YFilter
    excludeInterfaces.EntityData.YangName = "exclude-interfaces"
    excludeInterfaces.EntityData.BundleName = "cisco_ios_xr"
    excludeInterfaces.EntityData.ParentYangName = "per-link"
    excludeInterfaces.EntityData.SegmentPath = "exclude-interfaces"
    excludeInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterfaces.EntityData.Children = make(map[string]types.YChild)
    excludeInterfaces.EntityData.Children["exclude-interface"] = types.YChild{"ExcludeInterface", nil}
    for i := range excludeInterfaces.ExcludeInterface {
        excludeInterfaces.EntityData.Children[types.GetSegmentPath(&excludeInterfaces.ExcludeInterface[i])] = types.YChild{"ExcludeInterface", &excludeInterfaces.ExcludeInterface[i]}
    }
    excludeInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(excludeInterfaces.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetEntityData() *types.CommonEntityData {
    excludeInterface.EntityData.YFilter = excludeInterface.YFilter
    excludeInterface.EntityData.YangName = "exclude-interface"
    excludeInterface.EntityData.BundleName = "cisco_ios_xr"
    excludeInterface.EntityData.ParentYangName = "exclude-interfaces"
    excludeInterface.EntityData.SegmentPath = "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
    excludeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterface.EntityData.Children = make(map[string]types.YChild)
    excludeInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    excludeInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", excludeInterface.InterfaceName}
    return &(excludeInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix
// Fast-reroute per-prefix global configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology Independet LFA configuration. The type is bool.
    TopologyIndependentLfa interface{}

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Remote LFA configuration.
    RemoteLfa Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa

    // Fast-reroute tiebreakers configurations.
    Tiebreakers Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) GetEntityData() *types.CommonEntityData {
    perPrefix.EntityData.YFilter = perPrefix.YFilter
    perPrefix.EntityData.YangName = "per-prefix"
    perPrefix.EntityData.BundleName = "cisco_ios_xr"
    perPrefix.EntityData.ParentYangName = "fast-reroute"
    perPrefix.EntityData.SegmentPath = "per-prefix"
    perPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perPrefix.EntityData.Children = make(map[string]types.YChild)
    perPrefix.EntityData.Children["remote-lfa"] = types.YChild{"RemoteLfa", &perPrefix.RemoteLfa}
    perPrefix.EntityData.Children["tiebreakers"] = types.YChild{"Tiebreakers", &perPrefix.Tiebreakers}
    perPrefix.EntityData.Children["candidate-interfaces"] = types.YChild{"CandidateInterfaces", &perPrefix.CandidateInterfaces}
    perPrefix.EntityData.Children["exclude-interfaces"] = types.YChild{"ExcludeInterfaces", &perPrefix.ExcludeInterfaces}
    perPrefix.EntityData.Leafs = make(map[string]types.YLeaf)
    perPrefix.EntityData.Leafs["topology-independent-lfa"] = types.YLeaf{"TopologyIndependentLfa", perPrefix.TopologyIndependentLfa}
    perPrefix.EntityData.Leafs["fast-reroute-use-candidate-only"] = types.YLeaf{"FastRerouteUseCandidateOnly", perPrefix.FastRerouteUseCandidateOnly}
    return &(perPrefix.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa
// Remote LFA configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable/Disable remote LFA computation. The type is OspfFrrRlfaTunnel.
    Tunnel interface{}

    // Maximum path cost to remote LFA. The type is interface{} with range:
    // 1..4294967295.
    MaximumCost interface{}
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetEntityData() *types.CommonEntityData {
    remoteLfa.EntityData.YFilter = remoteLfa.YFilter
    remoteLfa.EntityData.YangName = "remote-lfa"
    remoteLfa.EntityData.BundleName = "cisco_ios_xr"
    remoteLfa.EntityData.ParentYangName = "per-prefix"
    remoteLfa.EntityData.SegmentPath = "remote-lfa"
    remoteLfa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteLfa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteLfa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteLfa.EntityData.Children = make(map[string]types.YChild)
    remoteLfa.EntityData.Leafs = make(map[string]types.YLeaf)
    remoteLfa.EntityData.Leafs["tunnel"] = types.YLeaf{"Tunnel", remoteLfa.Tunnel}
    remoteLfa.EntityData.Leafs["maximum-cost"] = types.YLeaf{"MaximumCost", remoteLfa.MaximumCost}
    return &(remoteLfa.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers
// Fast-reroute tiebreakers configurations
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fast-reroute tiebreakers configuration. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker.
    Tiebreaker []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetEntityData() *types.CommonEntityData {
    tiebreakers.EntityData.YFilter = tiebreakers.YFilter
    tiebreakers.EntityData.YangName = "tiebreakers"
    tiebreakers.EntityData.BundleName = "cisco_ios_xr"
    tiebreakers.EntityData.ParentYangName = "per-prefix"
    tiebreakers.EntityData.SegmentPath = "tiebreakers"
    tiebreakers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tiebreakers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tiebreakers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tiebreakers.EntityData.Children = make(map[string]types.YChild)
    tiebreakers.EntityData.Children["tiebreaker"] = types.YChild{"Tiebreaker", nil}
    for i := range tiebreakers.Tiebreaker {
        tiebreakers.EntityData.Children[types.GetSegmentPath(&tiebreakers.Tiebreaker[i])] = types.YChild{"Tiebreaker", &tiebreakers.Tiebreaker[i]}
    }
    tiebreakers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tiebreakers.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
// Fast-reroute tiebreakers configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Tiebreaker type. The type is
    // OspfFastRerouteTiebreakersIntf.
    TiebreakerType interface{}

    // Index value for a tiebreaker, 0 to disable. The type is interface{} with
    // range: 0..255. This attribute is mandatory.
    TiebreakerIndex interface{}
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetEntityData() *types.CommonEntityData {
    tiebreaker.EntityData.YFilter = tiebreaker.YFilter
    tiebreaker.EntityData.YangName = "tiebreaker"
    tiebreaker.EntityData.BundleName = "cisco_ios_xr"
    tiebreaker.EntityData.ParentYangName = "tiebreakers"
    tiebreaker.EntityData.SegmentPath = "tiebreaker" + "[tiebreaker-type='" + fmt.Sprintf("%v", tiebreaker.TiebreakerType) + "']"
    tiebreaker.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tiebreaker.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tiebreaker.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tiebreaker.EntityData.Children = make(map[string]types.YChild)
    tiebreaker.EntityData.Leafs = make(map[string]types.YLeaf)
    tiebreaker.EntityData.Leafs["tiebreaker-type"] = types.YLeaf{"TiebreakerType", tiebreaker.TiebreakerType}
    tiebreaker.EntityData.Leafs["tiebreaker-index"] = types.YLeaf{"TiebreakerIndex", tiebreaker.TiebreakerIndex}
    return &(tiebreaker.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetEntityData() *types.CommonEntityData {
    candidateInterfaces.EntityData.YFilter = candidateInterfaces.YFilter
    candidateInterfaces.EntityData.YangName = "candidate-interfaces"
    candidateInterfaces.EntityData.BundleName = "cisco_ios_xr"
    candidateInterfaces.EntityData.ParentYangName = "per-prefix"
    candidateInterfaces.EntityData.SegmentPath = "candidate-interfaces"
    candidateInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterfaces.EntityData.Children = make(map[string]types.YChild)
    candidateInterfaces.EntityData.Children["candidate-interface"] = types.YChild{"CandidateInterface", nil}
    for i := range candidateInterfaces.CandidateInterface {
        candidateInterfaces.EntityData.Children[types.GetSegmentPath(&candidateInterfaces.CandidateInterface[i])] = types.YChild{"CandidateInterface", &candidateInterfaces.CandidateInterface[i]}
    }
    candidateInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(candidateInterfaces.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetEntityData() *types.CommonEntityData {
    candidateInterface.EntityData.YFilter = candidateInterface.YFilter
    candidateInterface.EntityData.YangName = "candidate-interface"
    candidateInterface.EntityData.BundleName = "cisco_ios_xr"
    candidateInterface.EntityData.ParentYangName = "candidate-interfaces"
    candidateInterface.EntityData.SegmentPath = "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
    candidateInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterface.EntityData.Children = make(map[string]types.YChild)
    candidateInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    candidateInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", candidateInterface.InterfaceName}
    return &(candidateInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetEntityData() *types.CommonEntityData {
    excludeInterfaces.EntityData.YFilter = excludeInterfaces.YFilter
    excludeInterfaces.EntityData.YangName = "exclude-interfaces"
    excludeInterfaces.EntityData.BundleName = "cisco_ios_xr"
    excludeInterfaces.EntityData.ParentYangName = "per-prefix"
    excludeInterfaces.EntityData.SegmentPath = "exclude-interfaces"
    excludeInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterfaces.EntityData.Children = make(map[string]types.YChild)
    excludeInterfaces.EntityData.Children["exclude-interface"] = types.YChild{"ExcludeInterface", nil}
    for i := range excludeInterfaces.ExcludeInterface {
        excludeInterfaces.EntityData.Children[types.GetSegmentPath(&excludeInterfaces.ExcludeInterface[i])] = types.YChild{"ExcludeInterface", &excludeInterfaces.ExcludeInterface[i]}
    }
    excludeInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(excludeInterfaces.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetEntityData() *types.CommonEntityData {
    excludeInterface.EntityData.YFilter = excludeInterface.YFilter
    excludeInterface.EntityData.YangName = "exclude-interface"
    excludeInterface.EntityData.BundleName = "cisco_ios_xr"
    excludeInterface.EntityData.ParentYangName = "exclude-interfaces"
    excludeInterface.EntityData.SegmentPath = "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
    excludeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterface.EntityData.Children = make(map[string]types.YChild)
    excludeInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    excludeInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", excludeInterface.InterfaceName}
    return &(excludeInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback
// Interface fallback cost
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fallback cost of link. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Bandwidth threshold. The type is interface{} with range: 1..4294967.
    Threshold interface{}
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) GetEntityData() *types.CommonEntityData {
    costFallback.EntityData.YFilter = costFallback.YFilter
    costFallback.EntityData.YangName = "cost-fallback"
    costFallback.EntityData.BundleName = "cisco_ios_xr"
    costFallback.EntityData.ParentYangName = "name-scope"
    costFallback.EntityData.SegmentPath = "cost-fallback"
    costFallback.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    costFallback.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    costFallback.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    costFallback.EntityData.Children = make(map[string]types.YChild)
    costFallback.EntityData.Leafs = make(map[string]types.YLeaf)
    costFallback.EntityData.Leafs["cost"] = types.YLeaf{"Cost", costFallback.Cost}
    costFallback.EntityData.Leafs["threshold"] = types.YLeaf{"Threshold", costFallback.Threshold}
    return &(costFallback.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes
// Multi Area Interface scope configurations
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Multi Area Interface configuration. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope.
    MultiAreaInterfaceScope []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope
}

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) GetEntityData() *types.CommonEntityData {
    multiAreaInterfaceScopes.EntityData.YFilter = multiAreaInterfaceScopes.YFilter
    multiAreaInterfaceScopes.EntityData.YangName = "multi-area-interface-scopes"
    multiAreaInterfaceScopes.EntityData.BundleName = "cisco_ios_xr"
    multiAreaInterfaceScopes.EntityData.ParentYangName = "area-address"
    multiAreaInterfaceScopes.EntityData.SegmentPath = "multi-area-interface-scopes"
    multiAreaInterfaceScopes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multiAreaInterfaceScopes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multiAreaInterfaceScopes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multiAreaInterfaceScopes.EntityData.Children = make(map[string]types.YChild)
    multiAreaInterfaceScopes.EntityData.Children["multi-area-interface-scope"] = types.YChild{"MultiAreaInterfaceScope", nil}
    for i := range multiAreaInterfaceScopes.MultiAreaInterfaceScope {
        multiAreaInterfaceScopes.EntityData.Children[types.GetSegmentPath(&multiAreaInterfaceScopes.MultiAreaInterfaceScope[i])] = types.YChild{"MultiAreaInterfaceScope", &multiAreaInterfaceScopes.MultiAreaInterfaceScope[i]}
    }
    multiAreaInterfaceScopes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(multiAreaInterfaceScopes.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope
// Multi Area Interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of Multi Area Interface to configure. The
    // type is string with pattern: b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Enable/Disable ignoring of MTU in DBD packets. The type is bool. The
    // default value is false.
    MtuIgnore interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // When enabled, prevent sending HELLO packets over link. The type is bool.
    // The default value is false.
    Passive interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Customize size of OSPF packets upto MTU. The type is interface{} with
    // range: 576..10000.
    PacketSize interface{}

    // Filter OSPF LSA during synchronization and flooding. The type is bool. The
    // default value is false.
    DatabaseFilter interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Filter networks intalled to RIB (disable as ACL name means filtering is
    // disabled).
    DistributeList Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList

    // Authentication.
    Authentication Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication

    // Neighbor router configuration information.
    Neighbors Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal

    // Fast-reroute configuration.
    FastReroute Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute

    // Interface fallback cost.
    CostFallback Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback
}

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetEntityData() *types.CommonEntityData {
    multiAreaInterfaceScope.EntityData.YFilter = multiAreaInterfaceScope.YFilter
    multiAreaInterfaceScope.EntityData.YangName = "multi-area-interface-scope"
    multiAreaInterfaceScope.EntityData.BundleName = "cisco_ios_xr"
    multiAreaInterfaceScope.EntityData.ParentYangName = "multi-area-interface-scopes"
    multiAreaInterfaceScope.EntityData.SegmentPath = "multi-area-interface-scope" + "[interface-name='" + fmt.Sprintf("%v", multiAreaInterfaceScope.InterfaceName) + "']"
    multiAreaInterfaceScope.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multiAreaInterfaceScope.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multiAreaInterfaceScope.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multiAreaInterfaceScope.EntityData.Children = make(map[string]types.YChild)
    multiAreaInterfaceScope.EntityData.Children["distribute-list"] = types.YChild{"DistributeList", &multiAreaInterfaceScope.DistributeList}
    multiAreaInterfaceScope.EntityData.Children["authentication"] = types.YChild{"Authentication", &multiAreaInterfaceScope.Authentication}
    multiAreaInterfaceScope.EntityData.Children["neighbors"] = types.YChild{"Neighbors", &multiAreaInterfaceScope.Neighbors}
    multiAreaInterfaceScope.EntityData.Children["dead-interval-minimal"] = types.YChild{"DeadIntervalMinimal", &multiAreaInterfaceScope.DeadIntervalMinimal}
    multiAreaInterfaceScope.EntityData.Children["fast-reroute"] = types.YChild{"FastReroute", &multiAreaInterfaceScope.FastReroute}
    multiAreaInterfaceScope.EntityData.Children["cost-fallback"] = types.YChild{"CostFallback", &multiAreaInterfaceScope.CostFallback}
    multiAreaInterfaceScope.EntityData.Leafs = make(map[string]types.YLeaf)
    multiAreaInterfaceScope.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", multiAreaInterfaceScope.InterfaceName}
    multiAreaInterfaceScope.EntityData.Leafs["cost"] = types.YLeaf{"Cost", multiAreaInterfaceScope.Cost}
    multiAreaInterfaceScope.EntityData.Leafs["mtu-ignore"] = types.YLeaf{"MtuIgnore", multiAreaInterfaceScope.MtuIgnore}
    multiAreaInterfaceScope.EntityData.Leafs["hello-interval"] = types.YLeaf{"HelloInterval", multiAreaInterfaceScope.HelloInterval}
    multiAreaInterfaceScope.EntityData.Leafs["passive"] = types.YLeaf{"Passive", multiAreaInterfaceScope.Passive}
    multiAreaInterfaceScope.EntityData.Leafs["transmit-delay"] = types.YLeaf{"TransmitDelay", multiAreaInterfaceScope.TransmitDelay}
    multiAreaInterfaceScope.EntityData.Leafs["packet-size"] = types.YLeaf{"PacketSize", multiAreaInterfaceScope.PacketSize}
    multiAreaInterfaceScope.EntityData.Leafs["database-filter"] = types.YLeaf{"DatabaseFilter", multiAreaInterfaceScope.DatabaseFilter}
    multiAreaInterfaceScope.EntityData.Leafs["retransmit-interval"] = types.YLeaf{"RetransmitInterval", multiAreaInterfaceScope.RetransmitInterval}
    multiAreaInterfaceScope.EntityData.Leafs["running"] = types.YLeaf{"Running", multiAreaInterfaceScope.Running}
    return &(multiAreaInterfaceScope.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList
// Filter networks intalled to RIB (disable as ACL
// name means filtering is disabled)
// This type is a presence type.
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Access Control List name. The type is string.
    AccessListName interface{}

    // Route Policy name. The type is string.
    RoutePolicyName interface{}
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetEntityData() *types.CommonEntityData {
    distributeList.EntityData.YFilter = distributeList.YFilter
    distributeList.EntityData.YangName = "distribute-list"
    distributeList.EntityData.BundleName = "cisco_ios_xr"
    distributeList.EntityData.ParentYangName = "multi-area-interface-scope"
    distributeList.EntityData.SegmentPath = "distribute-list"
    distributeList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    distributeList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    distributeList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    distributeList.EntityData.Children = make(map[string]types.YChild)
    distributeList.EntityData.Leafs = make(map[string]types.YLeaf)
    distributeList.EntityData.Leafs["access-list-name"] = types.YLeaf{"AccessListName", distributeList.AccessListName}
    distributeList.EntityData.Leafs["route-policy-name"] = types.YLeaf{"RoutePolicyName", distributeList.RoutePolicyName}
    return &(distributeList.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication
// Authentication
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // b'(!.+)|([^!].+)'.
    Key interface{}

    // Authentication type.
    Type_ Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "cisco_ios_xr"
    authentication.EntityData.ParentYangName = "multi-area-interface-scope"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authentication.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authentication.EntityData.Children = make(map[string]types.YChild)
    authentication.EntityData.Children["type"] = types.YChild{"Type_", &authentication.Type_}
    authentication.EntityData.Children["message-digest-keies"] = types.YChild{"MessageDigestKeies", &authentication.MessageDigestKeies}
    authentication.EntityData.Leafs = make(map[string]types.YLeaf)
    authentication.EntityData.Leafs["key"] = types.YLeaf{"Key", authentication.Key}
    return &(authentication.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "type"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "authentication"
    self.EntityData.SegmentPath = "type"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    self.EntityData.Leafs["authen-type"] = types.YLeaf{"AuthenType", self.AuthenType}
    self.EntityData.Leafs["keychain-authen-type"] = types.YLeaf{"KeychainAuthenType", self.KeychainAuthenType}
    self.EntityData.Leafs["keychain-name"] = types.YLeaf{"KeychainName", self.KeychainName}
    return &(self.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetEntityData() *types.CommonEntityData {
    messageDigestKeies.EntityData.YFilter = messageDigestKeies.YFilter
    messageDigestKeies.EntityData.YangName = "message-digest-keies"
    messageDigestKeies.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKeies.EntityData.ParentYangName = "authentication"
    messageDigestKeies.EntityData.SegmentPath = "message-digest-keies"
    messageDigestKeies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKeies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKeies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKeies.EntityData.Children = make(map[string]types.YChild)
    messageDigestKeies.EntityData.Children["message-digest-key"] = types.YChild{"MessageDigestKey", nil}
    for i := range messageDigestKeies.MessageDigestKey {
        messageDigestKeies.EntityData.Children[types.GetSegmentPath(&messageDigestKeies.MessageDigestKey[i])] = types.YChild{"MessageDigestKey", &messageDigestKeies.MessageDigestKey[i]}
    }
    messageDigestKeies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(messageDigestKeies.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: b'(!.+)|([^!].+)'. This
    // attribute is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetEntityData() *types.CommonEntityData {
    messageDigestKey.EntityData.YFilter = messageDigestKey.YFilter
    messageDigestKey.EntityData.YangName = "message-digest-key"
    messageDigestKey.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKey.EntityData.ParentYangName = "message-digest-keies"
    messageDigestKey.EntityData.SegmentPath = "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
    messageDigestKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKey.EntityData.Children = make(map[string]types.YChild)
    messageDigestKey.EntityData.Leafs = make(map[string]types.YLeaf)
    messageDigestKey.EntityData.Leafs["key-id"] = types.YLeaf{"KeyId", messageDigestKey.KeyId}
    messageDigestKey.EntityData.Leafs["password"] = types.YLeaf{"Password", messageDigestKey.Password}
    return &(messageDigestKey.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors
// Neighbor router configuration information
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Router configuration information for a particular neighbor. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor.
    Neighbor []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor
}

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "cisco_ios_xr"
    neighbors.EntityData.ParentYangName = "multi-area-interface-scope"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbors.EntityData.Children = make(map[string]types.YChild)
    neighbors.EntityData.Children["neighbor"] = types.YChild{"Neighbor", nil}
    for i := range neighbors.Neighbor {
        neighbors.EntityData.Children[types.GetSegmentPath(&neighbors.Neighbor[i])] = types.YChild{"Neighbor", &neighbors.Neighbor[i]}
    }
    neighbors.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(neighbors.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor
// Router configuration information for a
// particular neighbor
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Neighbor IP address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // OSPF priority of non-broadcast neighbor. The type is interface{} with
    // range: 0..255. The default value is 0.
    Priority interface{}

    // OSPF dead router poll-interval in seconds. The type is interface{} with
    // range: 0..65535. Units are second. The default value is 40.
    PollInterval interface{}

    // OSPF cost for point-to-multipoint neighbor. The type is interface{} with
    // range: 1..65535. The default value is 1.
    Cost interface{}

    // Database filter: Filter OSPF LSA during synchronization and flooding for
    // point-to-multipoint. The type is bool. The default value is false.
    DatabaseFilter interface{}
}

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "cisco_ios_xr"
    neighbor.EntityData.ParentYangName = "neighbors"
    neighbor.EntityData.SegmentPath = "neighbor" + "[neighbor-address='" + fmt.Sprintf("%v", neighbor.NeighborAddress) + "']"
    neighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbor.EntityData.Children = make(map[string]types.YChild)
    neighbor.EntityData.Leafs = make(map[string]types.YLeaf)
    neighbor.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", neighbor.NeighborAddress}
    neighbor.EntityData.Leafs["priority"] = types.YLeaf{"Priority", neighbor.Priority}
    neighbor.EntityData.Leafs["poll-interval"] = types.YLeaf{"PollInterval", neighbor.PollInterval}
    neighbor.EntityData.Leafs["cost"] = types.YLeaf{"Cost", neighbor.Cost}
    neighbor.EntityData.Leafs["database-filter"] = types.YLeaf{"DatabaseFilter", neighbor.DatabaseFilter}
    return &(neighbor.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetEntityData() *types.CommonEntityData {
    deadIntervalMinimal.EntityData.YFilter = deadIntervalMinimal.YFilter
    deadIntervalMinimal.EntityData.YangName = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.BundleName = "cisco_ios_xr"
    deadIntervalMinimal.EntityData.ParentYangName = "multi-area-interface-scope"
    deadIntervalMinimal.EntityData.SegmentPath = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    deadIntervalMinimal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    deadIntervalMinimal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    deadIntervalMinimal.EntityData.Children = make(map[string]types.YChild)
    deadIntervalMinimal.EntityData.Leafs = make(map[string]types.YLeaf)
    deadIntervalMinimal.EntityData.Leafs["interval"] = types.YLeaf{"Interval", deadIntervalMinimal.Interval}
    deadIntervalMinimal.EntityData.Leafs["multiplier"] = types.YLeaf{"Multiplier", deadIntervalMinimal.Multiplier}
    return &(deadIntervalMinimal.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute
// Fast-reroute configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // OspfFastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink

    // Fast-reroute per-prefix global configuration.
    PerPrefix Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetEntityData() *types.CommonEntityData {
    fastReroute.EntityData.YFilter = fastReroute.YFilter
    fastReroute.EntityData.YangName = "fast-reroute"
    fastReroute.EntityData.BundleName = "cisco_ios_xr"
    fastReroute.EntityData.ParentYangName = "multi-area-interface-scope"
    fastReroute.EntityData.SegmentPath = "fast-reroute"
    fastReroute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fastReroute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fastReroute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fastReroute.EntityData.Children = make(map[string]types.YChild)
    fastReroute.EntityData.Children["per-link"] = types.YChild{"PerLink", &fastReroute.PerLink}
    fastReroute.EntityData.Children["per-prefix"] = types.YChild{"PerPrefix", &fastReroute.PerPrefix}
    fastReroute.EntityData.Leafs = make(map[string]types.YLeaf)
    fastReroute.EntityData.Leafs["fast-reroute-enable"] = types.YLeaf{"FastRerouteEnable", fastReroute.FastRerouteEnable}
    return &(fastReroute.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetEntityData() *types.CommonEntityData {
    perLink.EntityData.YFilter = perLink.YFilter
    perLink.EntityData.YangName = "per-link"
    perLink.EntityData.BundleName = "cisco_ios_xr"
    perLink.EntityData.ParentYangName = "fast-reroute"
    perLink.EntityData.SegmentPath = "per-link"
    perLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perLink.EntityData.Children = make(map[string]types.YChild)
    perLink.EntityData.Children["candidate-interfaces"] = types.YChild{"CandidateInterfaces", &perLink.CandidateInterfaces}
    perLink.EntityData.Children["exclude-interfaces"] = types.YChild{"ExcludeInterfaces", &perLink.ExcludeInterfaces}
    perLink.EntityData.Leafs = make(map[string]types.YLeaf)
    perLink.EntityData.Leafs["fast-reroute-use-candidate-only"] = types.YLeaf{"FastRerouteUseCandidateOnly", perLink.FastRerouteUseCandidateOnly}
    return &(perLink.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetEntityData() *types.CommonEntityData {
    candidateInterfaces.EntityData.YFilter = candidateInterfaces.YFilter
    candidateInterfaces.EntityData.YangName = "candidate-interfaces"
    candidateInterfaces.EntityData.BundleName = "cisco_ios_xr"
    candidateInterfaces.EntityData.ParentYangName = "per-link"
    candidateInterfaces.EntityData.SegmentPath = "candidate-interfaces"
    candidateInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterfaces.EntityData.Children = make(map[string]types.YChild)
    candidateInterfaces.EntityData.Children["candidate-interface"] = types.YChild{"CandidateInterface", nil}
    for i := range candidateInterfaces.CandidateInterface {
        candidateInterfaces.EntityData.Children[types.GetSegmentPath(&candidateInterfaces.CandidateInterface[i])] = types.YChild{"CandidateInterface", &candidateInterfaces.CandidateInterface[i]}
    }
    candidateInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(candidateInterfaces.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetEntityData() *types.CommonEntityData {
    candidateInterface.EntityData.YFilter = candidateInterface.YFilter
    candidateInterface.EntityData.YangName = "candidate-interface"
    candidateInterface.EntityData.BundleName = "cisco_ios_xr"
    candidateInterface.EntityData.ParentYangName = "candidate-interfaces"
    candidateInterface.EntityData.SegmentPath = "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
    candidateInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterface.EntityData.Children = make(map[string]types.YChild)
    candidateInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    candidateInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", candidateInterface.InterfaceName}
    return &(candidateInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetEntityData() *types.CommonEntityData {
    excludeInterfaces.EntityData.YFilter = excludeInterfaces.YFilter
    excludeInterfaces.EntityData.YangName = "exclude-interfaces"
    excludeInterfaces.EntityData.BundleName = "cisco_ios_xr"
    excludeInterfaces.EntityData.ParentYangName = "per-link"
    excludeInterfaces.EntityData.SegmentPath = "exclude-interfaces"
    excludeInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterfaces.EntityData.Children = make(map[string]types.YChild)
    excludeInterfaces.EntityData.Children["exclude-interface"] = types.YChild{"ExcludeInterface", nil}
    for i := range excludeInterfaces.ExcludeInterface {
        excludeInterfaces.EntityData.Children[types.GetSegmentPath(&excludeInterfaces.ExcludeInterface[i])] = types.YChild{"ExcludeInterface", &excludeInterfaces.ExcludeInterface[i]}
    }
    excludeInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(excludeInterfaces.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetEntityData() *types.CommonEntityData {
    excludeInterface.EntityData.YFilter = excludeInterface.YFilter
    excludeInterface.EntityData.YangName = "exclude-interface"
    excludeInterface.EntityData.BundleName = "cisco_ios_xr"
    excludeInterface.EntityData.ParentYangName = "exclude-interfaces"
    excludeInterface.EntityData.SegmentPath = "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
    excludeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterface.EntityData.Children = make(map[string]types.YChild)
    excludeInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    excludeInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", excludeInterface.InterfaceName}
    return &(excludeInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix
// Fast-reroute per-prefix global configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology Independet LFA configuration. The type is bool.
    TopologyIndependentLfa interface{}

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Remote LFA configuration.
    RemoteLfa Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa

    // Fast-reroute tiebreakers configurations.
    Tiebreakers Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetEntityData() *types.CommonEntityData {
    perPrefix.EntityData.YFilter = perPrefix.YFilter
    perPrefix.EntityData.YangName = "per-prefix"
    perPrefix.EntityData.BundleName = "cisco_ios_xr"
    perPrefix.EntityData.ParentYangName = "fast-reroute"
    perPrefix.EntityData.SegmentPath = "per-prefix"
    perPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perPrefix.EntityData.Children = make(map[string]types.YChild)
    perPrefix.EntityData.Children["remote-lfa"] = types.YChild{"RemoteLfa", &perPrefix.RemoteLfa}
    perPrefix.EntityData.Children["tiebreakers"] = types.YChild{"Tiebreakers", &perPrefix.Tiebreakers}
    perPrefix.EntityData.Children["candidate-interfaces"] = types.YChild{"CandidateInterfaces", &perPrefix.CandidateInterfaces}
    perPrefix.EntityData.Children["exclude-interfaces"] = types.YChild{"ExcludeInterfaces", &perPrefix.ExcludeInterfaces}
    perPrefix.EntityData.Leafs = make(map[string]types.YLeaf)
    perPrefix.EntityData.Leafs["topology-independent-lfa"] = types.YLeaf{"TopologyIndependentLfa", perPrefix.TopologyIndependentLfa}
    perPrefix.EntityData.Leafs["fast-reroute-use-candidate-only"] = types.YLeaf{"FastRerouteUseCandidateOnly", perPrefix.FastRerouteUseCandidateOnly}
    return &(perPrefix.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa
// Remote LFA configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable/Disable remote LFA computation. The type is OspfFrrRlfaTunnel.
    Tunnel interface{}

    // Maximum path cost to remote LFA. The type is interface{} with range:
    // 1..4294967295.
    MaximumCost interface{}
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetEntityData() *types.CommonEntityData {
    remoteLfa.EntityData.YFilter = remoteLfa.YFilter
    remoteLfa.EntityData.YangName = "remote-lfa"
    remoteLfa.EntityData.BundleName = "cisco_ios_xr"
    remoteLfa.EntityData.ParentYangName = "per-prefix"
    remoteLfa.EntityData.SegmentPath = "remote-lfa"
    remoteLfa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteLfa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteLfa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteLfa.EntityData.Children = make(map[string]types.YChild)
    remoteLfa.EntityData.Leafs = make(map[string]types.YLeaf)
    remoteLfa.EntityData.Leafs["tunnel"] = types.YLeaf{"Tunnel", remoteLfa.Tunnel}
    remoteLfa.EntityData.Leafs["maximum-cost"] = types.YLeaf{"MaximumCost", remoteLfa.MaximumCost}
    return &(remoteLfa.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers
// Fast-reroute tiebreakers configurations
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fast-reroute tiebreakers configuration. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker.
    Tiebreaker []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetEntityData() *types.CommonEntityData {
    tiebreakers.EntityData.YFilter = tiebreakers.YFilter
    tiebreakers.EntityData.YangName = "tiebreakers"
    tiebreakers.EntityData.BundleName = "cisco_ios_xr"
    tiebreakers.EntityData.ParentYangName = "per-prefix"
    tiebreakers.EntityData.SegmentPath = "tiebreakers"
    tiebreakers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tiebreakers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tiebreakers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tiebreakers.EntityData.Children = make(map[string]types.YChild)
    tiebreakers.EntityData.Children["tiebreaker"] = types.YChild{"Tiebreaker", nil}
    for i := range tiebreakers.Tiebreaker {
        tiebreakers.EntityData.Children[types.GetSegmentPath(&tiebreakers.Tiebreaker[i])] = types.YChild{"Tiebreaker", &tiebreakers.Tiebreaker[i]}
    }
    tiebreakers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tiebreakers.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
// Fast-reroute tiebreakers configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Tiebreaker type. The type is
    // OspfFastRerouteTiebreakersIntf.
    TiebreakerType interface{}

    // Index value for a tiebreaker, 0 to disable. The type is interface{} with
    // range: 0..255. This attribute is mandatory.
    TiebreakerIndex interface{}
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetEntityData() *types.CommonEntityData {
    tiebreaker.EntityData.YFilter = tiebreaker.YFilter
    tiebreaker.EntityData.YangName = "tiebreaker"
    tiebreaker.EntityData.BundleName = "cisco_ios_xr"
    tiebreaker.EntityData.ParentYangName = "tiebreakers"
    tiebreaker.EntityData.SegmentPath = "tiebreaker" + "[tiebreaker-type='" + fmt.Sprintf("%v", tiebreaker.TiebreakerType) + "']"
    tiebreaker.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tiebreaker.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tiebreaker.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tiebreaker.EntityData.Children = make(map[string]types.YChild)
    tiebreaker.EntityData.Leafs = make(map[string]types.YLeaf)
    tiebreaker.EntityData.Leafs["tiebreaker-type"] = types.YLeaf{"TiebreakerType", tiebreaker.TiebreakerType}
    tiebreaker.EntityData.Leafs["tiebreaker-index"] = types.YLeaf{"TiebreakerIndex", tiebreaker.TiebreakerIndex}
    return &(tiebreaker.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetEntityData() *types.CommonEntityData {
    candidateInterfaces.EntityData.YFilter = candidateInterfaces.YFilter
    candidateInterfaces.EntityData.YangName = "candidate-interfaces"
    candidateInterfaces.EntityData.BundleName = "cisco_ios_xr"
    candidateInterfaces.EntityData.ParentYangName = "per-prefix"
    candidateInterfaces.EntityData.SegmentPath = "candidate-interfaces"
    candidateInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterfaces.EntityData.Children = make(map[string]types.YChild)
    candidateInterfaces.EntityData.Children["candidate-interface"] = types.YChild{"CandidateInterface", nil}
    for i := range candidateInterfaces.CandidateInterface {
        candidateInterfaces.EntityData.Children[types.GetSegmentPath(&candidateInterfaces.CandidateInterface[i])] = types.YChild{"CandidateInterface", &candidateInterfaces.CandidateInterface[i]}
    }
    candidateInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(candidateInterfaces.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetEntityData() *types.CommonEntityData {
    candidateInterface.EntityData.YFilter = candidateInterface.YFilter
    candidateInterface.EntityData.YangName = "candidate-interface"
    candidateInterface.EntityData.BundleName = "cisco_ios_xr"
    candidateInterface.EntityData.ParentYangName = "candidate-interfaces"
    candidateInterface.EntityData.SegmentPath = "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
    candidateInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterface.EntityData.Children = make(map[string]types.YChild)
    candidateInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    candidateInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", candidateInterface.InterfaceName}
    return &(candidateInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetEntityData() *types.CommonEntityData {
    excludeInterfaces.EntityData.YFilter = excludeInterfaces.YFilter
    excludeInterfaces.EntityData.YangName = "exclude-interfaces"
    excludeInterfaces.EntityData.BundleName = "cisco_ios_xr"
    excludeInterfaces.EntityData.ParentYangName = "per-prefix"
    excludeInterfaces.EntityData.SegmentPath = "exclude-interfaces"
    excludeInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterfaces.EntityData.Children = make(map[string]types.YChild)
    excludeInterfaces.EntityData.Children["exclude-interface"] = types.YChild{"ExcludeInterface", nil}
    for i := range excludeInterfaces.ExcludeInterface {
        excludeInterfaces.EntityData.Children[types.GetSegmentPath(&excludeInterfaces.ExcludeInterface[i])] = types.YChild{"ExcludeInterface", &excludeInterfaces.ExcludeInterface[i]}
    }
    excludeInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(excludeInterfaces.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetEntityData() *types.CommonEntityData {
    excludeInterface.EntityData.YFilter = excludeInterface.YFilter
    excludeInterface.EntityData.YangName = "exclude-interface"
    excludeInterface.EntityData.BundleName = "cisco_ios_xr"
    excludeInterface.EntityData.ParentYangName = "exclude-interfaces"
    excludeInterface.EntityData.SegmentPath = "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
    excludeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterface.EntityData.Children = make(map[string]types.YChild)
    excludeInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    excludeInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", excludeInterface.InterfaceName}
    return &(excludeInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback
// Interface fallback cost
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fallback cost of link. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Bandwidth threshold. The type is interface{} with range: 1..4294967.
    Threshold interface{}
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetEntityData() *types.CommonEntityData {
    costFallback.EntityData.YFilter = costFallback.YFilter
    costFallback.EntityData.YangName = "cost-fallback"
    costFallback.EntityData.BundleName = "cisco_ios_xr"
    costFallback.EntityData.ParentYangName = "multi-area-interface-scope"
    costFallback.EntityData.SegmentPath = "cost-fallback"
    costFallback.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    costFallback.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    costFallback.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    costFallback.EntityData.Children = make(map[string]types.YChild)
    costFallback.EntityData.Leafs = make(map[string]types.YLeaf)
    costFallback.EntityData.Leafs["cost"] = types.YLeaf{"Cost", costFallback.Cost}
    costFallback.EntityData.Leafs["threshold"] = types.YLeaf{"Threshold", costFallback.Threshold}
    return &(costFallback.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges
// Summarize routes matching address/mask (border
// routers only)
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Ordering index. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange.
    AreaRange []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange
}

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges) GetEntityData() *types.CommonEntityData {
    areaRanges.EntityData.YFilter = areaRanges.YFilter
    areaRanges.EntityData.YangName = "area-ranges"
    areaRanges.EntityData.BundleName = "cisco_ios_xr"
    areaRanges.EntityData.ParentYangName = "area-address"
    areaRanges.EntityData.SegmentPath = "area-ranges"
    areaRanges.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaRanges.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaRanges.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaRanges.EntityData.Children = make(map[string]types.YChild)
    areaRanges.EntityData.Children["area-range"] = types.YChild{"AreaRange", nil}
    for i := range areaRanges.AreaRange {
        areaRanges.EntityData.Children[types.GetSegmentPath(&areaRanges.AreaRange[i])] = types.YChild{"AreaRange", &areaRanges.AreaRange[i]}
    }
    areaRanges.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(areaRanges.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange
// Ordering index
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. IP address to match. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Address interface{}

    // This attribute is a key. IP netmask for address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Netmask interface{}

    // Do not advertise this range. The type is bool.
    NotAdvertise interface{}
}

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) GetEntityData() *types.CommonEntityData {
    areaRange.EntityData.YFilter = areaRange.YFilter
    areaRange.EntityData.YangName = "area-range"
    areaRange.EntityData.BundleName = "cisco_ios_xr"
    areaRange.EntityData.ParentYangName = "area-ranges"
    areaRange.EntityData.SegmentPath = "area-range" + "[address='" + fmt.Sprintf("%v", areaRange.Address) + "']" + "[netmask='" + fmt.Sprintf("%v", areaRange.Netmask) + "']"
    areaRange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaRange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaRange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaRange.EntityData.Children = make(map[string]types.YChild)
    areaRange.EntityData.Leafs = make(map[string]types.YLeaf)
    areaRange.EntityData.Leafs["address"] = types.YLeaf{"Address", areaRange.Address}
    areaRange.EntityData.Leafs["netmask"] = types.YLeaf{"Netmask", areaRange.Netmask}
    areaRange.EntityData.Leafs["not-advertise"] = types.YLeaf{"NotAdvertise", areaRange.NotAdvertise}
    return &(areaRange.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa
// Specify area as a NSSA area
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // No redistribution into this NSSA area. The type is bool. The default value
    // is false.
    NoRedistribution interface{}

    // Originate Type 7 default into NSSA area. The type is bool. The default
    // value is false.
    DefaultInfoOriginate interface{}

    // Do not send summary LSA into NSSA. The type is bool. The default value is
    // false.
    NoSummary interface{}

    // OSPF default metric. The type is interface{} with range: 1..16777214.
    NssaDefMetric interface{}

    // OSPF External metric type. The type is OspfLinkStateMetric. The default
    // value is type2.
    MetricType interface{}
}

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa) GetEntityData() *types.CommonEntityData {
    nssa.EntityData.YFilter = nssa.YFilter
    nssa.EntityData.YangName = "nssa"
    nssa.EntityData.BundleName = "cisco_ios_xr"
    nssa.EntityData.ParentYangName = "area-address"
    nssa.EntityData.SegmentPath = "nssa"
    nssa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nssa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nssa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nssa.EntityData.Children = make(map[string]types.YChild)
    nssa.EntityData.Leafs = make(map[string]types.YLeaf)
    nssa.EntityData.Leafs["no-redistribution"] = types.YLeaf{"NoRedistribution", nssa.NoRedistribution}
    nssa.EntityData.Leafs["default-info-originate"] = types.YLeaf{"DefaultInfoOriginate", nssa.DefaultInfoOriginate}
    nssa.EntityData.Leafs["no-summary"] = types.YLeaf{"NoSummary", nssa.NoSummary}
    nssa.EntityData.Leafs["nssa-def-metric"] = types.YLeaf{"NssaDefMetric", nssa.NssaDefMetric}
    nssa.EntityData.Leafs["metric-type"] = types.YLeaf{"MetricType", nssa.MetricType}
    return &(nssa.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId
// Configuration for a particular area
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Area ID if in integer format. The type is
    // interface{} with range: 0..4294967295.
    AreaId interface{}

    // Configure a route policy for inbound type-3 lsa filtering. The type is
    // string.
    RoutePolicyIn interface{}

    // Set the summary default-cost of a NSSA/stub area. The type is interface{}
    // with range: 1..16777215. The default value is 1.
    DefaultCost interface{}

    // Configure a route policy for outbound type-3 lsa filtering. The type is
    // string.
    RoutePolicyOut interface{}

    // Specify the area as a stub area (send summary LSA stub area). The type is
    // bool.
    Stub interface{}

    // Configure an OSPF area to run MPLS Traffic Engineering. The type is
    // interface{}.
    MplsTrafficEng interface{}

    // Enable/Disable an OSPF area to advertise intra-area prefixes out of this
    // area as external. The type is bool.
    ExternalOut interface{}

    // Enable/Disable an OSPF area to advertise external prefixes into this area
    // as summary. The type is bool.
    SummaryIn interface{}

    // segment-routing configuration Applicable only in Default VRF. The type is
    // OspfSegmentRouting.
    SegmentRouting interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Virtual Link scope configurations.
    VirtualLinkScopes Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes

    // Sham Link scope configurations.
    ShamLinkScopes Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes

    // Area scope configuration.
    AreaScope Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope

    // Name scope configurations.
    NameScopes Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes

    // Multi Area Interface scope configurations.
    MultiAreaInterfaceScopes Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes

    // Summarize routes matching address/mask (border routers only).
    AreaRanges Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges

    // Specify area as a NSSA area.
    Nssa Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa
}

func (areaAreaId *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId) GetEntityData() *types.CommonEntityData {
    areaAreaId.EntityData.YFilter = areaAreaId.YFilter
    areaAreaId.EntityData.YangName = "area-area-id"
    areaAreaId.EntityData.BundleName = "cisco_ios_xr"
    areaAreaId.EntityData.ParentYangName = "area-addresses"
    areaAreaId.EntityData.SegmentPath = "area-area-id" + "[area-id='" + fmt.Sprintf("%v", areaAreaId.AreaId) + "']"
    areaAreaId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaAreaId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaAreaId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaAreaId.EntityData.Children = make(map[string]types.YChild)
    areaAreaId.EntityData.Children["virtual-link-scopes"] = types.YChild{"VirtualLinkScopes", &areaAreaId.VirtualLinkScopes}
    areaAreaId.EntityData.Children["sham-link-scopes"] = types.YChild{"ShamLinkScopes", &areaAreaId.ShamLinkScopes}
    areaAreaId.EntityData.Children["area-scope"] = types.YChild{"AreaScope", &areaAreaId.AreaScope}
    areaAreaId.EntityData.Children["name-scopes"] = types.YChild{"NameScopes", &areaAreaId.NameScopes}
    areaAreaId.EntityData.Children["multi-area-interface-scopes"] = types.YChild{"MultiAreaInterfaceScopes", &areaAreaId.MultiAreaInterfaceScopes}
    areaAreaId.EntityData.Children["area-ranges"] = types.YChild{"AreaRanges", &areaAreaId.AreaRanges}
    areaAreaId.EntityData.Children["nssa"] = types.YChild{"Nssa", &areaAreaId.Nssa}
    areaAreaId.EntityData.Leafs = make(map[string]types.YLeaf)
    areaAreaId.EntityData.Leafs["area-id"] = types.YLeaf{"AreaId", areaAreaId.AreaId}
    areaAreaId.EntityData.Leafs["route-policy-in"] = types.YLeaf{"RoutePolicyIn", areaAreaId.RoutePolicyIn}
    areaAreaId.EntityData.Leafs["default-cost"] = types.YLeaf{"DefaultCost", areaAreaId.DefaultCost}
    areaAreaId.EntityData.Leafs["route-policy-out"] = types.YLeaf{"RoutePolicyOut", areaAreaId.RoutePolicyOut}
    areaAreaId.EntityData.Leafs["stub"] = types.YLeaf{"Stub", areaAreaId.Stub}
    areaAreaId.EntityData.Leafs["mpls-traffic-eng"] = types.YLeaf{"MplsTrafficEng", areaAreaId.MplsTrafficEng}
    areaAreaId.EntityData.Leafs["external-out"] = types.YLeaf{"ExternalOut", areaAreaId.ExternalOut}
    areaAreaId.EntityData.Leafs["summary-in"] = types.YLeaf{"SummaryIn", areaAreaId.SummaryIn}
    areaAreaId.EntityData.Leafs["segment-routing"] = types.YLeaf{"SegmentRouting", areaAreaId.SegmentRouting}
    areaAreaId.EntityData.Leafs["running"] = types.YLeaf{"Running", areaAreaId.Running}
    return &(areaAreaId.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes
// Virtual Link scope configurations
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Virtual Link configuration. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope.
    VirtualLinkScope []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope
}

func (virtualLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) GetEntityData() *types.CommonEntityData {
    virtualLinkScopes.EntityData.YFilter = virtualLinkScopes.YFilter
    virtualLinkScopes.EntityData.YangName = "virtual-link-scopes"
    virtualLinkScopes.EntityData.BundleName = "cisco_ios_xr"
    virtualLinkScopes.EntityData.ParentYangName = "area-area-id"
    virtualLinkScopes.EntityData.SegmentPath = "virtual-link-scopes"
    virtualLinkScopes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    virtualLinkScopes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    virtualLinkScopes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    virtualLinkScopes.EntityData.Children = make(map[string]types.YChild)
    virtualLinkScopes.EntityData.Children["virtual-link-scope"] = types.YChild{"VirtualLinkScope", nil}
    for i := range virtualLinkScopes.VirtualLinkScope {
        virtualLinkScopes.EntityData.Children[types.GetSegmentPath(&virtualLinkScopes.VirtualLinkScope[i])] = types.YChild{"VirtualLinkScope", &virtualLinkScopes.VirtualLinkScope[i]}
    }
    virtualLinkScopes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(virtualLinkScopes.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope
// Virtual Link configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Router ID of virtual link neighbor. The type is
    // string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Address interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Authentication.
    Authentication Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal
}

func (virtualLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) GetEntityData() *types.CommonEntityData {
    virtualLinkScope.EntityData.YFilter = virtualLinkScope.YFilter
    virtualLinkScope.EntityData.YangName = "virtual-link-scope"
    virtualLinkScope.EntityData.BundleName = "cisco_ios_xr"
    virtualLinkScope.EntityData.ParentYangName = "virtual-link-scopes"
    virtualLinkScope.EntityData.SegmentPath = "virtual-link-scope" + "[address='" + fmt.Sprintf("%v", virtualLinkScope.Address) + "']"
    virtualLinkScope.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    virtualLinkScope.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    virtualLinkScope.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    virtualLinkScope.EntityData.Children = make(map[string]types.YChild)
    virtualLinkScope.EntityData.Children["authentication"] = types.YChild{"Authentication", &virtualLinkScope.Authentication}
    virtualLinkScope.EntityData.Children["dead-interval-minimal"] = types.YChild{"DeadIntervalMinimal", &virtualLinkScope.DeadIntervalMinimal}
    virtualLinkScope.EntityData.Leafs = make(map[string]types.YLeaf)
    virtualLinkScope.EntityData.Leafs["address"] = types.YLeaf{"Address", virtualLinkScope.Address}
    virtualLinkScope.EntityData.Leafs["hello-interval"] = types.YLeaf{"HelloInterval", virtualLinkScope.HelloInterval}
    virtualLinkScope.EntityData.Leafs["transmit-delay"] = types.YLeaf{"TransmitDelay", virtualLinkScope.TransmitDelay}
    virtualLinkScope.EntityData.Leafs["retransmit-interval"] = types.YLeaf{"RetransmitInterval", virtualLinkScope.RetransmitInterval}
    virtualLinkScope.EntityData.Leafs["running"] = types.YLeaf{"Running", virtualLinkScope.Running}
    return &(virtualLinkScope.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication
// Authentication
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // b'(!.+)|([^!].+)'.
    Key interface{}

    // Authentication type.
    Type_ Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "cisco_ios_xr"
    authentication.EntityData.ParentYangName = "virtual-link-scope"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authentication.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authentication.EntityData.Children = make(map[string]types.YChild)
    authentication.EntityData.Children["type"] = types.YChild{"Type_", &authentication.Type_}
    authentication.EntityData.Children["message-digest-keies"] = types.YChild{"MessageDigestKeies", &authentication.MessageDigestKeies}
    authentication.EntityData.Leafs = make(map[string]types.YLeaf)
    authentication.EntityData.Leafs["key"] = types.YLeaf{"Key", authentication.Key}
    return &(authentication.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "type"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "authentication"
    self.EntityData.SegmentPath = "type"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    self.EntityData.Leafs["authen-type"] = types.YLeaf{"AuthenType", self.AuthenType}
    self.EntityData.Leafs["keychain-authen-type"] = types.YLeaf{"KeychainAuthenType", self.KeychainAuthenType}
    self.EntityData.Leafs["keychain-name"] = types.YLeaf{"KeychainName", self.KeychainName}
    return &(self.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetEntityData() *types.CommonEntityData {
    messageDigestKeies.EntityData.YFilter = messageDigestKeies.YFilter
    messageDigestKeies.EntityData.YangName = "message-digest-keies"
    messageDigestKeies.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKeies.EntityData.ParentYangName = "authentication"
    messageDigestKeies.EntityData.SegmentPath = "message-digest-keies"
    messageDigestKeies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKeies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKeies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKeies.EntityData.Children = make(map[string]types.YChild)
    messageDigestKeies.EntityData.Children["message-digest-key"] = types.YChild{"MessageDigestKey", nil}
    for i := range messageDigestKeies.MessageDigestKey {
        messageDigestKeies.EntityData.Children[types.GetSegmentPath(&messageDigestKeies.MessageDigestKey[i])] = types.YChild{"MessageDigestKey", &messageDigestKeies.MessageDigestKey[i]}
    }
    messageDigestKeies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(messageDigestKeies.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: b'(!.+)|([^!].+)'. This
    // attribute is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetEntityData() *types.CommonEntityData {
    messageDigestKey.EntityData.YFilter = messageDigestKey.YFilter
    messageDigestKey.EntityData.YangName = "message-digest-key"
    messageDigestKey.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKey.EntityData.ParentYangName = "message-digest-keies"
    messageDigestKey.EntityData.SegmentPath = "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
    messageDigestKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKey.EntityData.Children = make(map[string]types.YChild)
    messageDigestKey.EntityData.Leafs = make(map[string]types.YLeaf)
    messageDigestKey.EntityData.Leafs["key-id"] = types.YLeaf{"KeyId", messageDigestKey.KeyId}
    messageDigestKey.EntityData.Leafs["password"] = types.YLeaf{"Password", messageDigestKey.Password}
    return &(messageDigestKey.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetEntityData() *types.CommonEntityData {
    deadIntervalMinimal.EntityData.YFilter = deadIntervalMinimal.YFilter
    deadIntervalMinimal.EntityData.YangName = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.BundleName = "cisco_ios_xr"
    deadIntervalMinimal.EntityData.ParentYangName = "virtual-link-scope"
    deadIntervalMinimal.EntityData.SegmentPath = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    deadIntervalMinimal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    deadIntervalMinimal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    deadIntervalMinimal.EntityData.Children = make(map[string]types.YChild)
    deadIntervalMinimal.EntityData.Leafs = make(map[string]types.YLeaf)
    deadIntervalMinimal.EntityData.Leafs["interval"] = types.YLeaf{"Interval", deadIntervalMinimal.Interval}
    deadIntervalMinimal.EntityData.Leafs["multiplier"] = types.YLeaf{"Multiplier", deadIntervalMinimal.Multiplier}
    return &(deadIntervalMinimal.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes
// Sham Link scope configurations
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sham Link configuration. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope.
    ShamLinkScope []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope
}

func (shamLinkScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes) GetEntityData() *types.CommonEntityData {
    shamLinkScopes.EntityData.YFilter = shamLinkScopes.YFilter
    shamLinkScopes.EntityData.YangName = "sham-link-scopes"
    shamLinkScopes.EntityData.BundleName = "cisco_ios_xr"
    shamLinkScopes.EntityData.ParentYangName = "area-area-id"
    shamLinkScopes.EntityData.SegmentPath = "sham-link-scopes"
    shamLinkScopes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    shamLinkScopes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    shamLinkScopes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    shamLinkScopes.EntityData.Children = make(map[string]types.YChild)
    shamLinkScopes.EntityData.Children["sham-link-scope"] = types.YChild{"ShamLinkScope", nil}
    for i := range shamLinkScopes.ShamLinkScope {
        shamLinkScopes.EntityData.Children[types.GetSegmentPath(&shamLinkScopes.ShamLinkScope[i])] = types.YChild{"ShamLinkScope", &shamLinkScopes.ShamLinkScope[i]}
    }
    shamLinkScopes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(shamLinkScopes.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope
// Sham Link configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Address of the local sham-link endpoint. The type
    // is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // This attribute is a key. Address of the remote sham-link endpoint. The type
    // is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Address of the local sham-link endpoint. Enter an IP Address. The type is
    // string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Source interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Authentication.
    Authentication Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal
}

func (shamLinkScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) GetEntityData() *types.CommonEntityData {
    shamLinkScope.EntityData.YFilter = shamLinkScope.YFilter
    shamLinkScope.EntityData.YangName = "sham-link-scope"
    shamLinkScope.EntityData.BundleName = "cisco_ios_xr"
    shamLinkScope.EntityData.ParentYangName = "sham-link-scopes"
    shamLinkScope.EntityData.SegmentPath = "sham-link-scope" + "[source-address='" + fmt.Sprintf("%v", shamLinkScope.SourceAddress) + "']" + "[destination-address='" + fmt.Sprintf("%v", shamLinkScope.DestinationAddress) + "']"
    shamLinkScope.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    shamLinkScope.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    shamLinkScope.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    shamLinkScope.EntityData.Children = make(map[string]types.YChild)
    shamLinkScope.EntityData.Children["authentication"] = types.YChild{"Authentication", &shamLinkScope.Authentication}
    shamLinkScope.EntityData.Children["dead-interval-minimal"] = types.YChild{"DeadIntervalMinimal", &shamLinkScope.DeadIntervalMinimal}
    shamLinkScope.EntityData.Leafs = make(map[string]types.YLeaf)
    shamLinkScope.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", shamLinkScope.SourceAddress}
    shamLinkScope.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", shamLinkScope.DestinationAddress}
    shamLinkScope.EntityData.Leafs["source"] = types.YLeaf{"Source", shamLinkScope.Source}
    shamLinkScope.EntityData.Leafs["cost"] = types.YLeaf{"Cost", shamLinkScope.Cost}
    shamLinkScope.EntityData.Leafs["hello-interval"] = types.YLeaf{"HelloInterval", shamLinkScope.HelloInterval}
    shamLinkScope.EntityData.Leafs["transmit-delay"] = types.YLeaf{"TransmitDelay", shamLinkScope.TransmitDelay}
    shamLinkScope.EntityData.Leafs["retransmit-interval"] = types.YLeaf{"RetransmitInterval", shamLinkScope.RetransmitInterval}
    shamLinkScope.EntityData.Leafs["running"] = types.YLeaf{"Running", shamLinkScope.Running}
    return &(shamLinkScope.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication
// Authentication
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // b'(!.+)|([^!].+)'.
    Key interface{}

    // Authentication type.
    Type_ Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "cisco_ios_xr"
    authentication.EntityData.ParentYangName = "sham-link-scope"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authentication.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authentication.EntityData.Children = make(map[string]types.YChild)
    authentication.EntityData.Children["type"] = types.YChild{"Type_", &authentication.Type_}
    authentication.EntityData.Children["message-digest-keies"] = types.YChild{"MessageDigestKeies", &authentication.MessageDigestKeies}
    authentication.EntityData.Leafs = make(map[string]types.YLeaf)
    authentication.EntityData.Leafs["key"] = types.YLeaf{"Key", authentication.Key}
    return &(authentication.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "type"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "authentication"
    self.EntityData.SegmentPath = "type"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    self.EntityData.Leafs["authen-type"] = types.YLeaf{"AuthenType", self.AuthenType}
    self.EntityData.Leafs["keychain-authen-type"] = types.YLeaf{"KeychainAuthenType", self.KeychainAuthenType}
    self.EntityData.Leafs["keychain-name"] = types.YLeaf{"KeychainName", self.KeychainName}
    return &(self.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetEntityData() *types.CommonEntityData {
    messageDigestKeies.EntityData.YFilter = messageDigestKeies.YFilter
    messageDigestKeies.EntityData.YangName = "message-digest-keies"
    messageDigestKeies.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKeies.EntityData.ParentYangName = "authentication"
    messageDigestKeies.EntityData.SegmentPath = "message-digest-keies"
    messageDigestKeies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKeies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKeies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKeies.EntityData.Children = make(map[string]types.YChild)
    messageDigestKeies.EntityData.Children["message-digest-key"] = types.YChild{"MessageDigestKey", nil}
    for i := range messageDigestKeies.MessageDigestKey {
        messageDigestKeies.EntityData.Children[types.GetSegmentPath(&messageDigestKeies.MessageDigestKey[i])] = types.YChild{"MessageDigestKey", &messageDigestKeies.MessageDigestKey[i]}
    }
    messageDigestKeies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(messageDigestKeies.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: b'(!.+)|([^!].+)'. This
    // attribute is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetEntityData() *types.CommonEntityData {
    messageDigestKey.EntityData.YFilter = messageDigestKey.YFilter
    messageDigestKey.EntityData.YangName = "message-digest-key"
    messageDigestKey.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKey.EntityData.ParentYangName = "message-digest-keies"
    messageDigestKey.EntityData.SegmentPath = "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
    messageDigestKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKey.EntityData.Children = make(map[string]types.YChild)
    messageDigestKey.EntityData.Leafs = make(map[string]types.YLeaf)
    messageDigestKey.EntityData.Leafs["key-id"] = types.YLeaf{"KeyId", messageDigestKey.KeyId}
    messageDigestKey.EntityData.Leafs["password"] = types.YLeaf{"Password", messageDigestKey.Password}
    return &(messageDigestKey.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetEntityData() *types.CommonEntityData {
    deadIntervalMinimal.EntityData.YFilter = deadIntervalMinimal.YFilter
    deadIntervalMinimal.EntityData.YangName = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.BundleName = "cisco_ios_xr"
    deadIntervalMinimal.EntityData.ParentYangName = "sham-link-scope"
    deadIntervalMinimal.EntityData.SegmentPath = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    deadIntervalMinimal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    deadIntervalMinimal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    deadIntervalMinimal.EntityData.Children = make(map[string]types.YChild)
    deadIntervalMinimal.EntityData.Leafs = make(map[string]types.YLeaf)
    deadIntervalMinimal.EntityData.Leafs["interval"] = types.YLeaf{"Interval", deadIntervalMinimal.Interval}
    deadIntervalMinimal.EntityData.Leafs["multiplier"] = types.YLeaf{"Multiplier", deadIntervalMinimal.Multiplier}
    return &(deadIntervalMinimal.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope
// Area scope configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Enable/Disable prefix suppression for primary addresses. The type is bool.
    // The default value is false.
    PrefixSuppressionPrimary interface{}

    // Enable/Disable ignoring of MTU in DBD packets. The type is bool. The
    // default value is false.
    MtuIgnore interface{}

    // Enable/Disable MPLS LDP sync for igp-shortcuts. The type is bool.
    LdpSyncIgpShortcuts interface{}

    // Enable MPLS LDP Auto Config. The type is interface{}.
    LdpAutoConfig interface{}

    // Type of attached network. The type is OspfNetwork.
    NetworkType interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Enable/Disable advertising loopback as a stub network. The type is bool.
    // The default value is false.
    LoopbackStubNetwork interface{}

    // Enable/Disable prefix suppression for secondary addresses. The type is
    // bool. The default value is false.
    PrefixSuppressionSecondary interface{}

    // Enable/Disable OSPF demand circuit. The type is bool. The default value is
    // false.
    DemandCircuit interface{}

    // When enabled, prevent sending HELLO packets over link. The type is bool.
    // The default value is false.
    Passive interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Customize size of OSPF packets upto MTU. The type is interface{} with
    // range: 576..10000.
    PacketSize interface{}

    // Enable/Disable MPLS LDP sync. The type is bool.
    LdpSync interface{}

    // Filter OSPF LSA during synchronization and flooding. The type is bool. The
    // default value is false.
    DatabaseFilter interface{}

    // Enable/Disable registration for early interface down notifications. The
    // type is bool. The default value is false.
    LinkDownFastDetect interface{}

    // segment-routing forwarding configuration Applicableonly in Default VRF. The
    // type is OspfSegmentRoutingForwarding.
    SegmentRoutingForwarding interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Router priority for DR and BDR election. The type is interface{} with
    // range: 0..255. The default value is 1.
    Priority interface{}

    // Enable/Disable OSPF flood reduction. The type is bool. The default value is
    // false.
    FloodReduction interface{}

    // Filter networks intalled to RIB (disable as ACL name means filtering is
    // disabled).
    DistributeList Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList

    // BFD configuration.
    Bfd Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Bfd

    // Authentication.
    Authentication Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication

    // Container class for security related configuration parameters.
    Security Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal

    // Fast-reroute configuration.
    FastReroute Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute

    // Interface fallback cost.
    CostFallback Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback
}

func (areaScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope) GetEntityData() *types.CommonEntityData {
    areaScope.EntityData.YFilter = areaScope.YFilter
    areaScope.EntityData.YangName = "area-scope"
    areaScope.EntityData.BundleName = "cisco_ios_xr"
    areaScope.EntityData.ParentYangName = "area-area-id"
    areaScope.EntityData.SegmentPath = "area-scope"
    areaScope.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaScope.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaScope.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaScope.EntityData.Children = make(map[string]types.YChild)
    areaScope.EntityData.Children["distribute-list"] = types.YChild{"DistributeList", &areaScope.DistributeList}
    areaScope.EntityData.Children["bfd"] = types.YChild{"Bfd", &areaScope.Bfd}
    areaScope.EntityData.Children["authentication"] = types.YChild{"Authentication", &areaScope.Authentication}
    areaScope.EntityData.Children["security"] = types.YChild{"Security", &areaScope.Security}
    areaScope.EntityData.Children["dead-interval-minimal"] = types.YChild{"DeadIntervalMinimal", &areaScope.DeadIntervalMinimal}
    areaScope.EntityData.Children["fast-reroute"] = types.YChild{"FastReroute", &areaScope.FastReroute}
    areaScope.EntityData.Children["cost-fallback"] = types.YChild{"CostFallback", &areaScope.CostFallback}
    areaScope.EntityData.Leafs = make(map[string]types.YLeaf)
    areaScope.EntityData.Leafs["cost"] = types.YLeaf{"Cost", areaScope.Cost}
    areaScope.EntityData.Leafs["prefix-suppression-primary"] = types.YLeaf{"PrefixSuppressionPrimary", areaScope.PrefixSuppressionPrimary}
    areaScope.EntityData.Leafs["mtu-ignore"] = types.YLeaf{"MtuIgnore", areaScope.MtuIgnore}
    areaScope.EntityData.Leafs["ldp-sync-igp-shortcuts"] = types.YLeaf{"LdpSyncIgpShortcuts", areaScope.LdpSyncIgpShortcuts}
    areaScope.EntityData.Leafs["ldp-auto-config"] = types.YLeaf{"LdpAutoConfig", areaScope.LdpAutoConfig}
    areaScope.EntityData.Leafs["network-type"] = types.YLeaf{"NetworkType", areaScope.NetworkType}
    areaScope.EntityData.Leafs["hello-interval"] = types.YLeaf{"HelloInterval", areaScope.HelloInterval}
    areaScope.EntityData.Leafs["loopback-stub-network"] = types.YLeaf{"LoopbackStubNetwork", areaScope.LoopbackStubNetwork}
    areaScope.EntityData.Leafs["prefix-suppression-secondary"] = types.YLeaf{"PrefixSuppressionSecondary", areaScope.PrefixSuppressionSecondary}
    areaScope.EntityData.Leafs["demand-circuit"] = types.YLeaf{"DemandCircuit", areaScope.DemandCircuit}
    areaScope.EntityData.Leafs["passive"] = types.YLeaf{"Passive", areaScope.Passive}
    areaScope.EntityData.Leafs["transmit-delay"] = types.YLeaf{"TransmitDelay", areaScope.TransmitDelay}
    areaScope.EntityData.Leafs["packet-size"] = types.YLeaf{"PacketSize", areaScope.PacketSize}
    areaScope.EntityData.Leafs["ldp-sync"] = types.YLeaf{"LdpSync", areaScope.LdpSync}
    areaScope.EntityData.Leafs["database-filter"] = types.YLeaf{"DatabaseFilter", areaScope.DatabaseFilter}
    areaScope.EntityData.Leafs["link-down-fast-detect"] = types.YLeaf{"LinkDownFastDetect", areaScope.LinkDownFastDetect}
    areaScope.EntityData.Leafs["segment-routing-forwarding"] = types.YLeaf{"SegmentRoutingForwarding", areaScope.SegmentRoutingForwarding}
    areaScope.EntityData.Leafs["retransmit-interval"] = types.YLeaf{"RetransmitInterval", areaScope.RetransmitInterval}
    areaScope.EntityData.Leafs["priority"] = types.YLeaf{"Priority", areaScope.Priority}
    areaScope.EntityData.Leafs["flood-reduction"] = types.YLeaf{"FloodReduction", areaScope.FloodReduction}
    return &(areaScope.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList
// Filter networks intalled to RIB (disable as ACL
// name means filtering is disabled)
// This type is a presence type.
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Access Control List name. The type is string.
    AccessListName interface{}

    // Route Policy name. The type is string.
    RoutePolicyName interface{}
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) GetEntityData() *types.CommonEntityData {
    distributeList.EntityData.YFilter = distributeList.YFilter
    distributeList.EntityData.YangName = "distribute-list"
    distributeList.EntityData.BundleName = "cisco_ios_xr"
    distributeList.EntityData.ParentYangName = "area-scope"
    distributeList.EntityData.SegmentPath = "distribute-list"
    distributeList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    distributeList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    distributeList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    distributeList.EntityData.Children = make(map[string]types.YChild)
    distributeList.EntityData.Leafs = make(map[string]types.YLeaf)
    distributeList.EntityData.Leafs["access-list-name"] = types.YLeaf{"AccessListName", distributeList.AccessListName}
    distributeList.EntityData.Leafs["route-policy-name"] = types.YLeaf{"RoutePolicyName", distributeList.RoutePolicyName}
    return &(distributeList.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Bfd
// BFD configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Bfd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Hello interval for BFD sessions created by OSPF. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    Interval interface{}

    // Detection multiplier for BFD sessions created by OSPF. The type is
    // interface{} with range: 2..50.
    DetectionMultiplier interface{}

    // use of Bidirectional Forwarding Detection. The type is BfdEnableMode.
    FastDetectMode interface{}
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) GetEntityData() *types.CommonEntityData {
    bfd.EntityData.YFilter = bfd.YFilter
    bfd.EntityData.YangName = "bfd"
    bfd.EntityData.BundleName = "cisco_ios_xr"
    bfd.EntityData.ParentYangName = "area-scope"
    bfd.EntityData.SegmentPath = "bfd"
    bfd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfd.EntityData.Children = make(map[string]types.YChild)
    bfd.EntityData.Leafs = make(map[string]types.YLeaf)
    bfd.EntityData.Leafs["interval"] = types.YLeaf{"Interval", bfd.Interval}
    bfd.EntityData.Leafs["detection-multiplier"] = types.YLeaf{"DetectionMultiplier", bfd.DetectionMultiplier}
    bfd.EntityData.Leafs["fast-detect-mode"] = types.YLeaf{"FastDetectMode", bfd.FastDetectMode}
    return &(bfd.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication
// Authentication
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // b'(!.+)|([^!].+)'.
    Key interface{}

    // Authentication type.
    Type_ Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "cisco_ios_xr"
    authentication.EntityData.ParentYangName = "area-scope"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authentication.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authentication.EntityData.Children = make(map[string]types.YChild)
    authentication.EntityData.Children["type"] = types.YChild{"Type_", &authentication.Type_}
    authentication.EntityData.Children["message-digest-keies"] = types.YChild{"MessageDigestKeies", &authentication.MessageDigestKeies}
    authentication.EntityData.Leafs = make(map[string]types.YLeaf)
    authentication.EntityData.Leafs["key"] = types.YLeaf{"Key", authentication.Key}
    return &(authentication.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "type"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "authentication"
    self.EntityData.SegmentPath = "type"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    self.EntityData.Leafs["authen-type"] = types.YLeaf{"AuthenType", self.AuthenType}
    self.EntityData.Leafs["keychain-authen-type"] = types.YLeaf{"KeychainAuthenType", self.KeychainAuthenType}
    self.EntityData.Leafs["keychain-name"] = types.YLeaf{"KeychainName", self.KeychainName}
    return &(self.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) GetEntityData() *types.CommonEntityData {
    messageDigestKeies.EntityData.YFilter = messageDigestKeies.YFilter
    messageDigestKeies.EntityData.YangName = "message-digest-keies"
    messageDigestKeies.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKeies.EntityData.ParentYangName = "authentication"
    messageDigestKeies.EntityData.SegmentPath = "message-digest-keies"
    messageDigestKeies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKeies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKeies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKeies.EntityData.Children = make(map[string]types.YChild)
    messageDigestKeies.EntityData.Children["message-digest-key"] = types.YChild{"MessageDigestKey", nil}
    for i := range messageDigestKeies.MessageDigestKey {
        messageDigestKeies.EntityData.Children[types.GetSegmentPath(&messageDigestKeies.MessageDigestKey[i])] = types.YChild{"MessageDigestKey", &messageDigestKeies.MessageDigestKey[i]}
    }
    messageDigestKeies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(messageDigestKeies.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: b'(!.+)|([^!].+)'. This
    // attribute is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetEntityData() *types.CommonEntityData {
    messageDigestKey.EntityData.YFilter = messageDigestKey.YFilter
    messageDigestKey.EntityData.YangName = "message-digest-key"
    messageDigestKey.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKey.EntityData.ParentYangName = "message-digest-keies"
    messageDigestKey.EntityData.SegmentPath = "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
    messageDigestKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKey.EntityData.Children = make(map[string]types.YChild)
    messageDigestKey.EntityData.Leafs = make(map[string]types.YLeaf)
    messageDigestKey.EntityData.Leafs["key-id"] = types.YLeaf{"KeyId", messageDigestKey.KeyId}
    messageDigestKey.EntityData.Leafs["password"] = types.YLeaf{"Password", messageDigestKey.Password}
    return &(messageDigestKey.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security
// Container class for security related
// configuration parameters
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enabling turns on TTL security.
    Ttl Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security) GetEntityData() *types.CommonEntityData {
    security.EntityData.YFilter = security.YFilter
    security.EntityData.YangName = "security"
    security.EntityData.BundleName = "cisco_ios_xr"
    security.EntityData.ParentYangName = "area-scope"
    security.EntityData.SegmentPath = "security"
    security.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    security.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    security.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    security.EntityData.Children = make(map[string]types.YChild)
    security.EntityData.Children["ttl"] = types.YChild{"Ttl", &security.Ttl}
    security.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(security.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl
// Enabling turns on TTL security
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable TTL security. The type is bool.
    Enable interface{}

    // Hop count. The type is interface{} with range: 1..254.
    HopCount interface{}
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) GetEntityData() *types.CommonEntityData {
    ttl.EntityData.YFilter = ttl.YFilter
    ttl.EntityData.YangName = "ttl"
    ttl.EntityData.BundleName = "cisco_ios_xr"
    ttl.EntityData.ParentYangName = "security"
    ttl.EntityData.SegmentPath = "ttl"
    ttl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ttl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ttl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ttl.EntityData.Children = make(map[string]types.YChild)
    ttl.EntityData.Leafs = make(map[string]types.YLeaf)
    ttl.EntityData.Leafs["enable"] = types.YLeaf{"Enable", ttl.Enable}
    ttl.EntityData.Leafs["hop-count"] = types.YLeaf{"HopCount", ttl.HopCount}
    return &(ttl.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) GetEntityData() *types.CommonEntityData {
    deadIntervalMinimal.EntityData.YFilter = deadIntervalMinimal.YFilter
    deadIntervalMinimal.EntityData.YangName = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.BundleName = "cisco_ios_xr"
    deadIntervalMinimal.EntityData.ParentYangName = "area-scope"
    deadIntervalMinimal.EntityData.SegmentPath = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    deadIntervalMinimal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    deadIntervalMinimal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    deadIntervalMinimal.EntityData.Children = make(map[string]types.YChild)
    deadIntervalMinimal.EntityData.Leafs = make(map[string]types.YLeaf)
    deadIntervalMinimal.EntityData.Leafs["interval"] = types.YLeaf{"Interval", deadIntervalMinimal.Interval}
    deadIntervalMinimal.EntityData.Leafs["multiplier"] = types.YLeaf{"Multiplier", deadIntervalMinimal.Multiplier}
    return &(deadIntervalMinimal.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute
// Fast-reroute configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // OspfFastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink

    // Fast-reroute per-prefix global configuration.
    PerPrefix Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetEntityData() *types.CommonEntityData {
    fastReroute.EntityData.YFilter = fastReroute.YFilter
    fastReroute.EntityData.YangName = "fast-reroute"
    fastReroute.EntityData.BundleName = "cisco_ios_xr"
    fastReroute.EntityData.ParentYangName = "area-scope"
    fastReroute.EntityData.SegmentPath = "fast-reroute"
    fastReroute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fastReroute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fastReroute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fastReroute.EntityData.Children = make(map[string]types.YChild)
    fastReroute.EntityData.Children["per-link"] = types.YChild{"PerLink", &fastReroute.PerLink}
    fastReroute.EntityData.Children["per-prefix"] = types.YChild{"PerPrefix", &fastReroute.PerPrefix}
    fastReroute.EntityData.Leafs = make(map[string]types.YLeaf)
    fastReroute.EntityData.Leafs["fast-reroute-enable"] = types.YLeaf{"FastRerouteEnable", fastReroute.FastRerouteEnable}
    return &(fastReroute.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetEntityData() *types.CommonEntityData {
    perLink.EntityData.YFilter = perLink.YFilter
    perLink.EntityData.YangName = "per-link"
    perLink.EntityData.BundleName = "cisco_ios_xr"
    perLink.EntityData.ParentYangName = "fast-reroute"
    perLink.EntityData.SegmentPath = "per-link"
    perLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perLink.EntityData.Children = make(map[string]types.YChild)
    perLink.EntityData.Children["candidate-interfaces"] = types.YChild{"CandidateInterfaces", &perLink.CandidateInterfaces}
    perLink.EntityData.Children["exclude-interfaces"] = types.YChild{"ExcludeInterfaces", &perLink.ExcludeInterfaces}
    perLink.EntityData.Leafs = make(map[string]types.YLeaf)
    perLink.EntityData.Leafs["fast-reroute-use-candidate-only"] = types.YLeaf{"FastRerouteUseCandidateOnly", perLink.FastRerouteUseCandidateOnly}
    return &(perLink.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetEntityData() *types.CommonEntityData {
    candidateInterfaces.EntityData.YFilter = candidateInterfaces.YFilter
    candidateInterfaces.EntityData.YangName = "candidate-interfaces"
    candidateInterfaces.EntityData.BundleName = "cisco_ios_xr"
    candidateInterfaces.EntityData.ParentYangName = "per-link"
    candidateInterfaces.EntityData.SegmentPath = "candidate-interfaces"
    candidateInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterfaces.EntityData.Children = make(map[string]types.YChild)
    candidateInterfaces.EntityData.Children["candidate-interface"] = types.YChild{"CandidateInterface", nil}
    for i := range candidateInterfaces.CandidateInterface {
        candidateInterfaces.EntityData.Children[types.GetSegmentPath(&candidateInterfaces.CandidateInterface[i])] = types.YChild{"CandidateInterface", &candidateInterfaces.CandidateInterface[i]}
    }
    candidateInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(candidateInterfaces.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetEntityData() *types.CommonEntityData {
    candidateInterface.EntityData.YFilter = candidateInterface.YFilter
    candidateInterface.EntityData.YangName = "candidate-interface"
    candidateInterface.EntityData.BundleName = "cisco_ios_xr"
    candidateInterface.EntityData.ParentYangName = "candidate-interfaces"
    candidateInterface.EntityData.SegmentPath = "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
    candidateInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterface.EntityData.Children = make(map[string]types.YChild)
    candidateInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    candidateInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", candidateInterface.InterfaceName}
    return &(candidateInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetEntityData() *types.CommonEntityData {
    excludeInterfaces.EntityData.YFilter = excludeInterfaces.YFilter
    excludeInterfaces.EntityData.YangName = "exclude-interfaces"
    excludeInterfaces.EntityData.BundleName = "cisco_ios_xr"
    excludeInterfaces.EntityData.ParentYangName = "per-link"
    excludeInterfaces.EntityData.SegmentPath = "exclude-interfaces"
    excludeInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterfaces.EntityData.Children = make(map[string]types.YChild)
    excludeInterfaces.EntityData.Children["exclude-interface"] = types.YChild{"ExcludeInterface", nil}
    for i := range excludeInterfaces.ExcludeInterface {
        excludeInterfaces.EntityData.Children[types.GetSegmentPath(&excludeInterfaces.ExcludeInterface[i])] = types.YChild{"ExcludeInterface", &excludeInterfaces.ExcludeInterface[i]}
    }
    excludeInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(excludeInterfaces.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetEntityData() *types.CommonEntityData {
    excludeInterface.EntityData.YFilter = excludeInterface.YFilter
    excludeInterface.EntityData.YangName = "exclude-interface"
    excludeInterface.EntityData.BundleName = "cisco_ios_xr"
    excludeInterface.EntityData.ParentYangName = "exclude-interfaces"
    excludeInterface.EntityData.SegmentPath = "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
    excludeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterface.EntityData.Children = make(map[string]types.YChild)
    excludeInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    excludeInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", excludeInterface.InterfaceName}
    return &(excludeInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix
// Fast-reroute per-prefix global configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology Independet LFA configuration. The type is bool.
    TopologyIndependentLfa interface{}

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Remote LFA configuration.
    RemoteLfa Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa

    // Fast-reroute tiebreakers configurations.
    Tiebreakers Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetEntityData() *types.CommonEntityData {
    perPrefix.EntityData.YFilter = perPrefix.YFilter
    perPrefix.EntityData.YangName = "per-prefix"
    perPrefix.EntityData.BundleName = "cisco_ios_xr"
    perPrefix.EntityData.ParentYangName = "fast-reroute"
    perPrefix.EntityData.SegmentPath = "per-prefix"
    perPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perPrefix.EntityData.Children = make(map[string]types.YChild)
    perPrefix.EntityData.Children["remote-lfa"] = types.YChild{"RemoteLfa", &perPrefix.RemoteLfa}
    perPrefix.EntityData.Children["tiebreakers"] = types.YChild{"Tiebreakers", &perPrefix.Tiebreakers}
    perPrefix.EntityData.Children["candidate-interfaces"] = types.YChild{"CandidateInterfaces", &perPrefix.CandidateInterfaces}
    perPrefix.EntityData.Children["exclude-interfaces"] = types.YChild{"ExcludeInterfaces", &perPrefix.ExcludeInterfaces}
    perPrefix.EntityData.Leafs = make(map[string]types.YLeaf)
    perPrefix.EntityData.Leafs["topology-independent-lfa"] = types.YLeaf{"TopologyIndependentLfa", perPrefix.TopologyIndependentLfa}
    perPrefix.EntityData.Leafs["fast-reroute-use-candidate-only"] = types.YLeaf{"FastRerouteUseCandidateOnly", perPrefix.FastRerouteUseCandidateOnly}
    return &(perPrefix.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa
// Remote LFA configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable/Disable remote LFA computation. The type is OspfFrrRlfaTunnel.
    Tunnel interface{}

    // Maximum path cost to remote LFA. The type is interface{} with range:
    // 1..4294967295.
    MaximumCost interface{}
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetEntityData() *types.CommonEntityData {
    remoteLfa.EntityData.YFilter = remoteLfa.YFilter
    remoteLfa.EntityData.YangName = "remote-lfa"
    remoteLfa.EntityData.BundleName = "cisco_ios_xr"
    remoteLfa.EntityData.ParentYangName = "per-prefix"
    remoteLfa.EntityData.SegmentPath = "remote-lfa"
    remoteLfa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteLfa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteLfa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteLfa.EntityData.Children = make(map[string]types.YChild)
    remoteLfa.EntityData.Leafs = make(map[string]types.YLeaf)
    remoteLfa.EntityData.Leafs["tunnel"] = types.YLeaf{"Tunnel", remoteLfa.Tunnel}
    remoteLfa.EntityData.Leafs["maximum-cost"] = types.YLeaf{"MaximumCost", remoteLfa.MaximumCost}
    return &(remoteLfa.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers
// Fast-reroute tiebreakers configurations
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fast-reroute tiebreakers configuration. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker.
    Tiebreaker []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetEntityData() *types.CommonEntityData {
    tiebreakers.EntityData.YFilter = tiebreakers.YFilter
    tiebreakers.EntityData.YangName = "tiebreakers"
    tiebreakers.EntityData.BundleName = "cisco_ios_xr"
    tiebreakers.EntityData.ParentYangName = "per-prefix"
    tiebreakers.EntityData.SegmentPath = "tiebreakers"
    tiebreakers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tiebreakers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tiebreakers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tiebreakers.EntityData.Children = make(map[string]types.YChild)
    tiebreakers.EntityData.Children["tiebreaker"] = types.YChild{"Tiebreaker", nil}
    for i := range tiebreakers.Tiebreaker {
        tiebreakers.EntityData.Children[types.GetSegmentPath(&tiebreakers.Tiebreaker[i])] = types.YChild{"Tiebreaker", &tiebreakers.Tiebreaker[i]}
    }
    tiebreakers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tiebreakers.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
// Fast-reroute tiebreakers configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Tiebreaker type. The type is
    // OspfFastRerouteTiebreakersIntf.
    TiebreakerType interface{}

    // Index value for a tiebreaker, 0 to disable. The type is interface{} with
    // range: 0..255. This attribute is mandatory.
    TiebreakerIndex interface{}
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetEntityData() *types.CommonEntityData {
    tiebreaker.EntityData.YFilter = tiebreaker.YFilter
    tiebreaker.EntityData.YangName = "tiebreaker"
    tiebreaker.EntityData.BundleName = "cisco_ios_xr"
    tiebreaker.EntityData.ParentYangName = "tiebreakers"
    tiebreaker.EntityData.SegmentPath = "tiebreaker" + "[tiebreaker-type='" + fmt.Sprintf("%v", tiebreaker.TiebreakerType) + "']"
    tiebreaker.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tiebreaker.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tiebreaker.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tiebreaker.EntityData.Children = make(map[string]types.YChild)
    tiebreaker.EntityData.Leafs = make(map[string]types.YLeaf)
    tiebreaker.EntityData.Leafs["tiebreaker-type"] = types.YLeaf{"TiebreakerType", tiebreaker.TiebreakerType}
    tiebreaker.EntityData.Leafs["tiebreaker-index"] = types.YLeaf{"TiebreakerIndex", tiebreaker.TiebreakerIndex}
    return &(tiebreaker.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetEntityData() *types.CommonEntityData {
    candidateInterfaces.EntityData.YFilter = candidateInterfaces.YFilter
    candidateInterfaces.EntityData.YangName = "candidate-interfaces"
    candidateInterfaces.EntityData.BundleName = "cisco_ios_xr"
    candidateInterfaces.EntityData.ParentYangName = "per-prefix"
    candidateInterfaces.EntityData.SegmentPath = "candidate-interfaces"
    candidateInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterfaces.EntityData.Children = make(map[string]types.YChild)
    candidateInterfaces.EntityData.Children["candidate-interface"] = types.YChild{"CandidateInterface", nil}
    for i := range candidateInterfaces.CandidateInterface {
        candidateInterfaces.EntityData.Children[types.GetSegmentPath(&candidateInterfaces.CandidateInterface[i])] = types.YChild{"CandidateInterface", &candidateInterfaces.CandidateInterface[i]}
    }
    candidateInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(candidateInterfaces.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetEntityData() *types.CommonEntityData {
    candidateInterface.EntityData.YFilter = candidateInterface.YFilter
    candidateInterface.EntityData.YangName = "candidate-interface"
    candidateInterface.EntityData.BundleName = "cisco_ios_xr"
    candidateInterface.EntityData.ParentYangName = "candidate-interfaces"
    candidateInterface.EntityData.SegmentPath = "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
    candidateInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterface.EntityData.Children = make(map[string]types.YChild)
    candidateInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    candidateInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", candidateInterface.InterfaceName}
    return &(candidateInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetEntityData() *types.CommonEntityData {
    excludeInterfaces.EntityData.YFilter = excludeInterfaces.YFilter
    excludeInterfaces.EntityData.YangName = "exclude-interfaces"
    excludeInterfaces.EntityData.BundleName = "cisco_ios_xr"
    excludeInterfaces.EntityData.ParentYangName = "per-prefix"
    excludeInterfaces.EntityData.SegmentPath = "exclude-interfaces"
    excludeInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterfaces.EntityData.Children = make(map[string]types.YChild)
    excludeInterfaces.EntityData.Children["exclude-interface"] = types.YChild{"ExcludeInterface", nil}
    for i := range excludeInterfaces.ExcludeInterface {
        excludeInterfaces.EntityData.Children[types.GetSegmentPath(&excludeInterfaces.ExcludeInterface[i])] = types.YChild{"ExcludeInterface", &excludeInterfaces.ExcludeInterface[i]}
    }
    excludeInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(excludeInterfaces.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetEntityData() *types.CommonEntityData {
    excludeInterface.EntityData.YFilter = excludeInterface.YFilter
    excludeInterface.EntityData.YangName = "exclude-interface"
    excludeInterface.EntityData.BundleName = "cisco_ios_xr"
    excludeInterface.EntityData.ParentYangName = "exclude-interfaces"
    excludeInterface.EntityData.SegmentPath = "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
    excludeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterface.EntityData.Children = make(map[string]types.YChild)
    excludeInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    excludeInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", excludeInterface.InterfaceName}
    return &(excludeInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback
// Interface fallback cost
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fallback cost of link. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Bandwidth threshold. The type is interface{} with range: 1..4294967.
    Threshold interface{}
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) GetEntityData() *types.CommonEntityData {
    costFallback.EntityData.YFilter = costFallback.YFilter
    costFallback.EntityData.YangName = "cost-fallback"
    costFallback.EntityData.BundleName = "cisco_ios_xr"
    costFallback.EntityData.ParentYangName = "area-scope"
    costFallback.EntityData.SegmentPath = "cost-fallback"
    costFallback.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    costFallback.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    costFallback.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    costFallback.EntityData.Children = make(map[string]types.YChild)
    costFallback.EntityData.Leafs = make(map[string]types.YLeaf)
    costFallback.EntityData.Leafs["cost"] = types.YLeaf{"Cost", costFallback.Cost}
    costFallback.EntityData.Leafs["threshold"] = types.YLeaf{"Threshold", costFallback.Threshold}
    return &(costFallback.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes
// Name scope configurations
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name scope configuration. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope.
    NameScope []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope
}

func (nameScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes) GetEntityData() *types.CommonEntityData {
    nameScopes.EntityData.YFilter = nameScopes.YFilter
    nameScopes.EntityData.YangName = "name-scopes"
    nameScopes.EntityData.BundleName = "cisco_ios_xr"
    nameScopes.EntityData.ParentYangName = "area-area-id"
    nameScopes.EntityData.SegmentPath = "name-scopes"
    nameScopes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nameScopes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nameScopes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nameScopes.EntityData.Children = make(map[string]types.YChild)
    nameScopes.EntityData.Children["name-scope"] = types.YChild{"NameScope", nil}
    for i := range nameScopes.NameScope {
        nameScopes.EntityData.Children[types.GetSegmentPath(&nameScopes.NameScope[i])] = types.YChild{"NameScope", &nameScopes.NameScope[i]}
    }
    nameScopes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(nameScopes.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope
// Name scope configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of Interface to configure. The type is string
    // with pattern: b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Enable/Disable prefix suppression for primary addresses. The type is bool.
    // The default value is false.
    PrefixSuppressionPrimary interface{}

    // Enable/Disable ignoring of MTU in DBD packets. The type is bool. The
    // default value is false.
    MtuIgnore interface{}

    // Enable/Disable MPLS LDP sync for igp-shortcuts. The type is bool.
    LdpSyncIgpShortcuts interface{}

    // Enable MPLS LDP Auto Config. The type is interface{}.
    LdpAutoConfig interface{}

    // Type of attached network. The type is OspfNetwork.
    NetworkType interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Enable/Disable advertising loopback as a stub network. The type is bool.
    // The default value is false.
    LoopbackStubNetwork interface{}

    // Enable/Disable prefix suppression for secondary addresses. The type is
    // bool. The default value is false.
    PrefixSuppressionSecondary interface{}

    // Enable/Disable OSPF demand circuit. The type is bool. The default value is
    // false.
    DemandCircuit interface{}

    // When enabled, prevent sending HELLO packets over link. The type is bool.
    // The default value is false.
    Passive interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Customize size of OSPF packets upto MTU. The type is interface{} with
    // range: 576..10000.
    PacketSize interface{}

    // Enable/Disable MPLS LDP sync. The type is bool.
    LdpSync interface{}

    // Filter OSPF LSA during synchronization and flooding. The type is bool. The
    // default value is false.
    DatabaseFilter interface{}

    // Enable/Disable registration for early interface down notifications. The
    // type is bool. The default value is false.
    LinkDownFastDetect interface{}

    // segment-routing forwarding configuration Applicableonly in Default VRF. The
    // type is OspfSegmentRoutingForwarding.
    SegmentRoutingForwarding interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Router priority for DR and BDR election. The type is interface{} with
    // range: 0..255. The default value is 1.
    Priority interface{}

    // Enable/Disable OSPF flood reduction. The type is bool. The default value is
    // false.
    FloodReduction interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Prefix SID.
    PrefixSid Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid

    // Strict Prefix SID.
    PrefixSidStrict Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict

    // Filter networks intalled to RIB (disable as ACL name means filtering is
    // disabled).
    DistributeList Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList

    // BFD configuration.
    Bfd Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd

    // Authentication.
    Authentication Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication

    // Container class for security related configuration parameters.
    Security Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security

    // Neighbor router configuration information.
    Neighbors Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal

    // Fast-reroute configuration.
    FastReroute Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute

    // Interface fallback cost.
    CostFallback Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback
}

func (nameScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) GetEntityData() *types.CommonEntityData {
    nameScope.EntityData.YFilter = nameScope.YFilter
    nameScope.EntityData.YangName = "name-scope"
    nameScope.EntityData.BundleName = "cisco_ios_xr"
    nameScope.EntityData.ParentYangName = "name-scopes"
    nameScope.EntityData.SegmentPath = "name-scope" + "[interface-name='" + fmt.Sprintf("%v", nameScope.InterfaceName) + "']"
    nameScope.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nameScope.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nameScope.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nameScope.EntityData.Children = make(map[string]types.YChild)
    nameScope.EntityData.Children["prefix-sid"] = types.YChild{"PrefixSid", &nameScope.PrefixSid}
    nameScope.EntityData.Children["prefix-sid-strict"] = types.YChild{"PrefixSidStrict", &nameScope.PrefixSidStrict}
    nameScope.EntityData.Children["distribute-list"] = types.YChild{"DistributeList", &nameScope.DistributeList}
    nameScope.EntityData.Children["bfd"] = types.YChild{"Bfd", &nameScope.Bfd}
    nameScope.EntityData.Children["authentication"] = types.YChild{"Authentication", &nameScope.Authentication}
    nameScope.EntityData.Children["security"] = types.YChild{"Security", &nameScope.Security}
    nameScope.EntityData.Children["neighbors"] = types.YChild{"Neighbors", &nameScope.Neighbors}
    nameScope.EntityData.Children["dead-interval-minimal"] = types.YChild{"DeadIntervalMinimal", &nameScope.DeadIntervalMinimal}
    nameScope.EntityData.Children["fast-reroute"] = types.YChild{"FastReroute", &nameScope.FastReroute}
    nameScope.EntityData.Children["cost-fallback"] = types.YChild{"CostFallback", &nameScope.CostFallback}
    nameScope.EntityData.Leafs = make(map[string]types.YLeaf)
    nameScope.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", nameScope.InterfaceName}
    nameScope.EntityData.Leafs["cost"] = types.YLeaf{"Cost", nameScope.Cost}
    nameScope.EntityData.Leafs["prefix-suppression-primary"] = types.YLeaf{"PrefixSuppressionPrimary", nameScope.PrefixSuppressionPrimary}
    nameScope.EntityData.Leafs["mtu-ignore"] = types.YLeaf{"MtuIgnore", nameScope.MtuIgnore}
    nameScope.EntityData.Leafs["ldp-sync-igp-shortcuts"] = types.YLeaf{"LdpSyncIgpShortcuts", nameScope.LdpSyncIgpShortcuts}
    nameScope.EntityData.Leafs["ldp-auto-config"] = types.YLeaf{"LdpAutoConfig", nameScope.LdpAutoConfig}
    nameScope.EntityData.Leafs["network-type"] = types.YLeaf{"NetworkType", nameScope.NetworkType}
    nameScope.EntityData.Leafs["hello-interval"] = types.YLeaf{"HelloInterval", nameScope.HelloInterval}
    nameScope.EntityData.Leafs["loopback-stub-network"] = types.YLeaf{"LoopbackStubNetwork", nameScope.LoopbackStubNetwork}
    nameScope.EntityData.Leafs["prefix-suppression-secondary"] = types.YLeaf{"PrefixSuppressionSecondary", nameScope.PrefixSuppressionSecondary}
    nameScope.EntityData.Leafs["demand-circuit"] = types.YLeaf{"DemandCircuit", nameScope.DemandCircuit}
    nameScope.EntityData.Leafs["passive"] = types.YLeaf{"Passive", nameScope.Passive}
    nameScope.EntityData.Leafs["transmit-delay"] = types.YLeaf{"TransmitDelay", nameScope.TransmitDelay}
    nameScope.EntityData.Leafs["packet-size"] = types.YLeaf{"PacketSize", nameScope.PacketSize}
    nameScope.EntityData.Leafs["ldp-sync"] = types.YLeaf{"LdpSync", nameScope.LdpSync}
    nameScope.EntityData.Leafs["database-filter"] = types.YLeaf{"DatabaseFilter", nameScope.DatabaseFilter}
    nameScope.EntityData.Leafs["link-down-fast-detect"] = types.YLeaf{"LinkDownFastDetect", nameScope.LinkDownFastDetect}
    nameScope.EntityData.Leafs["segment-routing-forwarding"] = types.YLeaf{"SegmentRoutingForwarding", nameScope.SegmentRoutingForwarding}
    nameScope.EntityData.Leafs["retransmit-interval"] = types.YLeaf{"RetransmitInterval", nameScope.RetransmitInterval}
    nameScope.EntityData.Leafs["priority"] = types.YLeaf{"Priority", nameScope.Priority}
    nameScope.EntityData.Leafs["flood-reduction"] = types.YLeaf{"FloodReduction", nameScope.FloodReduction}
    nameScope.EntityData.Leafs["running"] = types.YLeaf{"Running", nameScope.Running}
    return &(nameScope.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid
// Prefix SID
// This type is a presence type.
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SID value. The type is interface{} with range: 0..1048575. This attribute
    // is mandatory.
    SidValue interface{}

    // Force Penultimate Hop To Send Explicit-Null Label. The type is bool. The
    // default value is false.
    ExplicitNull interface{}

    // OSPF SID Type. The type is OspfSid. This attribute is mandatory.
    Type_ interface{}

    // Not a node SID. The type is bool. The default value is false.
    NFlagClear interface{}
}

func (prefixSid *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) GetEntityData() *types.CommonEntityData {
    prefixSid.EntityData.YFilter = prefixSid.YFilter
    prefixSid.EntityData.YangName = "prefix-sid"
    prefixSid.EntityData.BundleName = "cisco_ios_xr"
    prefixSid.EntityData.ParentYangName = "name-scope"
    prefixSid.EntityData.SegmentPath = "prefix-sid"
    prefixSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixSid.EntityData.Children = make(map[string]types.YChild)
    prefixSid.EntityData.Leafs = make(map[string]types.YLeaf)
    prefixSid.EntityData.Leafs["sid-value"] = types.YLeaf{"SidValue", prefixSid.SidValue}
    prefixSid.EntityData.Leafs["explicit-null"] = types.YLeaf{"ExplicitNull", prefixSid.ExplicitNull}
    prefixSid.EntityData.Leafs["type"] = types.YLeaf{"Type_", prefixSid.Type_}
    prefixSid.EntityData.Leafs["n-flag-clear"] = types.YLeaf{"NFlagClear", prefixSid.NFlagClear}
    return &(prefixSid.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict
// Strict Prefix SID
// This type is a presence type.
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SID value. The type is interface{} with range: 0..1048575. This attribute
    // is mandatory.
    SidValue interface{}

    // Force Penultimate Hop To Send Explicit-Null Label. The type is bool. The
    // default value is false.
    ExplicitNull interface{}

    // OSPF SID Type. The type is OspfSid. This attribute is mandatory.
    Type_ interface{}

    // Not a node SID. The type is bool. The default value is false.
    NFlagClear interface{}
}

func (prefixSidStrict *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) GetEntityData() *types.CommonEntityData {
    prefixSidStrict.EntityData.YFilter = prefixSidStrict.YFilter
    prefixSidStrict.EntityData.YangName = "prefix-sid-strict"
    prefixSidStrict.EntityData.BundleName = "cisco_ios_xr"
    prefixSidStrict.EntityData.ParentYangName = "name-scope"
    prefixSidStrict.EntityData.SegmentPath = "prefix-sid-strict"
    prefixSidStrict.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixSidStrict.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixSidStrict.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixSidStrict.EntityData.Children = make(map[string]types.YChild)
    prefixSidStrict.EntityData.Leafs = make(map[string]types.YLeaf)
    prefixSidStrict.EntityData.Leafs["sid-value"] = types.YLeaf{"SidValue", prefixSidStrict.SidValue}
    prefixSidStrict.EntityData.Leafs["explicit-null"] = types.YLeaf{"ExplicitNull", prefixSidStrict.ExplicitNull}
    prefixSidStrict.EntityData.Leafs["type"] = types.YLeaf{"Type_", prefixSidStrict.Type_}
    prefixSidStrict.EntityData.Leafs["n-flag-clear"] = types.YLeaf{"NFlagClear", prefixSidStrict.NFlagClear}
    return &(prefixSidStrict.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList
// Filter networks intalled to RIB (disable as ACL
// name means filtering is disabled)
// This type is a presence type.
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Access Control List name. The type is string.
    AccessListName interface{}

    // Route Policy name. The type is string.
    RoutePolicyName interface{}
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) GetEntityData() *types.CommonEntityData {
    distributeList.EntityData.YFilter = distributeList.YFilter
    distributeList.EntityData.YangName = "distribute-list"
    distributeList.EntityData.BundleName = "cisco_ios_xr"
    distributeList.EntityData.ParentYangName = "name-scope"
    distributeList.EntityData.SegmentPath = "distribute-list"
    distributeList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    distributeList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    distributeList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    distributeList.EntityData.Children = make(map[string]types.YChild)
    distributeList.EntityData.Leafs = make(map[string]types.YLeaf)
    distributeList.EntityData.Leafs["access-list-name"] = types.YLeaf{"AccessListName", distributeList.AccessListName}
    distributeList.EntityData.Leafs["route-policy-name"] = types.YLeaf{"RoutePolicyName", distributeList.RoutePolicyName}
    return &(distributeList.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd
// BFD configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Hello interval for BFD sessions created by OSPF. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    Interval interface{}

    // Detection multiplier for BFD sessions created by OSPF. The type is
    // interface{} with range: 2..50.
    DetectionMultiplier interface{}

    // use of Bidirectional Forwarding Detection. The type is BfdEnableMode.
    FastDetectMode interface{}
}

func (bfd *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) GetEntityData() *types.CommonEntityData {
    bfd.EntityData.YFilter = bfd.YFilter
    bfd.EntityData.YangName = "bfd"
    bfd.EntityData.BundleName = "cisco_ios_xr"
    bfd.EntityData.ParentYangName = "name-scope"
    bfd.EntityData.SegmentPath = "bfd"
    bfd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfd.EntityData.Children = make(map[string]types.YChild)
    bfd.EntityData.Leafs = make(map[string]types.YLeaf)
    bfd.EntityData.Leafs["interval"] = types.YLeaf{"Interval", bfd.Interval}
    bfd.EntityData.Leafs["detection-multiplier"] = types.YLeaf{"DetectionMultiplier", bfd.DetectionMultiplier}
    bfd.EntityData.Leafs["fast-detect-mode"] = types.YLeaf{"FastDetectMode", bfd.FastDetectMode}
    return &(bfd.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication
// Authentication
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // b'(!.+)|([^!].+)'.
    Key interface{}

    // Authentication type.
    Type_ Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "cisco_ios_xr"
    authentication.EntityData.ParentYangName = "name-scope"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authentication.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authentication.EntityData.Children = make(map[string]types.YChild)
    authentication.EntityData.Children["type"] = types.YChild{"Type_", &authentication.Type_}
    authentication.EntityData.Children["message-digest-keies"] = types.YChild{"MessageDigestKeies", &authentication.MessageDigestKeies}
    authentication.EntityData.Leafs = make(map[string]types.YLeaf)
    authentication.EntityData.Leafs["key"] = types.YLeaf{"Key", authentication.Key}
    return &(authentication.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "type"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "authentication"
    self.EntityData.SegmentPath = "type"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    self.EntityData.Leafs["authen-type"] = types.YLeaf{"AuthenType", self.AuthenType}
    self.EntityData.Leafs["keychain-authen-type"] = types.YLeaf{"KeychainAuthenType", self.KeychainAuthenType}
    self.EntityData.Leafs["keychain-name"] = types.YLeaf{"KeychainName", self.KeychainName}
    return &(self.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) GetEntityData() *types.CommonEntityData {
    messageDigestKeies.EntityData.YFilter = messageDigestKeies.YFilter
    messageDigestKeies.EntityData.YangName = "message-digest-keies"
    messageDigestKeies.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKeies.EntityData.ParentYangName = "authentication"
    messageDigestKeies.EntityData.SegmentPath = "message-digest-keies"
    messageDigestKeies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKeies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKeies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKeies.EntityData.Children = make(map[string]types.YChild)
    messageDigestKeies.EntityData.Children["message-digest-key"] = types.YChild{"MessageDigestKey", nil}
    for i := range messageDigestKeies.MessageDigestKey {
        messageDigestKeies.EntityData.Children[types.GetSegmentPath(&messageDigestKeies.MessageDigestKey[i])] = types.YChild{"MessageDigestKey", &messageDigestKeies.MessageDigestKey[i]}
    }
    messageDigestKeies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(messageDigestKeies.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: b'(!.+)|([^!].+)'. This
    // attribute is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetEntityData() *types.CommonEntityData {
    messageDigestKey.EntityData.YFilter = messageDigestKey.YFilter
    messageDigestKey.EntityData.YangName = "message-digest-key"
    messageDigestKey.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKey.EntityData.ParentYangName = "message-digest-keies"
    messageDigestKey.EntityData.SegmentPath = "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
    messageDigestKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKey.EntityData.Children = make(map[string]types.YChild)
    messageDigestKey.EntityData.Leafs = make(map[string]types.YLeaf)
    messageDigestKey.EntityData.Leafs["key-id"] = types.YLeaf{"KeyId", messageDigestKey.KeyId}
    messageDigestKey.EntityData.Leafs["password"] = types.YLeaf{"Password", messageDigestKey.Password}
    return &(messageDigestKey.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security
// Container class for security related
// configuration parameters
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enabling turns on TTL security.
    Ttl Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl
}

func (security *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) GetEntityData() *types.CommonEntityData {
    security.EntityData.YFilter = security.YFilter
    security.EntityData.YangName = "security"
    security.EntityData.BundleName = "cisco_ios_xr"
    security.EntityData.ParentYangName = "name-scope"
    security.EntityData.SegmentPath = "security"
    security.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    security.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    security.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    security.EntityData.Children = make(map[string]types.YChild)
    security.EntityData.Children["ttl"] = types.YChild{"Ttl", &security.Ttl}
    security.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(security.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl
// Enabling turns on TTL security
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable TTL security. The type is bool.
    Enable interface{}

    // Hop count. The type is interface{} with range: 1..254.
    HopCount interface{}
}

func (ttl *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) GetEntityData() *types.CommonEntityData {
    ttl.EntityData.YFilter = ttl.YFilter
    ttl.EntityData.YangName = "ttl"
    ttl.EntityData.BundleName = "cisco_ios_xr"
    ttl.EntityData.ParentYangName = "security"
    ttl.EntityData.SegmentPath = "ttl"
    ttl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ttl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ttl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ttl.EntityData.Children = make(map[string]types.YChild)
    ttl.EntityData.Leafs = make(map[string]types.YLeaf)
    ttl.EntityData.Leafs["enable"] = types.YLeaf{"Enable", ttl.Enable}
    ttl.EntityData.Leafs["hop-count"] = types.YLeaf{"HopCount", ttl.HopCount}
    return &(ttl.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors
// Neighbor router configuration information
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Router configuration information for a particular neighbor. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor.
    Neighbor []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor
}

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "cisco_ios_xr"
    neighbors.EntityData.ParentYangName = "name-scope"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbors.EntityData.Children = make(map[string]types.YChild)
    neighbors.EntityData.Children["neighbor"] = types.YChild{"Neighbor", nil}
    for i := range neighbors.Neighbor {
        neighbors.EntityData.Children[types.GetSegmentPath(&neighbors.Neighbor[i])] = types.YChild{"Neighbor", &neighbors.Neighbor[i]}
    }
    neighbors.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(neighbors.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor
// Router configuration information for a
// particular neighbor
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Neighbor IP address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // OSPF priority of non-broadcast neighbor. The type is interface{} with
    // range: 0..255. The default value is 0.
    Priority interface{}

    // OSPF dead router poll-interval in seconds. The type is interface{} with
    // range: 0..65535. Units are second. The default value is 40.
    PollInterval interface{}

    // OSPF cost for point-to-multipoint neighbor. The type is interface{} with
    // range: 1..65535. The default value is 1.
    Cost interface{}

    // Database filter: Filter OSPF LSA during synchronization and flooding for
    // point-to-multipoint. The type is bool. The default value is false.
    DatabaseFilter interface{}
}

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "cisco_ios_xr"
    neighbor.EntityData.ParentYangName = "neighbors"
    neighbor.EntityData.SegmentPath = "neighbor" + "[neighbor-address='" + fmt.Sprintf("%v", neighbor.NeighborAddress) + "']"
    neighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbor.EntityData.Children = make(map[string]types.YChild)
    neighbor.EntityData.Leafs = make(map[string]types.YLeaf)
    neighbor.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", neighbor.NeighborAddress}
    neighbor.EntityData.Leafs["priority"] = types.YLeaf{"Priority", neighbor.Priority}
    neighbor.EntityData.Leafs["poll-interval"] = types.YLeaf{"PollInterval", neighbor.PollInterval}
    neighbor.EntityData.Leafs["cost"] = types.YLeaf{"Cost", neighbor.Cost}
    neighbor.EntityData.Leafs["database-filter"] = types.YLeaf{"DatabaseFilter", neighbor.DatabaseFilter}
    return &(neighbor.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) GetEntityData() *types.CommonEntityData {
    deadIntervalMinimal.EntityData.YFilter = deadIntervalMinimal.YFilter
    deadIntervalMinimal.EntityData.YangName = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.BundleName = "cisco_ios_xr"
    deadIntervalMinimal.EntityData.ParentYangName = "name-scope"
    deadIntervalMinimal.EntityData.SegmentPath = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    deadIntervalMinimal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    deadIntervalMinimal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    deadIntervalMinimal.EntityData.Children = make(map[string]types.YChild)
    deadIntervalMinimal.EntityData.Leafs = make(map[string]types.YLeaf)
    deadIntervalMinimal.EntityData.Leafs["interval"] = types.YLeaf{"Interval", deadIntervalMinimal.Interval}
    deadIntervalMinimal.EntityData.Leafs["multiplier"] = types.YLeaf{"Multiplier", deadIntervalMinimal.Multiplier}
    return &(deadIntervalMinimal.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute
// Fast-reroute configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // OspfFastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink

    // Fast-reroute per-prefix global configuration.
    PerPrefix Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) GetEntityData() *types.CommonEntityData {
    fastReroute.EntityData.YFilter = fastReroute.YFilter
    fastReroute.EntityData.YangName = "fast-reroute"
    fastReroute.EntityData.BundleName = "cisco_ios_xr"
    fastReroute.EntityData.ParentYangName = "name-scope"
    fastReroute.EntityData.SegmentPath = "fast-reroute"
    fastReroute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fastReroute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fastReroute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fastReroute.EntityData.Children = make(map[string]types.YChild)
    fastReroute.EntityData.Children["per-link"] = types.YChild{"PerLink", &fastReroute.PerLink}
    fastReroute.EntityData.Children["per-prefix"] = types.YChild{"PerPrefix", &fastReroute.PerPrefix}
    fastReroute.EntityData.Leafs = make(map[string]types.YLeaf)
    fastReroute.EntityData.Leafs["fast-reroute-enable"] = types.YLeaf{"FastRerouteEnable", fastReroute.FastRerouteEnable}
    return &(fastReroute.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) GetEntityData() *types.CommonEntityData {
    perLink.EntityData.YFilter = perLink.YFilter
    perLink.EntityData.YangName = "per-link"
    perLink.EntityData.BundleName = "cisco_ios_xr"
    perLink.EntityData.ParentYangName = "fast-reroute"
    perLink.EntityData.SegmentPath = "per-link"
    perLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perLink.EntityData.Children = make(map[string]types.YChild)
    perLink.EntityData.Children["candidate-interfaces"] = types.YChild{"CandidateInterfaces", &perLink.CandidateInterfaces}
    perLink.EntityData.Children["exclude-interfaces"] = types.YChild{"ExcludeInterfaces", &perLink.ExcludeInterfaces}
    perLink.EntityData.Leafs = make(map[string]types.YLeaf)
    perLink.EntityData.Leafs["fast-reroute-use-candidate-only"] = types.YLeaf{"FastRerouteUseCandidateOnly", perLink.FastRerouteUseCandidateOnly}
    return &(perLink.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetEntityData() *types.CommonEntityData {
    candidateInterfaces.EntityData.YFilter = candidateInterfaces.YFilter
    candidateInterfaces.EntityData.YangName = "candidate-interfaces"
    candidateInterfaces.EntityData.BundleName = "cisco_ios_xr"
    candidateInterfaces.EntityData.ParentYangName = "per-link"
    candidateInterfaces.EntityData.SegmentPath = "candidate-interfaces"
    candidateInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterfaces.EntityData.Children = make(map[string]types.YChild)
    candidateInterfaces.EntityData.Children["candidate-interface"] = types.YChild{"CandidateInterface", nil}
    for i := range candidateInterfaces.CandidateInterface {
        candidateInterfaces.EntityData.Children[types.GetSegmentPath(&candidateInterfaces.CandidateInterface[i])] = types.YChild{"CandidateInterface", &candidateInterfaces.CandidateInterface[i]}
    }
    candidateInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(candidateInterfaces.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetEntityData() *types.CommonEntityData {
    candidateInterface.EntityData.YFilter = candidateInterface.YFilter
    candidateInterface.EntityData.YangName = "candidate-interface"
    candidateInterface.EntityData.BundleName = "cisco_ios_xr"
    candidateInterface.EntityData.ParentYangName = "candidate-interfaces"
    candidateInterface.EntityData.SegmentPath = "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
    candidateInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterface.EntityData.Children = make(map[string]types.YChild)
    candidateInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    candidateInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", candidateInterface.InterfaceName}
    return &(candidateInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetEntityData() *types.CommonEntityData {
    excludeInterfaces.EntityData.YFilter = excludeInterfaces.YFilter
    excludeInterfaces.EntityData.YangName = "exclude-interfaces"
    excludeInterfaces.EntityData.BundleName = "cisco_ios_xr"
    excludeInterfaces.EntityData.ParentYangName = "per-link"
    excludeInterfaces.EntityData.SegmentPath = "exclude-interfaces"
    excludeInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterfaces.EntityData.Children = make(map[string]types.YChild)
    excludeInterfaces.EntityData.Children["exclude-interface"] = types.YChild{"ExcludeInterface", nil}
    for i := range excludeInterfaces.ExcludeInterface {
        excludeInterfaces.EntityData.Children[types.GetSegmentPath(&excludeInterfaces.ExcludeInterface[i])] = types.YChild{"ExcludeInterface", &excludeInterfaces.ExcludeInterface[i]}
    }
    excludeInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(excludeInterfaces.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetEntityData() *types.CommonEntityData {
    excludeInterface.EntityData.YFilter = excludeInterface.YFilter
    excludeInterface.EntityData.YangName = "exclude-interface"
    excludeInterface.EntityData.BundleName = "cisco_ios_xr"
    excludeInterface.EntityData.ParentYangName = "exclude-interfaces"
    excludeInterface.EntityData.SegmentPath = "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
    excludeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterface.EntityData.Children = make(map[string]types.YChild)
    excludeInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    excludeInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", excludeInterface.InterfaceName}
    return &(excludeInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix
// Fast-reroute per-prefix global configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology Independet LFA configuration. The type is bool.
    TopologyIndependentLfa interface{}

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Remote LFA configuration.
    RemoteLfa Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa

    // Fast-reroute tiebreakers configurations.
    Tiebreakers Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) GetEntityData() *types.CommonEntityData {
    perPrefix.EntityData.YFilter = perPrefix.YFilter
    perPrefix.EntityData.YangName = "per-prefix"
    perPrefix.EntityData.BundleName = "cisco_ios_xr"
    perPrefix.EntityData.ParentYangName = "fast-reroute"
    perPrefix.EntityData.SegmentPath = "per-prefix"
    perPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perPrefix.EntityData.Children = make(map[string]types.YChild)
    perPrefix.EntityData.Children["remote-lfa"] = types.YChild{"RemoteLfa", &perPrefix.RemoteLfa}
    perPrefix.EntityData.Children["tiebreakers"] = types.YChild{"Tiebreakers", &perPrefix.Tiebreakers}
    perPrefix.EntityData.Children["candidate-interfaces"] = types.YChild{"CandidateInterfaces", &perPrefix.CandidateInterfaces}
    perPrefix.EntityData.Children["exclude-interfaces"] = types.YChild{"ExcludeInterfaces", &perPrefix.ExcludeInterfaces}
    perPrefix.EntityData.Leafs = make(map[string]types.YLeaf)
    perPrefix.EntityData.Leafs["topology-independent-lfa"] = types.YLeaf{"TopologyIndependentLfa", perPrefix.TopologyIndependentLfa}
    perPrefix.EntityData.Leafs["fast-reroute-use-candidate-only"] = types.YLeaf{"FastRerouteUseCandidateOnly", perPrefix.FastRerouteUseCandidateOnly}
    return &(perPrefix.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa
// Remote LFA configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable/Disable remote LFA computation. The type is OspfFrrRlfaTunnel.
    Tunnel interface{}

    // Maximum path cost to remote LFA. The type is interface{} with range:
    // 1..4294967295.
    MaximumCost interface{}
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetEntityData() *types.CommonEntityData {
    remoteLfa.EntityData.YFilter = remoteLfa.YFilter
    remoteLfa.EntityData.YangName = "remote-lfa"
    remoteLfa.EntityData.BundleName = "cisco_ios_xr"
    remoteLfa.EntityData.ParentYangName = "per-prefix"
    remoteLfa.EntityData.SegmentPath = "remote-lfa"
    remoteLfa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteLfa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteLfa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteLfa.EntityData.Children = make(map[string]types.YChild)
    remoteLfa.EntityData.Leafs = make(map[string]types.YLeaf)
    remoteLfa.EntityData.Leafs["tunnel"] = types.YLeaf{"Tunnel", remoteLfa.Tunnel}
    remoteLfa.EntityData.Leafs["maximum-cost"] = types.YLeaf{"MaximumCost", remoteLfa.MaximumCost}
    return &(remoteLfa.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers
// Fast-reroute tiebreakers configurations
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fast-reroute tiebreakers configuration. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker.
    Tiebreaker []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetEntityData() *types.CommonEntityData {
    tiebreakers.EntityData.YFilter = tiebreakers.YFilter
    tiebreakers.EntityData.YangName = "tiebreakers"
    tiebreakers.EntityData.BundleName = "cisco_ios_xr"
    tiebreakers.EntityData.ParentYangName = "per-prefix"
    tiebreakers.EntityData.SegmentPath = "tiebreakers"
    tiebreakers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tiebreakers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tiebreakers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tiebreakers.EntityData.Children = make(map[string]types.YChild)
    tiebreakers.EntityData.Children["tiebreaker"] = types.YChild{"Tiebreaker", nil}
    for i := range tiebreakers.Tiebreaker {
        tiebreakers.EntityData.Children[types.GetSegmentPath(&tiebreakers.Tiebreaker[i])] = types.YChild{"Tiebreaker", &tiebreakers.Tiebreaker[i]}
    }
    tiebreakers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tiebreakers.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
// Fast-reroute tiebreakers configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Tiebreaker type. The type is
    // OspfFastRerouteTiebreakersIntf.
    TiebreakerType interface{}

    // Index value for a tiebreaker, 0 to disable. The type is interface{} with
    // range: 0..255. This attribute is mandatory.
    TiebreakerIndex interface{}
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetEntityData() *types.CommonEntityData {
    tiebreaker.EntityData.YFilter = tiebreaker.YFilter
    tiebreaker.EntityData.YangName = "tiebreaker"
    tiebreaker.EntityData.BundleName = "cisco_ios_xr"
    tiebreaker.EntityData.ParentYangName = "tiebreakers"
    tiebreaker.EntityData.SegmentPath = "tiebreaker" + "[tiebreaker-type='" + fmt.Sprintf("%v", tiebreaker.TiebreakerType) + "']"
    tiebreaker.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tiebreaker.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tiebreaker.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tiebreaker.EntityData.Children = make(map[string]types.YChild)
    tiebreaker.EntityData.Leafs = make(map[string]types.YLeaf)
    tiebreaker.EntityData.Leafs["tiebreaker-type"] = types.YLeaf{"TiebreakerType", tiebreaker.TiebreakerType}
    tiebreaker.EntityData.Leafs["tiebreaker-index"] = types.YLeaf{"TiebreakerIndex", tiebreaker.TiebreakerIndex}
    return &(tiebreaker.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetEntityData() *types.CommonEntityData {
    candidateInterfaces.EntityData.YFilter = candidateInterfaces.YFilter
    candidateInterfaces.EntityData.YangName = "candidate-interfaces"
    candidateInterfaces.EntityData.BundleName = "cisco_ios_xr"
    candidateInterfaces.EntityData.ParentYangName = "per-prefix"
    candidateInterfaces.EntityData.SegmentPath = "candidate-interfaces"
    candidateInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterfaces.EntityData.Children = make(map[string]types.YChild)
    candidateInterfaces.EntityData.Children["candidate-interface"] = types.YChild{"CandidateInterface", nil}
    for i := range candidateInterfaces.CandidateInterface {
        candidateInterfaces.EntityData.Children[types.GetSegmentPath(&candidateInterfaces.CandidateInterface[i])] = types.YChild{"CandidateInterface", &candidateInterfaces.CandidateInterface[i]}
    }
    candidateInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(candidateInterfaces.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetEntityData() *types.CommonEntityData {
    candidateInterface.EntityData.YFilter = candidateInterface.YFilter
    candidateInterface.EntityData.YangName = "candidate-interface"
    candidateInterface.EntityData.BundleName = "cisco_ios_xr"
    candidateInterface.EntityData.ParentYangName = "candidate-interfaces"
    candidateInterface.EntityData.SegmentPath = "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
    candidateInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterface.EntityData.Children = make(map[string]types.YChild)
    candidateInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    candidateInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", candidateInterface.InterfaceName}
    return &(candidateInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetEntityData() *types.CommonEntityData {
    excludeInterfaces.EntityData.YFilter = excludeInterfaces.YFilter
    excludeInterfaces.EntityData.YangName = "exclude-interfaces"
    excludeInterfaces.EntityData.BundleName = "cisco_ios_xr"
    excludeInterfaces.EntityData.ParentYangName = "per-prefix"
    excludeInterfaces.EntityData.SegmentPath = "exclude-interfaces"
    excludeInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterfaces.EntityData.Children = make(map[string]types.YChild)
    excludeInterfaces.EntityData.Children["exclude-interface"] = types.YChild{"ExcludeInterface", nil}
    for i := range excludeInterfaces.ExcludeInterface {
        excludeInterfaces.EntityData.Children[types.GetSegmentPath(&excludeInterfaces.ExcludeInterface[i])] = types.YChild{"ExcludeInterface", &excludeInterfaces.ExcludeInterface[i]}
    }
    excludeInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(excludeInterfaces.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetEntityData() *types.CommonEntityData {
    excludeInterface.EntityData.YFilter = excludeInterface.YFilter
    excludeInterface.EntityData.YangName = "exclude-interface"
    excludeInterface.EntityData.BundleName = "cisco_ios_xr"
    excludeInterface.EntityData.ParentYangName = "exclude-interfaces"
    excludeInterface.EntityData.SegmentPath = "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
    excludeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterface.EntityData.Children = make(map[string]types.YChild)
    excludeInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    excludeInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", excludeInterface.InterfaceName}
    return &(excludeInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback
// Interface fallback cost
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fallback cost of link. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Bandwidth threshold. The type is interface{} with range: 1..4294967.
    Threshold interface{}
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) GetEntityData() *types.CommonEntityData {
    costFallback.EntityData.YFilter = costFallback.YFilter
    costFallback.EntityData.YangName = "cost-fallback"
    costFallback.EntityData.BundleName = "cisco_ios_xr"
    costFallback.EntityData.ParentYangName = "name-scope"
    costFallback.EntityData.SegmentPath = "cost-fallback"
    costFallback.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    costFallback.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    costFallback.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    costFallback.EntityData.Children = make(map[string]types.YChild)
    costFallback.EntityData.Leafs = make(map[string]types.YLeaf)
    costFallback.EntityData.Leafs["cost"] = types.YLeaf{"Cost", costFallback.Cost}
    costFallback.EntityData.Leafs["threshold"] = types.YLeaf{"Threshold", costFallback.Threshold}
    return &(costFallback.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes
// Multi Area Interface scope configurations
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Multi Area Interface configuration. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope.
    MultiAreaInterfaceScope []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope
}

func (multiAreaInterfaceScopes *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) GetEntityData() *types.CommonEntityData {
    multiAreaInterfaceScopes.EntityData.YFilter = multiAreaInterfaceScopes.YFilter
    multiAreaInterfaceScopes.EntityData.YangName = "multi-area-interface-scopes"
    multiAreaInterfaceScopes.EntityData.BundleName = "cisco_ios_xr"
    multiAreaInterfaceScopes.EntityData.ParentYangName = "area-area-id"
    multiAreaInterfaceScopes.EntityData.SegmentPath = "multi-area-interface-scopes"
    multiAreaInterfaceScopes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multiAreaInterfaceScopes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multiAreaInterfaceScopes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multiAreaInterfaceScopes.EntityData.Children = make(map[string]types.YChild)
    multiAreaInterfaceScopes.EntityData.Children["multi-area-interface-scope"] = types.YChild{"MultiAreaInterfaceScope", nil}
    for i := range multiAreaInterfaceScopes.MultiAreaInterfaceScope {
        multiAreaInterfaceScopes.EntityData.Children[types.GetSegmentPath(&multiAreaInterfaceScopes.MultiAreaInterfaceScope[i])] = types.YChild{"MultiAreaInterfaceScope", &multiAreaInterfaceScopes.MultiAreaInterfaceScope[i]}
    }
    multiAreaInterfaceScopes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(multiAreaInterfaceScopes.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope
// Multi Area Interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of Multi Area Interface to configure. The
    // type is string with pattern: b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Enable/Disable ignoring of MTU in DBD packets. The type is bool. The
    // default value is false.
    MtuIgnore interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // When enabled, prevent sending HELLO packets over link. The type is bool.
    // The default value is false.
    Passive interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Customize size of OSPF packets upto MTU. The type is interface{} with
    // range: 576..10000.
    PacketSize interface{}

    // Filter OSPF LSA during synchronization and flooding. The type is bool. The
    // default value is false.
    DatabaseFilter interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Filter networks intalled to RIB (disable as ACL name means filtering is
    // disabled).
    DistributeList Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList

    // Authentication.
    Authentication Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication

    // Neighbor router configuration information.
    Neighbors Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal

    // Fast-reroute configuration.
    FastReroute Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute

    // Interface fallback cost.
    CostFallback Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback
}

func (multiAreaInterfaceScope *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetEntityData() *types.CommonEntityData {
    multiAreaInterfaceScope.EntityData.YFilter = multiAreaInterfaceScope.YFilter
    multiAreaInterfaceScope.EntityData.YangName = "multi-area-interface-scope"
    multiAreaInterfaceScope.EntityData.BundleName = "cisco_ios_xr"
    multiAreaInterfaceScope.EntityData.ParentYangName = "multi-area-interface-scopes"
    multiAreaInterfaceScope.EntityData.SegmentPath = "multi-area-interface-scope" + "[interface-name='" + fmt.Sprintf("%v", multiAreaInterfaceScope.InterfaceName) + "']"
    multiAreaInterfaceScope.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multiAreaInterfaceScope.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multiAreaInterfaceScope.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multiAreaInterfaceScope.EntityData.Children = make(map[string]types.YChild)
    multiAreaInterfaceScope.EntityData.Children["distribute-list"] = types.YChild{"DistributeList", &multiAreaInterfaceScope.DistributeList}
    multiAreaInterfaceScope.EntityData.Children["authentication"] = types.YChild{"Authentication", &multiAreaInterfaceScope.Authentication}
    multiAreaInterfaceScope.EntityData.Children["neighbors"] = types.YChild{"Neighbors", &multiAreaInterfaceScope.Neighbors}
    multiAreaInterfaceScope.EntityData.Children["dead-interval-minimal"] = types.YChild{"DeadIntervalMinimal", &multiAreaInterfaceScope.DeadIntervalMinimal}
    multiAreaInterfaceScope.EntityData.Children["fast-reroute"] = types.YChild{"FastReroute", &multiAreaInterfaceScope.FastReroute}
    multiAreaInterfaceScope.EntityData.Children["cost-fallback"] = types.YChild{"CostFallback", &multiAreaInterfaceScope.CostFallback}
    multiAreaInterfaceScope.EntityData.Leafs = make(map[string]types.YLeaf)
    multiAreaInterfaceScope.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", multiAreaInterfaceScope.InterfaceName}
    multiAreaInterfaceScope.EntityData.Leafs["cost"] = types.YLeaf{"Cost", multiAreaInterfaceScope.Cost}
    multiAreaInterfaceScope.EntityData.Leafs["mtu-ignore"] = types.YLeaf{"MtuIgnore", multiAreaInterfaceScope.MtuIgnore}
    multiAreaInterfaceScope.EntityData.Leafs["hello-interval"] = types.YLeaf{"HelloInterval", multiAreaInterfaceScope.HelloInterval}
    multiAreaInterfaceScope.EntityData.Leafs["passive"] = types.YLeaf{"Passive", multiAreaInterfaceScope.Passive}
    multiAreaInterfaceScope.EntityData.Leafs["transmit-delay"] = types.YLeaf{"TransmitDelay", multiAreaInterfaceScope.TransmitDelay}
    multiAreaInterfaceScope.EntityData.Leafs["packet-size"] = types.YLeaf{"PacketSize", multiAreaInterfaceScope.PacketSize}
    multiAreaInterfaceScope.EntityData.Leafs["database-filter"] = types.YLeaf{"DatabaseFilter", multiAreaInterfaceScope.DatabaseFilter}
    multiAreaInterfaceScope.EntityData.Leafs["retransmit-interval"] = types.YLeaf{"RetransmitInterval", multiAreaInterfaceScope.RetransmitInterval}
    multiAreaInterfaceScope.EntityData.Leafs["running"] = types.YLeaf{"Running", multiAreaInterfaceScope.Running}
    return &(multiAreaInterfaceScope.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList
// Filter networks intalled to RIB (disable as ACL
// name means filtering is disabled)
// This type is a presence type.
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Access Control List name. The type is string.
    AccessListName interface{}

    // Route Policy name. The type is string.
    RoutePolicyName interface{}
}

func (distributeList *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetEntityData() *types.CommonEntityData {
    distributeList.EntityData.YFilter = distributeList.YFilter
    distributeList.EntityData.YangName = "distribute-list"
    distributeList.EntityData.BundleName = "cisco_ios_xr"
    distributeList.EntityData.ParentYangName = "multi-area-interface-scope"
    distributeList.EntityData.SegmentPath = "distribute-list"
    distributeList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    distributeList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    distributeList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    distributeList.EntityData.Children = make(map[string]types.YChild)
    distributeList.EntityData.Leafs = make(map[string]types.YLeaf)
    distributeList.EntityData.Leafs["access-list-name"] = types.YLeaf{"AccessListName", distributeList.AccessListName}
    distributeList.EntityData.Leafs["route-policy-name"] = types.YLeaf{"RoutePolicyName", distributeList.RoutePolicyName}
    return &(distributeList.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication
// Authentication
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // b'(!.+)|([^!].+)'.
    Key interface{}

    // Authentication type.
    Type_ Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "cisco_ios_xr"
    authentication.EntityData.ParentYangName = "multi-area-interface-scope"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authentication.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authentication.EntityData.Children = make(map[string]types.YChild)
    authentication.EntityData.Children["type"] = types.YChild{"Type_", &authentication.Type_}
    authentication.EntityData.Children["message-digest-keies"] = types.YChild{"MessageDigestKeies", &authentication.MessageDigestKeies}
    authentication.EntityData.Leafs = make(map[string]types.YLeaf)
    authentication.EntityData.Leafs["key"] = types.YLeaf{"Key", authentication.Key}
    return &(authentication.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "type"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "authentication"
    self.EntityData.SegmentPath = "type"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    self.EntityData.Leafs["authen-type"] = types.YLeaf{"AuthenType", self.AuthenType}
    self.EntityData.Leafs["keychain-authen-type"] = types.YLeaf{"KeychainAuthenType", self.KeychainAuthenType}
    self.EntityData.Leafs["keychain-name"] = types.YLeaf{"KeychainName", self.KeychainName}
    return &(self.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetEntityData() *types.CommonEntityData {
    messageDigestKeies.EntityData.YFilter = messageDigestKeies.YFilter
    messageDigestKeies.EntityData.YangName = "message-digest-keies"
    messageDigestKeies.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKeies.EntityData.ParentYangName = "authentication"
    messageDigestKeies.EntityData.SegmentPath = "message-digest-keies"
    messageDigestKeies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKeies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKeies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKeies.EntityData.Children = make(map[string]types.YChild)
    messageDigestKeies.EntityData.Children["message-digest-key"] = types.YChild{"MessageDigestKey", nil}
    for i := range messageDigestKeies.MessageDigestKey {
        messageDigestKeies.EntityData.Children[types.GetSegmentPath(&messageDigestKeies.MessageDigestKey[i])] = types.YChild{"MessageDigestKey", &messageDigestKeies.MessageDigestKey[i]}
    }
    messageDigestKeies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(messageDigestKeies.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: b'(!.+)|([^!].+)'. This
    // attribute is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetEntityData() *types.CommonEntityData {
    messageDigestKey.EntityData.YFilter = messageDigestKey.YFilter
    messageDigestKey.EntityData.YangName = "message-digest-key"
    messageDigestKey.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKey.EntityData.ParentYangName = "message-digest-keies"
    messageDigestKey.EntityData.SegmentPath = "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
    messageDigestKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKey.EntityData.Children = make(map[string]types.YChild)
    messageDigestKey.EntityData.Leafs = make(map[string]types.YLeaf)
    messageDigestKey.EntityData.Leafs["key-id"] = types.YLeaf{"KeyId", messageDigestKey.KeyId}
    messageDigestKey.EntityData.Leafs["password"] = types.YLeaf{"Password", messageDigestKey.Password}
    return &(messageDigestKey.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors
// Neighbor router configuration information
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Router configuration information for a particular neighbor. The type is
    // slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor.
    Neighbor []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor
}

func (neighbors *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "cisco_ios_xr"
    neighbors.EntityData.ParentYangName = "multi-area-interface-scope"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbors.EntityData.Children = make(map[string]types.YChild)
    neighbors.EntityData.Children["neighbor"] = types.YChild{"Neighbor", nil}
    for i := range neighbors.Neighbor {
        neighbors.EntityData.Children[types.GetSegmentPath(&neighbors.Neighbor[i])] = types.YChild{"Neighbor", &neighbors.Neighbor[i]}
    }
    neighbors.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(neighbors.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor
// Router configuration information for a
// particular neighbor
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Neighbor IP address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // OSPF priority of non-broadcast neighbor. The type is interface{} with
    // range: 0..255. The default value is 0.
    Priority interface{}

    // OSPF dead router poll-interval in seconds. The type is interface{} with
    // range: 0..65535. Units are second. The default value is 40.
    PollInterval interface{}

    // OSPF cost for point-to-multipoint neighbor. The type is interface{} with
    // range: 1..65535. The default value is 1.
    Cost interface{}

    // Database filter: Filter OSPF LSA during synchronization and flooding for
    // point-to-multipoint. The type is bool. The default value is false.
    DatabaseFilter interface{}
}

func (neighbor *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "cisco_ios_xr"
    neighbor.EntityData.ParentYangName = "neighbors"
    neighbor.EntityData.SegmentPath = "neighbor" + "[neighbor-address='" + fmt.Sprintf("%v", neighbor.NeighborAddress) + "']"
    neighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbor.EntityData.Children = make(map[string]types.YChild)
    neighbor.EntityData.Leafs = make(map[string]types.YLeaf)
    neighbor.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", neighbor.NeighborAddress}
    neighbor.EntityData.Leafs["priority"] = types.YLeaf{"Priority", neighbor.Priority}
    neighbor.EntityData.Leafs["poll-interval"] = types.YLeaf{"PollInterval", neighbor.PollInterval}
    neighbor.EntityData.Leafs["cost"] = types.YLeaf{"Cost", neighbor.Cost}
    neighbor.EntityData.Leafs["database-filter"] = types.YLeaf{"DatabaseFilter", neighbor.DatabaseFilter}
    return &(neighbor.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetEntityData() *types.CommonEntityData {
    deadIntervalMinimal.EntityData.YFilter = deadIntervalMinimal.YFilter
    deadIntervalMinimal.EntityData.YangName = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.BundleName = "cisco_ios_xr"
    deadIntervalMinimal.EntityData.ParentYangName = "multi-area-interface-scope"
    deadIntervalMinimal.EntityData.SegmentPath = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    deadIntervalMinimal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    deadIntervalMinimal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    deadIntervalMinimal.EntityData.Children = make(map[string]types.YChild)
    deadIntervalMinimal.EntityData.Leafs = make(map[string]types.YLeaf)
    deadIntervalMinimal.EntityData.Leafs["interval"] = types.YLeaf{"Interval", deadIntervalMinimal.Interval}
    deadIntervalMinimal.EntityData.Leafs["multiplier"] = types.YLeaf{"Multiplier", deadIntervalMinimal.Multiplier}
    return &(deadIntervalMinimal.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute
// Fast-reroute configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // OspfFastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink

    // Fast-reroute per-prefix global configuration.
    PerPrefix Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetEntityData() *types.CommonEntityData {
    fastReroute.EntityData.YFilter = fastReroute.YFilter
    fastReroute.EntityData.YangName = "fast-reroute"
    fastReroute.EntityData.BundleName = "cisco_ios_xr"
    fastReroute.EntityData.ParentYangName = "multi-area-interface-scope"
    fastReroute.EntityData.SegmentPath = "fast-reroute"
    fastReroute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fastReroute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fastReroute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fastReroute.EntityData.Children = make(map[string]types.YChild)
    fastReroute.EntityData.Children["per-link"] = types.YChild{"PerLink", &fastReroute.PerLink}
    fastReroute.EntityData.Children["per-prefix"] = types.YChild{"PerPrefix", &fastReroute.PerPrefix}
    fastReroute.EntityData.Leafs = make(map[string]types.YLeaf)
    fastReroute.EntityData.Leafs["fast-reroute-enable"] = types.YLeaf{"FastRerouteEnable", fastReroute.FastRerouteEnable}
    return &(fastReroute.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetEntityData() *types.CommonEntityData {
    perLink.EntityData.YFilter = perLink.YFilter
    perLink.EntityData.YangName = "per-link"
    perLink.EntityData.BundleName = "cisco_ios_xr"
    perLink.EntityData.ParentYangName = "fast-reroute"
    perLink.EntityData.SegmentPath = "per-link"
    perLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perLink.EntityData.Children = make(map[string]types.YChild)
    perLink.EntityData.Children["candidate-interfaces"] = types.YChild{"CandidateInterfaces", &perLink.CandidateInterfaces}
    perLink.EntityData.Children["exclude-interfaces"] = types.YChild{"ExcludeInterfaces", &perLink.ExcludeInterfaces}
    perLink.EntityData.Leafs = make(map[string]types.YLeaf)
    perLink.EntityData.Leafs["fast-reroute-use-candidate-only"] = types.YLeaf{"FastRerouteUseCandidateOnly", perLink.FastRerouteUseCandidateOnly}
    return &(perLink.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetEntityData() *types.CommonEntityData {
    candidateInterfaces.EntityData.YFilter = candidateInterfaces.YFilter
    candidateInterfaces.EntityData.YangName = "candidate-interfaces"
    candidateInterfaces.EntityData.BundleName = "cisco_ios_xr"
    candidateInterfaces.EntityData.ParentYangName = "per-link"
    candidateInterfaces.EntityData.SegmentPath = "candidate-interfaces"
    candidateInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterfaces.EntityData.Children = make(map[string]types.YChild)
    candidateInterfaces.EntityData.Children["candidate-interface"] = types.YChild{"CandidateInterface", nil}
    for i := range candidateInterfaces.CandidateInterface {
        candidateInterfaces.EntityData.Children[types.GetSegmentPath(&candidateInterfaces.CandidateInterface[i])] = types.YChild{"CandidateInterface", &candidateInterfaces.CandidateInterface[i]}
    }
    candidateInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(candidateInterfaces.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetEntityData() *types.CommonEntityData {
    candidateInterface.EntityData.YFilter = candidateInterface.YFilter
    candidateInterface.EntityData.YangName = "candidate-interface"
    candidateInterface.EntityData.BundleName = "cisco_ios_xr"
    candidateInterface.EntityData.ParentYangName = "candidate-interfaces"
    candidateInterface.EntityData.SegmentPath = "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
    candidateInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterface.EntityData.Children = make(map[string]types.YChild)
    candidateInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    candidateInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", candidateInterface.InterfaceName}
    return &(candidateInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetEntityData() *types.CommonEntityData {
    excludeInterfaces.EntityData.YFilter = excludeInterfaces.YFilter
    excludeInterfaces.EntityData.YangName = "exclude-interfaces"
    excludeInterfaces.EntityData.BundleName = "cisco_ios_xr"
    excludeInterfaces.EntityData.ParentYangName = "per-link"
    excludeInterfaces.EntityData.SegmentPath = "exclude-interfaces"
    excludeInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterfaces.EntityData.Children = make(map[string]types.YChild)
    excludeInterfaces.EntityData.Children["exclude-interface"] = types.YChild{"ExcludeInterface", nil}
    for i := range excludeInterfaces.ExcludeInterface {
        excludeInterfaces.EntityData.Children[types.GetSegmentPath(&excludeInterfaces.ExcludeInterface[i])] = types.YChild{"ExcludeInterface", &excludeInterfaces.ExcludeInterface[i]}
    }
    excludeInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(excludeInterfaces.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetEntityData() *types.CommonEntityData {
    excludeInterface.EntityData.YFilter = excludeInterface.YFilter
    excludeInterface.EntityData.YangName = "exclude-interface"
    excludeInterface.EntityData.BundleName = "cisco_ios_xr"
    excludeInterface.EntityData.ParentYangName = "exclude-interfaces"
    excludeInterface.EntityData.SegmentPath = "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
    excludeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterface.EntityData.Children = make(map[string]types.YChild)
    excludeInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    excludeInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", excludeInterface.InterfaceName}
    return &(excludeInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix
// Fast-reroute per-prefix global configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology Independet LFA configuration. The type is bool.
    TopologyIndependentLfa interface{}

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Remote LFA configuration.
    RemoteLfa Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa

    // Fast-reroute tiebreakers configurations.
    Tiebreakers Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetEntityData() *types.CommonEntityData {
    perPrefix.EntityData.YFilter = perPrefix.YFilter
    perPrefix.EntityData.YangName = "per-prefix"
    perPrefix.EntityData.BundleName = "cisco_ios_xr"
    perPrefix.EntityData.ParentYangName = "fast-reroute"
    perPrefix.EntityData.SegmentPath = "per-prefix"
    perPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perPrefix.EntityData.Children = make(map[string]types.YChild)
    perPrefix.EntityData.Children["remote-lfa"] = types.YChild{"RemoteLfa", &perPrefix.RemoteLfa}
    perPrefix.EntityData.Children["tiebreakers"] = types.YChild{"Tiebreakers", &perPrefix.Tiebreakers}
    perPrefix.EntityData.Children["candidate-interfaces"] = types.YChild{"CandidateInterfaces", &perPrefix.CandidateInterfaces}
    perPrefix.EntityData.Children["exclude-interfaces"] = types.YChild{"ExcludeInterfaces", &perPrefix.ExcludeInterfaces}
    perPrefix.EntityData.Leafs = make(map[string]types.YLeaf)
    perPrefix.EntityData.Leafs["topology-independent-lfa"] = types.YLeaf{"TopologyIndependentLfa", perPrefix.TopologyIndependentLfa}
    perPrefix.EntityData.Leafs["fast-reroute-use-candidate-only"] = types.YLeaf{"FastRerouteUseCandidateOnly", perPrefix.FastRerouteUseCandidateOnly}
    return &(perPrefix.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa
// Remote LFA configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable/Disable remote LFA computation. The type is OspfFrrRlfaTunnel.
    Tunnel interface{}

    // Maximum path cost to remote LFA. The type is interface{} with range:
    // 1..4294967295.
    MaximumCost interface{}
}

func (remoteLfa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetEntityData() *types.CommonEntityData {
    remoteLfa.EntityData.YFilter = remoteLfa.YFilter
    remoteLfa.EntityData.YangName = "remote-lfa"
    remoteLfa.EntityData.BundleName = "cisco_ios_xr"
    remoteLfa.EntityData.ParentYangName = "per-prefix"
    remoteLfa.EntityData.SegmentPath = "remote-lfa"
    remoteLfa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteLfa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteLfa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteLfa.EntityData.Children = make(map[string]types.YChild)
    remoteLfa.EntityData.Leafs = make(map[string]types.YLeaf)
    remoteLfa.EntityData.Leafs["tunnel"] = types.YLeaf{"Tunnel", remoteLfa.Tunnel}
    remoteLfa.EntityData.Leafs["maximum-cost"] = types.YLeaf{"MaximumCost", remoteLfa.MaximumCost}
    return &(remoteLfa.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers
// Fast-reroute tiebreakers configurations
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fast-reroute tiebreakers configuration. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker.
    Tiebreaker []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
}

func (tiebreakers *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetEntityData() *types.CommonEntityData {
    tiebreakers.EntityData.YFilter = tiebreakers.YFilter
    tiebreakers.EntityData.YangName = "tiebreakers"
    tiebreakers.EntityData.BundleName = "cisco_ios_xr"
    tiebreakers.EntityData.ParentYangName = "per-prefix"
    tiebreakers.EntityData.SegmentPath = "tiebreakers"
    tiebreakers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tiebreakers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tiebreakers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tiebreakers.EntityData.Children = make(map[string]types.YChild)
    tiebreakers.EntityData.Children["tiebreaker"] = types.YChild{"Tiebreaker", nil}
    for i := range tiebreakers.Tiebreaker {
        tiebreakers.EntityData.Children[types.GetSegmentPath(&tiebreakers.Tiebreaker[i])] = types.YChild{"Tiebreaker", &tiebreakers.Tiebreaker[i]}
    }
    tiebreakers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tiebreakers.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
// Fast-reroute tiebreakers configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Tiebreaker type. The type is
    // OspfFastRerouteTiebreakersIntf.
    TiebreakerType interface{}

    // Index value for a tiebreaker, 0 to disable. The type is interface{} with
    // range: 0..255. This attribute is mandatory.
    TiebreakerIndex interface{}
}

func (tiebreaker *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetEntityData() *types.CommonEntityData {
    tiebreaker.EntityData.YFilter = tiebreaker.YFilter
    tiebreaker.EntityData.YangName = "tiebreaker"
    tiebreaker.EntityData.BundleName = "cisco_ios_xr"
    tiebreaker.EntityData.ParentYangName = "tiebreakers"
    tiebreaker.EntityData.SegmentPath = "tiebreaker" + "[tiebreaker-type='" + fmt.Sprintf("%v", tiebreaker.TiebreakerType) + "']"
    tiebreaker.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tiebreaker.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tiebreaker.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tiebreaker.EntityData.Children = make(map[string]types.YChild)
    tiebreaker.EntityData.Leafs = make(map[string]types.YLeaf)
    tiebreaker.EntityData.Leafs["tiebreaker-type"] = types.YLeaf{"TiebreakerType", tiebreaker.TiebreakerType}
    tiebreaker.EntityData.Leafs["tiebreaker-index"] = types.YLeaf{"TiebreakerIndex", tiebreaker.TiebreakerIndex}
    return &(tiebreaker.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetEntityData() *types.CommonEntityData {
    candidateInterfaces.EntityData.YFilter = candidateInterfaces.YFilter
    candidateInterfaces.EntityData.YangName = "candidate-interfaces"
    candidateInterfaces.EntityData.BundleName = "cisco_ios_xr"
    candidateInterfaces.EntityData.ParentYangName = "per-prefix"
    candidateInterfaces.EntityData.SegmentPath = "candidate-interfaces"
    candidateInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterfaces.EntityData.Children = make(map[string]types.YChild)
    candidateInterfaces.EntityData.Children["candidate-interface"] = types.YChild{"CandidateInterface", nil}
    for i := range candidateInterfaces.CandidateInterface {
        candidateInterfaces.EntityData.Children[types.GetSegmentPath(&candidateInterfaces.CandidateInterface[i])] = types.YChild{"CandidateInterface", &candidateInterfaces.CandidateInterface[i]}
    }
    candidateInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(candidateInterfaces.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetEntityData() *types.CommonEntityData {
    candidateInterface.EntityData.YFilter = candidateInterface.YFilter
    candidateInterface.EntityData.YangName = "candidate-interface"
    candidateInterface.EntityData.BundleName = "cisco_ios_xr"
    candidateInterface.EntityData.ParentYangName = "candidate-interfaces"
    candidateInterface.EntityData.SegmentPath = "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
    candidateInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterface.EntityData.Children = make(map[string]types.YChild)
    candidateInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    candidateInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", candidateInterface.InterfaceName}
    return &(candidateInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetEntityData() *types.CommonEntityData {
    excludeInterfaces.EntityData.YFilter = excludeInterfaces.YFilter
    excludeInterfaces.EntityData.YangName = "exclude-interfaces"
    excludeInterfaces.EntityData.BundleName = "cisco_ios_xr"
    excludeInterfaces.EntityData.ParentYangName = "per-prefix"
    excludeInterfaces.EntityData.SegmentPath = "exclude-interfaces"
    excludeInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterfaces.EntityData.Children = make(map[string]types.YChild)
    excludeInterfaces.EntityData.Children["exclude-interface"] = types.YChild{"ExcludeInterface", nil}
    for i := range excludeInterfaces.ExcludeInterface {
        excludeInterfaces.EntityData.Children[types.GetSegmentPath(&excludeInterfaces.ExcludeInterface[i])] = types.YChild{"ExcludeInterface", &excludeInterfaces.ExcludeInterface[i]}
    }
    excludeInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(excludeInterfaces.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetEntityData() *types.CommonEntityData {
    excludeInterface.EntityData.YFilter = excludeInterface.YFilter
    excludeInterface.EntityData.YangName = "exclude-interface"
    excludeInterface.EntityData.BundleName = "cisco_ios_xr"
    excludeInterface.EntityData.ParentYangName = "exclude-interfaces"
    excludeInterface.EntityData.SegmentPath = "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
    excludeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterface.EntityData.Children = make(map[string]types.YChild)
    excludeInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    excludeInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", excludeInterface.InterfaceName}
    return &(excludeInterface.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback
// Interface fallback cost
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fallback cost of link. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Bandwidth threshold. The type is interface{} with range: 1..4294967.
    Threshold interface{}
}

func (costFallback *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetEntityData() *types.CommonEntityData {
    costFallback.EntityData.YFilter = costFallback.YFilter
    costFallback.EntityData.YangName = "cost-fallback"
    costFallback.EntityData.BundleName = "cisco_ios_xr"
    costFallback.EntityData.ParentYangName = "multi-area-interface-scope"
    costFallback.EntityData.SegmentPath = "cost-fallback"
    costFallback.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    costFallback.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    costFallback.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    costFallback.EntityData.Children = make(map[string]types.YChild)
    costFallback.EntityData.Leafs = make(map[string]types.YLeaf)
    costFallback.EntityData.Leafs["cost"] = types.YLeaf{"Cost", costFallback.Cost}
    costFallback.EntityData.Leafs["threshold"] = types.YLeaf{"Threshold", costFallback.Threshold}
    return &(costFallback.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges
// Summarize routes matching address/mask (border
// routers only)
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Ordering index. The type is slice of
    // Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange.
    AreaRange []Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange
}

func (areaRanges *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges) GetEntityData() *types.CommonEntityData {
    areaRanges.EntityData.YFilter = areaRanges.YFilter
    areaRanges.EntityData.YangName = "area-ranges"
    areaRanges.EntityData.BundleName = "cisco_ios_xr"
    areaRanges.EntityData.ParentYangName = "area-area-id"
    areaRanges.EntityData.SegmentPath = "area-ranges"
    areaRanges.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaRanges.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaRanges.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaRanges.EntityData.Children = make(map[string]types.YChild)
    areaRanges.EntityData.Children["area-range"] = types.YChild{"AreaRange", nil}
    for i := range areaRanges.AreaRange {
        areaRanges.EntityData.Children[types.GetSegmentPath(&areaRanges.AreaRange[i])] = types.YChild{"AreaRange", &areaRanges.AreaRange[i]}
    }
    areaRanges.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(areaRanges.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange
// Ordering index
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. IP address to match. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Address interface{}

    // This attribute is a key. IP netmask for address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Netmask interface{}

    // Do not advertise this range. The type is bool.
    NotAdvertise interface{}
}

func (areaRange *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) GetEntityData() *types.CommonEntityData {
    areaRange.EntityData.YFilter = areaRange.YFilter
    areaRange.EntityData.YangName = "area-range"
    areaRange.EntityData.BundleName = "cisco_ios_xr"
    areaRange.EntityData.ParentYangName = "area-ranges"
    areaRange.EntityData.SegmentPath = "area-range" + "[address='" + fmt.Sprintf("%v", areaRange.Address) + "']" + "[netmask='" + fmt.Sprintf("%v", areaRange.Netmask) + "']"
    areaRange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaRange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaRange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaRange.EntityData.Children = make(map[string]types.YChild)
    areaRange.EntityData.Leafs = make(map[string]types.YLeaf)
    areaRange.EntityData.Leafs["address"] = types.YLeaf{"Address", areaRange.Address}
    areaRange.EntityData.Leafs["netmask"] = types.YLeaf{"Netmask", areaRange.Netmask}
    areaRange.EntityData.Leafs["not-advertise"] = types.YLeaf{"NotAdvertise", areaRange.NotAdvertise}
    return &(areaRange.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa
// Specify area as a NSSA area
type Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // No redistribution into this NSSA area. The type is bool. The default value
    // is false.
    NoRedistribution interface{}

    // Originate Type 7 default into NSSA area. The type is bool. The default
    // value is false.
    DefaultInfoOriginate interface{}

    // Do not send summary LSA into NSSA. The type is bool. The default value is
    // false.
    NoSummary interface{}

    // OSPF default metric. The type is interface{} with range: 1..16777214.
    NssaDefMetric interface{}

    // OSPF External metric type. The type is OspfLinkStateMetric. The default
    // value is type2.
    MetricType interface{}
}

func (nssa *Ospf_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa) GetEntityData() *types.CommonEntityData {
    nssa.EntityData.YFilter = nssa.YFilter
    nssa.EntityData.YangName = "nssa"
    nssa.EntityData.BundleName = "cisco_ios_xr"
    nssa.EntityData.ParentYangName = "area-area-id"
    nssa.EntityData.SegmentPath = "nssa"
    nssa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nssa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nssa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nssa.EntityData.Children = make(map[string]types.YChild)
    nssa.EntityData.Leafs = make(map[string]types.YLeaf)
    nssa.EntityData.Leafs["no-redistribution"] = types.YLeaf{"NoRedistribution", nssa.NoRedistribution}
    nssa.EntityData.Leafs["default-info-originate"] = types.YLeaf{"DefaultInfoOriginate", nssa.DefaultInfoOriginate}
    nssa.EntityData.Leafs["no-summary"] = types.YLeaf{"NoSummary", nssa.NoSummary}
    nssa.EntityData.Leafs["nssa-def-metric"] = types.YLeaf{"NssaDefMetric", nssa.NssaDefMetric}
    nssa.EntityData.Leafs["metric-type"] = types.YLeaf{"MetricType", nssa.MetricType}
    return &(nssa.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Timers
// Adjust routing timers
type Ospf_Processes_Process_Vrfs_Vrf_Timers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Seconds between group of LSAs being refreshed or maxaged. The type is
    // interface{} with range: 5..100. Units are second.
    LsaPacingFlood interface{}

    // Number of ms between end of SPF and start of IPFRR computation. The type is
    // interface{} with range: 50..600000. Units are millisecond. The default
    // value is 500.
    FastRerouteTimer interface{}

    // How often self-originated LSAs should be refreshed. The type is interface{}
    // with range: 1800..2700. Units are second. The default value is 1800.
    LsaRefresh interface{}

    // LSA group pacing timer (Seconds between group of LSAs being refreshed or
    // maxaged). The type is interface{} with range: 10..1800. Units are second.
    // The default value is 240.
    LsaGroupPacing interface{}

    // MinLSArrival timer (minimum interval in milliseconds between accepting the
    // same LSA). The type is interface{} with range: 0..600000. Units are
    // millisecond. The default value is 100.
    LsaMinArrival interface{}

    // OSPF SPF timers (in milliseconds).
    SpfTimer Ospf_Processes_Process_Vrfs_Vrf_Timers_SpfTimer

    // OSPF LSA timers (in milliseconds).
    LsaGenerationTimer Ospf_Processes_Process_Vrfs_Vrf_Timers_LsaGenerationTimer
}

func (timers *Ospf_Processes_Process_Vrfs_Vrf_Timers) GetEntityData() *types.CommonEntityData {
    timers.EntityData.YFilter = timers.YFilter
    timers.EntityData.YangName = "timers"
    timers.EntityData.BundleName = "cisco_ios_xr"
    timers.EntityData.ParentYangName = "vrf"
    timers.EntityData.SegmentPath = "timers"
    timers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    timers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    timers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    timers.EntityData.Children = make(map[string]types.YChild)
    timers.EntityData.Children["spf-timer"] = types.YChild{"SpfTimer", &timers.SpfTimer}
    timers.EntityData.Children["lsa-generation-timer"] = types.YChild{"LsaGenerationTimer", &timers.LsaGenerationTimer}
    timers.EntityData.Leafs = make(map[string]types.YLeaf)
    timers.EntityData.Leafs["lsa-pacing-flood"] = types.YLeaf{"LsaPacingFlood", timers.LsaPacingFlood}
    timers.EntityData.Leafs["fast-reroute-timer"] = types.YLeaf{"FastRerouteTimer", timers.FastRerouteTimer}
    timers.EntityData.Leafs["lsa-refresh"] = types.YLeaf{"LsaRefresh", timers.LsaRefresh}
    timers.EntityData.Leafs["lsa-group-pacing"] = types.YLeaf{"LsaGroupPacing", timers.LsaGroupPacing}
    timers.EntityData.Leafs["lsa-min-arrival"] = types.YLeaf{"LsaMinArrival", timers.LsaMinArrival}
    return &(timers.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Timers_SpfTimer
// OSPF SPF timers (in milliseconds)
type Ospf_Processes_Process_Vrfs_Vrf_Timers_SpfTimer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of milliseconds before first SPF run. The type is interface{} with
    // range: 1..600000. Units are millisecond. The default value is 5000.
    InitialDelay interface{}

    // Number of milliseconds delay between successive SPF runs. The type is
    // interface{} with range: 1..600000. Units are millisecond. The default value
    // is 10000.
    BackoffIncrement interface{}

    // Max number of milliseconds between consecutive SPF calculations. The type
    // is interface{} with range: 1..600000. Units are millisecond. The default
    // value is 10000.
    MaxDelay interface{}
}

func (spfTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_SpfTimer) GetEntityData() *types.CommonEntityData {
    spfTimer.EntityData.YFilter = spfTimer.YFilter
    spfTimer.EntityData.YangName = "spf-timer"
    spfTimer.EntityData.BundleName = "cisco_ios_xr"
    spfTimer.EntityData.ParentYangName = "timers"
    spfTimer.EntityData.SegmentPath = "spf-timer"
    spfTimer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spfTimer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spfTimer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spfTimer.EntityData.Children = make(map[string]types.YChild)
    spfTimer.EntityData.Leafs = make(map[string]types.YLeaf)
    spfTimer.EntityData.Leafs["initial-delay"] = types.YLeaf{"InitialDelay", spfTimer.InitialDelay}
    spfTimer.EntityData.Leafs["backoff-increment"] = types.YLeaf{"BackoffIncrement", spfTimer.BackoffIncrement}
    spfTimer.EntityData.Leafs["max-delay"] = types.YLeaf{"MaxDelay", spfTimer.MaxDelay}
    return &(spfTimer.EntityData)
}

// Ospf_Processes_Process_Vrfs_Vrf_Timers_LsaGenerationTimer
// OSPF LSA timers (in milliseconds)
type Ospf_Processes_Process_Vrfs_Vrf_Timers_LsaGenerationTimer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of milliseconds before generating first LSA. The type is interface{}
    // with range: 0..600000. Units are millisecond. The default value is 50.
    InitialDelay interface{}

    // Number of milliseconds delay between successive LSA builds. The type is
    // interface{} with range: 1..600000. Units are millisecond. The default value
    // is 200.
    BackoffIncrement interface{}

    // Max number of milliseconds between consecutive LSA builds . The type is
    // interface{} with range: 1..600000. Units are millisecond. The default value
    // is 200.
    MaxDelay interface{}
}

func (lsaGenerationTimer *Ospf_Processes_Process_Vrfs_Vrf_Timers_LsaGenerationTimer) GetEntityData() *types.CommonEntityData {
    lsaGenerationTimer.EntityData.YFilter = lsaGenerationTimer.YFilter
    lsaGenerationTimer.EntityData.YangName = "lsa-generation-timer"
    lsaGenerationTimer.EntityData.BundleName = "cisco_ios_xr"
    lsaGenerationTimer.EntityData.ParentYangName = "timers"
    lsaGenerationTimer.EntityData.SegmentPath = "lsa-generation-timer"
    lsaGenerationTimer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaGenerationTimer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaGenerationTimer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaGenerationTimer.EntityData.Children = make(map[string]types.YChild)
    lsaGenerationTimer.EntityData.Leafs = make(map[string]types.YLeaf)
    lsaGenerationTimer.EntityData.Leafs["initial-delay"] = types.YLeaf{"InitialDelay", lsaGenerationTimer.InitialDelay}
    lsaGenerationTimer.EntityData.Leafs["backoff-increment"] = types.YLeaf{"BackoffIncrement", lsaGenerationTimer.BackoffIncrement}
    lsaGenerationTimer.EntityData.Leafs["max-delay"] = types.YLeaf{"MaxDelay", lsaGenerationTimer.MaxDelay}
    return &(lsaGenerationTimer.EntityData)
}

// Ospf_Processes_Process_TraceBufs
// Configuration to change size of trace buffer
type Ospf_Processes_Process_TraceBufs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Changes the size of the specified trace buffer. The type is slice of
    // Ospf_Processes_Process_TraceBufs_TraceBuf.
    TraceBuf []Ospf_Processes_Process_TraceBufs_TraceBuf
}

func (traceBufs *Ospf_Processes_Process_TraceBufs) GetEntityData() *types.CommonEntityData {
    traceBufs.EntityData.YFilter = traceBufs.YFilter
    traceBufs.EntityData.YangName = "trace-bufs"
    traceBufs.EntityData.BundleName = "cisco_ios_xr"
    traceBufs.EntityData.ParentYangName = "process"
    traceBufs.EntityData.SegmentPath = "trace-bufs"
    traceBufs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    traceBufs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    traceBufs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    traceBufs.EntityData.Children = make(map[string]types.YChild)
    traceBufs.EntityData.Children["trace-buf"] = types.YChild{"TraceBuf", nil}
    for i := range traceBufs.TraceBuf {
        traceBufs.EntityData.Children[types.GetSegmentPath(&traceBufs.TraceBuf[i])] = types.YChild{"TraceBuf", &traceBufs.TraceBuf[i]}
    }
    traceBufs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(traceBufs.EntityData)
}

// Ospf_Processes_Process_TraceBufs_TraceBuf
// Changes the size of the specified trace
// buffer
type Ospf_Processes_Process_TraceBufs_TraceBuf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name for this trace buffer. The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    TraceBufName interface{}

    // Buffer size. The type is OspfTraceBufSize. This attribute is mandatory.
    Bufsize interface{}
}

func (traceBuf *Ospf_Processes_Process_TraceBufs_TraceBuf) GetEntityData() *types.CommonEntityData {
    traceBuf.EntityData.YFilter = traceBuf.YFilter
    traceBuf.EntityData.YangName = "trace-buf"
    traceBuf.EntityData.BundleName = "cisco_ios_xr"
    traceBuf.EntityData.ParentYangName = "trace-bufs"
    traceBuf.EntityData.SegmentPath = "trace-buf" + "[trace-buf-name='" + fmt.Sprintf("%v", traceBuf.TraceBufName) + "']"
    traceBuf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    traceBuf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    traceBuf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    traceBuf.EntityData.Children = make(map[string]types.YChild)
    traceBuf.EntityData.Leafs = make(map[string]types.YLeaf)
    traceBuf.EntityData.Leafs["trace-buf-name"] = types.YLeaf{"TraceBufName", traceBuf.TraceBufName}
    traceBuf.EntityData.Leafs["bufsize"] = types.YLeaf{"Bufsize", traceBuf.Bufsize}
    return &(traceBuf.EntityData)
}

// Ospf_Processes_Process_GracefulShutdownTimers
// Adjust routing timers
type Ospf_Processes_Process_GracefulShutdownTimers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time to keep OSPF routes active after graceful shutdown(in seconds). The
    // type is interface{} with range: 0..90. Units are second. The default value
    // is 5.
    GracefulShutdownRetainRoutes interface{}

    // Number of seconds to delay before beginning graceful shutdown. The type is
    // interface{} with range: 0..90. Units are second. The default value is 5.
    GracefulShutdownInitialDelay interface{}
}

func (gracefulShutdownTimers *Ospf_Processes_Process_GracefulShutdownTimers) GetEntityData() *types.CommonEntityData {
    gracefulShutdownTimers.EntityData.YFilter = gracefulShutdownTimers.YFilter
    gracefulShutdownTimers.EntityData.YangName = "graceful-shutdown-timers"
    gracefulShutdownTimers.EntityData.BundleName = "cisco_ios_xr"
    gracefulShutdownTimers.EntityData.ParentYangName = "process"
    gracefulShutdownTimers.EntityData.SegmentPath = "graceful-shutdown-timers"
    gracefulShutdownTimers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulShutdownTimers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulShutdownTimers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulShutdownTimers.EntityData.Children = make(map[string]types.YChild)
    gracefulShutdownTimers.EntityData.Leafs = make(map[string]types.YLeaf)
    gracefulShutdownTimers.EntityData.Leafs["graceful-shutdown-retain-routes"] = types.YLeaf{"GracefulShutdownRetainRoutes", gracefulShutdownTimers.GracefulShutdownRetainRoutes}
    gracefulShutdownTimers.EntityData.Leafs["graceful-shutdown-initial-delay"] = types.YLeaf{"GracefulShutdownInitialDelay", gracefulShutdownTimers.GracefulShutdownInitialDelay}
    return &(gracefulShutdownTimers.EntityData)
}

// Ospf_Processes_Process_DefaultVrf
// Default VRF related configuration
type Ospf_Processes_Process_DefaultVrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Ignore MOSPF (Type 6) LSAs. The type is interface{}.
    IgnoreMospf interface{}

    // Router ID for this OSPF process. Enter an IP Address. The type is string
    // with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RouterId interface{}

    // Prefer type7 externals over type5. The type is interface{}.
    Type7 interface{}

    // OSPF SNMP context configuration. The type is string.
    SnmpContext interface{}

    // Max number of interfaces allowed to be configured. The type is interface{}
    // with range: 1..4294967295. The default value is 1024.
    MaximumInterfaces interface{}

    // Disable opaque LSAs. The type is interface{}.
    NoOpaque interface{}

    // Configure a route-policy for prioritizing RIB route install. The type is
    // string.
    SpfPrefixPriority interface{}

    // Forward packets over multiple paths (number of paths). The type is
    // interface{} with range: 1..64.
    MaximumPaths interface{}

    // Log changes in adjacency state. The type is OspfLogAdj.
    AdjacencyChanges interface{}

    // Set default metric of redistributed routes. The type is interface{} with
    // range: 1..16777214. The default value is 1.
    DefaultMetric interface{}

    // Enable convergence monitoring.
    MonitorConvergence Ospf_Processes_Process_DefaultVrf_MonitorConvergence

    // Segment Routing instance scoped parameters.
    SegmentRouting Ospf_Processes_Process_DefaultVrf_SegmentRouting

    // Configure MPLS routing protocol parameters.
    Mpls Ospf_Processes_Process_DefaultVrf_Mpls

    // Microloop configuration.
    Microloop Ospf_Processes_Process_DefaultVrf_Microloop

    // Maximum number of prefixes redistributed into OSPF.
    MaximumRedistributePrefix Ospf_Processes_Process_DefaultVrf_MaximumRedistributePrefix

    // Control distribution of default information.
    DefaultInformation Ospf_Processes_Process_DefaultVrf_DefaultInformation

    // OSPF address family.
    Af Ospf_Processes_Process_DefaultVrf_Af

    // Adjust OSPF input queue sizes and processing quantums.
    Queue Ospf_Processes_Process_DefaultVrf_Queue

    // Set maximum metric configuration.
    MaxMetric Ospf_Processes_Process_DefaultVrf_MaxMetric

    // Non Stop Forwarding configuration.
    Nsf Ospf_Processes_Process_DefaultVrf_Nsf

    // Process scope configuration.
    ProcessScope Ospf_Processes_Process_DefaultVrf_ProcessScope

    // Redistribute configurations.
    Redistribution Ospf_Processes_Process_DefaultVrf_Redistribution

    // Staggering OSPF adjacency bring up.
    AdjacencyStagger Ospf_Processes_Process_DefaultVrf_AdjacencyStagger

    // Set max-lsa configuration.
    MaxLsa Ospf_Processes_Process_DefaultVrf_MaxLsa

    // Controls automatic cost based on bandwidth.
    AutoCost Ospf_Processes_Process_DefaultVrf_AutoCost

    // Unequal Cost Multi-ptah configuration.
    Ucmp Ospf_Processes_Process_DefaultVrf_Ucmp

    // Fast-reroute instance scoped parameters.
    FastReroute Ospf_Processes_Process_DefaultVrf_FastReroute

    // Configure IP prefix summary.
    SummaryPrefixes Ospf_Processes_Process_DefaultVrf_SummaryPrefixes

    // Filter outgoing routing updates.
    OutgoingRouteUpdates Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates

    // Administrative distance configuration.
    Distance Ospf_Processes_Process_DefaultVrf_Distance

    // Area configuration.
    AreaAddresses Ospf_Processes_Process_DefaultVrf_AreaAddresses

    // Adjust routing timers.
    Timers Ospf_Processes_Process_DefaultVrf_Timers
}

func (defaultVrf *Ospf_Processes_Process_DefaultVrf) GetEntityData() *types.CommonEntityData {
    defaultVrf.EntityData.YFilter = defaultVrf.YFilter
    defaultVrf.EntityData.YangName = "default-vrf"
    defaultVrf.EntityData.BundleName = "cisco_ios_xr"
    defaultVrf.EntityData.ParentYangName = "process"
    defaultVrf.EntityData.SegmentPath = "default-vrf"
    defaultVrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultVrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultVrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultVrf.EntityData.Children = make(map[string]types.YChild)
    defaultVrf.EntityData.Children["monitor-convergence"] = types.YChild{"MonitorConvergence", &defaultVrf.MonitorConvergence}
    defaultVrf.EntityData.Children["segment-routing"] = types.YChild{"SegmentRouting", &defaultVrf.SegmentRouting}
    defaultVrf.EntityData.Children["mpls"] = types.YChild{"Mpls", &defaultVrf.Mpls}
    defaultVrf.EntityData.Children["microloop"] = types.YChild{"Microloop", &defaultVrf.Microloop}
    defaultVrf.EntityData.Children["maximum-redistribute-prefix"] = types.YChild{"MaximumRedistributePrefix", &defaultVrf.MaximumRedistributePrefix}
    defaultVrf.EntityData.Children["default-information"] = types.YChild{"DefaultInformation", &defaultVrf.DefaultInformation}
    defaultVrf.EntityData.Children["af"] = types.YChild{"Af", &defaultVrf.Af}
    defaultVrf.EntityData.Children["queue"] = types.YChild{"Queue", &defaultVrf.Queue}
    defaultVrf.EntityData.Children["max-metric"] = types.YChild{"MaxMetric", &defaultVrf.MaxMetric}
    defaultVrf.EntityData.Children["nsf"] = types.YChild{"Nsf", &defaultVrf.Nsf}
    defaultVrf.EntityData.Children["process-scope"] = types.YChild{"ProcessScope", &defaultVrf.ProcessScope}
    defaultVrf.EntityData.Children["redistribution"] = types.YChild{"Redistribution", &defaultVrf.Redistribution}
    defaultVrf.EntityData.Children["adjacency-stagger"] = types.YChild{"AdjacencyStagger", &defaultVrf.AdjacencyStagger}
    defaultVrf.EntityData.Children["max-lsa"] = types.YChild{"MaxLsa", &defaultVrf.MaxLsa}
    defaultVrf.EntityData.Children["auto-cost"] = types.YChild{"AutoCost", &defaultVrf.AutoCost}
    defaultVrf.EntityData.Children["ucmp"] = types.YChild{"Ucmp", &defaultVrf.Ucmp}
    defaultVrf.EntityData.Children["fast-reroute"] = types.YChild{"FastReroute", &defaultVrf.FastReroute}
    defaultVrf.EntityData.Children["summary-prefixes"] = types.YChild{"SummaryPrefixes", &defaultVrf.SummaryPrefixes}
    defaultVrf.EntityData.Children["outgoing-route-updates"] = types.YChild{"OutgoingRouteUpdates", &defaultVrf.OutgoingRouteUpdates}
    defaultVrf.EntityData.Children["distance"] = types.YChild{"Distance", &defaultVrf.Distance}
    defaultVrf.EntityData.Children["area-addresses"] = types.YChild{"AreaAddresses", &defaultVrf.AreaAddresses}
    defaultVrf.EntityData.Children["timers"] = types.YChild{"Timers", &defaultVrf.Timers}
    defaultVrf.EntityData.Leafs = make(map[string]types.YLeaf)
    defaultVrf.EntityData.Leafs["ignore-mospf"] = types.YLeaf{"IgnoreMospf", defaultVrf.IgnoreMospf}
    defaultVrf.EntityData.Leafs["router-id"] = types.YLeaf{"RouterId", defaultVrf.RouterId}
    defaultVrf.EntityData.Leafs["type7"] = types.YLeaf{"Type7", defaultVrf.Type7}
    defaultVrf.EntityData.Leafs["snmp-context"] = types.YLeaf{"SnmpContext", defaultVrf.SnmpContext}
    defaultVrf.EntityData.Leafs["maximum-interfaces"] = types.YLeaf{"MaximumInterfaces", defaultVrf.MaximumInterfaces}
    defaultVrf.EntityData.Leafs["no-opaque"] = types.YLeaf{"NoOpaque", defaultVrf.NoOpaque}
    defaultVrf.EntityData.Leafs["spf-prefix-priority"] = types.YLeaf{"SpfPrefixPriority", defaultVrf.SpfPrefixPriority}
    defaultVrf.EntityData.Leafs["maximum-paths"] = types.YLeaf{"MaximumPaths", defaultVrf.MaximumPaths}
    defaultVrf.EntityData.Leafs["adjacency-changes"] = types.YLeaf{"AdjacencyChanges", defaultVrf.AdjacencyChanges}
    defaultVrf.EntityData.Leafs["default-metric"] = types.YLeaf{"DefaultMetric", defaultVrf.DefaultMetric}
    return &(defaultVrf.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MonitorConvergence
// Enable convergence monitoring
type Ospf_Processes_Process_DefaultVrf_MonitorConvergence struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable convergence monitoring. The type is interface{}.
    Enable interface{}

    // Enable the monitoring of individual prefixes (prefix list name). The type
    // is string.
    PrefixList interface{}

    // Enable the Tracking of IP-Frr Convergence. The type is interface{}.
    TrackIpFrr interface{}

    // Enable the monitoring of External routes. The type is interface{}.
    TrackExternalRoutes interface{}

    // Enable the monitoring of Summary routes. The type is interface{}.
    TrackSummaryRoutes interface{}
}

func (monitorConvergence *Ospf_Processes_Process_DefaultVrf_MonitorConvergence) GetEntityData() *types.CommonEntityData {
    monitorConvergence.EntityData.YFilter = monitorConvergence.YFilter
    monitorConvergence.EntityData.YangName = "monitor-convergence"
    monitorConvergence.EntityData.BundleName = "cisco_ios_xr"
    monitorConvergence.EntityData.ParentYangName = "default-vrf"
    monitorConvergence.EntityData.SegmentPath = "monitor-convergence"
    monitorConvergence.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    monitorConvergence.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    monitorConvergence.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    monitorConvergence.EntityData.Children = make(map[string]types.YChild)
    monitorConvergence.EntityData.Leafs = make(map[string]types.YLeaf)
    monitorConvergence.EntityData.Leafs["enable"] = types.YLeaf{"Enable", monitorConvergence.Enable}
    monitorConvergence.EntityData.Leafs["prefix-list"] = types.YLeaf{"PrefixList", monitorConvergence.PrefixList}
    monitorConvergence.EntityData.Leafs["track-ip-frr"] = types.YLeaf{"TrackIpFrr", monitorConvergence.TrackIpFrr}
    monitorConvergence.EntityData.Leafs["track-external-routes"] = types.YLeaf{"TrackExternalRoutes", monitorConvergence.TrackExternalRoutes}
    monitorConvergence.EntityData.Leafs["track-summary-routes"] = types.YLeaf{"TrackSummaryRoutes", monitorConvergence.TrackSummaryRoutes}
    return &(monitorConvergence.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_SegmentRouting
// Segment Routing instance scoped parameters
type Ospf_Processes_Process_DefaultVrf_SegmentRouting struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Disable prefix-SID mapping client. The type is interface{}.
    PrefixSidMapReceiveDisable interface{}

    // Enable advertisement of local SRMS entries. The type is interface{}.
    PrefixSidMapAdvertiseLocal interface{}

    // Strict-SPF support and SID advertisement. The type is interface{}.
    StrictSpfDisable interface{}

    // Prefer segment routing labels over LDP labels.
    SrPrefer Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrPrefer
}

func (segmentRouting *Ospf_Processes_Process_DefaultVrf_SegmentRouting) GetEntityData() *types.CommonEntityData {
    segmentRouting.EntityData.YFilter = segmentRouting.YFilter
    segmentRouting.EntityData.YangName = "segment-routing"
    segmentRouting.EntityData.BundleName = "cisco_ios_xr"
    segmentRouting.EntityData.ParentYangName = "default-vrf"
    segmentRouting.EntityData.SegmentPath = "segment-routing"
    segmentRouting.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRouting.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRouting.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRouting.EntityData.Children = make(map[string]types.YChild)
    segmentRouting.EntityData.Children["sr-prefer"] = types.YChild{"SrPrefer", &segmentRouting.SrPrefer}
    segmentRouting.EntityData.Leafs = make(map[string]types.YLeaf)
    segmentRouting.EntityData.Leafs["prefix-sid-map-receive-disable"] = types.YLeaf{"PrefixSidMapReceiveDisable", segmentRouting.PrefixSidMapReceiveDisable}
    segmentRouting.EntityData.Leafs["prefix-sid-map-advertise-local"] = types.YLeaf{"PrefixSidMapAdvertiseLocal", segmentRouting.PrefixSidMapAdvertiseLocal}
    segmentRouting.EntityData.Leafs["strict-spf-disable"] = types.YLeaf{"StrictSpfDisable", segmentRouting.StrictSpfDisable}
    return &(segmentRouting.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrPrefer
// Prefer segment routing labels over LDP
// labels
type Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrPrefer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable SR labels to be preferred over LDP labels. The type is bool.
    Enable interface{}

    // Name of the Prefix List. The type is string.
    PrefixListName interface{}
}

func (srPrefer *Ospf_Processes_Process_DefaultVrf_SegmentRouting_SrPrefer) GetEntityData() *types.CommonEntityData {
    srPrefer.EntityData.YFilter = srPrefer.YFilter
    srPrefer.EntityData.YangName = "sr-prefer"
    srPrefer.EntityData.BundleName = "cisco_ios_xr"
    srPrefer.EntityData.ParentYangName = "segment-routing"
    srPrefer.EntityData.SegmentPath = "sr-prefer"
    srPrefer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srPrefer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srPrefer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srPrefer.EntityData.Children = make(map[string]types.YChild)
    srPrefer.EntityData.Leafs = make(map[string]types.YLeaf)
    srPrefer.EntityData.Leafs["enable"] = types.YLeaf{"Enable", srPrefer.Enable}
    srPrefer.EntityData.Leafs["prefix-list-name"] = types.YLeaf{"PrefixListName", srPrefer.PrefixListName}
    return &(srPrefer.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Mpls
// Configure MPLS routing protocol parameters
type Ospf_Processes_Process_DefaultVrf_Mpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable igp-intact mode in OSPF. The type is interface{}.
    IgpIntact interface{}

    // Enable LDP sync induced metric propagation. The type is interface{}.
    LdpSyncUpdate interface{}

    // Enable multicast-intact mode in OSPF. The type is interface{}.
    MulticastIntact interface{}

    // Exclude IP destinations from using TE tunnels. The type is string.
    AutorouteExclude interface{}

    // MPLS-TE stable loopback address for this OSPF process.Enter either as IP
    // Address or Interface name, but not both. Unused field must be nil.
    MplsRouterId Ospf_Processes_Process_DefaultVrf_Mpls_MplsRouterId
}

func (mpls *Ospf_Processes_Process_DefaultVrf_Mpls) GetEntityData() *types.CommonEntityData {
    mpls.EntityData.YFilter = mpls.YFilter
    mpls.EntityData.YangName = "mpls"
    mpls.EntityData.BundleName = "cisco_ios_xr"
    mpls.EntityData.ParentYangName = "default-vrf"
    mpls.EntityData.SegmentPath = "mpls"
    mpls.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mpls.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mpls.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mpls.EntityData.Children = make(map[string]types.YChild)
    mpls.EntityData.Children["mpls-router-id"] = types.YChild{"MplsRouterId", &mpls.MplsRouterId}
    mpls.EntityData.Leafs = make(map[string]types.YLeaf)
    mpls.EntityData.Leafs["igp-intact"] = types.YLeaf{"IgpIntact", mpls.IgpIntact}
    mpls.EntityData.Leafs["ldp-sync-update"] = types.YLeaf{"LdpSyncUpdate", mpls.LdpSyncUpdate}
    mpls.EntityData.Leafs["multicast-intact"] = types.YLeaf{"MulticastIntact", mpls.MulticastIntact}
    mpls.EntityData.Leafs["autoroute-exclude"] = types.YLeaf{"AutorouteExclude", mpls.AutorouteExclude}
    return &(mpls.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Mpls_MplsRouterId
// MPLS-TE stable loopback address for this
// OSPF process.Enter either as IP Address or
// Interface name, but not both. Unused field
// must be nil
type Ospf_Processes_Process_DefaultVrf_Mpls_MplsRouterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS-TE stable IP address for this OSPF process. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Address interface{}

    // MPLS-TE stable loopback interface for this OSPF process. The type is string
    // with pattern: b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (mplsRouterId *Ospf_Processes_Process_DefaultVrf_Mpls_MplsRouterId) GetEntityData() *types.CommonEntityData {
    mplsRouterId.EntityData.YFilter = mplsRouterId.YFilter
    mplsRouterId.EntityData.YangName = "mpls-router-id"
    mplsRouterId.EntityData.BundleName = "cisco_ios_xr"
    mplsRouterId.EntityData.ParentYangName = "mpls"
    mplsRouterId.EntityData.SegmentPath = "mpls-router-id"
    mplsRouterId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsRouterId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsRouterId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsRouterId.EntityData.Children = make(map[string]types.YChild)
    mplsRouterId.EntityData.Leafs = make(map[string]types.YLeaf)
    mplsRouterId.EntityData.Leafs["address"] = types.YLeaf{"Address", mplsRouterId.Address}
    mplsRouterId.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", mplsRouterId.InterfaceName}
    return &(mplsRouterId.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Microloop
// Microloop configuration
type Ospf_Processes_Process_DefaultVrf_Microloop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Microloop avoidance configuration.
    Avoidance Ospf_Processes_Process_DefaultVrf_Microloop_Avoidance
}

func (microloop *Ospf_Processes_Process_DefaultVrf_Microloop) GetEntityData() *types.CommonEntityData {
    microloop.EntityData.YFilter = microloop.YFilter
    microloop.EntityData.YangName = "microloop"
    microloop.EntityData.BundleName = "cisco_ios_xr"
    microloop.EntityData.ParentYangName = "default-vrf"
    microloop.EntityData.SegmentPath = "microloop"
    microloop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    microloop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    microloop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    microloop.EntityData.Children = make(map[string]types.YChild)
    microloop.EntityData.Children["avoidance"] = types.YChild{"Avoidance", &microloop.Avoidance}
    microloop.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(microloop.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Microloop_Avoidance
// Microloop avoidance configuration
type Ospf_Processes_Process_DefaultVrf_Microloop_Avoidance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MicroLoop avoidance feature enable configuration. The type is
    // OspfUloopAvoidance. The default value is all.
    Enable interface{}

    // Delay to introduce between SPF and RIB update in msecs. The type is
    // interface{} with range: 1..600000. Units are millisecond. The default value
    // is 5000.
    RibUpdateDelay interface{}
}

func (avoidance *Ospf_Processes_Process_DefaultVrf_Microloop_Avoidance) GetEntityData() *types.CommonEntityData {
    avoidance.EntityData.YFilter = avoidance.YFilter
    avoidance.EntityData.YangName = "avoidance"
    avoidance.EntityData.BundleName = "cisco_ios_xr"
    avoidance.EntityData.ParentYangName = "microloop"
    avoidance.EntityData.SegmentPath = "avoidance"
    avoidance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    avoidance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    avoidance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    avoidance.EntityData.Children = make(map[string]types.YChild)
    avoidance.EntityData.Leafs = make(map[string]types.YLeaf)
    avoidance.EntityData.Leafs["enable"] = types.YLeaf{"Enable", avoidance.Enable}
    avoidance.EntityData.Leafs["rib-update-delay"] = types.YLeaf{"RibUpdateDelay", avoidance.RibUpdateDelay}
    return &(avoidance.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MaximumRedistributePrefix
// Maximum number of prefixes redistributed into
// OSPF
type Ospf_Processes_Process_DefaultVrf_MaximumRedistributePrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of prefixes redistributed. The type is interface{} with
    // range: 1..4294967295.
    NumberOfPrefixes interface{}

    // Threshold value (%) at which to generate a warning msg. The type is
    // interface{} with range: 1..100.
    Threshold interface{}

    // Only give warning messsage when limit is exceeded. The type is bool.
    WarningOnly interface{}
}

func (maximumRedistributePrefix *Ospf_Processes_Process_DefaultVrf_MaximumRedistributePrefix) GetEntityData() *types.CommonEntityData {
    maximumRedistributePrefix.EntityData.YFilter = maximumRedistributePrefix.YFilter
    maximumRedistributePrefix.EntityData.YangName = "maximum-redistribute-prefix"
    maximumRedistributePrefix.EntityData.BundleName = "cisco_ios_xr"
    maximumRedistributePrefix.EntityData.ParentYangName = "default-vrf"
    maximumRedistributePrefix.EntityData.SegmentPath = "maximum-redistribute-prefix"
    maximumRedistributePrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maximumRedistributePrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maximumRedistributePrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maximumRedistributePrefix.EntityData.Children = make(map[string]types.YChild)
    maximumRedistributePrefix.EntityData.Leafs = make(map[string]types.YLeaf)
    maximumRedistributePrefix.EntityData.Leafs["number-of-prefixes"] = types.YLeaf{"NumberOfPrefixes", maximumRedistributePrefix.NumberOfPrefixes}
    maximumRedistributePrefix.EntityData.Leafs["threshold"] = types.YLeaf{"Threshold", maximumRedistributePrefix.Threshold}
    maximumRedistributePrefix.EntityData.Leafs["warning-only"] = types.YLeaf{"WarningOnly", maximumRedistributePrefix.WarningOnly}
    return &(maximumRedistributePrefix.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_DefaultInformation
// Control distribution of default information
type Ospf_Processes_Process_DefaultVrf_DefaultInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Always advertise default route. The type is bool. The default value is
    // false.
    AlwaysAdvertise interface{}

    // OSPF metric. The type is interface{} with range: 1..16777214. The default
    // value is 1.
    Metric interface{}

    // OSPF External metric type. The type is OspfLinkStateMetric. The default
    // value is type2.
    MetricType interface{}

    // Routing policy name. The type is string.
    RoutePolicyName interface{}
}

func (defaultInformation *Ospf_Processes_Process_DefaultVrf_DefaultInformation) GetEntityData() *types.CommonEntityData {
    defaultInformation.EntityData.YFilter = defaultInformation.YFilter
    defaultInformation.EntityData.YangName = "default-information"
    defaultInformation.EntityData.BundleName = "cisco_ios_xr"
    defaultInformation.EntityData.ParentYangName = "default-vrf"
    defaultInformation.EntityData.SegmentPath = "default-information"
    defaultInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultInformation.EntityData.Children = make(map[string]types.YChild)
    defaultInformation.EntityData.Leafs = make(map[string]types.YLeaf)
    defaultInformation.EntityData.Leafs["always-advertise"] = types.YLeaf{"AlwaysAdvertise", defaultInformation.AlwaysAdvertise}
    defaultInformation.EntityData.Leafs["metric"] = types.YLeaf{"Metric", defaultInformation.Metric}
    defaultInformation.EntityData.Leafs["metric-type"] = types.YLeaf{"MetricType", defaultInformation.MetricType}
    defaultInformation.EntityData.Leafs["route-policy-name"] = types.YLeaf{"RoutePolicyName", defaultInformation.RoutePolicyName}
    return &(defaultInformation.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Af
// OSPF address family
// This type is a presence type.
type Ospf_Processes_Process_DefaultVrf_Af struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is OspfAddressFamily. This attribute is mandatory.
    AfName interface{}

    // Sub-Address family. The type is OspfSubAddressFamily.
    SafName interface{}
}

func (af *Ospf_Processes_Process_DefaultVrf_Af) GetEntityData() *types.CommonEntityData {
    af.EntityData.YFilter = af.YFilter
    af.EntityData.YangName = "af"
    af.EntityData.BundleName = "cisco_ios_xr"
    af.EntityData.ParentYangName = "default-vrf"
    af.EntityData.SegmentPath = "af"
    af.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    af.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    af.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    af.EntityData.Children = make(map[string]types.YChild)
    af.EntityData.Leafs = make(map[string]types.YLeaf)
    af.EntityData.Leafs["af-name"] = types.YLeaf{"AfName", af.AfName}
    af.EntityData.Leafs["saf-name"] = types.YLeaf{"SafName", af.SafName}
    return &(af.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Queue
// Adjust OSPF input queue sizes and processing
// quantums
type Ospf_Processes_Process_DefaultVrf_Queue struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of continuous rate-limited LSAs processed for FLUSH. The
    // type is interface{} with range: 30..3000. The default value is 150.
    DispatchRateLimitedFlush interface{}

    // Hello events are dropped when incoming event queue exceeds this. The type
    // is interface{} with range: 1000..30000. The default value is 9500.
    LimitHigh interface{}

    // Maximum number of continuous summary or external LSAs processed. The type
    // is interface{} with range: 30..3000. The default value is 150.
    DispatchSpfLsaLimit interface{}

    // DBDs/Updates are dropped when incoming event queue exceeds this. The type
    // is interface{} with range: 1000..30000. The default value is 8000.
    LimitLow interface{}

    // Maximum number of continuous rate-limited LSAs processed. The type is
    // interface{} with range: 30..3000. The default value is 150.
    DispatchRateLimited interface{}

    // LSA ACKs are dropped when incoming event queue exceeds this. The type is
    // interface{} with range: 1000..30000. The default value is 9000.
    LimitMedium interface{}

    // Maximum number of continuous incoming packet-related events processed. The
    // type is interface{} with range: 30..3000. The default value is 300.
    DispatchIncoming interface{}
}

func (queue *Ospf_Processes_Process_DefaultVrf_Queue) GetEntityData() *types.CommonEntityData {
    queue.EntityData.YFilter = queue.YFilter
    queue.EntityData.YangName = "queue"
    queue.EntityData.BundleName = "cisco_ios_xr"
    queue.EntityData.ParentYangName = "default-vrf"
    queue.EntityData.SegmentPath = "queue"
    queue.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    queue.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    queue.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    queue.EntityData.Children = make(map[string]types.YChild)
    queue.EntityData.Leafs = make(map[string]types.YLeaf)
    queue.EntityData.Leafs["dispatch-rate-limited-flush"] = types.YLeaf{"DispatchRateLimitedFlush", queue.DispatchRateLimitedFlush}
    queue.EntityData.Leafs["limit-high"] = types.YLeaf{"LimitHigh", queue.LimitHigh}
    queue.EntityData.Leafs["dispatch-spf-lsa-limit"] = types.YLeaf{"DispatchSpfLsaLimit", queue.DispatchSpfLsaLimit}
    queue.EntityData.Leafs["limit-low"] = types.YLeaf{"LimitLow", queue.LimitLow}
    queue.EntityData.Leafs["dispatch-rate-limited"] = types.YLeaf{"DispatchRateLimited", queue.DispatchRateLimited}
    queue.EntityData.Leafs["limit-medium"] = types.YLeaf{"LimitMedium", queue.LimitMedium}
    queue.EntityData.Leafs["dispatch-incoming"] = types.YLeaf{"DispatchIncoming", queue.DispatchIncoming}
    return &(queue.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MaxMetric
// Set maximum metric configuration
type Ospf_Processes_Process_DefaultVrf_MaxMetric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Block ABR-disable mode entry while in max-metric mode. The type is
    // interface{}.
    MaxMetricNoAbrOff interface{}

    // Set maximum metric on-proc-restart configuration.
    MaxMetricOnProcRestart Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcRestart

    // Set maximum metric on-startup configuration.
    MaxMetricOnStartup Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnStartup

    // Set maximum metric on-proc-migration configuration.
    MaxMetricOnProcMigration Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcMigration

    // Set maximum metric always configuration.
    MaxMetricAlways Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricAlways

    // Set maximum metric on-switchover configuration.
    MaxMetricOnSwitchover Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnSwitchover
}

func (maxMetric *Ospf_Processes_Process_DefaultVrf_MaxMetric) GetEntityData() *types.CommonEntityData {
    maxMetric.EntityData.YFilter = maxMetric.YFilter
    maxMetric.EntityData.YangName = "max-metric"
    maxMetric.EntityData.BundleName = "cisco_ios_xr"
    maxMetric.EntityData.ParentYangName = "default-vrf"
    maxMetric.EntityData.SegmentPath = "max-metric"
    maxMetric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxMetric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxMetric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxMetric.EntityData.Children = make(map[string]types.YChild)
    maxMetric.EntityData.Children["max-metric-on-proc-restart"] = types.YChild{"MaxMetricOnProcRestart", &maxMetric.MaxMetricOnProcRestart}
    maxMetric.EntityData.Children["max-metric-on-startup"] = types.YChild{"MaxMetricOnStartup", &maxMetric.MaxMetricOnStartup}
    maxMetric.EntityData.Children["max-metric-on-proc-migration"] = types.YChild{"MaxMetricOnProcMigration", &maxMetric.MaxMetricOnProcMigration}
    maxMetric.EntityData.Children["max-metric-always"] = types.YChild{"MaxMetricAlways", &maxMetric.MaxMetricAlways}
    maxMetric.EntityData.Children["max-metric-on-switchover"] = types.YChild{"MaxMetricOnSwitchover", &maxMetric.MaxMetricOnSwitchover}
    maxMetric.EntityData.Leafs = make(map[string]types.YLeaf)
    maxMetric.EntityData.Leafs["max-metric-no-abr-off"] = types.YLeaf{"MaxMetricNoAbrOff", maxMetric.MaxMetricNoAbrOff}
    return &(maxMetric.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcRestart
// Set maximum metric on-proc-restart
// configuration
type Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Let BGP decide when to originate router-LSA with normal metric. The type is
    // bool. The default value is false.
    WaitForBgp interface{}

    // Time in seconds to originate router-LSA with max-metric. The type is
    // interface{} with range: 5..86400. Units are second.
    StartupMax interface{}

    // Set maximum metric for stub links in router-LSAs. The type is bool.
    IncludeStub interface{}

    // Override summary-lsa metric with max-metric value. The type is bool.
    SummaryLsa interface{}

    // Overriding metric in summary-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    SummaryLsaMaximumMetric interface{}

    // Override external-lsa metric with max-metric value. The type is bool.
    ExternalLsa interface{}

    // Overriding metric in external-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    ExternalLsaMaximumMetric interface{}
}

func (maxMetricOnProcRestart *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcRestart) GetEntityData() *types.CommonEntityData {
    maxMetricOnProcRestart.EntityData.YFilter = maxMetricOnProcRestart.YFilter
    maxMetricOnProcRestart.EntityData.YangName = "max-metric-on-proc-restart"
    maxMetricOnProcRestart.EntityData.BundleName = "cisco_ios_xr"
    maxMetricOnProcRestart.EntityData.ParentYangName = "max-metric"
    maxMetricOnProcRestart.EntityData.SegmentPath = "max-metric-on-proc-restart"
    maxMetricOnProcRestart.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxMetricOnProcRestart.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxMetricOnProcRestart.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxMetricOnProcRestart.EntityData.Children = make(map[string]types.YChild)
    maxMetricOnProcRestart.EntityData.Leafs = make(map[string]types.YLeaf)
    maxMetricOnProcRestart.EntityData.Leafs["wait-for-bgp"] = types.YLeaf{"WaitForBgp", maxMetricOnProcRestart.WaitForBgp}
    maxMetricOnProcRestart.EntityData.Leafs["startup-max"] = types.YLeaf{"StartupMax", maxMetricOnProcRestart.StartupMax}
    maxMetricOnProcRestart.EntityData.Leafs["include-stub"] = types.YLeaf{"IncludeStub", maxMetricOnProcRestart.IncludeStub}
    maxMetricOnProcRestart.EntityData.Leafs["summary-lsa"] = types.YLeaf{"SummaryLsa", maxMetricOnProcRestart.SummaryLsa}
    maxMetricOnProcRestart.EntityData.Leafs["summary-lsa-maximum-metric"] = types.YLeaf{"SummaryLsaMaximumMetric", maxMetricOnProcRestart.SummaryLsaMaximumMetric}
    maxMetricOnProcRestart.EntityData.Leafs["external-lsa"] = types.YLeaf{"ExternalLsa", maxMetricOnProcRestart.ExternalLsa}
    maxMetricOnProcRestart.EntityData.Leafs["external-lsa-maximum-metric"] = types.YLeaf{"ExternalLsaMaximumMetric", maxMetricOnProcRestart.ExternalLsaMaximumMetric}
    return &(maxMetricOnProcRestart.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnStartup
// Set maximum metric on-startup configuration
type Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnStartup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Let BGP decide when to originate router-LSA with normal metric. The type is
    // bool. The default value is false.
    WaitForBgp interface{}

    // Time in seconds to originate router-LSA with max-metric. The type is
    // interface{} with range: 5..86400. Units are second.
    StartupMax interface{}

    // Set maximum metric for stub links in router-LSAs. The type is bool.
    IncludeStub interface{}

    // Override summary-lsa metric with max-metric value. The type is bool.
    SummaryLsa interface{}

    // Overriding metric in summary-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    SummaryLsaMaximumMetric interface{}

    // Override external-lsa metric with max-metric value. The type is bool.
    ExternalLsa interface{}

    // Overriding metric in external-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    ExternalLsaMaximumMetric interface{}
}

func (maxMetricOnStartup *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnStartup) GetEntityData() *types.CommonEntityData {
    maxMetricOnStartup.EntityData.YFilter = maxMetricOnStartup.YFilter
    maxMetricOnStartup.EntityData.YangName = "max-metric-on-startup"
    maxMetricOnStartup.EntityData.BundleName = "cisco_ios_xr"
    maxMetricOnStartup.EntityData.ParentYangName = "max-metric"
    maxMetricOnStartup.EntityData.SegmentPath = "max-metric-on-startup"
    maxMetricOnStartup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxMetricOnStartup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxMetricOnStartup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxMetricOnStartup.EntityData.Children = make(map[string]types.YChild)
    maxMetricOnStartup.EntityData.Leafs = make(map[string]types.YLeaf)
    maxMetricOnStartup.EntityData.Leafs["wait-for-bgp"] = types.YLeaf{"WaitForBgp", maxMetricOnStartup.WaitForBgp}
    maxMetricOnStartup.EntityData.Leafs["startup-max"] = types.YLeaf{"StartupMax", maxMetricOnStartup.StartupMax}
    maxMetricOnStartup.EntityData.Leafs["include-stub"] = types.YLeaf{"IncludeStub", maxMetricOnStartup.IncludeStub}
    maxMetricOnStartup.EntityData.Leafs["summary-lsa"] = types.YLeaf{"SummaryLsa", maxMetricOnStartup.SummaryLsa}
    maxMetricOnStartup.EntityData.Leafs["summary-lsa-maximum-metric"] = types.YLeaf{"SummaryLsaMaximumMetric", maxMetricOnStartup.SummaryLsaMaximumMetric}
    maxMetricOnStartup.EntityData.Leafs["external-lsa"] = types.YLeaf{"ExternalLsa", maxMetricOnStartup.ExternalLsa}
    maxMetricOnStartup.EntityData.Leafs["external-lsa-maximum-metric"] = types.YLeaf{"ExternalLsaMaximumMetric", maxMetricOnStartup.ExternalLsaMaximumMetric}
    return &(maxMetricOnStartup.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcMigration
// Set maximum metric on-proc-migration
// configuration
type Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcMigration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Let BGP decide when to originate router-LSA with normal metric. The type is
    // bool. The default value is false.
    WaitForBgp interface{}

    // Time in seconds to originate router-LSA with max-metric. The type is
    // interface{} with range: 5..86400. Units are second.
    StartupMax interface{}

    // Set maximum metric for stub links in router-LSAs. The type is bool.
    IncludeStub interface{}

    // Override summary-lsa metric with max-metric value. The type is bool.
    SummaryLsa interface{}

    // Overriding metric in summary-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    SummaryLsaMaximumMetric interface{}

    // Override external-lsa metric with max-metric value. The type is bool.
    ExternalLsa interface{}

    // Overriding metric in external-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    ExternalLsaMaximumMetric interface{}
}

func (maxMetricOnProcMigration *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnProcMigration) GetEntityData() *types.CommonEntityData {
    maxMetricOnProcMigration.EntityData.YFilter = maxMetricOnProcMigration.YFilter
    maxMetricOnProcMigration.EntityData.YangName = "max-metric-on-proc-migration"
    maxMetricOnProcMigration.EntityData.BundleName = "cisco_ios_xr"
    maxMetricOnProcMigration.EntityData.ParentYangName = "max-metric"
    maxMetricOnProcMigration.EntityData.SegmentPath = "max-metric-on-proc-migration"
    maxMetricOnProcMigration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxMetricOnProcMigration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxMetricOnProcMigration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxMetricOnProcMigration.EntityData.Children = make(map[string]types.YChild)
    maxMetricOnProcMigration.EntityData.Leafs = make(map[string]types.YLeaf)
    maxMetricOnProcMigration.EntityData.Leafs["wait-for-bgp"] = types.YLeaf{"WaitForBgp", maxMetricOnProcMigration.WaitForBgp}
    maxMetricOnProcMigration.EntityData.Leafs["startup-max"] = types.YLeaf{"StartupMax", maxMetricOnProcMigration.StartupMax}
    maxMetricOnProcMigration.EntityData.Leafs["include-stub"] = types.YLeaf{"IncludeStub", maxMetricOnProcMigration.IncludeStub}
    maxMetricOnProcMigration.EntityData.Leafs["summary-lsa"] = types.YLeaf{"SummaryLsa", maxMetricOnProcMigration.SummaryLsa}
    maxMetricOnProcMigration.EntityData.Leafs["summary-lsa-maximum-metric"] = types.YLeaf{"SummaryLsaMaximumMetric", maxMetricOnProcMigration.SummaryLsaMaximumMetric}
    maxMetricOnProcMigration.EntityData.Leafs["external-lsa"] = types.YLeaf{"ExternalLsa", maxMetricOnProcMigration.ExternalLsa}
    maxMetricOnProcMigration.EntityData.Leafs["external-lsa-maximum-metric"] = types.YLeaf{"ExternalLsaMaximumMetric", maxMetricOnProcMigration.ExternalLsaMaximumMetric}
    return &(maxMetricOnProcMigration.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricAlways
// Set maximum metric always configuration
type Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricAlways struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set maximum metric for stub links in router-LSAs. The type is bool. The
    // default value is false.
    IncludeStub interface{}

    // Override summary-lsa metric with max-metric value. The type is bool.
    SummaryLsa interface{}

    // Overriding metric in summary-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    SummaryLsaMaximumMetric interface{}

    // Override external-lsa metric with max-metric value. The type is bool.
    ExternalLsa interface{}

    // Overriding metric in external-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    ExternalLsaMaximumMetric interface{}
}

func (maxMetricAlways *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricAlways) GetEntityData() *types.CommonEntityData {
    maxMetricAlways.EntityData.YFilter = maxMetricAlways.YFilter
    maxMetricAlways.EntityData.YangName = "max-metric-always"
    maxMetricAlways.EntityData.BundleName = "cisco_ios_xr"
    maxMetricAlways.EntityData.ParentYangName = "max-metric"
    maxMetricAlways.EntityData.SegmentPath = "max-metric-always"
    maxMetricAlways.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxMetricAlways.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxMetricAlways.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxMetricAlways.EntityData.Children = make(map[string]types.YChild)
    maxMetricAlways.EntityData.Leafs = make(map[string]types.YLeaf)
    maxMetricAlways.EntityData.Leafs["include-stub"] = types.YLeaf{"IncludeStub", maxMetricAlways.IncludeStub}
    maxMetricAlways.EntityData.Leafs["summary-lsa"] = types.YLeaf{"SummaryLsa", maxMetricAlways.SummaryLsa}
    maxMetricAlways.EntityData.Leafs["summary-lsa-maximum-metric"] = types.YLeaf{"SummaryLsaMaximumMetric", maxMetricAlways.SummaryLsaMaximumMetric}
    maxMetricAlways.EntityData.Leafs["external-lsa"] = types.YLeaf{"ExternalLsa", maxMetricAlways.ExternalLsa}
    maxMetricAlways.EntityData.Leafs["external-lsa-maximum-metric"] = types.YLeaf{"ExternalLsaMaximumMetric", maxMetricAlways.ExternalLsaMaximumMetric}
    return &(maxMetricAlways.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnSwitchover
// Set maximum metric on-switchover configuration
type Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnSwitchover struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Let BGP decide when to originate router-LSA with normal metric. The type is
    // bool. The default value is false.
    WaitForBgp interface{}

    // Time in seconds to originate router-LSA with max-metric. The type is
    // interface{} with range: 5..86400. Units are second.
    StartupMax interface{}

    // Set maximum metric for stub links in router-LSAs. The type is bool.
    IncludeStub interface{}

    // Override summary-lsa metric with max-metric value. The type is bool.
    SummaryLsa interface{}

    // Overriding metric in summary-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    SummaryLsaMaximumMetric interface{}

    // Override external-lsa metric with max-metric value. The type is bool.
    ExternalLsa interface{}

    // Overriding metric in external-LSAs (default 16711680). The type is
    // interface{} with range: 1..16777215.
    ExternalLsaMaximumMetric interface{}
}

func (maxMetricOnSwitchover *Ospf_Processes_Process_DefaultVrf_MaxMetric_MaxMetricOnSwitchover) GetEntityData() *types.CommonEntityData {
    maxMetricOnSwitchover.EntityData.YFilter = maxMetricOnSwitchover.YFilter
    maxMetricOnSwitchover.EntityData.YangName = "max-metric-on-switchover"
    maxMetricOnSwitchover.EntityData.BundleName = "cisco_ios_xr"
    maxMetricOnSwitchover.EntityData.ParentYangName = "max-metric"
    maxMetricOnSwitchover.EntityData.SegmentPath = "max-metric-on-switchover"
    maxMetricOnSwitchover.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxMetricOnSwitchover.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxMetricOnSwitchover.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxMetricOnSwitchover.EntityData.Children = make(map[string]types.YChild)
    maxMetricOnSwitchover.EntityData.Leafs = make(map[string]types.YLeaf)
    maxMetricOnSwitchover.EntityData.Leafs["wait-for-bgp"] = types.YLeaf{"WaitForBgp", maxMetricOnSwitchover.WaitForBgp}
    maxMetricOnSwitchover.EntityData.Leafs["startup-max"] = types.YLeaf{"StartupMax", maxMetricOnSwitchover.StartupMax}
    maxMetricOnSwitchover.EntityData.Leafs["include-stub"] = types.YLeaf{"IncludeStub", maxMetricOnSwitchover.IncludeStub}
    maxMetricOnSwitchover.EntityData.Leafs["summary-lsa"] = types.YLeaf{"SummaryLsa", maxMetricOnSwitchover.SummaryLsa}
    maxMetricOnSwitchover.EntityData.Leafs["summary-lsa-maximum-metric"] = types.YLeaf{"SummaryLsaMaximumMetric", maxMetricOnSwitchover.SummaryLsaMaximumMetric}
    maxMetricOnSwitchover.EntityData.Leafs["external-lsa"] = types.YLeaf{"ExternalLsa", maxMetricOnSwitchover.ExternalLsa}
    maxMetricOnSwitchover.EntityData.Leafs["external-lsa-maximum-metric"] = types.YLeaf{"ExternalLsaMaximumMetric", maxMetricOnSwitchover.ExternalLsaMaximumMetric}
    return &(maxMetricOnSwitchover.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Nsf
// Non Stop Forwarding configuration
type Ospf_Processes_Process_DefaultVrf_Nsf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum route lifetime following restart in seconds. The type is
    // interface{} with range: 90..1800. Units are second. The default value is
    // 90.
    Lifetime interface{}

    // Enable IETF Non Stop Forwarding. The type is OspfIetfNsf.
    Ietf interface{}

    // Disable helper support role for IETF Non Stop Forwarding. The type is
    // OspfIetfNsfSupport.
    IetfSupportRole interface{}

    // Enable Cisco Non Stop Forwarding. The type is OspfCiscoNsf.
    Cisco interface{}

    // Minimum interval between Non Stop Forwarding restarts in seconds. The type
    // is interface{} with range: 90..3600. Units are second. The default value is
    // 90.
    Interval interface{}

    // Maximum time allowed for external route learning (seconds). The type is
    // interface{} with range: 1..3600. Units are second. The default value is 60.
    FlushDelayTime interface{}

    // Enable Strict LSA checking of IETF NSF. The type is interface{}.
    IetfStrictLsaChecking interface{}
}

func (nsf *Ospf_Processes_Process_DefaultVrf_Nsf) GetEntityData() *types.CommonEntityData {
    nsf.EntityData.YFilter = nsf.YFilter
    nsf.EntityData.YangName = "nsf"
    nsf.EntityData.BundleName = "cisco_ios_xr"
    nsf.EntityData.ParentYangName = "default-vrf"
    nsf.EntityData.SegmentPath = "nsf"
    nsf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsf.EntityData.Children = make(map[string]types.YChild)
    nsf.EntityData.Leafs = make(map[string]types.YLeaf)
    nsf.EntityData.Leafs["lifetime"] = types.YLeaf{"Lifetime", nsf.Lifetime}
    nsf.EntityData.Leafs["ietf"] = types.YLeaf{"Ietf", nsf.Ietf}
    nsf.EntityData.Leafs["ietf-support-role"] = types.YLeaf{"IetfSupportRole", nsf.IetfSupportRole}
    nsf.EntityData.Leafs["cisco"] = types.YLeaf{"Cisco", nsf.Cisco}
    nsf.EntityData.Leafs["interval"] = types.YLeaf{"Interval", nsf.Interval}
    nsf.EntityData.Leafs["flush-delay-time"] = types.YLeaf{"FlushDelayTime", nsf.FlushDelayTime}
    nsf.EntityData.Leafs["ietf-strict-lsa-checking"] = types.YLeaf{"IetfStrictLsaChecking", nsf.IetfStrictLsaChecking}
    return &(nsf.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessScope
// Process scope configuration
type Ospf_Processes_Process_DefaultVrf_ProcessScope struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Enable/Disable an OSPF area to advertise intra-area prefixes out of this
    // area as external. The type is bool.
    ExternalOut interface{}

    // Enable/Disable prefix suppression for primary addresses. The type is bool.
    // The default value is false.
    PrefixSuppressionPrimary interface{}

    // Enable/Disable ignoring of MTU in DBD packets. The type is bool. The
    // default value is false.
    MtuIgnore interface{}

    // Enable/Disable MPLS LDP sync for igp-shortcuts. The type is bool.
    LdpSyncIgpShortcuts interface{}

    // Enable MPLS LDP Auto Config. The type is interface{}.
    LdpAutoConfig interface{}

    // Enable/Disable an OSPF area to advertise external prefixes into this area
    // as summary. The type is bool.
    SummaryIn interface{}

    // Type of attached network. The type is OspfNetwork.
    NetworkType interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Enable/Disable advertising loopback as a stub network. The type is bool.
    // The default value is false.
    LoopbackStubNetwork interface{}

    // Enable/Disable prefix suppression for secondary addresses. The type is
    // bool. The default value is false.
    PrefixSuppressionSecondary interface{}

    // Enable/Disable OSPF demand circuit. The type is bool. The default value is
    // false.
    DemandCircuit interface{}

    // segment-routing configuration Applicable only in Default VRF. The type is
    // OspfSegmentRouting.
    SegmentRouting interface{}

    // When enabled, prevent sending HELLO packets over link. The type is bool.
    // The default value is false.
    Passive interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Customize size of OSPF packets upto MTU. The type is interface{} with
    // range: 576..10000.
    PacketSize interface{}

    // Enable/Disable MPLS LDP sync. The type is bool.
    LdpSync interface{}

    // Filter OSPF LSA during synchronization and flooding. The type is bool. The
    // default value is false.
    DatabaseFilter interface{}

    // Enable/Disable registration for early interface down notifications. The
    // type is bool. The default value is false.
    LinkDownFastDetect interface{}

    // segment-routing forwarding configuration Applicableonly in Default VRF. The
    // type is OspfSegmentRoutingForwarding.
    SegmentRoutingForwarding interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Router priority for DR and BDR election. The type is interface{} with
    // range: 0..255. The default value is 1.
    Priority interface{}

    // Enable/Disable OSPF flood reduction. The type is bool. The default value is
    // false.
    FloodReduction interface{}

    // Segment Routing Global Block configuration.
    Srgb Ospf_Processes_Process_DefaultVrf_ProcessScope_Srgb

    // Fast-reroute configuration.
    FastReroute Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute

    // Filter networks intalled to RIB (disable as ACL name means filtering is
    // disabled).
    DistributeList Ospf_Processes_Process_DefaultVrf_ProcessScope_DistributeList

    // BFD configuration.
    Bfd Ospf_Processes_Process_DefaultVrf_ProcessScope_Bfd

    // Authentication.
    Authentication Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication

    // Container class for security related configuration parameters.
    Security Ospf_Processes_Process_DefaultVrf_ProcessScope_Security

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_DefaultVrf_ProcessScope_DeadIntervalMinimal

    // Interface fallback cost.
    CostFallback Ospf_Processes_Process_DefaultVrf_ProcessScope_CostFallback
}

func (processScope *Ospf_Processes_Process_DefaultVrf_ProcessScope) GetEntityData() *types.CommonEntityData {
    processScope.EntityData.YFilter = processScope.YFilter
    processScope.EntityData.YangName = "process-scope"
    processScope.EntityData.BundleName = "cisco_ios_xr"
    processScope.EntityData.ParentYangName = "default-vrf"
    processScope.EntityData.SegmentPath = "process-scope"
    processScope.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    processScope.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    processScope.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    processScope.EntityData.Children = make(map[string]types.YChild)
    processScope.EntityData.Children["srgb"] = types.YChild{"Srgb", &processScope.Srgb}
    processScope.EntityData.Children["fast-reroute"] = types.YChild{"FastReroute", &processScope.FastReroute}
    processScope.EntityData.Children["distribute-list"] = types.YChild{"DistributeList", &processScope.DistributeList}
    processScope.EntityData.Children["bfd"] = types.YChild{"Bfd", &processScope.Bfd}
    processScope.EntityData.Children["authentication"] = types.YChild{"Authentication", &processScope.Authentication}
    processScope.EntityData.Children["security"] = types.YChild{"Security", &processScope.Security}
    processScope.EntityData.Children["dead-interval-minimal"] = types.YChild{"DeadIntervalMinimal", &processScope.DeadIntervalMinimal}
    processScope.EntityData.Children["cost-fallback"] = types.YChild{"CostFallback", &processScope.CostFallback}
    processScope.EntityData.Leafs = make(map[string]types.YLeaf)
    processScope.EntityData.Leafs["cost"] = types.YLeaf{"Cost", processScope.Cost}
    processScope.EntityData.Leafs["external-out"] = types.YLeaf{"ExternalOut", processScope.ExternalOut}
    processScope.EntityData.Leafs["prefix-suppression-primary"] = types.YLeaf{"PrefixSuppressionPrimary", processScope.PrefixSuppressionPrimary}
    processScope.EntityData.Leafs["mtu-ignore"] = types.YLeaf{"MtuIgnore", processScope.MtuIgnore}
    processScope.EntityData.Leafs["ldp-sync-igp-shortcuts"] = types.YLeaf{"LdpSyncIgpShortcuts", processScope.LdpSyncIgpShortcuts}
    processScope.EntityData.Leafs["ldp-auto-config"] = types.YLeaf{"LdpAutoConfig", processScope.LdpAutoConfig}
    processScope.EntityData.Leafs["summary-in"] = types.YLeaf{"SummaryIn", processScope.SummaryIn}
    processScope.EntityData.Leafs["network-type"] = types.YLeaf{"NetworkType", processScope.NetworkType}
    processScope.EntityData.Leafs["hello-interval"] = types.YLeaf{"HelloInterval", processScope.HelloInterval}
    processScope.EntityData.Leafs["loopback-stub-network"] = types.YLeaf{"LoopbackStubNetwork", processScope.LoopbackStubNetwork}
    processScope.EntityData.Leafs["prefix-suppression-secondary"] = types.YLeaf{"PrefixSuppressionSecondary", processScope.PrefixSuppressionSecondary}
    processScope.EntityData.Leafs["demand-circuit"] = types.YLeaf{"DemandCircuit", processScope.DemandCircuit}
    processScope.EntityData.Leafs["segment-routing"] = types.YLeaf{"SegmentRouting", processScope.SegmentRouting}
    processScope.EntityData.Leafs["passive"] = types.YLeaf{"Passive", processScope.Passive}
    processScope.EntityData.Leafs["transmit-delay"] = types.YLeaf{"TransmitDelay", processScope.TransmitDelay}
    processScope.EntityData.Leafs["packet-size"] = types.YLeaf{"PacketSize", processScope.PacketSize}
    processScope.EntityData.Leafs["ldp-sync"] = types.YLeaf{"LdpSync", processScope.LdpSync}
    processScope.EntityData.Leafs["database-filter"] = types.YLeaf{"DatabaseFilter", processScope.DatabaseFilter}
    processScope.EntityData.Leafs["link-down-fast-detect"] = types.YLeaf{"LinkDownFastDetect", processScope.LinkDownFastDetect}
    processScope.EntityData.Leafs["segment-routing-forwarding"] = types.YLeaf{"SegmentRoutingForwarding", processScope.SegmentRoutingForwarding}
    processScope.EntityData.Leafs["retransmit-interval"] = types.YLeaf{"RetransmitInterval", processScope.RetransmitInterval}
    processScope.EntityData.Leafs["priority"] = types.YLeaf{"Priority", processScope.Priority}
    processScope.EntityData.Leafs["flood-reduction"] = types.YLeaf{"FloodReduction", processScope.FloodReduction}
    return &(processScope.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessScope_Srgb
// Segment Routing Global Block configuration
// This type is a presence type.
type Ospf_Processes_Process_DefaultVrf_ProcessScope_Srgb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The lower bound of the SRGB. The type is interface{} with range:
    // 16000..1048575. This attribute is mandatory.
    LowerBound interface{}

    // The upper bound of the SRGB. The type is interface{} with range:
    // 16000..1048575. This attribute is mandatory.
    UpperBound interface{}
}

func (srgb *Ospf_Processes_Process_DefaultVrf_ProcessScope_Srgb) GetEntityData() *types.CommonEntityData {
    srgb.EntityData.YFilter = srgb.YFilter
    srgb.EntityData.YangName = "srgb"
    srgb.EntityData.BundleName = "cisco_ios_xr"
    srgb.EntityData.ParentYangName = "process-scope"
    srgb.EntityData.SegmentPath = "srgb"
    srgb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srgb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srgb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srgb.EntityData.Children = make(map[string]types.YChild)
    srgb.EntityData.Leafs = make(map[string]types.YLeaf)
    srgb.EntityData.Leafs["lower-bound"] = types.YLeaf{"LowerBound", srgb.LowerBound}
    srgb.EntityData.Leafs["upper-bound"] = types.YLeaf{"UpperBound", srgb.UpperBound}
    return &(srgb.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute
// Fast-reroute configuration
type Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // OspfProcFastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink

    // Fast-reroute per-prefix configuration.
    PerPrefix Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute) GetEntityData() *types.CommonEntityData {
    fastReroute.EntityData.YFilter = fastReroute.YFilter
    fastReroute.EntityData.YangName = "fast-reroute"
    fastReroute.EntityData.BundleName = "cisco_ios_xr"
    fastReroute.EntityData.ParentYangName = "process-scope"
    fastReroute.EntityData.SegmentPath = "fast-reroute"
    fastReroute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fastReroute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fastReroute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fastReroute.EntityData.Children = make(map[string]types.YChild)
    fastReroute.EntityData.Children["per-link"] = types.YChild{"PerLink", &fastReroute.PerLink}
    fastReroute.EntityData.Children["per-prefix"] = types.YChild{"PerPrefix", &fastReroute.PerPrefix}
    fastReroute.EntityData.Leafs = make(map[string]types.YLeaf)
    fastReroute.EntityData.Leafs["fast-reroute-enable"] = types.YLeaf{"FastRerouteEnable", fastReroute.FastRerouteEnable}
    return &(fastReroute.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink) GetEntityData() *types.CommonEntityData {
    perLink.EntityData.YFilter = perLink.YFilter
    perLink.EntityData.YangName = "per-link"
    perLink.EntityData.BundleName = "cisco_ios_xr"
    perLink.EntityData.ParentYangName = "fast-reroute"
    perLink.EntityData.SegmentPath = "per-link"
    perLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perLink.EntityData.Children = make(map[string]types.YChild)
    perLink.EntityData.Children["candidate-interfaces"] = types.YChild{"CandidateInterfaces", &perLink.CandidateInterfaces}
    perLink.EntityData.Children["exclude-interfaces"] = types.YChild{"ExcludeInterfaces", &perLink.ExcludeInterfaces}
    perLink.EntityData.Leafs = make(map[string]types.YLeaf)
    perLink.EntityData.Leafs["fast-reroute-use-candidate-only"] = types.YLeaf{"FastRerouteUseCandidateOnly", perLink.FastRerouteUseCandidateOnly}
    return &(perLink.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetEntityData() *types.CommonEntityData {
    candidateInterfaces.EntityData.YFilter = candidateInterfaces.YFilter
    candidateInterfaces.EntityData.YangName = "candidate-interfaces"
    candidateInterfaces.EntityData.BundleName = "cisco_ios_xr"
    candidateInterfaces.EntityData.ParentYangName = "per-link"
    candidateInterfaces.EntityData.SegmentPath = "candidate-interfaces"
    candidateInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterfaces.EntityData.Children = make(map[string]types.YChild)
    candidateInterfaces.EntityData.Children["candidate-interface"] = types.YChild{"CandidateInterface", nil}
    for i := range candidateInterfaces.CandidateInterface {
        candidateInterfaces.EntityData.Children[types.GetSegmentPath(&candidateInterfaces.CandidateInterface[i])] = types.YChild{"CandidateInterface", &candidateInterfaces.CandidateInterface[i]}
    }
    candidateInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(candidateInterfaces.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetEntityData() *types.CommonEntityData {
    candidateInterface.EntityData.YFilter = candidateInterface.YFilter
    candidateInterface.EntityData.YangName = "candidate-interface"
    candidateInterface.EntityData.BundleName = "cisco_ios_xr"
    candidateInterface.EntityData.ParentYangName = "candidate-interfaces"
    candidateInterface.EntityData.SegmentPath = "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
    candidateInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterface.EntityData.Children = make(map[string]types.YChild)
    candidateInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    candidateInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", candidateInterface.InterfaceName}
    return &(candidateInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetEntityData() *types.CommonEntityData {
    excludeInterfaces.EntityData.YFilter = excludeInterfaces.YFilter
    excludeInterfaces.EntityData.YangName = "exclude-interfaces"
    excludeInterfaces.EntityData.BundleName = "cisco_ios_xr"
    excludeInterfaces.EntityData.ParentYangName = "per-link"
    excludeInterfaces.EntityData.SegmentPath = "exclude-interfaces"
    excludeInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterfaces.EntityData.Children = make(map[string]types.YChild)
    excludeInterfaces.EntityData.Children["exclude-interface"] = types.YChild{"ExcludeInterface", nil}
    for i := range excludeInterfaces.ExcludeInterface {
        excludeInterfaces.EntityData.Children[types.GetSegmentPath(&excludeInterfaces.ExcludeInterface[i])] = types.YChild{"ExcludeInterface", &excludeInterfaces.ExcludeInterface[i]}
    }
    excludeInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(excludeInterfaces.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetEntityData() *types.CommonEntityData {
    excludeInterface.EntityData.YFilter = excludeInterface.YFilter
    excludeInterface.EntityData.YangName = "exclude-interface"
    excludeInterface.EntityData.BundleName = "cisco_ios_xr"
    excludeInterface.EntityData.ParentYangName = "exclude-interfaces"
    excludeInterface.EntityData.SegmentPath = "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
    excludeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterface.EntityData.Children = make(map[string]types.YChild)
    excludeInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    excludeInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", excludeInterface.InterfaceName}
    return &(excludeInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix
// Fast-reroute per-prefix configuration
type Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology Independet LFA configuration. The type is bool.
    TopologyIndependentLfa interface{}

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Remote LFA configuration.
    RemoteLfa Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix) GetEntityData() *types.CommonEntityData {
    perPrefix.EntityData.YFilter = perPrefix.YFilter
    perPrefix.EntityData.YangName = "per-prefix"
    perPrefix.EntityData.BundleName = "cisco_ios_xr"
    perPrefix.EntityData.ParentYangName = "fast-reroute"
    perPrefix.EntityData.SegmentPath = "per-prefix"
    perPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perPrefix.EntityData.Children = make(map[string]types.YChild)
    perPrefix.EntityData.Children["remote-lfa"] = types.YChild{"RemoteLfa", &perPrefix.RemoteLfa}
    perPrefix.EntityData.Children["candidate-interfaces"] = types.YChild{"CandidateInterfaces", &perPrefix.CandidateInterfaces}
    perPrefix.EntityData.Children["exclude-interfaces"] = types.YChild{"ExcludeInterfaces", &perPrefix.ExcludeInterfaces}
    perPrefix.EntityData.Leafs = make(map[string]types.YLeaf)
    perPrefix.EntityData.Leafs["topology-independent-lfa"] = types.YLeaf{"TopologyIndependentLfa", perPrefix.TopologyIndependentLfa}
    perPrefix.EntityData.Leafs["fast-reroute-use-candidate-only"] = types.YLeaf{"FastRerouteUseCandidateOnly", perPrefix.FastRerouteUseCandidateOnly}
    return &(perPrefix.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa
// Remote LFA configuration
type Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable/Disable remote LFA computation. The type is OspfProcFrrRlfaTunnel.
    Tunnel interface{}

    // Maximum path cost to remote LFA. The type is interface{} with range:
    // 1..4294967295.
    MaximumCost interface{}
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_RemoteLfa) GetEntityData() *types.CommonEntityData {
    remoteLfa.EntityData.YFilter = remoteLfa.YFilter
    remoteLfa.EntityData.YangName = "remote-lfa"
    remoteLfa.EntityData.BundleName = "cisco_ios_xr"
    remoteLfa.EntityData.ParentYangName = "per-prefix"
    remoteLfa.EntityData.SegmentPath = "remote-lfa"
    remoteLfa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteLfa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteLfa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteLfa.EntityData.Children = make(map[string]types.YChild)
    remoteLfa.EntityData.Leafs = make(map[string]types.YLeaf)
    remoteLfa.EntityData.Leafs["tunnel"] = types.YLeaf{"Tunnel", remoteLfa.Tunnel}
    remoteLfa.EntityData.Leafs["maximum-cost"] = types.YLeaf{"MaximumCost", remoteLfa.MaximumCost}
    return &(remoteLfa.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetEntityData() *types.CommonEntityData {
    candidateInterfaces.EntityData.YFilter = candidateInterfaces.YFilter
    candidateInterfaces.EntityData.YangName = "candidate-interfaces"
    candidateInterfaces.EntityData.BundleName = "cisco_ios_xr"
    candidateInterfaces.EntityData.ParentYangName = "per-prefix"
    candidateInterfaces.EntityData.SegmentPath = "candidate-interfaces"
    candidateInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterfaces.EntityData.Children = make(map[string]types.YChild)
    candidateInterfaces.EntityData.Children["candidate-interface"] = types.YChild{"CandidateInterface", nil}
    for i := range candidateInterfaces.CandidateInterface {
        candidateInterfaces.EntityData.Children[types.GetSegmentPath(&candidateInterfaces.CandidateInterface[i])] = types.YChild{"CandidateInterface", &candidateInterfaces.CandidateInterface[i]}
    }
    candidateInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(candidateInterfaces.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetEntityData() *types.CommonEntityData {
    candidateInterface.EntityData.YFilter = candidateInterface.YFilter
    candidateInterface.EntityData.YangName = "candidate-interface"
    candidateInterface.EntityData.BundleName = "cisco_ios_xr"
    candidateInterface.EntityData.ParentYangName = "candidate-interfaces"
    candidateInterface.EntityData.SegmentPath = "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
    candidateInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterface.EntityData.Children = make(map[string]types.YChild)
    candidateInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    candidateInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", candidateInterface.InterfaceName}
    return &(candidateInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetEntityData() *types.CommonEntityData {
    excludeInterfaces.EntityData.YFilter = excludeInterfaces.YFilter
    excludeInterfaces.EntityData.YangName = "exclude-interfaces"
    excludeInterfaces.EntityData.BundleName = "cisco_ios_xr"
    excludeInterfaces.EntityData.ParentYangName = "per-prefix"
    excludeInterfaces.EntityData.SegmentPath = "exclude-interfaces"
    excludeInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterfaces.EntityData.Children = make(map[string]types.YChild)
    excludeInterfaces.EntityData.Children["exclude-interface"] = types.YChild{"ExcludeInterface", nil}
    for i := range excludeInterfaces.ExcludeInterface {
        excludeInterfaces.EntityData.Children[types.GetSegmentPath(&excludeInterfaces.ExcludeInterface[i])] = types.YChild{"ExcludeInterface", &excludeInterfaces.ExcludeInterface[i]}
    }
    excludeInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(excludeInterfaces.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetEntityData() *types.CommonEntityData {
    excludeInterface.EntityData.YFilter = excludeInterface.YFilter
    excludeInterface.EntityData.YangName = "exclude-interface"
    excludeInterface.EntityData.BundleName = "cisco_ios_xr"
    excludeInterface.EntityData.ParentYangName = "exclude-interfaces"
    excludeInterface.EntityData.SegmentPath = "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
    excludeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterface.EntityData.Children = make(map[string]types.YChild)
    excludeInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    excludeInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", excludeInterface.InterfaceName}
    return &(excludeInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessScope_DistributeList
// Filter networks intalled to RIB (disable as ACL
// name means filtering is disabled)
// This type is a presence type.
type Ospf_Processes_Process_DefaultVrf_ProcessScope_DistributeList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Access Control List name. The type is string.
    AccessListName interface{}

    // Route Policy name. The type is string.
    RoutePolicyName interface{}
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_ProcessScope_DistributeList) GetEntityData() *types.CommonEntityData {
    distributeList.EntityData.YFilter = distributeList.YFilter
    distributeList.EntityData.YangName = "distribute-list"
    distributeList.EntityData.BundleName = "cisco_ios_xr"
    distributeList.EntityData.ParentYangName = "process-scope"
    distributeList.EntityData.SegmentPath = "distribute-list"
    distributeList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    distributeList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    distributeList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    distributeList.EntityData.Children = make(map[string]types.YChild)
    distributeList.EntityData.Leafs = make(map[string]types.YLeaf)
    distributeList.EntityData.Leafs["access-list-name"] = types.YLeaf{"AccessListName", distributeList.AccessListName}
    distributeList.EntityData.Leafs["route-policy-name"] = types.YLeaf{"RoutePolicyName", distributeList.RoutePolicyName}
    return &(distributeList.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessScope_Bfd
// BFD configuration
type Ospf_Processes_Process_DefaultVrf_ProcessScope_Bfd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Hello interval for BFD sessions created by OSPF. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    Interval interface{}

    // Detection multiplier for BFD sessions created by OSPF. The type is
    // interface{} with range: 2..50.
    DetectionMultiplier interface{}

    // use of Bidirectional Forwarding Detection. The type is BfdEnableMode.
    FastDetectMode interface{}
}

func (bfd *Ospf_Processes_Process_DefaultVrf_ProcessScope_Bfd) GetEntityData() *types.CommonEntityData {
    bfd.EntityData.YFilter = bfd.YFilter
    bfd.EntityData.YangName = "bfd"
    bfd.EntityData.BundleName = "cisco_ios_xr"
    bfd.EntityData.ParentYangName = "process-scope"
    bfd.EntityData.SegmentPath = "bfd"
    bfd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfd.EntityData.Children = make(map[string]types.YChild)
    bfd.EntityData.Leafs = make(map[string]types.YLeaf)
    bfd.EntityData.Leafs["interval"] = types.YLeaf{"Interval", bfd.Interval}
    bfd.EntityData.Leafs["detection-multiplier"] = types.YLeaf{"DetectionMultiplier", bfd.DetectionMultiplier}
    bfd.EntityData.Leafs["fast-detect-mode"] = types.YLeaf{"FastDetectMode", bfd.FastDetectMode}
    return &(bfd.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication
// Authentication
type Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // b'(!.+)|([^!].+)'.
    Key interface{}

    // Authentication type.
    Type_ Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "cisco_ios_xr"
    authentication.EntityData.ParentYangName = "process-scope"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authentication.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authentication.EntityData.Children = make(map[string]types.YChild)
    authentication.EntityData.Children["type"] = types.YChild{"Type_", &authentication.Type_}
    authentication.EntityData.Children["message-digest-keies"] = types.YChild{"MessageDigestKeies", &authentication.MessageDigestKeies}
    authentication.EntityData.Leafs = make(map[string]types.YLeaf)
    authentication.EntityData.Leafs["key"] = types.YLeaf{"Key", authentication.Key}
    return &(authentication.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_Type struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_Type) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "type"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "authentication"
    self.EntityData.SegmentPath = "type"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    self.EntityData.Leafs["authen-type"] = types.YLeaf{"AuthenType", self.AuthenType}
    self.EntityData.Leafs["keychain-authen-type"] = types.YLeaf{"KeychainAuthenType", self.KeychainAuthenType}
    self.EntityData.Leafs["keychain-name"] = types.YLeaf{"KeychainName", self.KeychainName}
    return &(self.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies) GetEntityData() *types.CommonEntityData {
    messageDigestKeies.EntityData.YFilter = messageDigestKeies.YFilter
    messageDigestKeies.EntityData.YangName = "message-digest-keies"
    messageDigestKeies.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKeies.EntityData.ParentYangName = "authentication"
    messageDigestKeies.EntityData.SegmentPath = "message-digest-keies"
    messageDigestKeies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKeies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKeies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKeies.EntityData.Children = make(map[string]types.YChild)
    messageDigestKeies.EntityData.Children["message-digest-key"] = types.YChild{"MessageDigestKey", nil}
    for i := range messageDigestKeies.MessageDigestKey {
        messageDigestKeies.EntityData.Children[types.GetSegmentPath(&messageDigestKeies.MessageDigestKey[i])] = types.YChild{"MessageDigestKey", &messageDigestKeies.MessageDigestKey[i]}
    }
    messageDigestKeies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(messageDigestKeies.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: b'(!.+)|([^!].+)'. This
    // attribute is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_ProcessScope_Authentication_MessageDigestKeies_MessageDigestKey) GetEntityData() *types.CommonEntityData {
    messageDigestKey.EntityData.YFilter = messageDigestKey.YFilter
    messageDigestKey.EntityData.YangName = "message-digest-key"
    messageDigestKey.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKey.EntityData.ParentYangName = "message-digest-keies"
    messageDigestKey.EntityData.SegmentPath = "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
    messageDigestKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKey.EntityData.Children = make(map[string]types.YChild)
    messageDigestKey.EntityData.Leafs = make(map[string]types.YLeaf)
    messageDigestKey.EntityData.Leafs["key-id"] = types.YLeaf{"KeyId", messageDigestKey.KeyId}
    messageDigestKey.EntityData.Leafs["password"] = types.YLeaf{"Password", messageDigestKey.Password}
    return &(messageDigestKey.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessScope_Security
// Container class for security related
// configuration parameters
type Ospf_Processes_Process_DefaultVrf_ProcessScope_Security struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enabling turns on TTL security.
    Ttl Ospf_Processes_Process_DefaultVrf_ProcessScope_Security_Ttl
}

func (security *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security) GetEntityData() *types.CommonEntityData {
    security.EntityData.YFilter = security.YFilter
    security.EntityData.YangName = "security"
    security.EntityData.BundleName = "cisco_ios_xr"
    security.EntityData.ParentYangName = "process-scope"
    security.EntityData.SegmentPath = "security"
    security.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    security.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    security.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    security.EntityData.Children = make(map[string]types.YChild)
    security.EntityData.Children["ttl"] = types.YChild{"Ttl", &security.Ttl}
    security.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(security.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessScope_Security_Ttl
// Enabling turns on TTL security
type Ospf_Processes_Process_DefaultVrf_ProcessScope_Security_Ttl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable TTL security. The type is bool.
    Enable interface{}

    // Hop count. The type is interface{} with range: 1..254.
    HopCount interface{}
}

func (ttl *Ospf_Processes_Process_DefaultVrf_ProcessScope_Security_Ttl) GetEntityData() *types.CommonEntityData {
    ttl.EntityData.YFilter = ttl.YFilter
    ttl.EntityData.YangName = "ttl"
    ttl.EntityData.BundleName = "cisco_ios_xr"
    ttl.EntityData.ParentYangName = "security"
    ttl.EntityData.SegmentPath = "ttl"
    ttl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ttl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ttl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ttl.EntityData.Children = make(map[string]types.YChild)
    ttl.EntityData.Leafs = make(map[string]types.YLeaf)
    ttl.EntityData.Leafs["enable"] = types.YLeaf{"Enable", ttl.Enable}
    ttl.EntityData.Leafs["hop-count"] = types.YLeaf{"HopCount", ttl.HopCount}
    return &(ttl.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_DefaultVrf_ProcessScope_DeadIntervalMinimal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_ProcessScope_DeadIntervalMinimal) GetEntityData() *types.CommonEntityData {
    deadIntervalMinimal.EntityData.YFilter = deadIntervalMinimal.YFilter
    deadIntervalMinimal.EntityData.YangName = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.BundleName = "cisco_ios_xr"
    deadIntervalMinimal.EntityData.ParentYangName = "process-scope"
    deadIntervalMinimal.EntityData.SegmentPath = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    deadIntervalMinimal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    deadIntervalMinimal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    deadIntervalMinimal.EntityData.Children = make(map[string]types.YChild)
    deadIntervalMinimal.EntityData.Leafs = make(map[string]types.YLeaf)
    deadIntervalMinimal.EntityData.Leafs["interval"] = types.YLeaf{"Interval", deadIntervalMinimal.Interval}
    deadIntervalMinimal.EntityData.Leafs["multiplier"] = types.YLeaf{"Multiplier", deadIntervalMinimal.Multiplier}
    return &(deadIntervalMinimal.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_ProcessScope_CostFallback
// Interface fallback cost
type Ospf_Processes_Process_DefaultVrf_ProcessScope_CostFallback struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fallback cost of link. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Bandwidth threshold. The type is interface{} with range: 1..4294967.
    Threshold interface{}
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_ProcessScope_CostFallback) GetEntityData() *types.CommonEntityData {
    costFallback.EntityData.YFilter = costFallback.YFilter
    costFallback.EntityData.YangName = "cost-fallback"
    costFallback.EntityData.BundleName = "cisco_ios_xr"
    costFallback.EntityData.ParentYangName = "process-scope"
    costFallback.EntityData.SegmentPath = "cost-fallback"
    costFallback.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    costFallback.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    costFallback.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    costFallback.EntityData.Children = make(map[string]types.YChild)
    costFallback.EntityData.Leafs = make(map[string]types.YLeaf)
    costFallback.EntityData.Leafs["cost"] = types.YLeaf{"Cost", costFallback.Cost}
    costFallback.EntityData.Leafs["threshold"] = types.YLeaf{"Threshold", costFallback.Threshold}
    return &(costFallback.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Redistribution
// Redistribute configurations
type Ospf_Processes_Process_DefaultVrf_Redistribution struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Redistribute information from another routing protocol.
    Redistributes Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes
}

func (redistribution *Ospf_Processes_Process_DefaultVrf_Redistribution) GetEntityData() *types.CommonEntityData {
    redistribution.EntityData.YFilter = redistribution.YFilter
    redistribution.EntityData.YangName = "redistribution"
    redistribution.EntityData.BundleName = "cisco_ios_xr"
    redistribution.EntityData.ParentYangName = "default-vrf"
    redistribution.EntityData.SegmentPath = "redistribution"
    redistribution.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistribution.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistribution.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistribution.EntityData.Children = make(map[string]types.YChild)
    redistribution.EntityData.Children["redistributes"] = types.YChild{"Redistributes", &redistribution.Redistributes}
    redistribution.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(redistribution.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes
// Redistribute information from another routing
// protocol
type Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Redistribute information from another routing protocol. The type is slice
    // of
    // Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute.
    Redistribute []Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute
}

func (redistributes *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes) GetEntityData() *types.CommonEntityData {
    redistributes.EntityData.YFilter = redistributes.YFilter
    redistributes.EntityData.YangName = "redistributes"
    redistributes.EntityData.BundleName = "cisco_ios_xr"
    redistributes.EntityData.ParentYangName = "redistribution"
    redistributes.EntityData.SegmentPath = "redistributes"
    redistributes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistributes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistributes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistributes.EntityData.Children = make(map[string]types.YChild)
    redistributes.EntityData.Children["redistribute"] = types.YChild{"Redistribute", nil}
    for i := range redistributes.Redistribute {
        redistributes.EntityData.Children[types.GetSegmentPath(&redistributes.Redistribute[i])] = types.YChild{"Redistribute", &redistributes.Redistribute[i]}
    }
    redistributes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(redistributes.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute
// Redistribute information from another routing
// protocol
type Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Distribute list protocol type. The type is
    // OspfRedistProtocol.
    ProtocolName interface{}

    // connected or static or dagr or subscriber or mobile or rip.
    ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip

    // application or isis or ospf. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf.
    ApplicationOrIsisOrOspf []Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf

    // bgp. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Bgp.
    Bgp []Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Bgp

    // eigrp. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Eigrp.
    Eigrp []Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Eigrp
}

func (redistribute *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute) GetEntityData() *types.CommonEntityData {
    redistribute.EntityData.YFilter = redistribute.YFilter
    redistribute.EntityData.YangName = "redistribute"
    redistribute.EntityData.BundleName = "cisco_ios_xr"
    redistribute.EntityData.ParentYangName = "redistributes"
    redistribute.EntityData.SegmentPath = "redistribute" + "[protocol-name='" + fmt.Sprintf("%v", redistribute.ProtocolName) + "']"
    redistribute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    redistribute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    redistribute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    redistribute.EntityData.Children = make(map[string]types.YChild)
    redistribute.EntityData.Children["connected-or-static-or-dagr-or-subscriber-or-mobile-or-rip"] = types.YChild{"ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip", &redistribute.ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip}
    redistribute.EntityData.Children["application-or-isis-or-ospf"] = types.YChild{"ApplicationOrIsisOrOspf", nil}
    for i := range redistribute.ApplicationOrIsisOrOspf {
        redistribute.EntityData.Children[types.GetSegmentPath(&redistribute.ApplicationOrIsisOrOspf[i])] = types.YChild{"ApplicationOrIsisOrOspf", &redistribute.ApplicationOrIsisOrOspf[i]}
    }
    redistribute.EntityData.Children["bgp"] = types.YChild{"Bgp", nil}
    for i := range redistribute.Bgp {
        redistribute.EntityData.Children[types.GetSegmentPath(&redistribute.Bgp[i])] = types.YChild{"Bgp", &redistribute.Bgp[i]}
    }
    redistribute.EntityData.Children["eigrp"] = types.YChild{"Eigrp", nil}
    for i := range redistribute.Eigrp {
        redistribute.EntityData.Children[types.GetSegmentPath(&redistribute.Eigrp[i])] = types.YChild{"Eigrp", &redistribute.Eigrp[i]}
    }
    redistribute.EntityData.Leafs = make(map[string]types.YLeaf)
    redistribute.EntityData.Leafs["protocol-name"] = types.YLeaf{"ProtocolName", redistribute.ProtocolName}
    return &(redistribute.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip
// connected or static or dagr or subscriber or
// mobile or rip
// This type is a presence type.
type Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Disallow subnetting. The type is bool. The default value is false.
    Classful interface{}

    // Default metric for routes being redistributed into OSPF. The type is
    // interface{} with range: 1..16777214.
    DefaultRedistributedRouteMetric interface{}

    // Set tag for routes redistributed into OSPF. The type is interface{} with
    // range: 0..4294967295.
    Tag interface{}

    // Set OSPF External metric type. The type is OspfLinkStateMetric.
    MetricType interface{}

    // EIGRP route type. The type is OspfEigrpRoute.
    EigrpRouteType interface{}

    // Levels of ISIS routes. The type is OspfRouteLevel.
    IsisLevels interface{}

    // OSPF_Internal route type. The type is bool.
    OspfInternal interface{}

    // OSPF external route types. The type is OspfRouteLevel.
    OspfExternal interface{}

    // OSPF NSSA external route types. The type is OspfRouteLevel.
    OspfNssaLevel interface{}

    // Routing policy name. The type is string.
    RoutePolicyName interface{}

    // Preserve MED of BGP routes. The type is bool.
    BgpPreserveMed interface{}

    // Preserve Metric and Metric Type of BGP Default Route. The type is bool.
    BgpPreserveDefaultInfo interface{}

    // LSA type for redistributed routes. The type is OspfRedistLsa. The default
    // value is external.
    OspfRedistLsaType interface{}

    // Only redistribute to NSSA areas. The type is bool.
    OspfnssaOnly interface{}

    // Use metric from RIB for redistributed routes. The type is bool.
    OspfUseRibMetric interface{}
}

func (connectedOrStaticOrDagrOrSubscriberOrMobileOrRip *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ConnectedOrStaticOrDagrOrSubscriberOrMobileOrRip) GetEntityData() *types.CommonEntityData {
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.YFilter = connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.YFilter
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.YangName = "connected-or-static-or-dagr-or-subscriber-or-mobile-or-rip"
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.BundleName = "cisco_ios_xr"
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.ParentYangName = "redistribute"
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.SegmentPath = "connected-or-static-or-dagr-or-subscriber-or-mobile-or-rip"
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Children = make(map[string]types.YChild)
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs = make(map[string]types.YLeaf)
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs["classful"] = types.YLeaf{"Classful", connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.Classful}
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs["default-redistributed-route-metric"] = types.YLeaf{"DefaultRedistributedRouteMetric", connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.DefaultRedistributedRouteMetric}
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs["tag"] = types.YLeaf{"Tag", connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.Tag}
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs["metric-type"] = types.YLeaf{"MetricType", connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.MetricType}
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs["eigrp-route-type"] = types.YLeaf{"EigrpRouteType", connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EigrpRouteType}
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs["isis-levels"] = types.YLeaf{"IsisLevels", connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.IsisLevels}
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs["ospf-internal"] = types.YLeaf{"OspfInternal", connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.OspfInternal}
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs["ospf-external"] = types.YLeaf{"OspfExternal", connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.OspfExternal}
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs["ospf-nssa-level"] = types.YLeaf{"OspfNssaLevel", connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.OspfNssaLevel}
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs["route-policy-name"] = types.YLeaf{"RoutePolicyName", connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.RoutePolicyName}
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs["bgp-preserve-med"] = types.YLeaf{"BgpPreserveMed", connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.BgpPreserveMed}
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs["bgp-preserve-default-info"] = types.YLeaf{"BgpPreserveDefaultInfo", connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.BgpPreserveDefaultInfo}
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs["ospf-redist-lsa-type"] = types.YLeaf{"OspfRedistLsaType", connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.OspfRedistLsaType}
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs["ospfnssa-only"] = types.YLeaf{"OspfnssaOnly", connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.OspfnssaOnly}
    connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData.Leafs["ospf-use-rib-metric"] = types.YLeaf{"OspfUseRibMetric", connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.OspfUseRibMetric}
    return &(connectedOrStaticOrDagrOrSubscriberOrMobileOrRip.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf
// application or isis or ospf
type Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. OSPF or ISIS process name or protocol name: bgp,
    // eigrp, connected. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    InstanceName interface{}

    // Disallow subnetting. The type is bool. The default value is false.
    Classful interface{}

    // Default metric for routes being redistributed into OSPF. The type is
    // interface{} with range: 1..16777214.
    DefaultRedistributedRouteMetric interface{}

    // Set tag for routes redistributed into OSPF. The type is interface{} with
    // range: 0..4294967295.
    Tag interface{}

    // Set OSPF External metric type. The type is OspfLinkStateMetric.
    MetricType interface{}

    // EIGRP route type. The type is OspfEigrpRoute.
    EigrpRouteType interface{}

    // Levels of ISIS routes. The type is OspfRouteLevel.
    IsisLevels interface{}

    // OSPF_Internal route type. The type is bool.
    OspfInternal interface{}

    // OSPF external route types. The type is OspfRouteLevel.
    OspfExternal interface{}

    // OSPF NSSA external route types. The type is OspfRouteLevel.
    OspfNssaLevel interface{}

    // Routing policy name. The type is string.
    RoutePolicyName interface{}

    // Preserve MED of BGP routes. The type is bool.
    BgpPreserveMed interface{}

    // Preserve Metric and Metric Type of BGP Default Route. The type is bool.
    BgpPreserveDefaultInfo interface{}

    // LSA type for redistributed routes. The type is OspfRedistLsa. The default
    // value is external.
    OspfRedistLsaType interface{}

    // Only redistribute to NSSA areas. The type is bool.
    OspfnssaOnly interface{}

    // Use metric from RIB for redistributed routes. The type is bool.
    OspfUseRibMetric interface{}
}

func (applicationOrIsisOrOspf *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_ApplicationOrIsisOrOspf) GetEntityData() *types.CommonEntityData {
    applicationOrIsisOrOspf.EntityData.YFilter = applicationOrIsisOrOspf.YFilter
    applicationOrIsisOrOspf.EntityData.YangName = "application-or-isis-or-ospf"
    applicationOrIsisOrOspf.EntityData.BundleName = "cisco_ios_xr"
    applicationOrIsisOrOspf.EntityData.ParentYangName = "redistribute"
    applicationOrIsisOrOspf.EntityData.SegmentPath = "application-or-isis-or-ospf" + "[instance-name='" + fmt.Sprintf("%v", applicationOrIsisOrOspf.InstanceName) + "']"
    applicationOrIsisOrOspf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationOrIsisOrOspf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationOrIsisOrOspf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationOrIsisOrOspf.EntityData.Children = make(map[string]types.YChild)
    applicationOrIsisOrOspf.EntityData.Leafs = make(map[string]types.YLeaf)
    applicationOrIsisOrOspf.EntityData.Leafs["instance-name"] = types.YLeaf{"InstanceName", applicationOrIsisOrOspf.InstanceName}
    applicationOrIsisOrOspf.EntityData.Leafs["classful"] = types.YLeaf{"Classful", applicationOrIsisOrOspf.Classful}
    applicationOrIsisOrOspf.EntityData.Leafs["default-redistributed-route-metric"] = types.YLeaf{"DefaultRedistributedRouteMetric", applicationOrIsisOrOspf.DefaultRedistributedRouteMetric}
    applicationOrIsisOrOspf.EntityData.Leafs["tag"] = types.YLeaf{"Tag", applicationOrIsisOrOspf.Tag}
    applicationOrIsisOrOspf.EntityData.Leafs["metric-type"] = types.YLeaf{"MetricType", applicationOrIsisOrOspf.MetricType}
    applicationOrIsisOrOspf.EntityData.Leafs["eigrp-route-type"] = types.YLeaf{"EigrpRouteType", applicationOrIsisOrOspf.EigrpRouteType}
    applicationOrIsisOrOspf.EntityData.Leafs["isis-levels"] = types.YLeaf{"IsisLevels", applicationOrIsisOrOspf.IsisLevels}
    applicationOrIsisOrOspf.EntityData.Leafs["ospf-internal"] = types.YLeaf{"OspfInternal", applicationOrIsisOrOspf.OspfInternal}
    applicationOrIsisOrOspf.EntityData.Leafs["ospf-external"] = types.YLeaf{"OspfExternal", applicationOrIsisOrOspf.OspfExternal}
    applicationOrIsisOrOspf.EntityData.Leafs["ospf-nssa-level"] = types.YLeaf{"OspfNssaLevel", applicationOrIsisOrOspf.OspfNssaLevel}
    applicationOrIsisOrOspf.EntityData.Leafs["route-policy-name"] = types.YLeaf{"RoutePolicyName", applicationOrIsisOrOspf.RoutePolicyName}
    applicationOrIsisOrOspf.EntityData.Leafs["bgp-preserve-med"] = types.YLeaf{"BgpPreserveMed", applicationOrIsisOrOspf.BgpPreserveMed}
    applicationOrIsisOrOspf.EntityData.Leafs["bgp-preserve-default-info"] = types.YLeaf{"BgpPreserveDefaultInfo", applicationOrIsisOrOspf.BgpPreserveDefaultInfo}
    applicationOrIsisOrOspf.EntityData.Leafs["ospf-redist-lsa-type"] = types.YLeaf{"OspfRedistLsaType", applicationOrIsisOrOspf.OspfRedistLsaType}
    applicationOrIsisOrOspf.EntityData.Leafs["ospfnssa-only"] = types.YLeaf{"OspfnssaOnly", applicationOrIsisOrOspf.OspfnssaOnly}
    applicationOrIsisOrOspf.EntityData.Leafs["ospf-use-rib-metric"] = types.YLeaf{"OspfUseRibMetric", applicationOrIsisOrOspf.OspfUseRibMetric}
    return &(applicationOrIsisOrOspf.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Bgp
// bgp
type Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Bgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. OSPF or ISIS process name or protocol name: bgp,
    // eigrp, connected. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    InstanceName interface{}

    // This attribute is a key. First half of BGP AS number in XX.YY format.
    // Mandatory if Protocol is BGP and must not be specified otherwise. Must be a
    // non-zero value if second half is zero. The type is interface{} with range:
    // 0..65535.
    AsXx interface{}

    // This attribute is a key. Second half of BGP AS number in XX.YY format .
    // Mandatory if Protocol is BGP or EIGRP and must not be specified otherwise.
    // Must be a non-zero value if first half is zero. The type is interface{}
    // with range: 0..4294967295.
    AsYy interface{}

    // Disallow subnetting. The type is bool. The default value is false.
    Classful interface{}

    // Default metric for routes being redistributed into OSPF. The type is
    // interface{} with range: 1..16777214.
    DefaultRedistributedRouteMetric interface{}

    // Set tag for routes redistributed into OSPF. The type is interface{} with
    // range: 0..4294967295.
    Tag interface{}

    // Set OSPF External metric type. The type is OspfLinkStateMetric.
    MetricType interface{}

    // EIGRP route type. The type is OspfEigrpRoute.
    EigrpRouteType interface{}

    // Levels of ISIS routes. The type is OspfRouteLevel.
    IsisLevels interface{}

    // OSPF_Internal route type. The type is bool.
    OspfInternal interface{}

    // OSPF external route types. The type is OspfRouteLevel.
    OspfExternal interface{}

    // OSPF NSSA external route types. The type is OspfRouteLevel.
    OspfNssaLevel interface{}

    // Routing policy name. The type is string.
    RoutePolicyName interface{}

    // Preserve MED of BGP routes. The type is bool.
    BgpPreserveMed interface{}

    // Preserve Metric and Metric Type of BGP Default Route. The type is bool.
    BgpPreserveDefaultInfo interface{}

    // LSA type for redistributed routes. The type is OspfRedistLsa. The default
    // value is external.
    OspfRedistLsaType interface{}

    // Only redistribute to NSSA areas. The type is bool.
    OspfnssaOnly interface{}

    // Use metric from RIB for redistributed routes. The type is bool.
    OspfUseRibMetric interface{}
}

func (bgp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Bgp) GetEntityData() *types.CommonEntityData {
    bgp.EntityData.YFilter = bgp.YFilter
    bgp.EntityData.YangName = "bgp"
    bgp.EntityData.BundleName = "cisco_ios_xr"
    bgp.EntityData.ParentYangName = "redistribute"
    bgp.EntityData.SegmentPath = "bgp" + "[instance-name='" + fmt.Sprintf("%v", bgp.InstanceName) + "']" + "[as-xx='" + fmt.Sprintf("%v", bgp.AsXx) + "']" + "[as-yy='" + fmt.Sprintf("%v", bgp.AsYy) + "']"
    bgp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bgp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bgp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bgp.EntityData.Children = make(map[string]types.YChild)
    bgp.EntityData.Leafs = make(map[string]types.YLeaf)
    bgp.EntityData.Leafs["instance-name"] = types.YLeaf{"InstanceName", bgp.InstanceName}
    bgp.EntityData.Leafs["as-xx"] = types.YLeaf{"AsXx", bgp.AsXx}
    bgp.EntityData.Leafs["as-yy"] = types.YLeaf{"AsYy", bgp.AsYy}
    bgp.EntityData.Leafs["classful"] = types.YLeaf{"Classful", bgp.Classful}
    bgp.EntityData.Leafs["default-redistributed-route-metric"] = types.YLeaf{"DefaultRedistributedRouteMetric", bgp.DefaultRedistributedRouteMetric}
    bgp.EntityData.Leafs["tag"] = types.YLeaf{"Tag", bgp.Tag}
    bgp.EntityData.Leafs["metric-type"] = types.YLeaf{"MetricType", bgp.MetricType}
    bgp.EntityData.Leafs["eigrp-route-type"] = types.YLeaf{"EigrpRouteType", bgp.EigrpRouteType}
    bgp.EntityData.Leafs["isis-levels"] = types.YLeaf{"IsisLevels", bgp.IsisLevels}
    bgp.EntityData.Leafs["ospf-internal"] = types.YLeaf{"OspfInternal", bgp.OspfInternal}
    bgp.EntityData.Leafs["ospf-external"] = types.YLeaf{"OspfExternal", bgp.OspfExternal}
    bgp.EntityData.Leafs["ospf-nssa-level"] = types.YLeaf{"OspfNssaLevel", bgp.OspfNssaLevel}
    bgp.EntityData.Leafs["route-policy-name"] = types.YLeaf{"RoutePolicyName", bgp.RoutePolicyName}
    bgp.EntityData.Leafs["bgp-preserve-med"] = types.YLeaf{"BgpPreserveMed", bgp.BgpPreserveMed}
    bgp.EntityData.Leafs["bgp-preserve-default-info"] = types.YLeaf{"BgpPreserveDefaultInfo", bgp.BgpPreserveDefaultInfo}
    bgp.EntityData.Leafs["ospf-redist-lsa-type"] = types.YLeaf{"OspfRedistLsaType", bgp.OspfRedistLsaType}
    bgp.EntityData.Leafs["ospfnssa-only"] = types.YLeaf{"OspfnssaOnly", bgp.OspfnssaOnly}
    bgp.EntityData.Leafs["ospf-use-rib-metric"] = types.YLeaf{"OspfUseRibMetric", bgp.OspfUseRibMetric}
    return &(bgp.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Eigrp
// eigrp
type Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Eigrp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. OSPF or ISIS process name or protocol name: bgp,
    // eigrp, connected. The type is string with pattern:
    // b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    InstanceName interface{}

    // This attribute is a key. First half of BGP AS number in XX.YY format.
    // Mandatory if Protocol is BGP and must not be specified otherwise. Must be a
    // non-zero value if second half is zero. The type is interface{} with range:
    // 0..65535.
    AsXx interface{}

    // Disallow subnetting. The type is bool. The default value is false.
    Classful interface{}

    // Default metric for routes being redistributed into OSPF. The type is
    // interface{} with range: 1..16777214.
    DefaultRedistributedRouteMetric interface{}

    // Set tag for routes redistributed into OSPF. The type is interface{} with
    // range: 0..4294967295.
    Tag interface{}

    // Set OSPF External metric type. The type is OspfLinkStateMetric.
    MetricType interface{}

    // EIGRP route type. The type is OspfEigrpRoute.
    EigrpRouteType interface{}

    // Levels of ISIS routes. The type is OspfRouteLevel.
    IsisLevels interface{}

    // OSPF_Internal route type. The type is bool.
    OspfInternal interface{}

    // OSPF external route types. The type is OspfRouteLevel.
    OspfExternal interface{}

    // OSPF NSSA external route types. The type is OspfRouteLevel.
    OspfNssaLevel interface{}

    // Routing policy name. The type is string.
    RoutePolicyName interface{}

    // Preserve MED of BGP routes. The type is bool.
    BgpPreserveMed interface{}

    // Preserve Metric and Metric Type of BGP Default Route. The type is bool.
    BgpPreserveDefaultInfo interface{}

    // LSA type for redistributed routes. The type is OspfRedistLsa. The default
    // value is external.
    OspfRedistLsaType interface{}

    // Only redistribute to NSSA areas. The type is bool.
    OspfnssaOnly interface{}

    // Use metric from RIB for redistributed routes. The type is bool.
    OspfUseRibMetric interface{}
}

func (eigrp *Ospf_Processes_Process_DefaultVrf_Redistribution_Redistributes_Redistribute_Eigrp) GetEntityData() *types.CommonEntityData {
    eigrp.EntityData.YFilter = eigrp.YFilter
    eigrp.EntityData.YangName = "eigrp"
    eigrp.EntityData.BundleName = "cisco_ios_xr"
    eigrp.EntityData.ParentYangName = "redistribute"
    eigrp.EntityData.SegmentPath = "eigrp" + "[instance-name='" + fmt.Sprintf("%v", eigrp.InstanceName) + "']" + "[as-xx='" + fmt.Sprintf("%v", eigrp.AsXx) + "']"
    eigrp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eigrp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eigrp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eigrp.EntityData.Children = make(map[string]types.YChild)
    eigrp.EntityData.Leafs = make(map[string]types.YLeaf)
    eigrp.EntityData.Leafs["instance-name"] = types.YLeaf{"InstanceName", eigrp.InstanceName}
    eigrp.EntityData.Leafs["as-xx"] = types.YLeaf{"AsXx", eigrp.AsXx}
    eigrp.EntityData.Leafs["classful"] = types.YLeaf{"Classful", eigrp.Classful}
    eigrp.EntityData.Leafs["default-redistributed-route-metric"] = types.YLeaf{"DefaultRedistributedRouteMetric", eigrp.DefaultRedistributedRouteMetric}
    eigrp.EntityData.Leafs["tag"] = types.YLeaf{"Tag", eigrp.Tag}
    eigrp.EntityData.Leafs["metric-type"] = types.YLeaf{"MetricType", eigrp.MetricType}
    eigrp.EntityData.Leafs["eigrp-route-type"] = types.YLeaf{"EigrpRouteType", eigrp.EigrpRouteType}
    eigrp.EntityData.Leafs["isis-levels"] = types.YLeaf{"IsisLevels", eigrp.IsisLevels}
    eigrp.EntityData.Leafs["ospf-internal"] = types.YLeaf{"OspfInternal", eigrp.OspfInternal}
    eigrp.EntityData.Leafs["ospf-external"] = types.YLeaf{"OspfExternal", eigrp.OspfExternal}
    eigrp.EntityData.Leafs["ospf-nssa-level"] = types.YLeaf{"OspfNssaLevel", eigrp.OspfNssaLevel}
    eigrp.EntityData.Leafs["route-policy-name"] = types.YLeaf{"RoutePolicyName", eigrp.RoutePolicyName}
    eigrp.EntityData.Leafs["bgp-preserve-med"] = types.YLeaf{"BgpPreserveMed", eigrp.BgpPreserveMed}
    eigrp.EntityData.Leafs["bgp-preserve-default-info"] = types.YLeaf{"BgpPreserveDefaultInfo", eigrp.BgpPreserveDefaultInfo}
    eigrp.EntityData.Leafs["ospf-redist-lsa-type"] = types.YLeaf{"OspfRedistLsaType", eigrp.OspfRedistLsaType}
    eigrp.EntityData.Leafs["ospfnssa-only"] = types.YLeaf{"OspfnssaOnly", eigrp.OspfnssaOnly}
    eigrp.EntityData.Leafs["ospf-use-rib-metric"] = types.YLeaf{"OspfUseRibMetric", eigrp.OspfUseRibMetric}
    return &(eigrp.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AdjacencyStagger
// Staggering OSPF adjacency bring up
type Ospf_Processes_Process_DefaultVrf_AdjacencyStagger struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Disable OSPF adjacency stagger. The type is interface{}.
    Disable interface{}

    // Adjacency Stagger: Initial number of neighbors to bring up per area. The
    // type is interface{} with range: 1..65535. The default value is 2.
    InitialNbr interface{}

    // Adjacency Stagger: Subsequent simultaneous number of neighbors to bring up.
    // The type is interface{} with range: 1..65535. The default value is 64.
    MaxNbr interface{}
}

func (adjacencyStagger *Ospf_Processes_Process_DefaultVrf_AdjacencyStagger) GetEntityData() *types.CommonEntityData {
    adjacencyStagger.EntityData.YFilter = adjacencyStagger.YFilter
    adjacencyStagger.EntityData.YangName = "adjacency-stagger"
    adjacencyStagger.EntityData.BundleName = "cisco_ios_xr"
    adjacencyStagger.EntityData.ParentYangName = "default-vrf"
    adjacencyStagger.EntityData.SegmentPath = "adjacency-stagger"
    adjacencyStagger.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyStagger.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyStagger.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyStagger.EntityData.Children = make(map[string]types.YChild)
    adjacencyStagger.EntityData.Leafs = make(map[string]types.YLeaf)
    adjacencyStagger.EntityData.Leafs["disable"] = types.YLeaf{"Disable", adjacencyStagger.Disable}
    adjacencyStagger.EntityData.Leafs["initial-nbr"] = types.YLeaf{"InitialNbr", adjacencyStagger.InitialNbr}
    adjacencyStagger.EntityData.Leafs["max-nbr"] = types.YLeaf{"MaxNbr", adjacencyStagger.MaxNbr}
    return &(adjacencyStagger.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_MaxLsa
// Set max-lsa configuration
// This type is a presence type.
type Ospf_Processes_Process_DefaultVrf_MaxLsa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set maximum number of non self-generated LSAs. The type is interface{} with
    // range: 1..4294967294. This attribute is mandatory.
    MaxLsaLimit interface{}

    // Set max-lsa threshold for generating a warning message. The type is
    // interface{} with range: 1..100.
    MaxLsaThreshold interface{}

    // Only give warning message when limit is exceeded. The type is bool.
    MaxLsaWarningOnly interface{}

    // Set time during which all adjacencies are suppressed. The type is
    // interface{} with range: 1..35791394.
    MaxLsaIgnoreTime interface{}

    // Set count on how many times adjacencies can be suppressed. The type is
    // interface{} with range: 1..4294967294.
    MaxLsaIgnoreCount interface{}

    // Set number of minutes after which ignore-count is reset to zero. The type
    // is interface{} with range: 2..71582788. Units are minute.
    MaxLsaResetTime interface{}
}

func (maxLsa *Ospf_Processes_Process_DefaultVrf_MaxLsa) GetEntityData() *types.CommonEntityData {
    maxLsa.EntityData.YFilter = maxLsa.YFilter
    maxLsa.EntityData.YangName = "max-lsa"
    maxLsa.EntityData.BundleName = "cisco_ios_xr"
    maxLsa.EntityData.ParentYangName = "default-vrf"
    maxLsa.EntityData.SegmentPath = "max-lsa"
    maxLsa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maxLsa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maxLsa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maxLsa.EntityData.Children = make(map[string]types.YChild)
    maxLsa.EntityData.Leafs = make(map[string]types.YLeaf)
    maxLsa.EntityData.Leafs["max-lsa-limit"] = types.YLeaf{"MaxLsaLimit", maxLsa.MaxLsaLimit}
    maxLsa.EntityData.Leafs["max-lsa-threshold"] = types.YLeaf{"MaxLsaThreshold", maxLsa.MaxLsaThreshold}
    maxLsa.EntityData.Leafs["max-lsa-warning-only"] = types.YLeaf{"MaxLsaWarningOnly", maxLsa.MaxLsaWarningOnly}
    maxLsa.EntityData.Leafs["max-lsa-ignore-time"] = types.YLeaf{"MaxLsaIgnoreTime", maxLsa.MaxLsaIgnoreTime}
    maxLsa.EntityData.Leafs["max-lsa-ignore-count"] = types.YLeaf{"MaxLsaIgnoreCount", maxLsa.MaxLsaIgnoreCount}
    maxLsa.EntityData.Leafs["max-lsa-reset-time"] = types.YLeaf{"MaxLsaResetTime", maxLsa.MaxLsaResetTime}
    return &(maxLsa.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AutoCost
// Controls automatic cost based on bandwidth
type Ospf_Processes_Process_DefaultVrf_AutoCost struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Disabling auto costing. The type is bool. The default value is false.
    Disable interface{}

    // The reference bandwidth in terms of Mbits per second. The type is
    // interface{} with range: 1..4294967. Units are Mbit/s. The default value is
    // 100.
    Bandwidth interface{}
}

func (autoCost *Ospf_Processes_Process_DefaultVrf_AutoCost) GetEntityData() *types.CommonEntityData {
    autoCost.EntityData.YFilter = autoCost.YFilter
    autoCost.EntityData.YangName = "auto-cost"
    autoCost.EntityData.BundleName = "cisco_ios_xr"
    autoCost.EntityData.ParentYangName = "default-vrf"
    autoCost.EntityData.SegmentPath = "auto-cost"
    autoCost.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    autoCost.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    autoCost.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    autoCost.EntityData.Children = make(map[string]types.YChild)
    autoCost.EntityData.Leafs = make(map[string]types.YLeaf)
    autoCost.EntityData.Leafs["disable"] = types.YLeaf{"Disable", autoCost.Disable}
    autoCost.EntityData.Leafs["bandwidth"] = types.YLeaf{"Bandwidth", autoCost.Bandwidth}
    return &(autoCost.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Ucmp
// Unequal Cost Multi-ptah configuration
type Ospf_Processes_Process_DefaultVrf_Ucmp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Delay in msecs between primary SPF and UCMP computation. The type is
    // interface{} with range: 1..5000. Units are millisecond. The default value
    // is 100.
    DelayInterval interface{}

    // UCMP feature enable configuration.
    Enable Ospf_Processes_Process_DefaultVrf_Ucmp_Enable

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces
}

func (ucmp *Ospf_Processes_Process_DefaultVrf_Ucmp) GetEntityData() *types.CommonEntityData {
    ucmp.EntityData.YFilter = ucmp.YFilter
    ucmp.EntityData.YangName = "ucmp"
    ucmp.EntityData.BundleName = "cisco_ios_xr"
    ucmp.EntityData.ParentYangName = "default-vrf"
    ucmp.EntityData.SegmentPath = "ucmp"
    ucmp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ucmp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ucmp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ucmp.EntityData.Children = make(map[string]types.YChild)
    ucmp.EntityData.Children["enable"] = types.YChild{"Enable", &ucmp.Enable}
    ucmp.EntityData.Children["exclude-interfaces"] = types.YChild{"ExcludeInterfaces", &ucmp.ExcludeInterfaces}
    ucmp.EntityData.Leafs = make(map[string]types.YLeaf)
    ucmp.EntityData.Leafs["delay-interval"] = types.YLeaf{"DelayInterval", ucmp.DelayInterval}
    return &(ucmp.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Ucmp_Enable
// UCMP feature enable configuration
type Ospf_Processes_Process_DefaultVrf_Ucmp_Enable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Value of variance. The type is interface{} with range: 101..10000. The
    // default value is 200.
    Variance interface{}

    // Name of the Prefix List. The type is string.
    PrefixListName interface{}
}

func (enable *Ospf_Processes_Process_DefaultVrf_Ucmp_Enable) GetEntityData() *types.CommonEntityData {
    enable.EntityData.YFilter = enable.YFilter
    enable.EntityData.YangName = "enable"
    enable.EntityData.BundleName = "cisco_ios_xr"
    enable.EntityData.ParentYangName = "ucmp"
    enable.EntityData.SegmentPath = "enable"
    enable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    enable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    enable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    enable.EntityData.Children = make(map[string]types.YChild)
    enable.EntityData.Leafs = make(map[string]types.YLeaf)
    enable.EntityData.Leafs["variance"] = types.YLeaf{"Variance", enable.Variance}
    enable.EntityData.Leafs["prefix-list-name"] = types.YLeaf{"PrefixListName", enable.PrefixListName}
    return &(enable.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces) GetEntityData() *types.CommonEntityData {
    excludeInterfaces.EntityData.YFilter = excludeInterfaces.YFilter
    excludeInterfaces.EntityData.YangName = "exclude-interfaces"
    excludeInterfaces.EntityData.BundleName = "cisco_ios_xr"
    excludeInterfaces.EntityData.ParentYangName = "ucmp"
    excludeInterfaces.EntityData.SegmentPath = "exclude-interfaces"
    excludeInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterfaces.EntityData.Children = make(map[string]types.YChild)
    excludeInterfaces.EntityData.Children["exclude-interface"] = types.YChild{"ExcludeInterface", nil}
    for i := range excludeInterfaces.ExcludeInterface {
        excludeInterfaces.EntityData.Children[types.GetSegmentPath(&excludeInterfaces.ExcludeInterface[i])] = types.YChild{"ExcludeInterface", &excludeInterfaces.ExcludeInterface[i]}
    }
    excludeInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(excludeInterfaces.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces_ExcludeInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_Ucmp_ExcludeInterfaces_ExcludeInterface) GetEntityData() *types.CommonEntityData {
    excludeInterface.EntityData.YFilter = excludeInterface.YFilter
    excludeInterface.EntityData.YangName = "exclude-interface"
    excludeInterface.EntityData.BundleName = "cisco_ios_xr"
    excludeInterface.EntityData.ParentYangName = "exclude-interfaces"
    excludeInterface.EntityData.SegmentPath = "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
    excludeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterface.EntityData.Children = make(map[string]types.YChild)
    excludeInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    excludeInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", excludeInterface.InterfaceName}
    return &(excludeInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_FastReroute
// Fast-reroute instance scoped parameters
type Ospf_Processes_Process_DefaultVrf_FastReroute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fast-reroute per-link global configuration.
    PerLink Ospf_Processes_Process_DefaultVrf_FastReroute_PerLink

    // Fast-reroute per-prefix global configuration.
    PerPrefix Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_FastReroute) GetEntityData() *types.CommonEntityData {
    fastReroute.EntityData.YFilter = fastReroute.YFilter
    fastReroute.EntityData.YangName = "fast-reroute"
    fastReroute.EntityData.BundleName = "cisco_ios_xr"
    fastReroute.EntityData.ParentYangName = "default-vrf"
    fastReroute.EntityData.SegmentPath = "fast-reroute"
    fastReroute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fastReroute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fastReroute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fastReroute.EntityData.Children = make(map[string]types.YChild)
    fastReroute.EntityData.Children["per-link"] = types.YChild{"PerLink", &fastReroute.PerLink}
    fastReroute.EntityData.Children["per-prefix"] = types.YChild{"PerPrefix", &fastReroute.PerPrefix}
    fastReroute.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(fastReroute.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_FastReroute_PerLink
// Fast-reroute per-link global configuration
type Ospf_Processes_Process_DefaultVrf_FastReroute_PerLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fast-reroute per-link/per-prefix priority-limit command. The type is
    // OspfFastReroutePriority.
    Priority interface{}
}

func (perLink *Ospf_Processes_Process_DefaultVrf_FastReroute_PerLink) GetEntityData() *types.CommonEntityData {
    perLink.EntityData.YFilter = perLink.YFilter
    perLink.EntityData.YangName = "per-link"
    perLink.EntityData.BundleName = "cisco_ios_xr"
    perLink.EntityData.ParentYangName = "fast-reroute"
    perLink.EntityData.SegmentPath = "per-link"
    perLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perLink.EntityData.Children = make(map[string]types.YChild)
    perLink.EntityData.Leafs = make(map[string]types.YLeaf)
    perLink.EntityData.Leafs["priority"] = types.YLeaf{"Priority", perLink.Priority}
    return &(perLink.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix
// Fast-reroute per-prefix global configuration
type Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Disable load sharing between multiple backups. The type is interface{}.
    LoadSharingDisable interface{}

    // Fast-reroute per-link/per-prefix priority-limit command. The type is
    // OspfFastReroutePriority.
    Priority interface{}

    // Fast-reroute tiebreakers configurations.
    Tiebreakers Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix) GetEntityData() *types.CommonEntityData {
    perPrefix.EntityData.YFilter = perPrefix.YFilter
    perPrefix.EntityData.YangName = "per-prefix"
    perPrefix.EntityData.BundleName = "cisco_ios_xr"
    perPrefix.EntityData.ParentYangName = "fast-reroute"
    perPrefix.EntityData.SegmentPath = "per-prefix"
    perPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perPrefix.EntityData.Children = make(map[string]types.YChild)
    perPrefix.EntityData.Children["tiebreakers"] = types.YChild{"Tiebreakers", &perPrefix.Tiebreakers}
    perPrefix.EntityData.Leafs = make(map[string]types.YLeaf)
    perPrefix.EntityData.Leafs["load-sharing-disable"] = types.YLeaf{"LoadSharingDisable", perPrefix.LoadSharingDisable}
    perPrefix.EntityData.Leafs["priority"] = types.YLeaf{"Priority", perPrefix.Priority}
    return &(perPrefix.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers
// Fast-reroute tiebreakers configurations
type Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fast-reroute tiebreakers configuration. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker.
    Tiebreaker []Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers) GetEntityData() *types.CommonEntityData {
    tiebreakers.EntityData.YFilter = tiebreakers.YFilter
    tiebreakers.EntityData.YangName = "tiebreakers"
    tiebreakers.EntityData.BundleName = "cisco_ios_xr"
    tiebreakers.EntityData.ParentYangName = "per-prefix"
    tiebreakers.EntityData.SegmentPath = "tiebreakers"
    tiebreakers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tiebreakers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tiebreakers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tiebreakers.EntityData.Children = make(map[string]types.YChild)
    tiebreakers.EntityData.Children["tiebreaker"] = types.YChild{"Tiebreaker", nil}
    for i := range tiebreakers.Tiebreaker {
        tiebreakers.EntityData.Children[types.GetSegmentPath(&tiebreakers.Tiebreaker[i])] = types.YChild{"Tiebreaker", &tiebreakers.Tiebreaker[i]}
    }
    tiebreakers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tiebreakers.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
// Fast-reroute tiebreakers configuration
type Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Tiebreaker type. The type is
    // OspfFastRerouteTiebreakers.
    TiebreakerType interface{}

    // Index value for a tiebreaker, 0 to disable. The type is interface{} with
    // range: 0..255. This attribute is mandatory.
    TiebreakerIndex interface{}
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetEntityData() *types.CommonEntityData {
    tiebreaker.EntityData.YFilter = tiebreaker.YFilter
    tiebreaker.EntityData.YangName = "tiebreaker"
    tiebreaker.EntityData.BundleName = "cisco_ios_xr"
    tiebreaker.EntityData.ParentYangName = "tiebreakers"
    tiebreaker.EntityData.SegmentPath = "tiebreaker" + "[tiebreaker-type='" + fmt.Sprintf("%v", tiebreaker.TiebreakerType) + "']"
    tiebreaker.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tiebreaker.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tiebreaker.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tiebreaker.EntityData.Children = make(map[string]types.YChild)
    tiebreaker.EntityData.Leafs = make(map[string]types.YLeaf)
    tiebreaker.EntityData.Leafs["tiebreaker-type"] = types.YLeaf{"TiebreakerType", tiebreaker.TiebreakerType}
    tiebreaker.EntityData.Leafs["tiebreaker-index"] = types.YLeaf{"TiebreakerIndex", tiebreaker.TiebreakerIndex}
    return &(tiebreaker.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_SummaryPrefixes
// Configure IP prefix summary
type Ospf_Processes_Process_DefaultVrf_SummaryPrefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Data container.
    SummaryPrefixData Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefixData

    // keys: prefix, netmask. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_PrefixAndNetmask.
    PrefixAndNetmask []Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_PrefixAndNetmask

    // keys: prefix. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Prefix.
    Prefix []Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Prefix

    // keys: netmask. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Netmask.
    Netmask []Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Netmask
}

func (summaryPrefixes *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes) GetEntityData() *types.CommonEntityData {
    summaryPrefixes.EntityData.YFilter = summaryPrefixes.YFilter
    summaryPrefixes.EntityData.YangName = "summary-prefixes"
    summaryPrefixes.EntityData.BundleName = "cisco_ios_xr"
    summaryPrefixes.EntityData.ParentYangName = "default-vrf"
    summaryPrefixes.EntityData.SegmentPath = "summary-prefixes"
    summaryPrefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryPrefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryPrefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryPrefixes.EntityData.Children = make(map[string]types.YChild)
    summaryPrefixes.EntityData.Children["summary-prefix-data"] = types.YChild{"SummaryPrefixData", &summaryPrefixes.SummaryPrefixData}
    summaryPrefixes.EntityData.Children["prefix-and-netmask"] = types.YChild{"PrefixAndNetmask", nil}
    for i := range summaryPrefixes.PrefixAndNetmask {
        summaryPrefixes.EntityData.Children[types.GetSegmentPath(&summaryPrefixes.PrefixAndNetmask[i])] = types.YChild{"PrefixAndNetmask", &summaryPrefixes.PrefixAndNetmask[i]}
    }
    summaryPrefixes.EntityData.Children["prefix"] = types.YChild{"Prefix", nil}
    for i := range summaryPrefixes.Prefix {
        summaryPrefixes.EntityData.Children[types.GetSegmentPath(&summaryPrefixes.Prefix[i])] = types.YChild{"Prefix", &summaryPrefixes.Prefix[i]}
    }
    summaryPrefixes.EntityData.Children["netmask"] = types.YChild{"Netmask", nil}
    for i := range summaryPrefixes.Netmask {
        summaryPrefixes.EntityData.Children[types.GetSegmentPath(&summaryPrefixes.Netmask[i])] = types.YChild{"Netmask", &summaryPrefixes.Netmask[i]}
    }
    summaryPrefixes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(summaryPrefixes.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefixData
// Data container.
type Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefixData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Do not advertise when translating OSPF type-7 LSA. The type is bool. The
    // default value is false.
    NotAdvertise interface{}

    // 32-bit tag value. The type is interface{} with range: 0..4294967295.
    Tag interface{}
}

func (summaryPrefixData *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefixData) GetEntityData() *types.CommonEntityData {
    summaryPrefixData.EntityData.YFilter = summaryPrefixData.YFilter
    summaryPrefixData.EntityData.YangName = "summary-prefix-data"
    summaryPrefixData.EntityData.BundleName = "cisco_ios_xr"
    summaryPrefixData.EntityData.ParentYangName = "summary-prefixes"
    summaryPrefixData.EntityData.SegmentPath = "summary-prefix-data"
    summaryPrefixData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryPrefixData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryPrefixData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryPrefixData.EntityData.Children = make(map[string]types.YChild)
    summaryPrefixData.EntityData.Leafs = make(map[string]types.YLeaf)
    summaryPrefixData.EntityData.Leafs["not-advertise"] = types.YLeaf{"NotAdvertise", summaryPrefixData.NotAdvertise}
    summaryPrefixData.EntityData.Leafs["tag"] = types.YLeaf{"Tag", summaryPrefixData.Tag}
    return &(summaryPrefixData.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_PrefixAndNetmask
// keys: prefix, netmask
type Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_PrefixAndNetmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. IP summary prefix. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Prefix interface{}

    // This attribute is a key. Summary netmask. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Netmask interface{}

    // Do not advertise when translating OSPF type-7 LSA. The type is bool. The
    // default value is false.
    NotAdvertise interface{}

    // 32-bit tag value. The type is interface{} with range: 0..4294967295.
    Tag interface{}
}

func (prefixAndNetmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_PrefixAndNetmask) GetEntityData() *types.CommonEntityData {
    prefixAndNetmask.EntityData.YFilter = prefixAndNetmask.YFilter
    prefixAndNetmask.EntityData.YangName = "prefix-and-netmask"
    prefixAndNetmask.EntityData.BundleName = "cisco_ios_xr"
    prefixAndNetmask.EntityData.ParentYangName = "summary-prefixes"
    prefixAndNetmask.EntityData.SegmentPath = "prefix-and-netmask" + "[prefix='" + fmt.Sprintf("%v", prefixAndNetmask.Prefix) + "']" + "[netmask='" + fmt.Sprintf("%v", prefixAndNetmask.Netmask) + "']"
    prefixAndNetmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixAndNetmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixAndNetmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixAndNetmask.EntityData.Children = make(map[string]types.YChild)
    prefixAndNetmask.EntityData.Leafs = make(map[string]types.YLeaf)
    prefixAndNetmask.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", prefixAndNetmask.Prefix}
    prefixAndNetmask.EntityData.Leafs["netmask"] = types.YLeaf{"Netmask", prefixAndNetmask.Netmask}
    prefixAndNetmask.EntityData.Leafs["not-advertise"] = types.YLeaf{"NotAdvertise", prefixAndNetmask.NotAdvertise}
    prefixAndNetmask.EntityData.Leafs["tag"] = types.YLeaf{"Tag", prefixAndNetmask.Tag}
    return &(prefixAndNetmask.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Prefix
// keys: prefix
type Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Prefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. IP summary prefix. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Prefix interface{}

    // Do not advertise when translating OSPF type-7 LSA. The type is bool. The
    // default value is false.
    NotAdvertise interface{}

    // 32-bit tag value. The type is interface{} with range: 0..4294967295.
    Tag interface{}
}

func (prefix *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Prefix) GetEntityData() *types.CommonEntityData {
    prefix.EntityData.YFilter = prefix.YFilter
    prefix.EntityData.YangName = "prefix"
    prefix.EntityData.BundleName = "cisco_ios_xr"
    prefix.EntityData.ParentYangName = "summary-prefixes"
    prefix.EntityData.SegmentPath = "prefix" + "[prefix='" + fmt.Sprintf("%v", prefix.Prefix) + "']"
    prefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefix.EntityData.Children = make(map[string]types.YChild)
    prefix.EntityData.Leafs = make(map[string]types.YLeaf)
    prefix.EntityData.Leafs["prefix"] = types.YLeaf{"Prefix", prefix.Prefix}
    prefix.EntityData.Leafs["not-advertise"] = types.YLeaf{"NotAdvertise", prefix.NotAdvertise}
    prefix.EntityData.Leafs["tag"] = types.YLeaf{"Tag", prefix.Tag}
    return &(prefix.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Netmask
// keys: netmask
type Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Netmask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Summary netmask. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Netmask interface{}

    // Do not advertise when translating OSPF type-7 LSA. The type is bool. The
    // default value is false.
    NotAdvertise interface{}

    // 32-bit tag value. The type is interface{} with range: 0..4294967295.
    Tag interface{}
}

func (netmask *Ospf_Processes_Process_DefaultVrf_SummaryPrefixes_Netmask) GetEntityData() *types.CommonEntityData {
    netmask.EntityData.YFilter = netmask.YFilter
    netmask.EntityData.YangName = "netmask"
    netmask.EntityData.BundleName = "cisco_ios_xr"
    netmask.EntityData.ParentYangName = "summary-prefixes"
    netmask.EntityData.SegmentPath = "netmask" + "[netmask='" + fmt.Sprintf("%v", netmask.Netmask) + "']"
    netmask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    netmask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    netmask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    netmask.EntityData.Children = make(map[string]types.YChild)
    netmask.EntityData.Leafs = make(map[string]types.YLeaf)
    netmask.EntityData.Leafs["netmask"] = types.YLeaf{"Netmask", netmask.Netmask}
    netmask.EntityData.Leafs["not-advertise"] = types.YLeaf{"NotAdvertise", netmask.NotAdvertise}
    netmask.EntityData.Leafs["tag"] = types.YLeaf{"Tag", netmask.Tag}
    return &(netmask.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates
// Filter outgoing routing updates
type Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Filter outgoing routing updates for a particular protocol. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates_OutgoingRouteUpdate.
    OutgoingRouteUpdate []Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates_OutgoingRouteUpdate
}

func (outgoingRouteUpdates *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates) GetEntityData() *types.CommonEntityData {
    outgoingRouteUpdates.EntityData.YFilter = outgoingRouteUpdates.YFilter
    outgoingRouteUpdates.EntityData.YangName = "outgoing-route-updates"
    outgoingRouteUpdates.EntityData.BundleName = "cisco_ios_xr"
    outgoingRouteUpdates.EntityData.ParentYangName = "default-vrf"
    outgoingRouteUpdates.EntityData.SegmentPath = "outgoing-route-updates"
    outgoingRouteUpdates.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    outgoingRouteUpdates.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    outgoingRouteUpdates.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    outgoingRouteUpdates.EntityData.Children = make(map[string]types.YChild)
    outgoingRouteUpdates.EntityData.Children["outgoing-route-update"] = types.YChild{"OutgoingRouteUpdate", nil}
    for i := range outgoingRouteUpdates.OutgoingRouteUpdate {
        outgoingRouteUpdates.EntityData.Children[types.GetSegmentPath(&outgoingRouteUpdates.OutgoingRouteUpdate[i])] = types.YChild{"OutgoingRouteUpdate", &outgoingRouteUpdates.OutgoingRouteUpdate[i]}
    }
    outgoingRouteUpdates.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(outgoingRouteUpdates.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates_OutgoingRouteUpdate
// Filter outgoing routing updates for a
// particular protocol
type Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates_OutgoingRouteUpdate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Distribute list protocol type. The type is
    // OspfDistListProtocol.
    ProtocolName interface{}

    // Access Control List name. The type is string.
    AccessListName interface{}

    // First half of BGP AS number in XX.YY format.  Mandatory if Protocol is BGP
    // and must not be specified otherwise. Must be a non-zero value if second
    // half is zero. The type is interface{} with range: 0..65535.
    AsXx interface{}

    // Second half of BGP AS number in XX.YY format. Mandatory if Protocol is BGP
    // and must not be specified otherwise. Must be a non-zero value if first half
    // is zero. The type is interface{} with range: 0..4294967295.
    AsYy interface{}

    // OSPF process name. The type is string.
    OspfProcessName interface{}
}

func (outgoingRouteUpdate *Ospf_Processes_Process_DefaultVrf_OutgoingRouteUpdates_OutgoingRouteUpdate) GetEntityData() *types.CommonEntityData {
    outgoingRouteUpdate.EntityData.YFilter = outgoingRouteUpdate.YFilter
    outgoingRouteUpdate.EntityData.YangName = "outgoing-route-update"
    outgoingRouteUpdate.EntityData.BundleName = "cisco_ios_xr"
    outgoingRouteUpdate.EntityData.ParentYangName = "outgoing-route-updates"
    outgoingRouteUpdate.EntityData.SegmentPath = "outgoing-route-update" + "[protocol-name='" + fmt.Sprintf("%v", outgoingRouteUpdate.ProtocolName) + "']"
    outgoingRouteUpdate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    outgoingRouteUpdate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    outgoingRouteUpdate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    outgoingRouteUpdate.EntityData.Children = make(map[string]types.YChild)
    outgoingRouteUpdate.EntityData.Leafs = make(map[string]types.YLeaf)
    outgoingRouteUpdate.EntityData.Leafs["protocol-name"] = types.YLeaf{"ProtocolName", outgoingRouteUpdate.ProtocolName}
    outgoingRouteUpdate.EntityData.Leafs["access-list-name"] = types.YLeaf{"AccessListName", outgoingRouteUpdate.AccessListName}
    outgoingRouteUpdate.EntityData.Leafs["as-xx"] = types.YLeaf{"AsXx", outgoingRouteUpdate.AsXx}
    outgoingRouteUpdate.EntityData.Leafs["as-yy"] = types.YLeaf{"AsYy", outgoingRouteUpdate.AsYy}
    outgoingRouteUpdate.EntityData.Leafs["ospf-process-name"] = types.YLeaf{"OspfProcessName", outgoingRouteUpdate.OspfProcessName}
    return &(outgoingRouteUpdate.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Distance
// Administrative distance configuration
type Ospf_Processes_Process_DefaultVrf_Distance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Define an administrative distance. The type is interface{} with range:
    // 1..255. The default value is 110.
    AdminDistance interface{}

    // OSPF distance configuration.
    OspfDistance Ospf_Processes_Process_DefaultVrf_Distance_OspfDistance

    // IP specific administrative distance configuration.
    IpDistances Ospf_Processes_Process_DefaultVrf_Distance_IpDistances
}

func (distance *Ospf_Processes_Process_DefaultVrf_Distance) GetEntityData() *types.CommonEntityData {
    distance.EntityData.YFilter = distance.YFilter
    distance.EntityData.YangName = "distance"
    distance.EntityData.BundleName = "cisco_ios_xr"
    distance.EntityData.ParentYangName = "default-vrf"
    distance.EntityData.SegmentPath = "distance"
    distance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    distance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    distance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    distance.EntityData.Children = make(map[string]types.YChild)
    distance.EntityData.Children["ospf-distance"] = types.YChild{"OspfDistance", &distance.OspfDistance}
    distance.EntityData.Children["ip-distances"] = types.YChild{"IpDistances", &distance.IpDistances}
    distance.EntityData.Leafs = make(map[string]types.YLeaf)
    distance.EntityData.Leafs["admin-distance"] = types.YLeaf{"AdminDistance", distance.AdminDistance}
    return &(distance.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Distance_OspfDistance
// OSPF distance configuration
type Ospf_Processes_Process_DefaultVrf_Distance_OspfDistance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Distance for intra-area routes. The type is interface{} with range: 1..255.
    // The default value is 110.
    IntraArea interface{}

    // Distance for inter-area routes. The type is interface{} with range: 1..255.
    // The default value is 110.
    InterArea interface{}

    // Distance for external type 5 and type 7 routes. The type is interface{}
    // with range: 1..255. The default value is 110.
    ExternalRoutes interface{}
}

func (ospfDistance *Ospf_Processes_Process_DefaultVrf_Distance_OspfDistance) GetEntityData() *types.CommonEntityData {
    ospfDistance.EntityData.YFilter = ospfDistance.YFilter
    ospfDistance.EntityData.YangName = "ospf-distance"
    ospfDistance.EntityData.BundleName = "cisco_ios_xr"
    ospfDistance.EntityData.ParentYangName = "distance"
    ospfDistance.EntityData.SegmentPath = "ospf-distance"
    ospfDistance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ospfDistance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ospfDistance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ospfDistance.EntityData.Children = make(map[string]types.YChild)
    ospfDistance.EntityData.Leafs = make(map[string]types.YLeaf)
    ospfDistance.EntityData.Leafs["intra-area"] = types.YLeaf{"IntraArea", ospfDistance.IntraArea}
    ospfDistance.EntityData.Leafs["inter-area"] = types.YLeaf{"InterArea", ospfDistance.InterArea}
    ospfDistance.EntityData.Leafs["external-routes"] = types.YLeaf{"ExternalRoutes", ospfDistance.ExternalRoutes}
    return &(ospfDistance.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Distance_IpDistances
// IP specific administrative distance
// configuration
type Ospf_Processes_Process_DefaultVrf_Distance_IpDistances struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Administrative distance configuration for a particular IP address. The type
    // is slice of
    // Ospf_Processes_Process_DefaultVrf_Distance_IpDistances_IpDistance.
    IpDistance []Ospf_Processes_Process_DefaultVrf_Distance_IpDistances_IpDistance
}

func (ipDistances *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances) GetEntityData() *types.CommonEntityData {
    ipDistances.EntityData.YFilter = ipDistances.YFilter
    ipDistances.EntityData.YangName = "ip-distances"
    ipDistances.EntityData.BundleName = "cisco_ios_xr"
    ipDistances.EntityData.ParentYangName = "distance"
    ipDistances.EntityData.SegmentPath = "ip-distances"
    ipDistances.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipDistances.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipDistances.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipDistances.EntityData.Children = make(map[string]types.YChild)
    ipDistances.EntityData.Children["ip-distance"] = types.YChild{"IpDistance", nil}
    for i := range ipDistances.IpDistance {
        ipDistances.EntityData.Children[types.GetSegmentPath(&ipDistances.IpDistance[i])] = types.YChild{"IpDistance", &ipDistances.IpDistance[i]}
    }
    ipDistances.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ipDistances.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Distance_IpDistances_IpDistance
// Administrative distance configuration for a
// particular IP address
type Ospf_Processes_Process_DefaultVrf_Distance_IpDistances_IpDistance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. IP source address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Address interface{}

    // This attribute is a key. IP wild card bits -- inverted mask. The type is
    // string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Wildcard interface{}

    // Administrative distance. The type is interface{} with range: 1..255. The
    // default value is 110.
    Distance interface{}

    // Access Control List name. The type is string.
    AccessListName interface{}
}

func (ipDistance *Ospf_Processes_Process_DefaultVrf_Distance_IpDistances_IpDistance) GetEntityData() *types.CommonEntityData {
    ipDistance.EntityData.YFilter = ipDistance.YFilter
    ipDistance.EntityData.YangName = "ip-distance"
    ipDistance.EntityData.BundleName = "cisco_ios_xr"
    ipDistance.EntityData.ParentYangName = "ip-distances"
    ipDistance.EntityData.SegmentPath = "ip-distance" + "[address='" + fmt.Sprintf("%v", ipDistance.Address) + "']" + "[wildcard='" + fmt.Sprintf("%v", ipDistance.Wildcard) + "']"
    ipDistance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipDistance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipDistance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipDistance.EntityData.Children = make(map[string]types.YChild)
    ipDistance.EntityData.Leafs = make(map[string]types.YLeaf)
    ipDistance.EntityData.Leafs["address"] = types.YLeaf{"Address", ipDistance.Address}
    ipDistance.EntityData.Leafs["wildcard"] = types.YLeaf{"Wildcard", ipDistance.Wildcard}
    ipDistance.EntityData.Leafs["distance"] = types.YLeaf{"Distance", ipDistance.Distance}
    ipDistance.EntityData.Leafs["access-list-name"] = types.YLeaf{"AccessListName", ipDistance.AccessListName}
    return &(ipDistance.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses
// Area configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configuration for a particular area. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress.
    AreaAddress []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress

    // Configuration for a particular area. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId.
    AreaAreaId []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId
}

func (areaAddresses *Ospf_Processes_Process_DefaultVrf_AreaAddresses) GetEntityData() *types.CommonEntityData {
    areaAddresses.EntityData.YFilter = areaAddresses.YFilter
    areaAddresses.EntityData.YangName = "area-addresses"
    areaAddresses.EntityData.BundleName = "cisco_ios_xr"
    areaAddresses.EntityData.ParentYangName = "default-vrf"
    areaAddresses.EntityData.SegmentPath = "area-addresses"
    areaAddresses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaAddresses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaAddresses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaAddresses.EntityData.Children = make(map[string]types.YChild)
    areaAddresses.EntityData.Children["area-address"] = types.YChild{"AreaAddress", nil}
    for i := range areaAddresses.AreaAddress {
        areaAddresses.EntityData.Children[types.GetSegmentPath(&areaAddresses.AreaAddress[i])] = types.YChild{"AreaAddress", &areaAddresses.AreaAddress[i]}
    }
    areaAddresses.EntityData.Children["area-area-id"] = types.YChild{"AreaAreaId", nil}
    for i := range areaAddresses.AreaAreaId {
        areaAddresses.EntityData.Children[types.GetSegmentPath(&areaAddresses.AreaAreaId[i])] = types.YChild{"AreaAreaId", &areaAddresses.AreaAreaId[i]}
    }
    areaAddresses.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(areaAddresses.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress
// Configuration for a particular area
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Area ID if in IP address format. The type is
    // string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Address interface{}

    // Configure a route policy for inbound type-3 lsa filtering. The type is
    // string.
    RoutePolicyIn interface{}

    // Set the summary default-cost of a NSSA/stub area. The type is interface{}
    // with range: 1..16777215. The default value is 1.
    DefaultCost interface{}

    // Configure a route policy for outbound type-3 lsa filtering. The type is
    // string.
    RoutePolicyOut interface{}

    // Specify the area as a stub area (send summary LSA stub area). The type is
    // bool.
    Stub interface{}

    // Configure an OSPF area to run MPLS Traffic Engineering. The type is
    // interface{}.
    MplsTrafficEng interface{}

    // Enable/Disable an OSPF area to advertise intra-area prefixes out of this
    // area as external. The type is bool.
    ExternalOut interface{}

    // Enable/Disable an OSPF area to advertise external prefixes into this area
    // as summary. The type is bool.
    SummaryIn interface{}

    // segment-routing configuration Applicable only in Default VRF. The type is
    // OspfSegmentRouting.
    SegmentRouting interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Virtual Link scope configurations.
    VirtualLinkScopes Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes

    // Sham Link scope configurations.
    ShamLinkScopes Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes

    // Area scope configuration.
    AreaScope Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope

    // Name scope configurations.
    NameScopes Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes

    // Multi Area Interface scope configurations.
    MultiAreaInterfaceScopes Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes

    // Summarize routes matching address/mask (border routers only).
    AreaRanges Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges

    // Specify area as a NSSA area.
    Nssa Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa
}

func (areaAddress *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress) GetEntityData() *types.CommonEntityData {
    areaAddress.EntityData.YFilter = areaAddress.YFilter
    areaAddress.EntityData.YangName = "area-address"
    areaAddress.EntityData.BundleName = "cisco_ios_xr"
    areaAddress.EntityData.ParentYangName = "area-addresses"
    areaAddress.EntityData.SegmentPath = "area-address" + "[address='" + fmt.Sprintf("%v", areaAddress.Address) + "']"
    areaAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaAddress.EntityData.Children = make(map[string]types.YChild)
    areaAddress.EntityData.Children["virtual-link-scopes"] = types.YChild{"VirtualLinkScopes", &areaAddress.VirtualLinkScopes}
    areaAddress.EntityData.Children["sham-link-scopes"] = types.YChild{"ShamLinkScopes", &areaAddress.ShamLinkScopes}
    areaAddress.EntityData.Children["area-scope"] = types.YChild{"AreaScope", &areaAddress.AreaScope}
    areaAddress.EntityData.Children["name-scopes"] = types.YChild{"NameScopes", &areaAddress.NameScopes}
    areaAddress.EntityData.Children["multi-area-interface-scopes"] = types.YChild{"MultiAreaInterfaceScopes", &areaAddress.MultiAreaInterfaceScopes}
    areaAddress.EntityData.Children["area-ranges"] = types.YChild{"AreaRanges", &areaAddress.AreaRanges}
    areaAddress.EntityData.Children["nssa"] = types.YChild{"Nssa", &areaAddress.Nssa}
    areaAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    areaAddress.EntityData.Leafs["address"] = types.YLeaf{"Address", areaAddress.Address}
    areaAddress.EntityData.Leafs["route-policy-in"] = types.YLeaf{"RoutePolicyIn", areaAddress.RoutePolicyIn}
    areaAddress.EntityData.Leafs["default-cost"] = types.YLeaf{"DefaultCost", areaAddress.DefaultCost}
    areaAddress.EntityData.Leafs["route-policy-out"] = types.YLeaf{"RoutePolicyOut", areaAddress.RoutePolicyOut}
    areaAddress.EntityData.Leafs["stub"] = types.YLeaf{"Stub", areaAddress.Stub}
    areaAddress.EntityData.Leafs["mpls-traffic-eng"] = types.YLeaf{"MplsTrafficEng", areaAddress.MplsTrafficEng}
    areaAddress.EntityData.Leafs["external-out"] = types.YLeaf{"ExternalOut", areaAddress.ExternalOut}
    areaAddress.EntityData.Leafs["summary-in"] = types.YLeaf{"SummaryIn", areaAddress.SummaryIn}
    areaAddress.EntityData.Leafs["segment-routing"] = types.YLeaf{"SegmentRouting", areaAddress.SegmentRouting}
    areaAddress.EntityData.Leafs["running"] = types.YLeaf{"Running", areaAddress.Running}
    return &(areaAddress.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes
// Virtual Link scope configurations
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Virtual Link configuration. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope.
    VirtualLinkScope []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope
}

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes) GetEntityData() *types.CommonEntityData {
    virtualLinkScopes.EntityData.YFilter = virtualLinkScopes.YFilter
    virtualLinkScopes.EntityData.YangName = "virtual-link-scopes"
    virtualLinkScopes.EntityData.BundleName = "cisco_ios_xr"
    virtualLinkScopes.EntityData.ParentYangName = "area-address"
    virtualLinkScopes.EntityData.SegmentPath = "virtual-link-scopes"
    virtualLinkScopes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    virtualLinkScopes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    virtualLinkScopes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    virtualLinkScopes.EntityData.Children = make(map[string]types.YChild)
    virtualLinkScopes.EntityData.Children["virtual-link-scope"] = types.YChild{"VirtualLinkScope", nil}
    for i := range virtualLinkScopes.VirtualLinkScope {
        virtualLinkScopes.EntityData.Children[types.GetSegmentPath(&virtualLinkScopes.VirtualLinkScope[i])] = types.YChild{"VirtualLinkScope", &virtualLinkScopes.VirtualLinkScope[i]}
    }
    virtualLinkScopes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(virtualLinkScopes.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope
// Virtual Link configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Router ID of virtual link neighbor. The type is
    // string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Address interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Authentication.
    Authentication Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal
}

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope) GetEntityData() *types.CommonEntityData {
    virtualLinkScope.EntityData.YFilter = virtualLinkScope.YFilter
    virtualLinkScope.EntityData.YangName = "virtual-link-scope"
    virtualLinkScope.EntityData.BundleName = "cisco_ios_xr"
    virtualLinkScope.EntityData.ParentYangName = "virtual-link-scopes"
    virtualLinkScope.EntityData.SegmentPath = "virtual-link-scope" + "[address='" + fmt.Sprintf("%v", virtualLinkScope.Address) + "']"
    virtualLinkScope.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    virtualLinkScope.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    virtualLinkScope.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    virtualLinkScope.EntityData.Children = make(map[string]types.YChild)
    virtualLinkScope.EntityData.Children["authentication"] = types.YChild{"Authentication", &virtualLinkScope.Authentication}
    virtualLinkScope.EntityData.Children["dead-interval-minimal"] = types.YChild{"DeadIntervalMinimal", &virtualLinkScope.DeadIntervalMinimal}
    virtualLinkScope.EntityData.Leafs = make(map[string]types.YLeaf)
    virtualLinkScope.EntityData.Leafs["address"] = types.YLeaf{"Address", virtualLinkScope.Address}
    virtualLinkScope.EntityData.Leafs["hello-interval"] = types.YLeaf{"HelloInterval", virtualLinkScope.HelloInterval}
    virtualLinkScope.EntityData.Leafs["transmit-delay"] = types.YLeaf{"TransmitDelay", virtualLinkScope.TransmitDelay}
    virtualLinkScope.EntityData.Leafs["retransmit-interval"] = types.YLeaf{"RetransmitInterval", virtualLinkScope.RetransmitInterval}
    virtualLinkScope.EntityData.Leafs["running"] = types.YLeaf{"Running", virtualLinkScope.Running}
    return &(virtualLinkScope.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication
// Authentication
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // b'(!.+)|([^!].+)'.
    Key interface{}

    // Authentication type.
    Type_ Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "cisco_ios_xr"
    authentication.EntityData.ParentYangName = "virtual-link-scope"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authentication.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authentication.EntityData.Children = make(map[string]types.YChild)
    authentication.EntityData.Children["type"] = types.YChild{"Type_", &authentication.Type_}
    authentication.EntityData.Children["message-digest-keies"] = types.YChild{"MessageDigestKeies", &authentication.MessageDigestKeies}
    authentication.EntityData.Leafs = make(map[string]types.YLeaf)
    authentication.EntityData.Leafs["key"] = types.YLeaf{"Key", authentication.Key}
    return &(authentication.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "type"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "authentication"
    self.EntityData.SegmentPath = "type"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    self.EntityData.Leafs["authen-type"] = types.YLeaf{"AuthenType", self.AuthenType}
    self.EntityData.Leafs["keychain-authen-type"] = types.YLeaf{"KeychainAuthenType", self.KeychainAuthenType}
    self.EntityData.Leafs["keychain-name"] = types.YLeaf{"KeychainName", self.KeychainName}
    return &(self.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetEntityData() *types.CommonEntityData {
    messageDigestKeies.EntityData.YFilter = messageDigestKeies.YFilter
    messageDigestKeies.EntityData.YangName = "message-digest-keies"
    messageDigestKeies.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKeies.EntityData.ParentYangName = "authentication"
    messageDigestKeies.EntityData.SegmentPath = "message-digest-keies"
    messageDigestKeies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKeies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKeies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKeies.EntityData.Children = make(map[string]types.YChild)
    messageDigestKeies.EntityData.Children["message-digest-key"] = types.YChild{"MessageDigestKey", nil}
    for i := range messageDigestKeies.MessageDigestKey {
        messageDigestKeies.EntityData.Children[types.GetSegmentPath(&messageDigestKeies.MessageDigestKey[i])] = types.YChild{"MessageDigestKey", &messageDigestKeies.MessageDigestKey[i]}
    }
    messageDigestKeies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(messageDigestKeies.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: b'(!.+)|([^!].+)'. This
    // attribute is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetEntityData() *types.CommonEntityData {
    messageDigestKey.EntityData.YFilter = messageDigestKey.YFilter
    messageDigestKey.EntityData.YangName = "message-digest-key"
    messageDigestKey.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKey.EntityData.ParentYangName = "message-digest-keies"
    messageDigestKey.EntityData.SegmentPath = "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
    messageDigestKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKey.EntityData.Children = make(map[string]types.YChild)
    messageDigestKey.EntityData.Leafs = make(map[string]types.YLeaf)
    messageDigestKey.EntityData.Leafs["key-id"] = types.YLeaf{"KeyId", messageDigestKey.KeyId}
    messageDigestKey.EntityData.Leafs["password"] = types.YLeaf{"Password", messageDigestKey.Password}
    return &(messageDigestKey.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetEntityData() *types.CommonEntityData {
    deadIntervalMinimal.EntityData.YFilter = deadIntervalMinimal.YFilter
    deadIntervalMinimal.EntityData.YangName = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.BundleName = "cisco_ios_xr"
    deadIntervalMinimal.EntityData.ParentYangName = "virtual-link-scope"
    deadIntervalMinimal.EntityData.SegmentPath = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    deadIntervalMinimal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    deadIntervalMinimal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    deadIntervalMinimal.EntityData.Children = make(map[string]types.YChild)
    deadIntervalMinimal.EntityData.Leafs = make(map[string]types.YLeaf)
    deadIntervalMinimal.EntityData.Leafs["interval"] = types.YLeaf{"Interval", deadIntervalMinimal.Interval}
    deadIntervalMinimal.EntityData.Leafs["multiplier"] = types.YLeaf{"Multiplier", deadIntervalMinimal.Multiplier}
    return &(deadIntervalMinimal.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes
// Sham Link scope configurations
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sham Link configuration. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope.
    ShamLinkScope []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope
}

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes) GetEntityData() *types.CommonEntityData {
    shamLinkScopes.EntityData.YFilter = shamLinkScopes.YFilter
    shamLinkScopes.EntityData.YangName = "sham-link-scopes"
    shamLinkScopes.EntityData.BundleName = "cisco_ios_xr"
    shamLinkScopes.EntityData.ParentYangName = "area-address"
    shamLinkScopes.EntityData.SegmentPath = "sham-link-scopes"
    shamLinkScopes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    shamLinkScopes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    shamLinkScopes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    shamLinkScopes.EntityData.Children = make(map[string]types.YChild)
    shamLinkScopes.EntityData.Children["sham-link-scope"] = types.YChild{"ShamLinkScope", nil}
    for i := range shamLinkScopes.ShamLinkScope {
        shamLinkScopes.EntityData.Children[types.GetSegmentPath(&shamLinkScopes.ShamLinkScope[i])] = types.YChild{"ShamLinkScope", &shamLinkScopes.ShamLinkScope[i]}
    }
    shamLinkScopes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(shamLinkScopes.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope
// Sham Link configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Address of the local sham-link endpoint. The type
    // is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // This attribute is a key. Address of the remote sham-link endpoint. The type
    // is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Address of the local sham-link endpoint. Enter an IP Address. The type is
    // string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Source interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Authentication.
    Authentication Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal
}

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope) GetEntityData() *types.CommonEntityData {
    shamLinkScope.EntityData.YFilter = shamLinkScope.YFilter
    shamLinkScope.EntityData.YangName = "sham-link-scope"
    shamLinkScope.EntityData.BundleName = "cisco_ios_xr"
    shamLinkScope.EntityData.ParentYangName = "sham-link-scopes"
    shamLinkScope.EntityData.SegmentPath = "sham-link-scope" + "[source-address='" + fmt.Sprintf("%v", shamLinkScope.SourceAddress) + "']" + "[destination-address='" + fmt.Sprintf("%v", shamLinkScope.DestinationAddress) + "']"
    shamLinkScope.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    shamLinkScope.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    shamLinkScope.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    shamLinkScope.EntityData.Children = make(map[string]types.YChild)
    shamLinkScope.EntityData.Children["authentication"] = types.YChild{"Authentication", &shamLinkScope.Authentication}
    shamLinkScope.EntityData.Children["dead-interval-minimal"] = types.YChild{"DeadIntervalMinimal", &shamLinkScope.DeadIntervalMinimal}
    shamLinkScope.EntityData.Leafs = make(map[string]types.YLeaf)
    shamLinkScope.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", shamLinkScope.SourceAddress}
    shamLinkScope.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", shamLinkScope.DestinationAddress}
    shamLinkScope.EntityData.Leafs["source"] = types.YLeaf{"Source", shamLinkScope.Source}
    shamLinkScope.EntityData.Leafs["cost"] = types.YLeaf{"Cost", shamLinkScope.Cost}
    shamLinkScope.EntityData.Leafs["hello-interval"] = types.YLeaf{"HelloInterval", shamLinkScope.HelloInterval}
    shamLinkScope.EntityData.Leafs["transmit-delay"] = types.YLeaf{"TransmitDelay", shamLinkScope.TransmitDelay}
    shamLinkScope.EntityData.Leafs["retransmit-interval"] = types.YLeaf{"RetransmitInterval", shamLinkScope.RetransmitInterval}
    shamLinkScope.EntityData.Leafs["running"] = types.YLeaf{"Running", shamLinkScope.Running}
    return &(shamLinkScope.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication
// Authentication
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // b'(!.+)|([^!].+)'.
    Key interface{}

    // Authentication type.
    Type_ Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "cisco_ios_xr"
    authentication.EntityData.ParentYangName = "sham-link-scope"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authentication.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authentication.EntityData.Children = make(map[string]types.YChild)
    authentication.EntityData.Children["type"] = types.YChild{"Type_", &authentication.Type_}
    authentication.EntityData.Children["message-digest-keies"] = types.YChild{"MessageDigestKeies", &authentication.MessageDigestKeies}
    authentication.EntityData.Leafs = make(map[string]types.YLeaf)
    authentication.EntityData.Leafs["key"] = types.YLeaf{"Key", authentication.Key}
    return &(authentication.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "type"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "authentication"
    self.EntityData.SegmentPath = "type"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    self.EntityData.Leafs["authen-type"] = types.YLeaf{"AuthenType", self.AuthenType}
    self.EntityData.Leafs["keychain-authen-type"] = types.YLeaf{"KeychainAuthenType", self.KeychainAuthenType}
    self.EntityData.Leafs["keychain-name"] = types.YLeaf{"KeychainName", self.KeychainName}
    return &(self.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetEntityData() *types.CommonEntityData {
    messageDigestKeies.EntityData.YFilter = messageDigestKeies.YFilter
    messageDigestKeies.EntityData.YangName = "message-digest-keies"
    messageDigestKeies.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKeies.EntityData.ParentYangName = "authentication"
    messageDigestKeies.EntityData.SegmentPath = "message-digest-keies"
    messageDigestKeies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKeies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKeies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKeies.EntityData.Children = make(map[string]types.YChild)
    messageDigestKeies.EntityData.Children["message-digest-key"] = types.YChild{"MessageDigestKey", nil}
    for i := range messageDigestKeies.MessageDigestKey {
        messageDigestKeies.EntityData.Children[types.GetSegmentPath(&messageDigestKeies.MessageDigestKey[i])] = types.YChild{"MessageDigestKey", &messageDigestKeies.MessageDigestKey[i]}
    }
    messageDigestKeies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(messageDigestKeies.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: b'(!.+)|([^!].+)'. This
    // attribute is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetEntityData() *types.CommonEntityData {
    messageDigestKey.EntityData.YFilter = messageDigestKey.YFilter
    messageDigestKey.EntityData.YangName = "message-digest-key"
    messageDigestKey.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKey.EntityData.ParentYangName = "message-digest-keies"
    messageDigestKey.EntityData.SegmentPath = "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
    messageDigestKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKey.EntityData.Children = make(map[string]types.YChild)
    messageDigestKey.EntityData.Leafs = make(map[string]types.YLeaf)
    messageDigestKey.EntityData.Leafs["key-id"] = types.YLeaf{"KeyId", messageDigestKey.KeyId}
    messageDigestKey.EntityData.Leafs["password"] = types.YLeaf{"Password", messageDigestKey.Password}
    return &(messageDigestKey.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetEntityData() *types.CommonEntityData {
    deadIntervalMinimal.EntityData.YFilter = deadIntervalMinimal.YFilter
    deadIntervalMinimal.EntityData.YangName = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.BundleName = "cisco_ios_xr"
    deadIntervalMinimal.EntityData.ParentYangName = "sham-link-scope"
    deadIntervalMinimal.EntityData.SegmentPath = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    deadIntervalMinimal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    deadIntervalMinimal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    deadIntervalMinimal.EntityData.Children = make(map[string]types.YChild)
    deadIntervalMinimal.EntityData.Leafs = make(map[string]types.YLeaf)
    deadIntervalMinimal.EntityData.Leafs["interval"] = types.YLeaf{"Interval", deadIntervalMinimal.Interval}
    deadIntervalMinimal.EntityData.Leafs["multiplier"] = types.YLeaf{"Multiplier", deadIntervalMinimal.Multiplier}
    return &(deadIntervalMinimal.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope
// Area scope configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Enable/Disable prefix suppression for primary addresses. The type is bool.
    // The default value is false.
    PrefixSuppressionPrimary interface{}

    // Enable/Disable ignoring of MTU in DBD packets. The type is bool. The
    // default value is false.
    MtuIgnore interface{}

    // Enable/Disable MPLS LDP sync for igp-shortcuts. The type is bool.
    LdpSyncIgpShortcuts interface{}

    // Enable MPLS LDP Auto Config. The type is interface{}.
    LdpAutoConfig interface{}

    // Type of attached network. The type is OspfNetwork.
    NetworkType interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Enable/Disable advertising loopback as a stub network. The type is bool.
    // The default value is false.
    LoopbackStubNetwork interface{}

    // Enable/Disable prefix suppression for secondary addresses. The type is
    // bool. The default value is false.
    PrefixSuppressionSecondary interface{}

    // Enable/Disable OSPF demand circuit. The type is bool. The default value is
    // false.
    DemandCircuit interface{}

    // When enabled, prevent sending HELLO packets over link. The type is bool.
    // The default value is false.
    Passive interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Customize size of OSPF packets upto MTU. The type is interface{} with
    // range: 576..10000.
    PacketSize interface{}

    // Enable/Disable MPLS LDP sync. The type is bool.
    LdpSync interface{}

    // Filter OSPF LSA during synchronization and flooding. The type is bool. The
    // default value is false.
    DatabaseFilter interface{}

    // Enable/Disable registration for early interface down notifications. The
    // type is bool. The default value is false.
    LinkDownFastDetect interface{}

    // segment-routing forwarding configuration Applicableonly in Default VRF. The
    // type is OspfSegmentRoutingForwarding.
    SegmentRoutingForwarding interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Router priority for DR and BDR election. The type is interface{} with
    // range: 0..255. The default value is 1.
    Priority interface{}

    // Enable/Disable OSPF flood reduction. The type is bool. The default value is
    // false.
    FloodReduction interface{}

    // Filter networks intalled to RIB (disable as ACL name means filtering is
    // disabled).
    DistributeList Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DistributeList

    // BFD configuration.
    Bfd Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Bfd

    // Authentication.
    Authentication Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication

    // Container class for security related configuration parameters.
    Security Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal

    // Fast-reroute configuration.
    FastReroute Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute

    // Interface fallback cost.
    CostFallback Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_CostFallback
}

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope) GetEntityData() *types.CommonEntityData {
    areaScope.EntityData.YFilter = areaScope.YFilter
    areaScope.EntityData.YangName = "area-scope"
    areaScope.EntityData.BundleName = "cisco_ios_xr"
    areaScope.EntityData.ParentYangName = "area-address"
    areaScope.EntityData.SegmentPath = "area-scope"
    areaScope.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaScope.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaScope.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaScope.EntityData.Children = make(map[string]types.YChild)
    areaScope.EntityData.Children["distribute-list"] = types.YChild{"DistributeList", &areaScope.DistributeList}
    areaScope.EntityData.Children["bfd"] = types.YChild{"Bfd", &areaScope.Bfd}
    areaScope.EntityData.Children["authentication"] = types.YChild{"Authentication", &areaScope.Authentication}
    areaScope.EntityData.Children["security"] = types.YChild{"Security", &areaScope.Security}
    areaScope.EntityData.Children["dead-interval-minimal"] = types.YChild{"DeadIntervalMinimal", &areaScope.DeadIntervalMinimal}
    areaScope.EntityData.Children["fast-reroute"] = types.YChild{"FastReroute", &areaScope.FastReroute}
    areaScope.EntityData.Children["cost-fallback"] = types.YChild{"CostFallback", &areaScope.CostFallback}
    areaScope.EntityData.Leafs = make(map[string]types.YLeaf)
    areaScope.EntityData.Leafs["cost"] = types.YLeaf{"Cost", areaScope.Cost}
    areaScope.EntityData.Leafs["prefix-suppression-primary"] = types.YLeaf{"PrefixSuppressionPrimary", areaScope.PrefixSuppressionPrimary}
    areaScope.EntityData.Leafs["mtu-ignore"] = types.YLeaf{"MtuIgnore", areaScope.MtuIgnore}
    areaScope.EntityData.Leafs["ldp-sync-igp-shortcuts"] = types.YLeaf{"LdpSyncIgpShortcuts", areaScope.LdpSyncIgpShortcuts}
    areaScope.EntityData.Leafs["ldp-auto-config"] = types.YLeaf{"LdpAutoConfig", areaScope.LdpAutoConfig}
    areaScope.EntityData.Leafs["network-type"] = types.YLeaf{"NetworkType", areaScope.NetworkType}
    areaScope.EntityData.Leafs["hello-interval"] = types.YLeaf{"HelloInterval", areaScope.HelloInterval}
    areaScope.EntityData.Leafs["loopback-stub-network"] = types.YLeaf{"LoopbackStubNetwork", areaScope.LoopbackStubNetwork}
    areaScope.EntityData.Leafs["prefix-suppression-secondary"] = types.YLeaf{"PrefixSuppressionSecondary", areaScope.PrefixSuppressionSecondary}
    areaScope.EntityData.Leafs["demand-circuit"] = types.YLeaf{"DemandCircuit", areaScope.DemandCircuit}
    areaScope.EntityData.Leafs["passive"] = types.YLeaf{"Passive", areaScope.Passive}
    areaScope.EntityData.Leafs["transmit-delay"] = types.YLeaf{"TransmitDelay", areaScope.TransmitDelay}
    areaScope.EntityData.Leafs["packet-size"] = types.YLeaf{"PacketSize", areaScope.PacketSize}
    areaScope.EntityData.Leafs["ldp-sync"] = types.YLeaf{"LdpSync", areaScope.LdpSync}
    areaScope.EntityData.Leafs["database-filter"] = types.YLeaf{"DatabaseFilter", areaScope.DatabaseFilter}
    areaScope.EntityData.Leafs["link-down-fast-detect"] = types.YLeaf{"LinkDownFastDetect", areaScope.LinkDownFastDetect}
    areaScope.EntityData.Leafs["segment-routing-forwarding"] = types.YLeaf{"SegmentRoutingForwarding", areaScope.SegmentRoutingForwarding}
    areaScope.EntityData.Leafs["retransmit-interval"] = types.YLeaf{"RetransmitInterval", areaScope.RetransmitInterval}
    areaScope.EntityData.Leafs["priority"] = types.YLeaf{"Priority", areaScope.Priority}
    areaScope.EntityData.Leafs["flood-reduction"] = types.YLeaf{"FloodReduction", areaScope.FloodReduction}
    return &(areaScope.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DistributeList
// Filter networks intalled to RIB (disable as ACL
// name means filtering is disabled)
// This type is a presence type.
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DistributeList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Access Control List name. The type is string.
    AccessListName interface{}

    // Route Policy name. The type is string.
    RoutePolicyName interface{}
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DistributeList) GetEntityData() *types.CommonEntityData {
    distributeList.EntityData.YFilter = distributeList.YFilter
    distributeList.EntityData.YangName = "distribute-list"
    distributeList.EntityData.BundleName = "cisco_ios_xr"
    distributeList.EntityData.ParentYangName = "area-scope"
    distributeList.EntityData.SegmentPath = "distribute-list"
    distributeList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    distributeList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    distributeList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    distributeList.EntityData.Children = make(map[string]types.YChild)
    distributeList.EntityData.Leafs = make(map[string]types.YLeaf)
    distributeList.EntityData.Leafs["access-list-name"] = types.YLeaf{"AccessListName", distributeList.AccessListName}
    distributeList.EntityData.Leafs["route-policy-name"] = types.YLeaf{"RoutePolicyName", distributeList.RoutePolicyName}
    return &(distributeList.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Bfd
// BFD configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Bfd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Hello interval for BFD sessions created by OSPF. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    Interval interface{}

    // Detection multiplier for BFD sessions created by OSPF. The type is
    // interface{} with range: 2..50.
    DetectionMultiplier interface{}

    // use of Bidirectional Forwarding Detection. The type is BfdEnableMode.
    FastDetectMode interface{}
}

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Bfd) GetEntityData() *types.CommonEntityData {
    bfd.EntityData.YFilter = bfd.YFilter
    bfd.EntityData.YangName = "bfd"
    bfd.EntityData.BundleName = "cisco_ios_xr"
    bfd.EntityData.ParentYangName = "area-scope"
    bfd.EntityData.SegmentPath = "bfd"
    bfd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfd.EntityData.Children = make(map[string]types.YChild)
    bfd.EntityData.Leafs = make(map[string]types.YLeaf)
    bfd.EntityData.Leafs["interval"] = types.YLeaf{"Interval", bfd.Interval}
    bfd.EntityData.Leafs["detection-multiplier"] = types.YLeaf{"DetectionMultiplier", bfd.DetectionMultiplier}
    bfd.EntityData.Leafs["fast-detect-mode"] = types.YLeaf{"FastDetectMode", bfd.FastDetectMode}
    return &(bfd.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication
// Authentication
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // b'(!.+)|([^!].+)'.
    Key interface{}

    // Authentication type.
    Type_ Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "cisco_ios_xr"
    authentication.EntityData.ParentYangName = "area-scope"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authentication.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authentication.EntityData.Children = make(map[string]types.YChild)
    authentication.EntityData.Children["type"] = types.YChild{"Type_", &authentication.Type_}
    authentication.EntityData.Children["message-digest-keies"] = types.YChild{"MessageDigestKeies", &authentication.MessageDigestKeies}
    authentication.EntityData.Leafs = make(map[string]types.YLeaf)
    authentication.EntityData.Leafs["key"] = types.YLeaf{"Key", authentication.Key}
    return &(authentication.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_Type) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "type"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "authentication"
    self.EntityData.SegmentPath = "type"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    self.EntityData.Leafs["authen-type"] = types.YLeaf{"AuthenType", self.AuthenType}
    self.EntityData.Leafs["keychain-authen-type"] = types.YLeaf{"KeychainAuthenType", self.KeychainAuthenType}
    self.EntityData.Leafs["keychain-name"] = types.YLeaf{"KeychainName", self.KeychainName}
    return &(self.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies) GetEntityData() *types.CommonEntityData {
    messageDigestKeies.EntityData.YFilter = messageDigestKeies.YFilter
    messageDigestKeies.EntityData.YangName = "message-digest-keies"
    messageDigestKeies.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKeies.EntityData.ParentYangName = "authentication"
    messageDigestKeies.EntityData.SegmentPath = "message-digest-keies"
    messageDigestKeies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKeies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKeies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKeies.EntityData.Children = make(map[string]types.YChild)
    messageDigestKeies.EntityData.Children["message-digest-key"] = types.YChild{"MessageDigestKey", nil}
    for i := range messageDigestKeies.MessageDigestKey {
        messageDigestKeies.EntityData.Children[types.GetSegmentPath(&messageDigestKeies.MessageDigestKey[i])] = types.YChild{"MessageDigestKey", &messageDigestKeies.MessageDigestKey[i]}
    }
    messageDigestKeies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(messageDigestKeies.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: b'(!.+)|([^!].+)'. This
    // attribute is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetEntityData() *types.CommonEntityData {
    messageDigestKey.EntityData.YFilter = messageDigestKey.YFilter
    messageDigestKey.EntityData.YangName = "message-digest-key"
    messageDigestKey.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKey.EntityData.ParentYangName = "message-digest-keies"
    messageDigestKey.EntityData.SegmentPath = "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
    messageDigestKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKey.EntityData.Children = make(map[string]types.YChild)
    messageDigestKey.EntityData.Leafs = make(map[string]types.YLeaf)
    messageDigestKey.EntityData.Leafs["key-id"] = types.YLeaf{"KeyId", messageDigestKey.KeyId}
    messageDigestKey.EntityData.Leafs["password"] = types.YLeaf{"Password", messageDigestKey.Password}
    return &(messageDigestKey.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security
// Container class for security related
// configuration parameters
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enabling turns on TTL security.
    Ttl Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl
}

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security) GetEntityData() *types.CommonEntityData {
    security.EntityData.YFilter = security.YFilter
    security.EntityData.YangName = "security"
    security.EntityData.BundleName = "cisco_ios_xr"
    security.EntityData.ParentYangName = "area-scope"
    security.EntityData.SegmentPath = "security"
    security.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    security.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    security.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    security.EntityData.Children = make(map[string]types.YChild)
    security.EntityData.Children["ttl"] = types.YChild{"Ttl", &security.Ttl}
    security.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(security.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl
// Enabling turns on TTL security
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable TTL security. The type is bool.
    Enable interface{}

    // Hop count. The type is interface{} with range: 1..254.
    HopCount interface{}
}

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_Security_Ttl) GetEntityData() *types.CommonEntityData {
    ttl.EntityData.YFilter = ttl.YFilter
    ttl.EntityData.YangName = "ttl"
    ttl.EntityData.BundleName = "cisco_ios_xr"
    ttl.EntityData.ParentYangName = "security"
    ttl.EntityData.SegmentPath = "ttl"
    ttl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ttl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ttl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ttl.EntityData.Children = make(map[string]types.YChild)
    ttl.EntityData.Leafs = make(map[string]types.YLeaf)
    ttl.EntityData.Leafs["enable"] = types.YLeaf{"Enable", ttl.Enable}
    ttl.EntityData.Leafs["hop-count"] = types.YLeaf{"HopCount", ttl.HopCount}
    return &(ttl.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_DeadIntervalMinimal) GetEntityData() *types.CommonEntityData {
    deadIntervalMinimal.EntityData.YFilter = deadIntervalMinimal.YFilter
    deadIntervalMinimal.EntityData.YangName = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.BundleName = "cisco_ios_xr"
    deadIntervalMinimal.EntityData.ParentYangName = "area-scope"
    deadIntervalMinimal.EntityData.SegmentPath = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    deadIntervalMinimal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    deadIntervalMinimal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    deadIntervalMinimal.EntityData.Children = make(map[string]types.YChild)
    deadIntervalMinimal.EntityData.Leafs = make(map[string]types.YLeaf)
    deadIntervalMinimal.EntityData.Leafs["interval"] = types.YLeaf{"Interval", deadIntervalMinimal.Interval}
    deadIntervalMinimal.EntityData.Leafs["multiplier"] = types.YLeaf{"Multiplier", deadIntervalMinimal.Multiplier}
    return &(deadIntervalMinimal.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute
// Fast-reroute configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // OspfFastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink

    // Fast-reroute per-prefix global configuration.
    PerPrefix Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetEntityData() *types.CommonEntityData {
    fastReroute.EntityData.YFilter = fastReroute.YFilter
    fastReroute.EntityData.YangName = "fast-reroute"
    fastReroute.EntityData.BundleName = "cisco_ios_xr"
    fastReroute.EntityData.ParentYangName = "area-scope"
    fastReroute.EntityData.SegmentPath = "fast-reroute"
    fastReroute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fastReroute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fastReroute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fastReroute.EntityData.Children = make(map[string]types.YChild)
    fastReroute.EntityData.Children["per-link"] = types.YChild{"PerLink", &fastReroute.PerLink}
    fastReroute.EntityData.Children["per-prefix"] = types.YChild{"PerPrefix", &fastReroute.PerPrefix}
    fastReroute.EntityData.Leafs = make(map[string]types.YLeaf)
    fastReroute.EntityData.Leafs["fast-reroute-enable"] = types.YLeaf{"FastRerouteEnable", fastReroute.FastRerouteEnable}
    return &(fastReroute.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetEntityData() *types.CommonEntityData {
    perLink.EntityData.YFilter = perLink.YFilter
    perLink.EntityData.YangName = "per-link"
    perLink.EntityData.BundleName = "cisco_ios_xr"
    perLink.EntityData.ParentYangName = "fast-reroute"
    perLink.EntityData.SegmentPath = "per-link"
    perLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perLink.EntityData.Children = make(map[string]types.YChild)
    perLink.EntityData.Children["candidate-interfaces"] = types.YChild{"CandidateInterfaces", &perLink.CandidateInterfaces}
    perLink.EntityData.Children["exclude-interfaces"] = types.YChild{"ExcludeInterfaces", &perLink.ExcludeInterfaces}
    perLink.EntityData.Leafs = make(map[string]types.YLeaf)
    perLink.EntityData.Leafs["fast-reroute-use-candidate-only"] = types.YLeaf{"FastRerouteUseCandidateOnly", perLink.FastRerouteUseCandidateOnly}
    return &(perLink.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetEntityData() *types.CommonEntityData {
    candidateInterfaces.EntityData.YFilter = candidateInterfaces.YFilter
    candidateInterfaces.EntityData.YangName = "candidate-interfaces"
    candidateInterfaces.EntityData.BundleName = "cisco_ios_xr"
    candidateInterfaces.EntityData.ParentYangName = "per-link"
    candidateInterfaces.EntityData.SegmentPath = "candidate-interfaces"
    candidateInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterfaces.EntityData.Children = make(map[string]types.YChild)
    candidateInterfaces.EntityData.Children["candidate-interface"] = types.YChild{"CandidateInterface", nil}
    for i := range candidateInterfaces.CandidateInterface {
        candidateInterfaces.EntityData.Children[types.GetSegmentPath(&candidateInterfaces.CandidateInterface[i])] = types.YChild{"CandidateInterface", &candidateInterfaces.CandidateInterface[i]}
    }
    candidateInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(candidateInterfaces.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetEntityData() *types.CommonEntityData {
    candidateInterface.EntityData.YFilter = candidateInterface.YFilter
    candidateInterface.EntityData.YangName = "candidate-interface"
    candidateInterface.EntityData.BundleName = "cisco_ios_xr"
    candidateInterface.EntityData.ParentYangName = "candidate-interfaces"
    candidateInterface.EntityData.SegmentPath = "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
    candidateInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterface.EntityData.Children = make(map[string]types.YChild)
    candidateInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    candidateInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", candidateInterface.InterfaceName}
    return &(candidateInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetEntityData() *types.CommonEntityData {
    excludeInterfaces.EntityData.YFilter = excludeInterfaces.YFilter
    excludeInterfaces.EntityData.YangName = "exclude-interfaces"
    excludeInterfaces.EntityData.BundleName = "cisco_ios_xr"
    excludeInterfaces.EntityData.ParentYangName = "per-link"
    excludeInterfaces.EntityData.SegmentPath = "exclude-interfaces"
    excludeInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterfaces.EntityData.Children = make(map[string]types.YChild)
    excludeInterfaces.EntityData.Children["exclude-interface"] = types.YChild{"ExcludeInterface", nil}
    for i := range excludeInterfaces.ExcludeInterface {
        excludeInterfaces.EntityData.Children[types.GetSegmentPath(&excludeInterfaces.ExcludeInterface[i])] = types.YChild{"ExcludeInterface", &excludeInterfaces.ExcludeInterface[i]}
    }
    excludeInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(excludeInterfaces.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetEntityData() *types.CommonEntityData {
    excludeInterface.EntityData.YFilter = excludeInterface.YFilter
    excludeInterface.EntityData.YangName = "exclude-interface"
    excludeInterface.EntityData.BundleName = "cisco_ios_xr"
    excludeInterface.EntityData.ParentYangName = "exclude-interfaces"
    excludeInterface.EntityData.SegmentPath = "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
    excludeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterface.EntityData.Children = make(map[string]types.YChild)
    excludeInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    excludeInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", excludeInterface.InterfaceName}
    return &(excludeInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix
// Fast-reroute per-prefix global configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology Independet LFA configuration. The type is bool.
    TopologyIndependentLfa interface{}

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Remote LFA configuration.
    RemoteLfa Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa

    // Fast-reroute tiebreakers configurations.
    Tiebreakers Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetEntityData() *types.CommonEntityData {
    perPrefix.EntityData.YFilter = perPrefix.YFilter
    perPrefix.EntityData.YangName = "per-prefix"
    perPrefix.EntityData.BundleName = "cisco_ios_xr"
    perPrefix.EntityData.ParentYangName = "fast-reroute"
    perPrefix.EntityData.SegmentPath = "per-prefix"
    perPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perPrefix.EntityData.Children = make(map[string]types.YChild)
    perPrefix.EntityData.Children["remote-lfa"] = types.YChild{"RemoteLfa", &perPrefix.RemoteLfa}
    perPrefix.EntityData.Children["tiebreakers"] = types.YChild{"Tiebreakers", &perPrefix.Tiebreakers}
    perPrefix.EntityData.Children["candidate-interfaces"] = types.YChild{"CandidateInterfaces", &perPrefix.CandidateInterfaces}
    perPrefix.EntityData.Children["exclude-interfaces"] = types.YChild{"ExcludeInterfaces", &perPrefix.ExcludeInterfaces}
    perPrefix.EntityData.Leafs = make(map[string]types.YLeaf)
    perPrefix.EntityData.Leafs["topology-independent-lfa"] = types.YLeaf{"TopologyIndependentLfa", perPrefix.TopologyIndependentLfa}
    perPrefix.EntityData.Leafs["fast-reroute-use-candidate-only"] = types.YLeaf{"FastRerouteUseCandidateOnly", perPrefix.FastRerouteUseCandidateOnly}
    return &(perPrefix.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa
// Remote LFA configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable/Disable remote LFA computation. The type is OspfFrrRlfaTunnel.
    Tunnel interface{}

    // Maximum path cost to remote LFA. The type is interface{} with range:
    // 1..4294967295.
    MaximumCost interface{}
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetEntityData() *types.CommonEntityData {
    remoteLfa.EntityData.YFilter = remoteLfa.YFilter
    remoteLfa.EntityData.YangName = "remote-lfa"
    remoteLfa.EntityData.BundleName = "cisco_ios_xr"
    remoteLfa.EntityData.ParentYangName = "per-prefix"
    remoteLfa.EntityData.SegmentPath = "remote-lfa"
    remoteLfa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteLfa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteLfa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteLfa.EntityData.Children = make(map[string]types.YChild)
    remoteLfa.EntityData.Leafs = make(map[string]types.YLeaf)
    remoteLfa.EntityData.Leafs["tunnel"] = types.YLeaf{"Tunnel", remoteLfa.Tunnel}
    remoteLfa.EntityData.Leafs["maximum-cost"] = types.YLeaf{"MaximumCost", remoteLfa.MaximumCost}
    return &(remoteLfa.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers
// Fast-reroute tiebreakers configurations
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fast-reroute tiebreakers configuration. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker.
    Tiebreaker []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetEntityData() *types.CommonEntityData {
    tiebreakers.EntityData.YFilter = tiebreakers.YFilter
    tiebreakers.EntityData.YangName = "tiebreakers"
    tiebreakers.EntityData.BundleName = "cisco_ios_xr"
    tiebreakers.EntityData.ParentYangName = "per-prefix"
    tiebreakers.EntityData.SegmentPath = "tiebreakers"
    tiebreakers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tiebreakers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tiebreakers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tiebreakers.EntityData.Children = make(map[string]types.YChild)
    tiebreakers.EntityData.Children["tiebreaker"] = types.YChild{"Tiebreaker", nil}
    for i := range tiebreakers.Tiebreaker {
        tiebreakers.EntityData.Children[types.GetSegmentPath(&tiebreakers.Tiebreaker[i])] = types.YChild{"Tiebreaker", &tiebreakers.Tiebreaker[i]}
    }
    tiebreakers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tiebreakers.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
// Fast-reroute tiebreakers configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Tiebreaker type. The type is
    // OspfFastRerouteTiebreakersIntf.
    TiebreakerType interface{}

    // Index value for a tiebreaker, 0 to disable. The type is interface{} with
    // range: 0..255. This attribute is mandatory.
    TiebreakerIndex interface{}
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetEntityData() *types.CommonEntityData {
    tiebreaker.EntityData.YFilter = tiebreaker.YFilter
    tiebreaker.EntityData.YangName = "tiebreaker"
    tiebreaker.EntityData.BundleName = "cisco_ios_xr"
    tiebreaker.EntityData.ParentYangName = "tiebreakers"
    tiebreaker.EntityData.SegmentPath = "tiebreaker" + "[tiebreaker-type='" + fmt.Sprintf("%v", tiebreaker.TiebreakerType) + "']"
    tiebreaker.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tiebreaker.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tiebreaker.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tiebreaker.EntityData.Children = make(map[string]types.YChild)
    tiebreaker.EntityData.Leafs = make(map[string]types.YLeaf)
    tiebreaker.EntityData.Leafs["tiebreaker-type"] = types.YLeaf{"TiebreakerType", tiebreaker.TiebreakerType}
    tiebreaker.EntityData.Leafs["tiebreaker-index"] = types.YLeaf{"TiebreakerIndex", tiebreaker.TiebreakerIndex}
    return &(tiebreaker.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetEntityData() *types.CommonEntityData {
    candidateInterfaces.EntityData.YFilter = candidateInterfaces.YFilter
    candidateInterfaces.EntityData.YangName = "candidate-interfaces"
    candidateInterfaces.EntityData.BundleName = "cisco_ios_xr"
    candidateInterfaces.EntityData.ParentYangName = "per-prefix"
    candidateInterfaces.EntityData.SegmentPath = "candidate-interfaces"
    candidateInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterfaces.EntityData.Children = make(map[string]types.YChild)
    candidateInterfaces.EntityData.Children["candidate-interface"] = types.YChild{"CandidateInterface", nil}
    for i := range candidateInterfaces.CandidateInterface {
        candidateInterfaces.EntityData.Children[types.GetSegmentPath(&candidateInterfaces.CandidateInterface[i])] = types.YChild{"CandidateInterface", &candidateInterfaces.CandidateInterface[i]}
    }
    candidateInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(candidateInterfaces.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetEntityData() *types.CommonEntityData {
    candidateInterface.EntityData.YFilter = candidateInterface.YFilter
    candidateInterface.EntityData.YangName = "candidate-interface"
    candidateInterface.EntityData.BundleName = "cisco_ios_xr"
    candidateInterface.EntityData.ParentYangName = "candidate-interfaces"
    candidateInterface.EntityData.SegmentPath = "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
    candidateInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterface.EntityData.Children = make(map[string]types.YChild)
    candidateInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    candidateInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", candidateInterface.InterfaceName}
    return &(candidateInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetEntityData() *types.CommonEntityData {
    excludeInterfaces.EntityData.YFilter = excludeInterfaces.YFilter
    excludeInterfaces.EntityData.YangName = "exclude-interfaces"
    excludeInterfaces.EntityData.BundleName = "cisco_ios_xr"
    excludeInterfaces.EntityData.ParentYangName = "per-prefix"
    excludeInterfaces.EntityData.SegmentPath = "exclude-interfaces"
    excludeInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterfaces.EntityData.Children = make(map[string]types.YChild)
    excludeInterfaces.EntityData.Children["exclude-interface"] = types.YChild{"ExcludeInterface", nil}
    for i := range excludeInterfaces.ExcludeInterface {
        excludeInterfaces.EntityData.Children[types.GetSegmentPath(&excludeInterfaces.ExcludeInterface[i])] = types.YChild{"ExcludeInterface", &excludeInterfaces.ExcludeInterface[i]}
    }
    excludeInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(excludeInterfaces.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetEntityData() *types.CommonEntityData {
    excludeInterface.EntityData.YFilter = excludeInterface.YFilter
    excludeInterface.EntityData.YangName = "exclude-interface"
    excludeInterface.EntityData.BundleName = "cisco_ios_xr"
    excludeInterface.EntityData.ParentYangName = "exclude-interfaces"
    excludeInterface.EntityData.SegmentPath = "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
    excludeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterface.EntityData.Children = make(map[string]types.YChild)
    excludeInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    excludeInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", excludeInterface.InterfaceName}
    return &(excludeInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_CostFallback
// Interface fallback cost
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_CostFallback struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fallback cost of link. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Bandwidth threshold. The type is interface{} with range: 1..4294967.
    Threshold interface{}
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_CostFallback) GetEntityData() *types.CommonEntityData {
    costFallback.EntityData.YFilter = costFallback.YFilter
    costFallback.EntityData.YangName = "cost-fallback"
    costFallback.EntityData.BundleName = "cisco_ios_xr"
    costFallback.EntityData.ParentYangName = "area-scope"
    costFallback.EntityData.SegmentPath = "cost-fallback"
    costFallback.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    costFallback.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    costFallback.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    costFallback.EntityData.Children = make(map[string]types.YChild)
    costFallback.EntityData.Leafs = make(map[string]types.YLeaf)
    costFallback.EntityData.Leafs["cost"] = types.YLeaf{"Cost", costFallback.Cost}
    costFallback.EntityData.Leafs["threshold"] = types.YLeaf{"Threshold", costFallback.Threshold}
    return &(costFallback.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes
// Name scope configurations
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name scope configuration. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope.
    NameScope []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope
}

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes) GetEntityData() *types.CommonEntityData {
    nameScopes.EntityData.YFilter = nameScopes.YFilter
    nameScopes.EntityData.YangName = "name-scopes"
    nameScopes.EntityData.BundleName = "cisco_ios_xr"
    nameScopes.EntityData.ParentYangName = "area-address"
    nameScopes.EntityData.SegmentPath = "name-scopes"
    nameScopes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nameScopes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nameScopes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nameScopes.EntityData.Children = make(map[string]types.YChild)
    nameScopes.EntityData.Children["name-scope"] = types.YChild{"NameScope", nil}
    for i := range nameScopes.NameScope {
        nameScopes.EntityData.Children[types.GetSegmentPath(&nameScopes.NameScope[i])] = types.YChild{"NameScope", &nameScopes.NameScope[i]}
    }
    nameScopes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(nameScopes.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope
// Name scope configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of Interface to configure. The type is string
    // with pattern: b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Enable/Disable prefix suppression for primary addresses. The type is bool.
    // The default value is false.
    PrefixSuppressionPrimary interface{}

    // Enable/Disable ignoring of MTU in DBD packets. The type is bool. The
    // default value is false.
    MtuIgnore interface{}

    // Enable/Disable MPLS LDP sync for igp-shortcuts. The type is bool.
    LdpSyncIgpShortcuts interface{}

    // Enable MPLS LDP Auto Config. The type is interface{}.
    LdpAutoConfig interface{}

    // Type of attached network. The type is OspfNetwork.
    NetworkType interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Enable/Disable advertising loopback as a stub network. The type is bool.
    // The default value is false.
    LoopbackStubNetwork interface{}

    // Enable/Disable prefix suppression for secondary addresses. The type is
    // bool. The default value is false.
    PrefixSuppressionSecondary interface{}

    // Enable/Disable OSPF demand circuit. The type is bool. The default value is
    // false.
    DemandCircuit interface{}

    // When enabled, prevent sending HELLO packets over link. The type is bool.
    // The default value is false.
    Passive interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Customize size of OSPF packets upto MTU. The type is interface{} with
    // range: 576..10000.
    PacketSize interface{}

    // Enable/Disable MPLS LDP sync. The type is bool.
    LdpSync interface{}

    // Filter OSPF LSA during synchronization and flooding. The type is bool. The
    // default value is false.
    DatabaseFilter interface{}

    // Enable/Disable registration for early interface down notifications. The
    // type is bool. The default value is false.
    LinkDownFastDetect interface{}

    // segment-routing forwarding configuration Applicableonly in Default VRF. The
    // type is OspfSegmentRoutingForwarding.
    SegmentRoutingForwarding interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Router priority for DR and BDR election. The type is interface{} with
    // range: 0..255. The default value is 1.
    Priority interface{}

    // Enable/Disable OSPF flood reduction. The type is bool. The default value is
    // false.
    FloodReduction interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Prefix SID.
    PrefixSid Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid

    // Strict Prefix SID.
    PrefixSidStrict Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict

    // Filter networks intalled to RIB (disable as ACL name means filtering is
    // disabled).
    DistributeList Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList

    // BFD configuration.
    Bfd Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd

    // Authentication.
    Authentication Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication

    // Container class for security related configuration parameters.
    Security Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security

    // Neighbor router configuration information.
    Neighbors Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal

    // Fast-reroute configuration.
    FastReroute Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute

    // Interface fallback cost.
    CostFallback Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback
}

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope) GetEntityData() *types.CommonEntityData {
    nameScope.EntityData.YFilter = nameScope.YFilter
    nameScope.EntityData.YangName = "name-scope"
    nameScope.EntityData.BundleName = "cisco_ios_xr"
    nameScope.EntityData.ParentYangName = "name-scopes"
    nameScope.EntityData.SegmentPath = "name-scope" + "[interface-name='" + fmt.Sprintf("%v", nameScope.InterfaceName) + "']"
    nameScope.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nameScope.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nameScope.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nameScope.EntityData.Children = make(map[string]types.YChild)
    nameScope.EntityData.Children["prefix-sid"] = types.YChild{"PrefixSid", &nameScope.PrefixSid}
    nameScope.EntityData.Children["prefix-sid-strict"] = types.YChild{"PrefixSidStrict", &nameScope.PrefixSidStrict}
    nameScope.EntityData.Children["distribute-list"] = types.YChild{"DistributeList", &nameScope.DistributeList}
    nameScope.EntityData.Children["bfd"] = types.YChild{"Bfd", &nameScope.Bfd}
    nameScope.EntityData.Children["authentication"] = types.YChild{"Authentication", &nameScope.Authentication}
    nameScope.EntityData.Children["security"] = types.YChild{"Security", &nameScope.Security}
    nameScope.EntityData.Children["neighbors"] = types.YChild{"Neighbors", &nameScope.Neighbors}
    nameScope.EntityData.Children["dead-interval-minimal"] = types.YChild{"DeadIntervalMinimal", &nameScope.DeadIntervalMinimal}
    nameScope.EntityData.Children["fast-reroute"] = types.YChild{"FastReroute", &nameScope.FastReroute}
    nameScope.EntityData.Children["cost-fallback"] = types.YChild{"CostFallback", &nameScope.CostFallback}
    nameScope.EntityData.Leafs = make(map[string]types.YLeaf)
    nameScope.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", nameScope.InterfaceName}
    nameScope.EntityData.Leafs["cost"] = types.YLeaf{"Cost", nameScope.Cost}
    nameScope.EntityData.Leafs["prefix-suppression-primary"] = types.YLeaf{"PrefixSuppressionPrimary", nameScope.PrefixSuppressionPrimary}
    nameScope.EntityData.Leafs["mtu-ignore"] = types.YLeaf{"MtuIgnore", nameScope.MtuIgnore}
    nameScope.EntityData.Leafs["ldp-sync-igp-shortcuts"] = types.YLeaf{"LdpSyncIgpShortcuts", nameScope.LdpSyncIgpShortcuts}
    nameScope.EntityData.Leafs["ldp-auto-config"] = types.YLeaf{"LdpAutoConfig", nameScope.LdpAutoConfig}
    nameScope.EntityData.Leafs["network-type"] = types.YLeaf{"NetworkType", nameScope.NetworkType}
    nameScope.EntityData.Leafs["hello-interval"] = types.YLeaf{"HelloInterval", nameScope.HelloInterval}
    nameScope.EntityData.Leafs["loopback-stub-network"] = types.YLeaf{"LoopbackStubNetwork", nameScope.LoopbackStubNetwork}
    nameScope.EntityData.Leafs["prefix-suppression-secondary"] = types.YLeaf{"PrefixSuppressionSecondary", nameScope.PrefixSuppressionSecondary}
    nameScope.EntityData.Leafs["demand-circuit"] = types.YLeaf{"DemandCircuit", nameScope.DemandCircuit}
    nameScope.EntityData.Leafs["passive"] = types.YLeaf{"Passive", nameScope.Passive}
    nameScope.EntityData.Leafs["transmit-delay"] = types.YLeaf{"TransmitDelay", nameScope.TransmitDelay}
    nameScope.EntityData.Leafs["packet-size"] = types.YLeaf{"PacketSize", nameScope.PacketSize}
    nameScope.EntityData.Leafs["ldp-sync"] = types.YLeaf{"LdpSync", nameScope.LdpSync}
    nameScope.EntityData.Leafs["database-filter"] = types.YLeaf{"DatabaseFilter", nameScope.DatabaseFilter}
    nameScope.EntityData.Leafs["link-down-fast-detect"] = types.YLeaf{"LinkDownFastDetect", nameScope.LinkDownFastDetect}
    nameScope.EntityData.Leafs["segment-routing-forwarding"] = types.YLeaf{"SegmentRoutingForwarding", nameScope.SegmentRoutingForwarding}
    nameScope.EntityData.Leafs["retransmit-interval"] = types.YLeaf{"RetransmitInterval", nameScope.RetransmitInterval}
    nameScope.EntityData.Leafs["priority"] = types.YLeaf{"Priority", nameScope.Priority}
    nameScope.EntityData.Leafs["flood-reduction"] = types.YLeaf{"FloodReduction", nameScope.FloodReduction}
    nameScope.EntityData.Leafs["running"] = types.YLeaf{"Running", nameScope.Running}
    return &(nameScope.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid
// Prefix SID
// This type is a presence type.
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SID value. The type is interface{} with range: 0..1048575. This attribute
    // is mandatory.
    SidValue interface{}

    // Force Penultimate Hop To Send Explicit-Null Label. The type is bool. The
    // default value is false.
    ExplicitNull interface{}

    // OSPF SID Type. The type is OspfSid. This attribute is mandatory.
    Type_ interface{}

    // Not a node SID. The type is bool. The default value is false.
    NFlagClear interface{}
}

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSid) GetEntityData() *types.CommonEntityData {
    prefixSid.EntityData.YFilter = prefixSid.YFilter
    prefixSid.EntityData.YangName = "prefix-sid"
    prefixSid.EntityData.BundleName = "cisco_ios_xr"
    prefixSid.EntityData.ParentYangName = "name-scope"
    prefixSid.EntityData.SegmentPath = "prefix-sid"
    prefixSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixSid.EntityData.Children = make(map[string]types.YChild)
    prefixSid.EntityData.Leafs = make(map[string]types.YLeaf)
    prefixSid.EntityData.Leafs["sid-value"] = types.YLeaf{"SidValue", prefixSid.SidValue}
    prefixSid.EntityData.Leafs["explicit-null"] = types.YLeaf{"ExplicitNull", prefixSid.ExplicitNull}
    prefixSid.EntityData.Leafs["type"] = types.YLeaf{"Type_", prefixSid.Type_}
    prefixSid.EntityData.Leafs["n-flag-clear"] = types.YLeaf{"NFlagClear", prefixSid.NFlagClear}
    return &(prefixSid.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict
// Strict Prefix SID
// This type is a presence type.
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SID value. The type is interface{} with range: 0..1048575. This attribute
    // is mandatory.
    SidValue interface{}

    // Force Penultimate Hop To Send Explicit-Null Label. The type is bool. The
    // default value is false.
    ExplicitNull interface{}

    // OSPF SID Type. The type is OspfSid. This attribute is mandatory.
    Type_ interface{}

    // Not a node SID. The type is bool. The default value is false.
    NFlagClear interface{}
}

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_PrefixSidStrict) GetEntityData() *types.CommonEntityData {
    prefixSidStrict.EntityData.YFilter = prefixSidStrict.YFilter
    prefixSidStrict.EntityData.YangName = "prefix-sid-strict"
    prefixSidStrict.EntityData.BundleName = "cisco_ios_xr"
    prefixSidStrict.EntityData.ParentYangName = "name-scope"
    prefixSidStrict.EntityData.SegmentPath = "prefix-sid-strict"
    prefixSidStrict.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixSidStrict.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixSidStrict.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixSidStrict.EntityData.Children = make(map[string]types.YChild)
    prefixSidStrict.EntityData.Leafs = make(map[string]types.YLeaf)
    prefixSidStrict.EntityData.Leafs["sid-value"] = types.YLeaf{"SidValue", prefixSidStrict.SidValue}
    prefixSidStrict.EntityData.Leafs["explicit-null"] = types.YLeaf{"ExplicitNull", prefixSidStrict.ExplicitNull}
    prefixSidStrict.EntityData.Leafs["type"] = types.YLeaf{"Type_", prefixSidStrict.Type_}
    prefixSidStrict.EntityData.Leafs["n-flag-clear"] = types.YLeaf{"NFlagClear", prefixSidStrict.NFlagClear}
    return &(prefixSidStrict.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList
// Filter networks intalled to RIB (disable as ACL
// name means filtering is disabled)
// This type is a presence type.
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Access Control List name. The type is string.
    AccessListName interface{}

    // Route Policy name. The type is string.
    RoutePolicyName interface{}
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DistributeList) GetEntityData() *types.CommonEntityData {
    distributeList.EntityData.YFilter = distributeList.YFilter
    distributeList.EntityData.YangName = "distribute-list"
    distributeList.EntityData.BundleName = "cisco_ios_xr"
    distributeList.EntityData.ParentYangName = "name-scope"
    distributeList.EntityData.SegmentPath = "distribute-list"
    distributeList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    distributeList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    distributeList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    distributeList.EntityData.Children = make(map[string]types.YChild)
    distributeList.EntityData.Leafs = make(map[string]types.YLeaf)
    distributeList.EntityData.Leafs["access-list-name"] = types.YLeaf{"AccessListName", distributeList.AccessListName}
    distributeList.EntityData.Leafs["route-policy-name"] = types.YLeaf{"RoutePolicyName", distributeList.RoutePolicyName}
    return &(distributeList.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd
// BFD configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Hello interval for BFD sessions created by OSPF. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    Interval interface{}

    // Detection multiplier for BFD sessions created by OSPF. The type is
    // interface{} with range: 2..50.
    DetectionMultiplier interface{}

    // use of Bidirectional Forwarding Detection. The type is BfdEnableMode.
    FastDetectMode interface{}
}

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Bfd) GetEntityData() *types.CommonEntityData {
    bfd.EntityData.YFilter = bfd.YFilter
    bfd.EntityData.YangName = "bfd"
    bfd.EntityData.BundleName = "cisco_ios_xr"
    bfd.EntityData.ParentYangName = "name-scope"
    bfd.EntityData.SegmentPath = "bfd"
    bfd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfd.EntityData.Children = make(map[string]types.YChild)
    bfd.EntityData.Leafs = make(map[string]types.YLeaf)
    bfd.EntityData.Leafs["interval"] = types.YLeaf{"Interval", bfd.Interval}
    bfd.EntityData.Leafs["detection-multiplier"] = types.YLeaf{"DetectionMultiplier", bfd.DetectionMultiplier}
    bfd.EntityData.Leafs["fast-detect-mode"] = types.YLeaf{"FastDetectMode", bfd.FastDetectMode}
    return &(bfd.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication
// Authentication
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // b'(!.+)|([^!].+)'.
    Key interface{}

    // Authentication type.
    Type_ Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "cisco_ios_xr"
    authentication.EntityData.ParentYangName = "name-scope"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authentication.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authentication.EntityData.Children = make(map[string]types.YChild)
    authentication.EntityData.Children["type"] = types.YChild{"Type_", &authentication.Type_}
    authentication.EntityData.Children["message-digest-keies"] = types.YChild{"MessageDigestKeies", &authentication.MessageDigestKeies}
    authentication.EntityData.Leafs = make(map[string]types.YLeaf)
    authentication.EntityData.Leafs["key"] = types.YLeaf{"Key", authentication.Key}
    return &(authentication.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_Type) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "type"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "authentication"
    self.EntityData.SegmentPath = "type"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    self.EntityData.Leafs["authen-type"] = types.YLeaf{"AuthenType", self.AuthenType}
    self.EntityData.Leafs["keychain-authen-type"] = types.YLeaf{"KeychainAuthenType", self.KeychainAuthenType}
    self.EntityData.Leafs["keychain-name"] = types.YLeaf{"KeychainName", self.KeychainName}
    return &(self.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies) GetEntityData() *types.CommonEntityData {
    messageDigestKeies.EntityData.YFilter = messageDigestKeies.YFilter
    messageDigestKeies.EntityData.YangName = "message-digest-keies"
    messageDigestKeies.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKeies.EntityData.ParentYangName = "authentication"
    messageDigestKeies.EntityData.SegmentPath = "message-digest-keies"
    messageDigestKeies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKeies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKeies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKeies.EntityData.Children = make(map[string]types.YChild)
    messageDigestKeies.EntityData.Children["message-digest-key"] = types.YChild{"MessageDigestKey", nil}
    for i := range messageDigestKeies.MessageDigestKey {
        messageDigestKeies.EntityData.Children[types.GetSegmentPath(&messageDigestKeies.MessageDigestKey[i])] = types.YChild{"MessageDigestKey", &messageDigestKeies.MessageDigestKey[i]}
    }
    messageDigestKeies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(messageDigestKeies.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: b'(!.+)|([^!].+)'. This
    // attribute is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetEntityData() *types.CommonEntityData {
    messageDigestKey.EntityData.YFilter = messageDigestKey.YFilter
    messageDigestKey.EntityData.YangName = "message-digest-key"
    messageDigestKey.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKey.EntityData.ParentYangName = "message-digest-keies"
    messageDigestKey.EntityData.SegmentPath = "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
    messageDigestKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKey.EntityData.Children = make(map[string]types.YChild)
    messageDigestKey.EntityData.Leafs = make(map[string]types.YLeaf)
    messageDigestKey.EntityData.Leafs["key-id"] = types.YLeaf{"KeyId", messageDigestKey.KeyId}
    messageDigestKey.EntityData.Leafs["password"] = types.YLeaf{"Password", messageDigestKey.Password}
    return &(messageDigestKey.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security
// Container class for security related
// configuration parameters
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enabling turns on TTL security.
    Ttl Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl
}

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security) GetEntityData() *types.CommonEntityData {
    security.EntityData.YFilter = security.YFilter
    security.EntityData.YangName = "security"
    security.EntityData.BundleName = "cisco_ios_xr"
    security.EntityData.ParentYangName = "name-scope"
    security.EntityData.SegmentPath = "security"
    security.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    security.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    security.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    security.EntityData.Children = make(map[string]types.YChild)
    security.EntityData.Children["ttl"] = types.YChild{"Ttl", &security.Ttl}
    security.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(security.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl
// Enabling turns on TTL security
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable TTL security. The type is bool.
    Enable interface{}

    // Hop count. The type is interface{} with range: 1..254.
    HopCount interface{}
}

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Security_Ttl) GetEntityData() *types.CommonEntityData {
    ttl.EntityData.YFilter = ttl.YFilter
    ttl.EntityData.YangName = "ttl"
    ttl.EntityData.BundleName = "cisco_ios_xr"
    ttl.EntityData.ParentYangName = "security"
    ttl.EntityData.SegmentPath = "ttl"
    ttl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ttl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ttl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ttl.EntityData.Children = make(map[string]types.YChild)
    ttl.EntityData.Leafs = make(map[string]types.YLeaf)
    ttl.EntityData.Leafs["enable"] = types.YLeaf{"Enable", ttl.Enable}
    ttl.EntityData.Leafs["hop-count"] = types.YLeaf{"HopCount", ttl.HopCount}
    return &(ttl.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors
// Neighbor router configuration information
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Router configuration information for a particular neighbor. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor.
    Neighbor []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor
}

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "cisco_ios_xr"
    neighbors.EntityData.ParentYangName = "name-scope"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbors.EntityData.Children = make(map[string]types.YChild)
    neighbors.EntityData.Children["neighbor"] = types.YChild{"Neighbor", nil}
    for i := range neighbors.Neighbor {
        neighbors.EntityData.Children[types.GetSegmentPath(&neighbors.Neighbor[i])] = types.YChild{"Neighbor", &neighbors.Neighbor[i]}
    }
    neighbors.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(neighbors.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor
// Router configuration information for a
// particular neighbor
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Neighbor IP address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // OSPF priority of non-broadcast neighbor. The type is interface{} with
    // range: 0..255. The default value is 0.
    Priority interface{}

    // OSPF dead router poll-interval in seconds. The type is interface{} with
    // range: 0..65535. Units are second. The default value is 40.
    PollInterval interface{}

    // OSPF cost for point-to-multipoint neighbor. The type is interface{} with
    // range: 1..65535. The default value is 1.
    Cost interface{}

    // Database filter: Filter OSPF LSA during synchronization and flooding for
    // point-to-multipoint. The type is bool. The default value is false.
    DatabaseFilter interface{}
}

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_Neighbors_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "cisco_ios_xr"
    neighbor.EntityData.ParentYangName = "neighbors"
    neighbor.EntityData.SegmentPath = "neighbor" + "[neighbor-address='" + fmt.Sprintf("%v", neighbor.NeighborAddress) + "']"
    neighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbor.EntityData.Children = make(map[string]types.YChild)
    neighbor.EntityData.Leafs = make(map[string]types.YLeaf)
    neighbor.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", neighbor.NeighborAddress}
    neighbor.EntityData.Leafs["priority"] = types.YLeaf{"Priority", neighbor.Priority}
    neighbor.EntityData.Leafs["poll-interval"] = types.YLeaf{"PollInterval", neighbor.PollInterval}
    neighbor.EntityData.Leafs["cost"] = types.YLeaf{"Cost", neighbor.Cost}
    neighbor.EntityData.Leafs["database-filter"] = types.YLeaf{"DatabaseFilter", neighbor.DatabaseFilter}
    return &(neighbor.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_DeadIntervalMinimal) GetEntityData() *types.CommonEntityData {
    deadIntervalMinimal.EntityData.YFilter = deadIntervalMinimal.YFilter
    deadIntervalMinimal.EntityData.YangName = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.BundleName = "cisco_ios_xr"
    deadIntervalMinimal.EntityData.ParentYangName = "name-scope"
    deadIntervalMinimal.EntityData.SegmentPath = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    deadIntervalMinimal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    deadIntervalMinimal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    deadIntervalMinimal.EntityData.Children = make(map[string]types.YChild)
    deadIntervalMinimal.EntityData.Leafs = make(map[string]types.YLeaf)
    deadIntervalMinimal.EntityData.Leafs["interval"] = types.YLeaf{"Interval", deadIntervalMinimal.Interval}
    deadIntervalMinimal.EntityData.Leafs["multiplier"] = types.YLeaf{"Multiplier", deadIntervalMinimal.Multiplier}
    return &(deadIntervalMinimal.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute
// Fast-reroute configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // OspfFastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink

    // Fast-reroute per-prefix global configuration.
    PerPrefix Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute) GetEntityData() *types.CommonEntityData {
    fastReroute.EntityData.YFilter = fastReroute.YFilter
    fastReroute.EntityData.YangName = "fast-reroute"
    fastReroute.EntityData.BundleName = "cisco_ios_xr"
    fastReroute.EntityData.ParentYangName = "name-scope"
    fastReroute.EntityData.SegmentPath = "fast-reroute"
    fastReroute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fastReroute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fastReroute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fastReroute.EntityData.Children = make(map[string]types.YChild)
    fastReroute.EntityData.Children["per-link"] = types.YChild{"PerLink", &fastReroute.PerLink}
    fastReroute.EntityData.Children["per-prefix"] = types.YChild{"PerPrefix", &fastReroute.PerPrefix}
    fastReroute.EntityData.Leafs = make(map[string]types.YLeaf)
    fastReroute.EntityData.Leafs["fast-reroute-enable"] = types.YLeaf{"FastRerouteEnable", fastReroute.FastRerouteEnable}
    return &(fastReroute.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink) GetEntityData() *types.CommonEntityData {
    perLink.EntityData.YFilter = perLink.YFilter
    perLink.EntityData.YangName = "per-link"
    perLink.EntityData.BundleName = "cisco_ios_xr"
    perLink.EntityData.ParentYangName = "fast-reroute"
    perLink.EntityData.SegmentPath = "per-link"
    perLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perLink.EntityData.Children = make(map[string]types.YChild)
    perLink.EntityData.Children["candidate-interfaces"] = types.YChild{"CandidateInterfaces", &perLink.CandidateInterfaces}
    perLink.EntityData.Children["exclude-interfaces"] = types.YChild{"ExcludeInterfaces", &perLink.ExcludeInterfaces}
    perLink.EntityData.Leafs = make(map[string]types.YLeaf)
    perLink.EntityData.Leafs["fast-reroute-use-candidate-only"] = types.YLeaf{"FastRerouteUseCandidateOnly", perLink.FastRerouteUseCandidateOnly}
    return &(perLink.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetEntityData() *types.CommonEntityData {
    candidateInterfaces.EntityData.YFilter = candidateInterfaces.YFilter
    candidateInterfaces.EntityData.YangName = "candidate-interfaces"
    candidateInterfaces.EntityData.BundleName = "cisco_ios_xr"
    candidateInterfaces.EntityData.ParentYangName = "per-link"
    candidateInterfaces.EntityData.SegmentPath = "candidate-interfaces"
    candidateInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterfaces.EntityData.Children = make(map[string]types.YChild)
    candidateInterfaces.EntityData.Children["candidate-interface"] = types.YChild{"CandidateInterface", nil}
    for i := range candidateInterfaces.CandidateInterface {
        candidateInterfaces.EntityData.Children[types.GetSegmentPath(&candidateInterfaces.CandidateInterface[i])] = types.YChild{"CandidateInterface", &candidateInterfaces.CandidateInterface[i]}
    }
    candidateInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(candidateInterfaces.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetEntityData() *types.CommonEntityData {
    candidateInterface.EntityData.YFilter = candidateInterface.YFilter
    candidateInterface.EntityData.YangName = "candidate-interface"
    candidateInterface.EntityData.BundleName = "cisco_ios_xr"
    candidateInterface.EntityData.ParentYangName = "candidate-interfaces"
    candidateInterface.EntityData.SegmentPath = "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
    candidateInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterface.EntityData.Children = make(map[string]types.YChild)
    candidateInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    candidateInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", candidateInterface.InterfaceName}
    return &(candidateInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetEntityData() *types.CommonEntityData {
    excludeInterfaces.EntityData.YFilter = excludeInterfaces.YFilter
    excludeInterfaces.EntityData.YangName = "exclude-interfaces"
    excludeInterfaces.EntityData.BundleName = "cisco_ios_xr"
    excludeInterfaces.EntityData.ParentYangName = "per-link"
    excludeInterfaces.EntityData.SegmentPath = "exclude-interfaces"
    excludeInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterfaces.EntityData.Children = make(map[string]types.YChild)
    excludeInterfaces.EntityData.Children["exclude-interface"] = types.YChild{"ExcludeInterface", nil}
    for i := range excludeInterfaces.ExcludeInterface {
        excludeInterfaces.EntityData.Children[types.GetSegmentPath(&excludeInterfaces.ExcludeInterface[i])] = types.YChild{"ExcludeInterface", &excludeInterfaces.ExcludeInterface[i]}
    }
    excludeInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(excludeInterfaces.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetEntityData() *types.CommonEntityData {
    excludeInterface.EntityData.YFilter = excludeInterface.YFilter
    excludeInterface.EntityData.YangName = "exclude-interface"
    excludeInterface.EntityData.BundleName = "cisco_ios_xr"
    excludeInterface.EntityData.ParentYangName = "exclude-interfaces"
    excludeInterface.EntityData.SegmentPath = "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
    excludeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterface.EntityData.Children = make(map[string]types.YChild)
    excludeInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    excludeInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", excludeInterface.InterfaceName}
    return &(excludeInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix
// Fast-reroute per-prefix global configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology Independet LFA configuration. The type is bool.
    TopologyIndependentLfa interface{}

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Remote LFA configuration.
    RemoteLfa Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa

    // Fast-reroute tiebreakers configurations.
    Tiebreakers Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix) GetEntityData() *types.CommonEntityData {
    perPrefix.EntityData.YFilter = perPrefix.YFilter
    perPrefix.EntityData.YangName = "per-prefix"
    perPrefix.EntityData.BundleName = "cisco_ios_xr"
    perPrefix.EntityData.ParentYangName = "fast-reroute"
    perPrefix.EntityData.SegmentPath = "per-prefix"
    perPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perPrefix.EntityData.Children = make(map[string]types.YChild)
    perPrefix.EntityData.Children["remote-lfa"] = types.YChild{"RemoteLfa", &perPrefix.RemoteLfa}
    perPrefix.EntityData.Children["tiebreakers"] = types.YChild{"Tiebreakers", &perPrefix.Tiebreakers}
    perPrefix.EntityData.Children["candidate-interfaces"] = types.YChild{"CandidateInterfaces", &perPrefix.CandidateInterfaces}
    perPrefix.EntityData.Children["exclude-interfaces"] = types.YChild{"ExcludeInterfaces", &perPrefix.ExcludeInterfaces}
    perPrefix.EntityData.Leafs = make(map[string]types.YLeaf)
    perPrefix.EntityData.Leafs["topology-independent-lfa"] = types.YLeaf{"TopologyIndependentLfa", perPrefix.TopologyIndependentLfa}
    perPrefix.EntityData.Leafs["fast-reroute-use-candidate-only"] = types.YLeaf{"FastRerouteUseCandidateOnly", perPrefix.FastRerouteUseCandidateOnly}
    return &(perPrefix.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa
// Remote LFA configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable/Disable remote LFA computation. The type is OspfFrrRlfaTunnel.
    Tunnel interface{}

    // Maximum path cost to remote LFA. The type is interface{} with range:
    // 1..4294967295.
    MaximumCost interface{}
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetEntityData() *types.CommonEntityData {
    remoteLfa.EntityData.YFilter = remoteLfa.YFilter
    remoteLfa.EntityData.YangName = "remote-lfa"
    remoteLfa.EntityData.BundleName = "cisco_ios_xr"
    remoteLfa.EntityData.ParentYangName = "per-prefix"
    remoteLfa.EntityData.SegmentPath = "remote-lfa"
    remoteLfa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteLfa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteLfa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteLfa.EntityData.Children = make(map[string]types.YChild)
    remoteLfa.EntityData.Leafs = make(map[string]types.YLeaf)
    remoteLfa.EntityData.Leafs["tunnel"] = types.YLeaf{"Tunnel", remoteLfa.Tunnel}
    remoteLfa.EntityData.Leafs["maximum-cost"] = types.YLeaf{"MaximumCost", remoteLfa.MaximumCost}
    return &(remoteLfa.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers
// Fast-reroute tiebreakers configurations
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fast-reroute tiebreakers configuration. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker.
    Tiebreaker []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetEntityData() *types.CommonEntityData {
    tiebreakers.EntityData.YFilter = tiebreakers.YFilter
    tiebreakers.EntityData.YangName = "tiebreakers"
    tiebreakers.EntityData.BundleName = "cisco_ios_xr"
    tiebreakers.EntityData.ParentYangName = "per-prefix"
    tiebreakers.EntityData.SegmentPath = "tiebreakers"
    tiebreakers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tiebreakers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tiebreakers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tiebreakers.EntityData.Children = make(map[string]types.YChild)
    tiebreakers.EntityData.Children["tiebreaker"] = types.YChild{"Tiebreaker", nil}
    for i := range tiebreakers.Tiebreaker {
        tiebreakers.EntityData.Children[types.GetSegmentPath(&tiebreakers.Tiebreaker[i])] = types.YChild{"Tiebreaker", &tiebreakers.Tiebreaker[i]}
    }
    tiebreakers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tiebreakers.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
// Fast-reroute tiebreakers configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Tiebreaker type. The type is
    // OspfFastRerouteTiebreakersIntf.
    TiebreakerType interface{}

    // Index value for a tiebreaker, 0 to disable. The type is interface{} with
    // range: 0..255. This attribute is mandatory.
    TiebreakerIndex interface{}
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetEntityData() *types.CommonEntityData {
    tiebreaker.EntityData.YFilter = tiebreaker.YFilter
    tiebreaker.EntityData.YangName = "tiebreaker"
    tiebreaker.EntityData.BundleName = "cisco_ios_xr"
    tiebreaker.EntityData.ParentYangName = "tiebreakers"
    tiebreaker.EntityData.SegmentPath = "tiebreaker" + "[tiebreaker-type='" + fmt.Sprintf("%v", tiebreaker.TiebreakerType) + "']"
    tiebreaker.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tiebreaker.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tiebreaker.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tiebreaker.EntityData.Children = make(map[string]types.YChild)
    tiebreaker.EntityData.Leafs = make(map[string]types.YLeaf)
    tiebreaker.EntityData.Leafs["tiebreaker-type"] = types.YLeaf{"TiebreakerType", tiebreaker.TiebreakerType}
    tiebreaker.EntityData.Leafs["tiebreaker-index"] = types.YLeaf{"TiebreakerIndex", tiebreaker.TiebreakerIndex}
    return &(tiebreaker.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetEntityData() *types.CommonEntityData {
    candidateInterfaces.EntityData.YFilter = candidateInterfaces.YFilter
    candidateInterfaces.EntityData.YangName = "candidate-interfaces"
    candidateInterfaces.EntityData.BundleName = "cisco_ios_xr"
    candidateInterfaces.EntityData.ParentYangName = "per-prefix"
    candidateInterfaces.EntityData.SegmentPath = "candidate-interfaces"
    candidateInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterfaces.EntityData.Children = make(map[string]types.YChild)
    candidateInterfaces.EntityData.Children["candidate-interface"] = types.YChild{"CandidateInterface", nil}
    for i := range candidateInterfaces.CandidateInterface {
        candidateInterfaces.EntityData.Children[types.GetSegmentPath(&candidateInterfaces.CandidateInterface[i])] = types.YChild{"CandidateInterface", &candidateInterfaces.CandidateInterface[i]}
    }
    candidateInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(candidateInterfaces.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetEntityData() *types.CommonEntityData {
    candidateInterface.EntityData.YFilter = candidateInterface.YFilter
    candidateInterface.EntityData.YangName = "candidate-interface"
    candidateInterface.EntityData.BundleName = "cisco_ios_xr"
    candidateInterface.EntityData.ParentYangName = "candidate-interfaces"
    candidateInterface.EntityData.SegmentPath = "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
    candidateInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterface.EntityData.Children = make(map[string]types.YChild)
    candidateInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    candidateInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", candidateInterface.InterfaceName}
    return &(candidateInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetEntityData() *types.CommonEntityData {
    excludeInterfaces.EntityData.YFilter = excludeInterfaces.YFilter
    excludeInterfaces.EntityData.YangName = "exclude-interfaces"
    excludeInterfaces.EntityData.BundleName = "cisco_ios_xr"
    excludeInterfaces.EntityData.ParentYangName = "per-prefix"
    excludeInterfaces.EntityData.SegmentPath = "exclude-interfaces"
    excludeInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterfaces.EntityData.Children = make(map[string]types.YChild)
    excludeInterfaces.EntityData.Children["exclude-interface"] = types.YChild{"ExcludeInterface", nil}
    for i := range excludeInterfaces.ExcludeInterface {
        excludeInterfaces.EntityData.Children[types.GetSegmentPath(&excludeInterfaces.ExcludeInterface[i])] = types.YChild{"ExcludeInterface", &excludeInterfaces.ExcludeInterface[i]}
    }
    excludeInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(excludeInterfaces.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetEntityData() *types.CommonEntityData {
    excludeInterface.EntityData.YFilter = excludeInterface.YFilter
    excludeInterface.EntityData.YangName = "exclude-interface"
    excludeInterface.EntityData.BundleName = "cisco_ios_xr"
    excludeInterface.EntityData.ParentYangName = "exclude-interfaces"
    excludeInterface.EntityData.SegmentPath = "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
    excludeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterface.EntityData.Children = make(map[string]types.YChild)
    excludeInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    excludeInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", excludeInterface.InterfaceName}
    return &(excludeInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback
// Interface fallback cost
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fallback cost of link. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Bandwidth threshold. The type is interface{} with range: 1..4294967.
    Threshold interface{}
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_NameScopes_NameScope_CostFallback) GetEntityData() *types.CommonEntityData {
    costFallback.EntityData.YFilter = costFallback.YFilter
    costFallback.EntityData.YangName = "cost-fallback"
    costFallback.EntityData.BundleName = "cisco_ios_xr"
    costFallback.EntityData.ParentYangName = "name-scope"
    costFallback.EntityData.SegmentPath = "cost-fallback"
    costFallback.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    costFallback.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    costFallback.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    costFallback.EntityData.Children = make(map[string]types.YChild)
    costFallback.EntityData.Leafs = make(map[string]types.YLeaf)
    costFallback.EntityData.Leafs["cost"] = types.YLeaf{"Cost", costFallback.Cost}
    costFallback.EntityData.Leafs["threshold"] = types.YLeaf{"Threshold", costFallback.Threshold}
    return &(costFallback.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes
// Multi Area Interface scope configurations
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Multi Area Interface configuration. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope.
    MultiAreaInterfaceScope []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope
}

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes) GetEntityData() *types.CommonEntityData {
    multiAreaInterfaceScopes.EntityData.YFilter = multiAreaInterfaceScopes.YFilter
    multiAreaInterfaceScopes.EntityData.YangName = "multi-area-interface-scopes"
    multiAreaInterfaceScopes.EntityData.BundleName = "cisco_ios_xr"
    multiAreaInterfaceScopes.EntityData.ParentYangName = "area-address"
    multiAreaInterfaceScopes.EntityData.SegmentPath = "multi-area-interface-scopes"
    multiAreaInterfaceScopes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multiAreaInterfaceScopes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multiAreaInterfaceScopes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multiAreaInterfaceScopes.EntityData.Children = make(map[string]types.YChild)
    multiAreaInterfaceScopes.EntityData.Children["multi-area-interface-scope"] = types.YChild{"MultiAreaInterfaceScope", nil}
    for i := range multiAreaInterfaceScopes.MultiAreaInterfaceScope {
        multiAreaInterfaceScopes.EntityData.Children[types.GetSegmentPath(&multiAreaInterfaceScopes.MultiAreaInterfaceScope[i])] = types.YChild{"MultiAreaInterfaceScope", &multiAreaInterfaceScopes.MultiAreaInterfaceScope[i]}
    }
    multiAreaInterfaceScopes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(multiAreaInterfaceScopes.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope
// Multi Area Interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of Multi Area Interface to configure. The
    // type is string with pattern: b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Enable/Disable ignoring of MTU in DBD packets. The type is bool. The
    // default value is false.
    MtuIgnore interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // When enabled, prevent sending HELLO packets over link. The type is bool.
    // The default value is false.
    Passive interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Customize size of OSPF packets upto MTU. The type is interface{} with
    // range: 576..10000.
    PacketSize interface{}

    // Filter OSPF LSA during synchronization and flooding. The type is bool. The
    // default value is false.
    DatabaseFilter interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Filter networks intalled to RIB (disable as ACL name means filtering is
    // disabled).
    DistributeList Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList

    // Authentication.
    Authentication Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication

    // Neighbor router configuration information.
    Neighbors Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal

    // Fast-reroute configuration.
    FastReroute Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute

    // Interface fallback cost.
    CostFallback Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback
}

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetEntityData() *types.CommonEntityData {
    multiAreaInterfaceScope.EntityData.YFilter = multiAreaInterfaceScope.YFilter
    multiAreaInterfaceScope.EntityData.YangName = "multi-area-interface-scope"
    multiAreaInterfaceScope.EntityData.BundleName = "cisco_ios_xr"
    multiAreaInterfaceScope.EntityData.ParentYangName = "multi-area-interface-scopes"
    multiAreaInterfaceScope.EntityData.SegmentPath = "multi-area-interface-scope" + "[interface-name='" + fmt.Sprintf("%v", multiAreaInterfaceScope.InterfaceName) + "']"
    multiAreaInterfaceScope.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multiAreaInterfaceScope.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multiAreaInterfaceScope.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multiAreaInterfaceScope.EntityData.Children = make(map[string]types.YChild)
    multiAreaInterfaceScope.EntityData.Children["distribute-list"] = types.YChild{"DistributeList", &multiAreaInterfaceScope.DistributeList}
    multiAreaInterfaceScope.EntityData.Children["authentication"] = types.YChild{"Authentication", &multiAreaInterfaceScope.Authentication}
    multiAreaInterfaceScope.EntityData.Children["neighbors"] = types.YChild{"Neighbors", &multiAreaInterfaceScope.Neighbors}
    multiAreaInterfaceScope.EntityData.Children["dead-interval-minimal"] = types.YChild{"DeadIntervalMinimal", &multiAreaInterfaceScope.DeadIntervalMinimal}
    multiAreaInterfaceScope.EntityData.Children["fast-reroute"] = types.YChild{"FastReroute", &multiAreaInterfaceScope.FastReroute}
    multiAreaInterfaceScope.EntityData.Children["cost-fallback"] = types.YChild{"CostFallback", &multiAreaInterfaceScope.CostFallback}
    multiAreaInterfaceScope.EntityData.Leafs = make(map[string]types.YLeaf)
    multiAreaInterfaceScope.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", multiAreaInterfaceScope.InterfaceName}
    multiAreaInterfaceScope.EntityData.Leafs["cost"] = types.YLeaf{"Cost", multiAreaInterfaceScope.Cost}
    multiAreaInterfaceScope.EntityData.Leafs["mtu-ignore"] = types.YLeaf{"MtuIgnore", multiAreaInterfaceScope.MtuIgnore}
    multiAreaInterfaceScope.EntityData.Leafs["hello-interval"] = types.YLeaf{"HelloInterval", multiAreaInterfaceScope.HelloInterval}
    multiAreaInterfaceScope.EntityData.Leafs["passive"] = types.YLeaf{"Passive", multiAreaInterfaceScope.Passive}
    multiAreaInterfaceScope.EntityData.Leafs["transmit-delay"] = types.YLeaf{"TransmitDelay", multiAreaInterfaceScope.TransmitDelay}
    multiAreaInterfaceScope.EntityData.Leafs["packet-size"] = types.YLeaf{"PacketSize", multiAreaInterfaceScope.PacketSize}
    multiAreaInterfaceScope.EntityData.Leafs["database-filter"] = types.YLeaf{"DatabaseFilter", multiAreaInterfaceScope.DatabaseFilter}
    multiAreaInterfaceScope.EntityData.Leafs["retransmit-interval"] = types.YLeaf{"RetransmitInterval", multiAreaInterfaceScope.RetransmitInterval}
    multiAreaInterfaceScope.EntityData.Leafs["running"] = types.YLeaf{"Running", multiAreaInterfaceScope.Running}
    return &(multiAreaInterfaceScope.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList
// Filter networks intalled to RIB (disable as ACL
// name means filtering is disabled)
// This type is a presence type.
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Access Control List name. The type is string.
    AccessListName interface{}

    // Route Policy name. The type is string.
    RoutePolicyName interface{}
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetEntityData() *types.CommonEntityData {
    distributeList.EntityData.YFilter = distributeList.YFilter
    distributeList.EntityData.YangName = "distribute-list"
    distributeList.EntityData.BundleName = "cisco_ios_xr"
    distributeList.EntityData.ParentYangName = "multi-area-interface-scope"
    distributeList.EntityData.SegmentPath = "distribute-list"
    distributeList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    distributeList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    distributeList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    distributeList.EntityData.Children = make(map[string]types.YChild)
    distributeList.EntityData.Leafs = make(map[string]types.YLeaf)
    distributeList.EntityData.Leafs["access-list-name"] = types.YLeaf{"AccessListName", distributeList.AccessListName}
    distributeList.EntityData.Leafs["route-policy-name"] = types.YLeaf{"RoutePolicyName", distributeList.RoutePolicyName}
    return &(distributeList.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication
// Authentication
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // b'(!.+)|([^!].+)'.
    Key interface{}

    // Authentication type.
    Type_ Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "cisco_ios_xr"
    authentication.EntityData.ParentYangName = "multi-area-interface-scope"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authentication.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authentication.EntityData.Children = make(map[string]types.YChild)
    authentication.EntityData.Children["type"] = types.YChild{"Type_", &authentication.Type_}
    authentication.EntityData.Children["message-digest-keies"] = types.YChild{"MessageDigestKeies", &authentication.MessageDigestKeies}
    authentication.EntityData.Leafs = make(map[string]types.YLeaf)
    authentication.EntityData.Leafs["key"] = types.YLeaf{"Key", authentication.Key}
    return &(authentication.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "type"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "authentication"
    self.EntityData.SegmentPath = "type"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    self.EntityData.Leafs["authen-type"] = types.YLeaf{"AuthenType", self.AuthenType}
    self.EntityData.Leafs["keychain-authen-type"] = types.YLeaf{"KeychainAuthenType", self.KeychainAuthenType}
    self.EntityData.Leafs["keychain-name"] = types.YLeaf{"KeychainName", self.KeychainName}
    return &(self.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetEntityData() *types.CommonEntityData {
    messageDigestKeies.EntityData.YFilter = messageDigestKeies.YFilter
    messageDigestKeies.EntityData.YangName = "message-digest-keies"
    messageDigestKeies.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKeies.EntityData.ParentYangName = "authentication"
    messageDigestKeies.EntityData.SegmentPath = "message-digest-keies"
    messageDigestKeies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKeies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKeies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKeies.EntityData.Children = make(map[string]types.YChild)
    messageDigestKeies.EntityData.Children["message-digest-key"] = types.YChild{"MessageDigestKey", nil}
    for i := range messageDigestKeies.MessageDigestKey {
        messageDigestKeies.EntityData.Children[types.GetSegmentPath(&messageDigestKeies.MessageDigestKey[i])] = types.YChild{"MessageDigestKey", &messageDigestKeies.MessageDigestKey[i]}
    }
    messageDigestKeies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(messageDigestKeies.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: b'(!.+)|([^!].+)'. This
    // attribute is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetEntityData() *types.CommonEntityData {
    messageDigestKey.EntityData.YFilter = messageDigestKey.YFilter
    messageDigestKey.EntityData.YangName = "message-digest-key"
    messageDigestKey.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKey.EntityData.ParentYangName = "message-digest-keies"
    messageDigestKey.EntityData.SegmentPath = "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
    messageDigestKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKey.EntityData.Children = make(map[string]types.YChild)
    messageDigestKey.EntityData.Leafs = make(map[string]types.YLeaf)
    messageDigestKey.EntityData.Leafs["key-id"] = types.YLeaf{"KeyId", messageDigestKey.KeyId}
    messageDigestKey.EntityData.Leafs["password"] = types.YLeaf{"Password", messageDigestKey.Password}
    return &(messageDigestKey.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors
// Neighbor router configuration information
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Router configuration information for a particular neighbor. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor.
    Neighbor []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor
}

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "cisco_ios_xr"
    neighbors.EntityData.ParentYangName = "multi-area-interface-scope"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbors.EntityData.Children = make(map[string]types.YChild)
    neighbors.EntityData.Children["neighbor"] = types.YChild{"Neighbor", nil}
    for i := range neighbors.Neighbor {
        neighbors.EntityData.Children[types.GetSegmentPath(&neighbors.Neighbor[i])] = types.YChild{"Neighbor", &neighbors.Neighbor[i]}
    }
    neighbors.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(neighbors.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor
// Router configuration information for a
// particular neighbor
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Neighbor IP address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // OSPF priority of non-broadcast neighbor. The type is interface{} with
    // range: 0..255. The default value is 0.
    Priority interface{}

    // OSPF dead router poll-interval in seconds. The type is interface{} with
    // range: 0..65535. Units are second. The default value is 40.
    PollInterval interface{}

    // OSPF cost for point-to-multipoint neighbor. The type is interface{} with
    // range: 1..65535. The default value is 1.
    Cost interface{}

    // Database filter: Filter OSPF LSA during synchronization and flooding for
    // point-to-multipoint. The type is bool. The default value is false.
    DatabaseFilter interface{}
}

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "cisco_ios_xr"
    neighbor.EntityData.ParentYangName = "neighbors"
    neighbor.EntityData.SegmentPath = "neighbor" + "[neighbor-address='" + fmt.Sprintf("%v", neighbor.NeighborAddress) + "']"
    neighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbor.EntityData.Children = make(map[string]types.YChild)
    neighbor.EntityData.Leafs = make(map[string]types.YLeaf)
    neighbor.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", neighbor.NeighborAddress}
    neighbor.EntityData.Leafs["priority"] = types.YLeaf{"Priority", neighbor.Priority}
    neighbor.EntityData.Leafs["poll-interval"] = types.YLeaf{"PollInterval", neighbor.PollInterval}
    neighbor.EntityData.Leafs["cost"] = types.YLeaf{"Cost", neighbor.Cost}
    neighbor.EntityData.Leafs["database-filter"] = types.YLeaf{"DatabaseFilter", neighbor.DatabaseFilter}
    return &(neighbor.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetEntityData() *types.CommonEntityData {
    deadIntervalMinimal.EntityData.YFilter = deadIntervalMinimal.YFilter
    deadIntervalMinimal.EntityData.YangName = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.BundleName = "cisco_ios_xr"
    deadIntervalMinimal.EntityData.ParentYangName = "multi-area-interface-scope"
    deadIntervalMinimal.EntityData.SegmentPath = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    deadIntervalMinimal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    deadIntervalMinimal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    deadIntervalMinimal.EntityData.Children = make(map[string]types.YChild)
    deadIntervalMinimal.EntityData.Leafs = make(map[string]types.YLeaf)
    deadIntervalMinimal.EntityData.Leafs["interval"] = types.YLeaf{"Interval", deadIntervalMinimal.Interval}
    deadIntervalMinimal.EntityData.Leafs["multiplier"] = types.YLeaf{"Multiplier", deadIntervalMinimal.Multiplier}
    return &(deadIntervalMinimal.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute
// Fast-reroute configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // OspfFastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink

    // Fast-reroute per-prefix global configuration.
    PerPrefix Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetEntityData() *types.CommonEntityData {
    fastReroute.EntityData.YFilter = fastReroute.YFilter
    fastReroute.EntityData.YangName = "fast-reroute"
    fastReroute.EntityData.BundleName = "cisco_ios_xr"
    fastReroute.EntityData.ParentYangName = "multi-area-interface-scope"
    fastReroute.EntityData.SegmentPath = "fast-reroute"
    fastReroute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fastReroute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fastReroute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fastReroute.EntityData.Children = make(map[string]types.YChild)
    fastReroute.EntityData.Children["per-link"] = types.YChild{"PerLink", &fastReroute.PerLink}
    fastReroute.EntityData.Children["per-prefix"] = types.YChild{"PerPrefix", &fastReroute.PerPrefix}
    fastReroute.EntityData.Leafs = make(map[string]types.YLeaf)
    fastReroute.EntityData.Leafs["fast-reroute-enable"] = types.YLeaf{"FastRerouteEnable", fastReroute.FastRerouteEnable}
    return &(fastReroute.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetEntityData() *types.CommonEntityData {
    perLink.EntityData.YFilter = perLink.YFilter
    perLink.EntityData.YangName = "per-link"
    perLink.EntityData.BundleName = "cisco_ios_xr"
    perLink.EntityData.ParentYangName = "fast-reroute"
    perLink.EntityData.SegmentPath = "per-link"
    perLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perLink.EntityData.Children = make(map[string]types.YChild)
    perLink.EntityData.Children["candidate-interfaces"] = types.YChild{"CandidateInterfaces", &perLink.CandidateInterfaces}
    perLink.EntityData.Children["exclude-interfaces"] = types.YChild{"ExcludeInterfaces", &perLink.ExcludeInterfaces}
    perLink.EntityData.Leafs = make(map[string]types.YLeaf)
    perLink.EntityData.Leafs["fast-reroute-use-candidate-only"] = types.YLeaf{"FastRerouteUseCandidateOnly", perLink.FastRerouteUseCandidateOnly}
    return &(perLink.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetEntityData() *types.CommonEntityData {
    candidateInterfaces.EntityData.YFilter = candidateInterfaces.YFilter
    candidateInterfaces.EntityData.YangName = "candidate-interfaces"
    candidateInterfaces.EntityData.BundleName = "cisco_ios_xr"
    candidateInterfaces.EntityData.ParentYangName = "per-link"
    candidateInterfaces.EntityData.SegmentPath = "candidate-interfaces"
    candidateInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterfaces.EntityData.Children = make(map[string]types.YChild)
    candidateInterfaces.EntityData.Children["candidate-interface"] = types.YChild{"CandidateInterface", nil}
    for i := range candidateInterfaces.CandidateInterface {
        candidateInterfaces.EntityData.Children[types.GetSegmentPath(&candidateInterfaces.CandidateInterface[i])] = types.YChild{"CandidateInterface", &candidateInterfaces.CandidateInterface[i]}
    }
    candidateInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(candidateInterfaces.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetEntityData() *types.CommonEntityData {
    candidateInterface.EntityData.YFilter = candidateInterface.YFilter
    candidateInterface.EntityData.YangName = "candidate-interface"
    candidateInterface.EntityData.BundleName = "cisco_ios_xr"
    candidateInterface.EntityData.ParentYangName = "candidate-interfaces"
    candidateInterface.EntityData.SegmentPath = "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
    candidateInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterface.EntityData.Children = make(map[string]types.YChild)
    candidateInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    candidateInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", candidateInterface.InterfaceName}
    return &(candidateInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetEntityData() *types.CommonEntityData {
    excludeInterfaces.EntityData.YFilter = excludeInterfaces.YFilter
    excludeInterfaces.EntityData.YangName = "exclude-interfaces"
    excludeInterfaces.EntityData.BundleName = "cisco_ios_xr"
    excludeInterfaces.EntityData.ParentYangName = "per-link"
    excludeInterfaces.EntityData.SegmentPath = "exclude-interfaces"
    excludeInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterfaces.EntityData.Children = make(map[string]types.YChild)
    excludeInterfaces.EntityData.Children["exclude-interface"] = types.YChild{"ExcludeInterface", nil}
    for i := range excludeInterfaces.ExcludeInterface {
        excludeInterfaces.EntityData.Children[types.GetSegmentPath(&excludeInterfaces.ExcludeInterface[i])] = types.YChild{"ExcludeInterface", &excludeInterfaces.ExcludeInterface[i]}
    }
    excludeInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(excludeInterfaces.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetEntityData() *types.CommonEntityData {
    excludeInterface.EntityData.YFilter = excludeInterface.YFilter
    excludeInterface.EntityData.YangName = "exclude-interface"
    excludeInterface.EntityData.BundleName = "cisco_ios_xr"
    excludeInterface.EntityData.ParentYangName = "exclude-interfaces"
    excludeInterface.EntityData.SegmentPath = "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
    excludeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterface.EntityData.Children = make(map[string]types.YChild)
    excludeInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    excludeInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", excludeInterface.InterfaceName}
    return &(excludeInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix
// Fast-reroute per-prefix global configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology Independet LFA configuration. The type is bool.
    TopologyIndependentLfa interface{}

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Remote LFA configuration.
    RemoteLfa Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa

    // Fast-reroute tiebreakers configurations.
    Tiebreakers Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetEntityData() *types.CommonEntityData {
    perPrefix.EntityData.YFilter = perPrefix.YFilter
    perPrefix.EntityData.YangName = "per-prefix"
    perPrefix.EntityData.BundleName = "cisco_ios_xr"
    perPrefix.EntityData.ParentYangName = "fast-reroute"
    perPrefix.EntityData.SegmentPath = "per-prefix"
    perPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perPrefix.EntityData.Children = make(map[string]types.YChild)
    perPrefix.EntityData.Children["remote-lfa"] = types.YChild{"RemoteLfa", &perPrefix.RemoteLfa}
    perPrefix.EntityData.Children["tiebreakers"] = types.YChild{"Tiebreakers", &perPrefix.Tiebreakers}
    perPrefix.EntityData.Children["candidate-interfaces"] = types.YChild{"CandidateInterfaces", &perPrefix.CandidateInterfaces}
    perPrefix.EntityData.Children["exclude-interfaces"] = types.YChild{"ExcludeInterfaces", &perPrefix.ExcludeInterfaces}
    perPrefix.EntityData.Leafs = make(map[string]types.YLeaf)
    perPrefix.EntityData.Leafs["topology-independent-lfa"] = types.YLeaf{"TopologyIndependentLfa", perPrefix.TopologyIndependentLfa}
    perPrefix.EntityData.Leafs["fast-reroute-use-candidate-only"] = types.YLeaf{"FastRerouteUseCandidateOnly", perPrefix.FastRerouteUseCandidateOnly}
    return &(perPrefix.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa
// Remote LFA configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable/Disable remote LFA computation. The type is OspfFrrRlfaTunnel.
    Tunnel interface{}

    // Maximum path cost to remote LFA. The type is interface{} with range:
    // 1..4294967295.
    MaximumCost interface{}
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetEntityData() *types.CommonEntityData {
    remoteLfa.EntityData.YFilter = remoteLfa.YFilter
    remoteLfa.EntityData.YangName = "remote-lfa"
    remoteLfa.EntityData.BundleName = "cisco_ios_xr"
    remoteLfa.EntityData.ParentYangName = "per-prefix"
    remoteLfa.EntityData.SegmentPath = "remote-lfa"
    remoteLfa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteLfa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteLfa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteLfa.EntityData.Children = make(map[string]types.YChild)
    remoteLfa.EntityData.Leafs = make(map[string]types.YLeaf)
    remoteLfa.EntityData.Leafs["tunnel"] = types.YLeaf{"Tunnel", remoteLfa.Tunnel}
    remoteLfa.EntityData.Leafs["maximum-cost"] = types.YLeaf{"MaximumCost", remoteLfa.MaximumCost}
    return &(remoteLfa.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers
// Fast-reroute tiebreakers configurations
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fast-reroute tiebreakers configuration. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker.
    Tiebreaker []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetEntityData() *types.CommonEntityData {
    tiebreakers.EntityData.YFilter = tiebreakers.YFilter
    tiebreakers.EntityData.YangName = "tiebreakers"
    tiebreakers.EntityData.BundleName = "cisco_ios_xr"
    tiebreakers.EntityData.ParentYangName = "per-prefix"
    tiebreakers.EntityData.SegmentPath = "tiebreakers"
    tiebreakers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tiebreakers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tiebreakers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tiebreakers.EntityData.Children = make(map[string]types.YChild)
    tiebreakers.EntityData.Children["tiebreaker"] = types.YChild{"Tiebreaker", nil}
    for i := range tiebreakers.Tiebreaker {
        tiebreakers.EntityData.Children[types.GetSegmentPath(&tiebreakers.Tiebreaker[i])] = types.YChild{"Tiebreaker", &tiebreakers.Tiebreaker[i]}
    }
    tiebreakers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tiebreakers.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
// Fast-reroute tiebreakers configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Tiebreaker type. The type is
    // OspfFastRerouteTiebreakersIntf.
    TiebreakerType interface{}

    // Index value for a tiebreaker, 0 to disable. The type is interface{} with
    // range: 0..255. This attribute is mandatory.
    TiebreakerIndex interface{}
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetEntityData() *types.CommonEntityData {
    tiebreaker.EntityData.YFilter = tiebreaker.YFilter
    tiebreaker.EntityData.YangName = "tiebreaker"
    tiebreaker.EntityData.BundleName = "cisco_ios_xr"
    tiebreaker.EntityData.ParentYangName = "tiebreakers"
    tiebreaker.EntityData.SegmentPath = "tiebreaker" + "[tiebreaker-type='" + fmt.Sprintf("%v", tiebreaker.TiebreakerType) + "']"
    tiebreaker.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tiebreaker.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tiebreaker.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tiebreaker.EntityData.Children = make(map[string]types.YChild)
    tiebreaker.EntityData.Leafs = make(map[string]types.YLeaf)
    tiebreaker.EntityData.Leafs["tiebreaker-type"] = types.YLeaf{"TiebreakerType", tiebreaker.TiebreakerType}
    tiebreaker.EntityData.Leafs["tiebreaker-index"] = types.YLeaf{"TiebreakerIndex", tiebreaker.TiebreakerIndex}
    return &(tiebreaker.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetEntityData() *types.CommonEntityData {
    candidateInterfaces.EntityData.YFilter = candidateInterfaces.YFilter
    candidateInterfaces.EntityData.YangName = "candidate-interfaces"
    candidateInterfaces.EntityData.BundleName = "cisco_ios_xr"
    candidateInterfaces.EntityData.ParentYangName = "per-prefix"
    candidateInterfaces.EntityData.SegmentPath = "candidate-interfaces"
    candidateInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterfaces.EntityData.Children = make(map[string]types.YChild)
    candidateInterfaces.EntityData.Children["candidate-interface"] = types.YChild{"CandidateInterface", nil}
    for i := range candidateInterfaces.CandidateInterface {
        candidateInterfaces.EntityData.Children[types.GetSegmentPath(&candidateInterfaces.CandidateInterface[i])] = types.YChild{"CandidateInterface", &candidateInterfaces.CandidateInterface[i]}
    }
    candidateInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(candidateInterfaces.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetEntityData() *types.CommonEntityData {
    candidateInterface.EntityData.YFilter = candidateInterface.YFilter
    candidateInterface.EntityData.YangName = "candidate-interface"
    candidateInterface.EntityData.BundleName = "cisco_ios_xr"
    candidateInterface.EntityData.ParentYangName = "candidate-interfaces"
    candidateInterface.EntityData.SegmentPath = "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
    candidateInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterface.EntityData.Children = make(map[string]types.YChild)
    candidateInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    candidateInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", candidateInterface.InterfaceName}
    return &(candidateInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetEntityData() *types.CommonEntityData {
    excludeInterfaces.EntityData.YFilter = excludeInterfaces.YFilter
    excludeInterfaces.EntityData.YangName = "exclude-interfaces"
    excludeInterfaces.EntityData.BundleName = "cisco_ios_xr"
    excludeInterfaces.EntityData.ParentYangName = "per-prefix"
    excludeInterfaces.EntityData.SegmentPath = "exclude-interfaces"
    excludeInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterfaces.EntityData.Children = make(map[string]types.YChild)
    excludeInterfaces.EntityData.Children["exclude-interface"] = types.YChild{"ExcludeInterface", nil}
    for i := range excludeInterfaces.ExcludeInterface {
        excludeInterfaces.EntityData.Children[types.GetSegmentPath(&excludeInterfaces.ExcludeInterface[i])] = types.YChild{"ExcludeInterface", &excludeInterfaces.ExcludeInterface[i]}
    }
    excludeInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(excludeInterfaces.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetEntityData() *types.CommonEntityData {
    excludeInterface.EntityData.YFilter = excludeInterface.YFilter
    excludeInterface.EntityData.YangName = "exclude-interface"
    excludeInterface.EntityData.BundleName = "cisco_ios_xr"
    excludeInterface.EntityData.ParentYangName = "exclude-interfaces"
    excludeInterface.EntityData.SegmentPath = "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
    excludeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterface.EntityData.Children = make(map[string]types.YChild)
    excludeInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    excludeInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", excludeInterface.InterfaceName}
    return &(excludeInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback
// Interface fallback cost
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fallback cost of link. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Bandwidth threshold. The type is interface{} with range: 1..4294967.
    Threshold interface{}
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetEntityData() *types.CommonEntityData {
    costFallback.EntityData.YFilter = costFallback.YFilter
    costFallback.EntityData.YangName = "cost-fallback"
    costFallback.EntityData.BundleName = "cisco_ios_xr"
    costFallback.EntityData.ParentYangName = "multi-area-interface-scope"
    costFallback.EntityData.SegmentPath = "cost-fallback"
    costFallback.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    costFallback.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    costFallback.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    costFallback.EntityData.Children = make(map[string]types.YChild)
    costFallback.EntityData.Leafs = make(map[string]types.YLeaf)
    costFallback.EntityData.Leafs["cost"] = types.YLeaf{"Cost", costFallback.Cost}
    costFallback.EntityData.Leafs["threshold"] = types.YLeaf{"Threshold", costFallback.Threshold}
    return &(costFallback.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges
// Summarize routes matching address/mask (border
// routers only)
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Ordering index. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange.
    AreaRange []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange
}

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges) GetEntityData() *types.CommonEntityData {
    areaRanges.EntityData.YFilter = areaRanges.YFilter
    areaRanges.EntityData.YangName = "area-ranges"
    areaRanges.EntityData.BundleName = "cisco_ios_xr"
    areaRanges.EntityData.ParentYangName = "area-address"
    areaRanges.EntityData.SegmentPath = "area-ranges"
    areaRanges.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaRanges.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaRanges.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaRanges.EntityData.Children = make(map[string]types.YChild)
    areaRanges.EntityData.Children["area-range"] = types.YChild{"AreaRange", nil}
    for i := range areaRanges.AreaRange {
        areaRanges.EntityData.Children[types.GetSegmentPath(&areaRanges.AreaRange[i])] = types.YChild{"AreaRange", &areaRanges.AreaRange[i]}
    }
    areaRanges.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(areaRanges.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange
// Ordering index
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. IP address to match. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Address interface{}

    // This attribute is a key. IP netmask for address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Netmask interface{}

    // Do not advertise this range. The type is bool.
    NotAdvertise interface{}
}

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaRanges_AreaRange) GetEntityData() *types.CommonEntityData {
    areaRange.EntityData.YFilter = areaRange.YFilter
    areaRange.EntityData.YangName = "area-range"
    areaRange.EntityData.BundleName = "cisco_ios_xr"
    areaRange.EntityData.ParentYangName = "area-ranges"
    areaRange.EntityData.SegmentPath = "area-range" + "[address='" + fmt.Sprintf("%v", areaRange.Address) + "']" + "[netmask='" + fmt.Sprintf("%v", areaRange.Netmask) + "']"
    areaRange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaRange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaRange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaRange.EntityData.Children = make(map[string]types.YChild)
    areaRange.EntityData.Leafs = make(map[string]types.YLeaf)
    areaRange.EntityData.Leafs["address"] = types.YLeaf{"Address", areaRange.Address}
    areaRange.EntityData.Leafs["netmask"] = types.YLeaf{"Netmask", areaRange.Netmask}
    areaRange.EntityData.Leafs["not-advertise"] = types.YLeaf{"NotAdvertise", areaRange.NotAdvertise}
    return &(areaRange.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa
// Specify area as a NSSA area
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // No redistribution into this NSSA area. The type is bool. The default value
    // is false.
    NoRedistribution interface{}

    // Originate Type 7 default into NSSA area. The type is bool. The default
    // value is false.
    DefaultInfoOriginate interface{}

    // Do not send summary LSA into NSSA. The type is bool. The default value is
    // false.
    NoSummary interface{}

    // OSPF default metric. The type is interface{} with range: 1..16777214.
    NssaDefMetric interface{}

    // OSPF External metric type. The type is OspfLinkStateMetric. The default
    // value is type2.
    MetricType interface{}
}

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa) GetEntityData() *types.CommonEntityData {
    nssa.EntityData.YFilter = nssa.YFilter
    nssa.EntityData.YangName = "nssa"
    nssa.EntityData.BundleName = "cisco_ios_xr"
    nssa.EntityData.ParentYangName = "area-address"
    nssa.EntityData.SegmentPath = "nssa"
    nssa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nssa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nssa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nssa.EntityData.Children = make(map[string]types.YChild)
    nssa.EntityData.Leafs = make(map[string]types.YLeaf)
    nssa.EntityData.Leafs["no-redistribution"] = types.YLeaf{"NoRedistribution", nssa.NoRedistribution}
    nssa.EntityData.Leafs["default-info-originate"] = types.YLeaf{"DefaultInfoOriginate", nssa.DefaultInfoOriginate}
    nssa.EntityData.Leafs["no-summary"] = types.YLeaf{"NoSummary", nssa.NoSummary}
    nssa.EntityData.Leafs["nssa-def-metric"] = types.YLeaf{"NssaDefMetric", nssa.NssaDefMetric}
    nssa.EntityData.Leafs["metric-type"] = types.YLeaf{"MetricType", nssa.MetricType}
    return &(nssa.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId
// Configuration for a particular area
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Area ID if in integer format. The type is
    // interface{} with range: 0..4294967295.
    AreaId interface{}

    // Configure a route policy for inbound type-3 lsa filtering. The type is
    // string.
    RoutePolicyIn interface{}

    // Set the summary default-cost of a NSSA/stub area. The type is interface{}
    // with range: 1..16777215. The default value is 1.
    DefaultCost interface{}

    // Configure a route policy for outbound type-3 lsa filtering. The type is
    // string.
    RoutePolicyOut interface{}

    // Specify the area as a stub area (send summary LSA stub area). The type is
    // bool.
    Stub interface{}

    // Configure an OSPF area to run MPLS Traffic Engineering. The type is
    // interface{}.
    MplsTrafficEng interface{}

    // Enable/Disable an OSPF area to advertise intra-area prefixes out of this
    // area as external. The type is bool.
    ExternalOut interface{}

    // Enable/Disable an OSPF area to advertise external prefixes into this area
    // as summary. The type is bool.
    SummaryIn interface{}

    // segment-routing configuration Applicable only in Default VRF. The type is
    // OspfSegmentRouting.
    SegmentRouting interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Virtual Link scope configurations.
    VirtualLinkScopes Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes

    // Sham Link scope configurations.
    ShamLinkScopes Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes

    // Area scope configuration.
    AreaScope Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope

    // Name scope configurations.
    NameScopes Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes

    // Multi Area Interface scope configurations.
    MultiAreaInterfaceScopes Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes

    // Summarize routes matching address/mask (border routers only).
    AreaRanges Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges

    // Specify area as a NSSA area.
    Nssa Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa
}

func (areaAreaId *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId) GetEntityData() *types.CommonEntityData {
    areaAreaId.EntityData.YFilter = areaAreaId.YFilter
    areaAreaId.EntityData.YangName = "area-area-id"
    areaAreaId.EntityData.BundleName = "cisco_ios_xr"
    areaAreaId.EntityData.ParentYangName = "area-addresses"
    areaAreaId.EntityData.SegmentPath = "area-area-id" + "[area-id='" + fmt.Sprintf("%v", areaAreaId.AreaId) + "']"
    areaAreaId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaAreaId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaAreaId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaAreaId.EntityData.Children = make(map[string]types.YChild)
    areaAreaId.EntityData.Children["virtual-link-scopes"] = types.YChild{"VirtualLinkScopes", &areaAreaId.VirtualLinkScopes}
    areaAreaId.EntityData.Children["sham-link-scopes"] = types.YChild{"ShamLinkScopes", &areaAreaId.ShamLinkScopes}
    areaAreaId.EntityData.Children["area-scope"] = types.YChild{"AreaScope", &areaAreaId.AreaScope}
    areaAreaId.EntityData.Children["name-scopes"] = types.YChild{"NameScopes", &areaAreaId.NameScopes}
    areaAreaId.EntityData.Children["multi-area-interface-scopes"] = types.YChild{"MultiAreaInterfaceScopes", &areaAreaId.MultiAreaInterfaceScopes}
    areaAreaId.EntityData.Children["area-ranges"] = types.YChild{"AreaRanges", &areaAreaId.AreaRanges}
    areaAreaId.EntityData.Children["nssa"] = types.YChild{"Nssa", &areaAreaId.Nssa}
    areaAreaId.EntityData.Leafs = make(map[string]types.YLeaf)
    areaAreaId.EntityData.Leafs["area-id"] = types.YLeaf{"AreaId", areaAreaId.AreaId}
    areaAreaId.EntityData.Leafs["route-policy-in"] = types.YLeaf{"RoutePolicyIn", areaAreaId.RoutePolicyIn}
    areaAreaId.EntityData.Leafs["default-cost"] = types.YLeaf{"DefaultCost", areaAreaId.DefaultCost}
    areaAreaId.EntityData.Leafs["route-policy-out"] = types.YLeaf{"RoutePolicyOut", areaAreaId.RoutePolicyOut}
    areaAreaId.EntityData.Leafs["stub"] = types.YLeaf{"Stub", areaAreaId.Stub}
    areaAreaId.EntityData.Leafs["mpls-traffic-eng"] = types.YLeaf{"MplsTrafficEng", areaAreaId.MplsTrafficEng}
    areaAreaId.EntityData.Leafs["external-out"] = types.YLeaf{"ExternalOut", areaAreaId.ExternalOut}
    areaAreaId.EntityData.Leafs["summary-in"] = types.YLeaf{"SummaryIn", areaAreaId.SummaryIn}
    areaAreaId.EntityData.Leafs["segment-routing"] = types.YLeaf{"SegmentRouting", areaAreaId.SegmentRouting}
    areaAreaId.EntityData.Leafs["running"] = types.YLeaf{"Running", areaAreaId.Running}
    return &(areaAreaId.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes
// Virtual Link scope configurations
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Virtual Link configuration. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope.
    VirtualLinkScope []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope
}

func (virtualLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes) GetEntityData() *types.CommonEntityData {
    virtualLinkScopes.EntityData.YFilter = virtualLinkScopes.YFilter
    virtualLinkScopes.EntityData.YangName = "virtual-link-scopes"
    virtualLinkScopes.EntityData.BundleName = "cisco_ios_xr"
    virtualLinkScopes.EntityData.ParentYangName = "area-area-id"
    virtualLinkScopes.EntityData.SegmentPath = "virtual-link-scopes"
    virtualLinkScopes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    virtualLinkScopes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    virtualLinkScopes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    virtualLinkScopes.EntityData.Children = make(map[string]types.YChild)
    virtualLinkScopes.EntityData.Children["virtual-link-scope"] = types.YChild{"VirtualLinkScope", nil}
    for i := range virtualLinkScopes.VirtualLinkScope {
        virtualLinkScopes.EntityData.Children[types.GetSegmentPath(&virtualLinkScopes.VirtualLinkScope[i])] = types.YChild{"VirtualLinkScope", &virtualLinkScopes.VirtualLinkScope[i]}
    }
    virtualLinkScopes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(virtualLinkScopes.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope
// Virtual Link configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Router ID of virtual link neighbor. The type is
    // string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Address interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Authentication.
    Authentication Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal
}

func (virtualLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope) GetEntityData() *types.CommonEntityData {
    virtualLinkScope.EntityData.YFilter = virtualLinkScope.YFilter
    virtualLinkScope.EntityData.YangName = "virtual-link-scope"
    virtualLinkScope.EntityData.BundleName = "cisco_ios_xr"
    virtualLinkScope.EntityData.ParentYangName = "virtual-link-scopes"
    virtualLinkScope.EntityData.SegmentPath = "virtual-link-scope" + "[address='" + fmt.Sprintf("%v", virtualLinkScope.Address) + "']"
    virtualLinkScope.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    virtualLinkScope.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    virtualLinkScope.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    virtualLinkScope.EntityData.Children = make(map[string]types.YChild)
    virtualLinkScope.EntityData.Children["authentication"] = types.YChild{"Authentication", &virtualLinkScope.Authentication}
    virtualLinkScope.EntityData.Children["dead-interval-minimal"] = types.YChild{"DeadIntervalMinimal", &virtualLinkScope.DeadIntervalMinimal}
    virtualLinkScope.EntityData.Leafs = make(map[string]types.YLeaf)
    virtualLinkScope.EntityData.Leafs["address"] = types.YLeaf{"Address", virtualLinkScope.Address}
    virtualLinkScope.EntityData.Leafs["hello-interval"] = types.YLeaf{"HelloInterval", virtualLinkScope.HelloInterval}
    virtualLinkScope.EntityData.Leafs["transmit-delay"] = types.YLeaf{"TransmitDelay", virtualLinkScope.TransmitDelay}
    virtualLinkScope.EntityData.Leafs["retransmit-interval"] = types.YLeaf{"RetransmitInterval", virtualLinkScope.RetransmitInterval}
    virtualLinkScope.EntityData.Leafs["running"] = types.YLeaf{"Running", virtualLinkScope.Running}
    return &(virtualLinkScope.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication
// Authentication
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // b'(!.+)|([^!].+)'.
    Key interface{}

    // Authentication type.
    Type_ Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "cisco_ios_xr"
    authentication.EntityData.ParentYangName = "virtual-link-scope"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authentication.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authentication.EntityData.Children = make(map[string]types.YChild)
    authentication.EntityData.Children["type"] = types.YChild{"Type_", &authentication.Type_}
    authentication.EntityData.Children["message-digest-keies"] = types.YChild{"MessageDigestKeies", &authentication.MessageDigestKeies}
    authentication.EntityData.Leafs = make(map[string]types.YLeaf)
    authentication.EntityData.Leafs["key"] = types.YLeaf{"Key", authentication.Key}
    return &(authentication.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_Type) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "type"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "authentication"
    self.EntityData.SegmentPath = "type"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    self.EntityData.Leafs["authen-type"] = types.YLeaf{"AuthenType", self.AuthenType}
    self.EntityData.Leafs["keychain-authen-type"] = types.YLeaf{"KeychainAuthenType", self.KeychainAuthenType}
    self.EntityData.Leafs["keychain-name"] = types.YLeaf{"KeychainName", self.KeychainName}
    return &(self.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies) GetEntityData() *types.CommonEntityData {
    messageDigestKeies.EntityData.YFilter = messageDigestKeies.YFilter
    messageDigestKeies.EntityData.YangName = "message-digest-keies"
    messageDigestKeies.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKeies.EntityData.ParentYangName = "authentication"
    messageDigestKeies.EntityData.SegmentPath = "message-digest-keies"
    messageDigestKeies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKeies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKeies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKeies.EntityData.Children = make(map[string]types.YChild)
    messageDigestKeies.EntityData.Children["message-digest-key"] = types.YChild{"MessageDigestKey", nil}
    for i := range messageDigestKeies.MessageDigestKey {
        messageDigestKeies.EntityData.Children[types.GetSegmentPath(&messageDigestKeies.MessageDigestKey[i])] = types.YChild{"MessageDigestKey", &messageDigestKeies.MessageDigestKey[i]}
    }
    messageDigestKeies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(messageDigestKeies.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: b'(!.+)|([^!].+)'. This
    // attribute is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetEntityData() *types.CommonEntityData {
    messageDigestKey.EntityData.YFilter = messageDigestKey.YFilter
    messageDigestKey.EntityData.YangName = "message-digest-key"
    messageDigestKey.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKey.EntityData.ParentYangName = "message-digest-keies"
    messageDigestKey.EntityData.SegmentPath = "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
    messageDigestKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKey.EntityData.Children = make(map[string]types.YChild)
    messageDigestKey.EntityData.Leafs = make(map[string]types.YLeaf)
    messageDigestKey.EntityData.Leafs["key-id"] = types.YLeaf{"KeyId", messageDigestKey.KeyId}
    messageDigestKey.EntityData.Leafs["password"] = types.YLeaf{"Password", messageDigestKey.Password}
    return &(messageDigestKey.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinkScopes_VirtualLinkScope_DeadIntervalMinimal) GetEntityData() *types.CommonEntityData {
    deadIntervalMinimal.EntityData.YFilter = deadIntervalMinimal.YFilter
    deadIntervalMinimal.EntityData.YangName = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.BundleName = "cisco_ios_xr"
    deadIntervalMinimal.EntityData.ParentYangName = "virtual-link-scope"
    deadIntervalMinimal.EntityData.SegmentPath = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    deadIntervalMinimal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    deadIntervalMinimal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    deadIntervalMinimal.EntityData.Children = make(map[string]types.YChild)
    deadIntervalMinimal.EntityData.Leafs = make(map[string]types.YLeaf)
    deadIntervalMinimal.EntityData.Leafs["interval"] = types.YLeaf{"Interval", deadIntervalMinimal.Interval}
    deadIntervalMinimal.EntityData.Leafs["multiplier"] = types.YLeaf{"Multiplier", deadIntervalMinimal.Multiplier}
    return &(deadIntervalMinimal.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes
// Sham Link scope configurations
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sham Link configuration. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope.
    ShamLinkScope []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope
}

func (shamLinkScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes) GetEntityData() *types.CommonEntityData {
    shamLinkScopes.EntityData.YFilter = shamLinkScopes.YFilter
    shamLinkScopes.EntityData.YangName = "sham-link-scopes"
    shamLinkScopes.EntityData.BundleName = "cisco_ios_xr"
    shamLinkScopes.EntityData.ParentYangName = "area-area-id"
    shamLinkScopes.EntityData.SegmentPath = "sham-link-scopes"
    shamLinkScopes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    shamLinkScopes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    shamLinkScopes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    shamLinkScopes.EntityData.Children = make(map[string]types.YChild)
    shamLinkScopes.EntityData.Children["sham-link-scope"] = types.YChild{"ShamLinkScope", nil}
    for i := range shamLinkScopes.ShamLinkScope {
        shamLinkScopes.EntityData.Children[types.GetSegmentPath(&shamLinkScopes.ShamLinkScope[i])] = types.YChild{"ShamLinkScope", &shamLinkScopes.ShamLinkScope[i]}
    }
    shamLinkScopes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(shamLinkScopes.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope
// Sham Link configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Address of the local sham-link endpoint. The type
    // is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // This attribute is a key. Address of the remote sham-link endpoint. The type
    // is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Address of the local sham-link endpoint. Enter an IP Address. The type is
    // string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Source interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Authentication.
    Authentication Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal
}

func (shamLinkScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope) GetEntityData() *types.CommonEntityData {
    shamLinkScope.EntityData.YFilter = shamLinkScope.YFilter
    shamLinkScope.EntityData.YangName = "sham-link-scope"
    shamLinkScope.EntityData.BundleName = "cisco_ios_xr"
    shamLinkScope.EntityData.ParentYangName = "sham-link-scopes"
    shamLinkScope.EntityData.SegmentPath = "sham-link-scope" + "[source-address='" + fmt.Sprintf("%v", shamLinkScope.SourceAddress) + "']" + "[destination-address='" + fmt.Sprintf("%v", shamLinkScope.DestinationAddress) + "']"
    shamLinkScope.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    shamLinkScope.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    shamLinkScope.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    shamLinkScope.EntityData.Children = make(map[string]types.YChild)
    shamLinkScope.EntityData.Children["authentication"] = types.YChild{"Authentication", &shamLinkScope.Authentication}
    shamLinkScope.EntityData.Children["dead-interval-minimal"] = types.YChild{"DeadIntervalMinimal", &shamLinkScope.DeadIntervalMinimal}
    shamLinkScope.EntityData.Leafs = make(map[string]types.YLeaf)
    shamLinkScope.EntityData.Leafs["source-address"] = types.YLeaf{"SourceAddress", shamLinkScope.SourceAddress}
    shamLinkScope.EntityData.Leafs["destination-address"] = types.YLeaf{"DestinationAddress", shamLinkScope.DestinationAddress}
    shamLinkScope.EntityData.Leafs["source"] = types.YLeaf{"Source", shamLinkScope.Source}
    shamLinkScope.EntityData.Leafs["cost"] = types.YLeaf{"Cost", shamLinkScope.Cost}
    shamLinkScope.EntityData.Leafs["hello-interval"] = types.YLeaf{"HelloInterval", shamLinkScope.HelloInterval}
    shamLinkScope.EntityData.Leafs["transmit-delay"] = types.YLeaf{"TransmitDelay", shamLinkScope.TransmitDelay}
    shamLinkScope.EntityData.Leafs["retransmit-interval"] = types.YLeaf{"RetransmitInterval", shamLinkScope.RetransmitInterval}
    shamLinkScope.EntityData.Leafs["running"] = types.YLeaf{"Running", shamLinkScope.Running}
    return &(shamLinkScope.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication
// Authentication
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // b'(!.+)|([^!].+)'.
    Key interface{}

    // Authentication type.
    Type_ Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "cisco_ios_xr"
    authentication.EntityData.ParentYangName = "sham-link-scope"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authentication.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authentication.EntityData.Children = make(map[string]types.YChild)
    authentication.EntityData.Children["type"] = types.YChild{"Type_", &authentication.Type_}
    authentication.EntityData.Children["message-digest-keies"] = types.YChild{"MessageDigestKeies", &authentication.MessageDigestKeies}
    authentication.EntityData.Leafs = make(map[string]types.YLeaf)
    authentication.EntityData.Leafs["key"] = types.YLeaf{"Key", authentication.Key}
    return &(authentication.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_Type) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "type"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "authentication"
    self.EntityData.SegmentPath = "type"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    self.EntityData.Leafs["authen-type"] = types.YLeaf{"AuthenType", self.AuthenType}
    self.EntityData.Leafs["keychain-authen-type"] = types.YLeaf{"KeychainAuthenType", self.KeychainAuthenType}
    self.EntityData.Leafs["keychain-name"] = types.YLeaf{"KeychainName", self.KeychainName}
    return &(self.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies) GetEntityData() *types.CommonEntityData {
    messageDigestKeies.EntityData.YFilter = messageDigestKeies.YFilter
    messageDigestKeies.EntityData.YangName = "message-digest-keies"
    messageDigestKeies.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKeies.EntityData.ParentYangName = "authentication"
    messageDigestKeies.EntityData.SegmentPath = "message-digest-keies"
    messageDigestKeies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKeies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKeies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKeies.EntityData.Children = make(map[string]types.YChild)
    messageDigestKeies.EntityData.Children["message-digest-key"] = types.YChild{"MessageDigestKey", nil}
    for i := range messageDigestKeies.MessageDigestKey {
        messageDigestKeies.EntityData.Children[types.GetSegmentPath(&messageDigestKeies.MessageDigestKey[i])] = types.YChild{"MessageDigestKey", &messageDigestKeies.MessageDigestKey[i]}
    }
    messageDigestKeies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(messageDigestKeies.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: b'(!.+)|([^!].+)'. This
    // attribute is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_Authentication_MessageDigestKeies_MessageDigestKey) GetEntityData() *types.CommonEntityData {
    messageDigestKey.EntityData.YFilter = messageDigestKey.YFilter
    messageDigestKey.EntityData.YangName = "message-digest-key"
    messageDigestKey.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKey.EntityData.ParentYangName = "message-digest-keies"
    messageDigestKey.EntityData.SegmentPath = "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
    messageDigestKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKey.EntityData.Children = make(map[string]types.YChild)
    messageDigestKey.EntityData.Leafs = make(map[string]types.YLeaf)
    messageDigestKey.EntityData.Leafs["key-id"] = types.YLeaf{"KeyId", messageDigestKey.KeyId}
    messageDigestKey.EntityData.Leafs["password"] = types.YLeaf{"Password", messageDigestKey.Password}
    return &(messageDigestKey.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinkScopes_ShamLinkScope_DeadIntervalMinimal) GetEntityData() *types.CommonEntityData {
    deadIntervalMinimal.EntityData.YFilter = deadIntervalMinimal.YFilter
    deadIntervalMinimal.EntityData.YangName = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.BundleName = "cisco_ios_xr"
    deadIntervalMinimal.EntityData.ParentYangName = "sham-link-scope"
    deadIntervalMinimal.EntityData.SegmentPath = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    deadIntervalMinimal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    deadIntervalMinimal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    deadIntervalMinimal.EntityData.Children = make(map[string]types.YChild)
    deadIntervalMinimal.EntityData.Leafs = make(map[string]types.YLeaf)
    deadIntervalMinimal.EntityData.Leafs["interval"] = types.YLeaf{"Interval", deadIntervalMinimal.Interval}
    deadIntervalMinimal.EntityData.Leafs["multiplier"] = types.YLeaf{"Multiplier", deadIntervalMinimal.Multiplier}
    return &(deadIntervalMinimal.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope
// Area scope configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Enable/Disable prefix suppression for primary addresses. The type is bool.
    // The default value is false.
    PrefixSuppressionPrimary interface{}

    // Enable/Disable ignoring of MTU in DBD packets. The type is bool. The
    // default value is false.
    MtuIgnore interface{}

    // Enable/Disable MPLS LDP sync for igp-shortcuts. The type is bool.
    LdpSyncIgpShortcuts interface{}

    // Enable MPLS LDP Auto Config. The type is interface{}.
    LdpAutoConfig interface{}

    // Type of attached network. The type is OspfNetwork.
    NetworkType interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Enable/Disable advertising loopback as a stub network. The type is bool.
    // The default value is false.
    LoopbackStubNetwork interface{}

    // Enable/Disable prefix suppression for secondary addresses. The type is
    // bool. The default value is false.
    PrefixSuppressionSecondary interface{}

    // Enable/Disable OSPF demand circuit. The type is bool. The default value is
    // false.
    DemandCircuit interface{}

    // When enabled, prevent sending HELLO packets over link. The type is bool.
    // The default value is false.
    Passive interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Customize size of OSPF packets upto MTU. The type is interface{} with
    // range: 576..10000.
    PacketSize interface{}

    // Enable/Disable MPLS LDP sync. The type is bool.
    LdpSync interface{}

    // Filter OSPF LSA during synchronization and flooding. The type is bool. The
    // default value is false.
    DatabaseFilter interface{}

    // Enable/Disable registration for early interface down notifications. The
    // type is bool. The default value is false.
    LinkDownFastDetect interface{}

    // segment-routing forwarding configuration Applicableonly in Default VRF. The
    // type is OspfSegmentRoutingForwarding.
    SegmentRoutingForwarding interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Router priority for DR and BDR election. The type is interface{} with
    // range: 0..255. The default value is 1.
    Priority interface{}

    // Enable/Disable OSPF flood reduction. The type is bool. The default value is
    // false.
    FloodReduction interface{}

    // Filter networks intalled to RIB (disable as ACL name means filtering is
    // disabled).
    DistributeList Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList

    // BFD configuration.
    Bfd Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Bfd

    // Authentication.
    Authentication Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication

    // Container class for security related configuration parameters.
    Security Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal

    // Fast-reroute configuration.
    FastReroute Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute

    // Interface fallback cost.
    CostFallback Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback
}

func (areaScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope) GetEntityData() *types.CommonEntityData {
    areaScope.EntityData.YFilter = areaScope.YFilter
    areaScope.EntityData.YangName = "area-scope"
    areaScope.EntityData.BundleName = "cisco_ios_xr"
    areaScope.EntityData.ParentYangName = "area-area-id"
    areaScope.EntityData.SegmentPath = "area-scope"
    areaScope.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaScope.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaScope.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaScope.EntityData.Children = make(map[string]types.YChild)
    areaScope.EntityData.Children["distribute-list"] = types.YChild{"DistributeList", &areaScope.DistributeList}
    areaScope.EntityData.Children["bfd"] = types.YChild{"Bfd", &areaScope.Bfd}
    areaScope.EntityData.Children["authentication"] = types.YChild{"Authentication", &areaScope.Authentication}
    areaScope.EntityData.Children["security"] = types.YChild{"Security", &areaScope.Security}
    areaScope.EntityData.Children["dead-interval-minimal"] = types.YChild{"DeadIntervalMinimal", &areaScope.DeadIntervalMinimal}
    areaScope.EntityData.Children["fast-reroute"] = types.YChild{"FastReroute", &areaScope.FastReroute}
    areaScope.EntityData.Children["cost-fallback"] = types.YChild{"CostFallback", &areaScope.CostFallback}
    areaScope.EntityData.Leafs = make(map[string]types.YLeaf)
    areaScope.EntityData.Leafs["cost"] = types.YLeaf{"Cost", areaScope.Cost}
    areaScope.EntityData.Leafs["prefix-suppression-primary"] = types.YLeaf{"PrefixSuppressionPrimary", areaScope.PrefixSuppressionPrimary}
    areaScope.EntityData.Leafs["mtu-ignore"] = types.YLeaf{"MtuIgnore", areaScope.MtuIgnore}
    areaScope.EntityData.Leafs["ldp-sync-igp-shortcuts"] = types.YLeaf{"LdpSyncIgpShortcuts", areaScope.LdpSyncIgpShortcuts}
    areaScope.EntityData.Leafs["ldp-auto-config"] = types.YLeaf{"LdpAutoConfig", areaScope.LdpAutoConfig}
    areaScope.EntityData.Leafs["network-type"] = types.YLeaf{"NetworkType", areaScope.NetworkType}
    areaScope.EntityData.Leafs["hello-interval"] = types.YLeaf{"HelloInterval", areaScope.HelloInterval}
    areaScope.EntityData.Leafs["loopback-stub-network"] = types.YLeaf{"LoopbackStubNetwork", areaScope.LoopbackStubNetwork}
    areaScope.EntityData.Leafs["prefix-suppression-secondary"] = types.YLeaf{"PrefixSuppressionSecondary", areaScope.PrefixSuppressionSecondary}
    areaScope.EntityData.Leafs["demand-circuit"] = types.YLeaf{"DemandCircuit", areaScope.DemandCircuit}
    areaScope.EntityData.Leafs["passive"] = types.YLeaf{"Passive", areaScope.Passive}
    areaScope.EntityData.Leafs["transmit-delay"] = types.YLeaf{"TransmitDelay", areaScope.TransmitDelay}
    areaScope.EntityData.Leafs["packet-size"] = types.YLeaf{"PacketSize", areaScope.PacketSize}
    areaScope.EntityData.Leafs["ldp-sync"] = types.YLeaf{"LdpSync", areaScope.LdpSync}
    areaScope.EntityData.Leafs["database-filter"] = types.YLeaf{"DatabaseFilter", areaScope.DatabaseFilter}
    areaScope.EntityData.Leafs["link-down-fast-detect"] = types.YLeaf{"LinkDownFastDetect", areaScope.LinkDownFastDetect}
    areaScope.EntityData.Leafs["segment-routing-forwarding"] = types.YLeaf{"SegmentRoutingForwarding", areaScope.SegmentRoutingForwarding}
    areaScope.EntityData.Leafs["retransmit-interval"] = types.YLeaf{"RetransmitInterval", areaScope.RetransmitInterval}
    areaScope.EntityData.Leafs["priority"] = types.YLeaf{"Priority", areaScope.Priority}
    areaScope.EntityData.Leafs["flood-reduction"] = types.YLeaf{"FloodReduction", areaScope.FloodReduction}
    return &(areaScope.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList
// Filter networks intalled to RIB (disable as ACL
// name means filtering is disabled)
// This type is a presence type.
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Access Control List name. The type is string.
    AccessListName interface{}

    // Route Policy name. The type is string.
    RoutePolicyName interface{}
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DistributeList) GetEntityData() *types.CommonEntityData {
    distributeList.EntityData.YFilter = distributeList.YFilter
    distributeList.EntityData.YangName = "distribute-list"
    distributeList.EntityData.BundleName = "cisco_ios_xr"
    distributeList.EntityData.ParentYangName = "area-scope"
    distributeList.EntityData.SegmentPath = "distribute-list"
    distributeList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    distributeList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    distributeList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    distributeList.EntityData.Children = make(map[string]types.YChild)
    distributeList.EntityData.Leafs = make(map[string]types.YLeaf)
    distributeList.EntityData.Leafs["access-list-name"] = types.YLeaf{"AccessListName", distributeList.AccessListName}
    distributeList.EntityData.Leafs["route-policy-name"] = types.YLeaf{"RoutePolicyName", distributeList.RoutePolicyName}
    return &(distributeList.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Bfd
// BFD configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Bfd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Hello interval for BFD sessions created by OSPF. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    Interval interface{}

    // Detection multiplier for BFD sessions created by OSPF. The type is
    // interface{} with range: 2..50.
    DetectionMultiplier interface{}

    // use of Bidirectional Forwarding Detection. The type is BfdEnableMode.
    FastDetectMode interface{}
}

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Bfd) GetEntityData() *types.CommonEntityData {
    bfd.EntityData.YFilter = bfd.YFilter
    bfd.EntityData.YangName = "bfd"
    bfd.EntityData.BundleName = "cisco_ios_xr"
    bfd.EntityData.ParentYangName = "area-scope"
    bfd.EntityData.SegmentPath = "bfd"
    bfd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfd.EntityData.Children = make(map[string]types.YChild)
    bfd.EntityData.Leafs = make(map[string]types.YLeaf)
    bfd.EntityData.Leafs["interval"] = types.YLeaf{"Interval", bfd.Interval}
    bfd.EntityData.Leafs["detection-multiplier"] = types.YLeaf{"DetectionMultiplier", bfd.DetectionMultiplier}
    bfd.EntityData.Leafs["fast-detect-mode"] = types.YLeaf{"FastDetectMode", bfd.FastDetectMode}
    return &(bfd.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication
// Authentication
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // b'(!.+)|([^!].+)'.
    Key interface{}

    // Authentication type.
    Type_ Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "cisco_ios_xr"
    authentication.EntityData.ParentYangName = "area-scope"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authentication.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authentication.EntityData.Children = make(map[string]types.YChild)
    authentication.EntityData.Children["type"] = types.YChild{"Type_", &authentication.Type_}
    authentication.EntityData.Children["message-digest-keies"] = types.YChild{"MessageDigestKeies", &authentication.MessageDigestKeies}
    authentication.EntityData.Leafs = make(map[string]types.YLeaf)
    authentication.EntityData.Leafs["key"] = types.YLeaf{"Key", authentication.Key}
    return &(authentication.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_Type) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "type"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "authentication"
    self.EntityData.SegmentPath = "type"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    self.EntityData.Leafs["authen-type"] = types.YLeaf{"AuthenType", self.AuthenType}
    self.EntityData.Leafs["keychain-authen-type"] = types.YLeaf{"KeychainAuthenType", self.KeychainAuthenType}
    self.EntityData.Leafs["keychain-name"] = types.YLeaf{"KeychainName", self.KeychainName}
    return &(self.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies) GetEntityData() *types.CommonEntityData {
    messageDigestKeies.EntityData.YFilter = messageDigestKeies.YFilter
    messageDigestKeies.EntityData.YangName = "message-digest-keies"
    messageDigestKeies.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKeies.EntityData.ParentYangName = "authentication"
    messageDigestKeies.EntityData.SegmentPath = "message-digest-keies"
    messageDigestKeies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKeies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKeies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKeies.EntityData.Children = make(map[string]types.YChild)
    messageDigestKeies.EntityData.Children["message-digest-key"] = types.YChild{"MessageDigestKey", nil}
    for i := range messageDigestKeies.MessageDigestKey {
        messageDigestKeies.EntityData.Children[types.GetSegmentPath(&messageDigestKeies.MessageDigestKey[i])] = types.YChild{"MessageDigestKey", &messageDigestKeies.MessageDigestKey[i]}
    }
    messageDigestKeies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(messageDigestKeies.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: b'(!.+)|([^!].+)'. This
    // attribute is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Authentication_MessageDigestKeies_MessageDigestKey) GetEntityData() *types.CommonEntityData {
    messageDigestKey.EntityData.YFilter = messageDigestKey.YFilter
    messageDigestKey.EntityData.YangName = "message-digest-key"
    messageDigestKey.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKey.EntityData.ParentYangName = "message-digest-keies"
    messageDigestKey.EntityData.SegmentPath = "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
    messageDigestKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKey.EntityData.Children = make(map[string]types.YChild)
    messageDigestKey.EntityData.Leafs = make(map[string]types.YLeaf)
    messageDigestKey.EntityData.Leafs["key-id"] = types.YLeaf{"KeyId", messageDigestKey.KeyId}
    messageDigestKey.EntityData.Leafs["password"] = types.YLeaf{"Password", messageDigestKey.Password}
    return &(messageDigestKey.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security
// Container class for security related
// configuration parameters
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enabling turns on TTL security.
    Ttl Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl
}

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security) GetEntityData() *types.CommonEntityData {
    security.EntityData.YFilter = security.YFilter
    security.EntityData.YangName = "security"
    security.EntityData.BundleName = "cisco_ios_xr"
    security.EntityData.ParentYangName = "area-scope"
    security.EntityData.SegmentPath = "security"
    security.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    security.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    security.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    security.EntityData.Children = make(map[string]types.YChild)
    security.EntityData.Children["ttl"] = types.YChild{"Ttl", &security.Ttl}
    security.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(security.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl
// Enabling turns on TTL security
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable TTL security. The type is bool.
    Enable interface{}

    // Hop count. The type is interface{} with range: 1..254.
    HopCount interface{}
}

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_Security_Ttl) GetEntityData() *types.CommonEntityData {
    ttl.EntityData.YFilter = ttl.YFilter
    ttl.EntityData.YangName = "ttl"
    ttl.EntityData.BundleName = "cisco_ios_xr"
    ttl.EntityData.ParentYangName = "security"
    ttl.EntityData.SegmentPath = "ttl"
    ttl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ttl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ttl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ttl.EntityData.Children = make(map[string]types.YChild)
    ttl.EntityData.Leafs = make(map[string]types.YLeaf)
    ttl.EntityData.Leafs["enable"] = types.YLeaf{"Enable", ttl.Enable}
    ttl.EntityData.Leafs["hop-count"] = types.YLeaf{"HopCount", ttl.HopCount}
    return &(ttl.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_DeadIntervalMinimal) GetEntityData() *types.CommonEntityData {
    deadIntervalMinimal.EntityData.YFilter = deadIntervalMinimal.YFilter
    deadIntervalMinimal.EntityData.YangName = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.BundleName = "cisco_ios_xr"
    deadIntervalMinimal.EntityData.ParentYangName = "area-scope"
    deadIntervalMinimal.EntityData.SegmentPath = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    deadIntervalMinimal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    deadIntervalMinimal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    deadIntervalMinimal.EntityData.Children = make(map[string]types.YChild)
    deadIntervalMinimal.EntityData.Leafs = make(map[string]types.YLeaf)
    deadIntervalMinimal.EntityData.Leafs["interval"] = types.YLeaf{"Interval", deadIntervalMinimal.Interval}
    deadIntervalMinimal.EntityData.Leafs["multiplier"] = types.YLeaf{"Multiplier", deadIntervalMinimal.Multiplier}
    return &(deadIntervalMinimal.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute
// Fast-reroute configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // OspfFastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink

    // Fast-reroute per-prefix global configuration.
    PerPrefix Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetEntityData() *types.CommonEntityData {
    fastReroute.EntityData.YFilter = fastReroute.YFilter
    fastReroute.EntityData.YangName = "fast-reroute"
    fastReroute.EntityData.BundleName = "cisco_ios_xr"
    fastReroute.EntityData.ParentYangName = "area-scope"
    fastReroute.EntityData.SegmentPath = "fast-reroute"
    fastReroute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fastReroute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fastReroute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fastReroute.EntityData.Children = make(map[string]types.YChild)
    fastReroute.EntityData.Children["per-link"] = types.YChild{"PerLink", &fastReroute.PerLink}
    fastReroute.EntityData.Children["per-prefix"] = types.YChild{"PerPrefix", &fastReroute.PerPrefix}
    fastReroute.EntityData.Leafs = make(map[string]types.YLeaf)
    fastReroute.EntityData.Leafs["fast-reroute-enable"] = types.YLeaf{"FastRerouteEnable", fastReroute.FastRerouteEnable}
    return &(fastReroute.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetEntityData() *types.CommonEntityData {
    perLink.EntityData.YFilter = perLink.YFilter
    perLink.EntityData.YangName = "per-link"
    perLink.EntityData.BundleName = "cisco_ios_xr"
    perLink.EntityData.ParentYangName = "fast-reroute"
    perLink.EntityData.SegmentPath = "per-link"
    perLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perLink.EntityData.Children = make(map[string]types.YChild)
    perLink.EntityData.Children["candidate-interfaces"] = types.YChild{"CandidateInterfaces", &perLink.CandidateInterfaces}
    perLink.EntityData.Children["exclude-interfaces"] = types.YChild{"ExcludeInterfaces", &perLink.ExcludeInterfaces}
    perLink.EntityData.Leafs = make(map[string]types.YLeaf)
    perLink.EntityData.Leafs["fast-reroute-use-candidate-only"] = types.YLeaf{"FastRerouteUseCandidateOnly", perLink.FastRerouteUseCandidateOnly}
    return &(perLink.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetEntityData() *types.CommonEntityData {
    candidateInterfaces.EntityData.YFilter = candidateInterfaces.YFilter
    candidateInterfaces.EntityData.YangName = "candidate-interfaces"
    candidateInterfaces.EntityData.BundleName = "cisco_ios_xr"
    candidateInterfaces.EntityData.ParentYangName = "per-link"
    candidateInterfaces.EntityData.SegmentPath = "candidate-interfaces"
    candidateInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterfaces.EntityData.Children = make(map[string]types.YChild)
    candidateInterfaces.EntityData.Children["candidate-interface"] = types.YChild{"CandidateInterface", nil}
    for i := range candidateInterfaces.CandidateInterface {
        candidateInterfaces.EntityData.Children[types.GetSegmentPath(&candidateInterfaces.CandidateInterface[i])] = types.YChild{"CandidateInterface", &candidateInterfaces.CandidateInterface[i]}
    }
    candidateInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(candidateInterfaces.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetEntityData() *types.CommonEntityData {
    candidateInterface.EntityData.YFilter = candidateInterface.YFilter
    candidateInterface.EntityData.YangName = "candidate-interface"
    candidateInterface.EntityData.BundleName = "cisco_ios_xr"
    candidateInterface.EntityData.ParentYangName = "candidate-interfaces"
    candidateInterface.EntityData.SegmentPath = "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
    candidateInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterface.EntityData.Children = make(map[string]types.YChild)
    candidateInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    candidateInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", candidateInterface.InterfaceName}
    return &(candidateInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetEntityData() *types.CommonEntityData {
    excludeInterfaces.EntityData.YFilter = excludeInterfaces.YFilter
    excludeInterfaces.EntityData.YangName = "exclude-interfaces"
    excludeInterfaces.EntityData.BundleName = "cisco_ios_xr"
    excludeInterfaces.EntityData.ParentYangName = "per-link"
    excludeInterfaces.EntityData.SegmentPath = "exclude-interfaces"
    excludeInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterfaces.EntityData.Children = make(map[string]types.YChild)
    excludeInterfaces.EntityData.Children["exclude-interface"] = types.YChild{"ExcludeInterface", nil}
    for i := range excludeInterfaces.ExcludeInterface {
        excludeInterfaces.EntityData.Children[types.GetSegmentPath(&excludeInterfaces.ExcludeInterface[i])] = types.YChild{"ExcludeInterface", &excludeInterfaces.ExcludeInterface[i]}
    }
    excludeInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(excludeInterfaces.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetEntityData() *types.CommonEntityData {
    excludeInterface.EntityData.YFilter = excludeInterface.YFilter
    excludeInterface.EntityData.YangName = "exclude-interface"
    excludeInterface.EntityData.BundleName = "cisco_ios_xr"
    excludeInterface.EntityData.ParentYangName = "exclude-interfaces"
    excludeInterface.EntityData.SegmentPath = "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
    excludeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterface.EntityData.Children = make(map[string]types.YChild)
    excludeInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    excludeInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", excludeInterface.InterfaceName}
    return &(excludeInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix
// Fast-reroute per-prefix global configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology Independet LFA configuration. The type is bool.
    TopologyIndependentLfa interface{}

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Remote LFA configuration.
    RemoteLfa Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa

    // Fast-reroute tiebreakers configurations.
    Tiebreakers Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetEntityData() *types.CommonEntityData {
    perPrefix.EntityData.YFilter = perPrefix.YFilter
    perPrefix.EntityData.YangName = "per-prefix"
    perPrefix.EntityData.BundleName = "cisco_ios_xr"
    perPrefix.EntityData.ParentYangName = "fast-reroute"
    perPrefix.EntityData.SegmentPath = "per-prefix"
    perPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perPrefix.EntityData.Children = make(map[string]types.YChild)
    perPrefix.EntityData.Children["remote-lfa"] = types.YChild{"RemoteLfa", &perPrefix.RemoteLfa}
    perPrefix.EntityData.Children["tiebreakers"] = types.YChild{"Tiebreakers", &perPrefix.Tiebreakers}
    perPrefix.EntityData.Children["candidate-interfaces"] = types.YChild{"CandidateInterfaces", &perPrefix.CandidateInterfaces}
    perPrefix.EntityData.Children["exclude-interfaces"] = types.YChild{"ExcludeInterfaces", &perPrefix.ExcludeInterfaces}
    perPrefix.EntityData.Leafs = make(map[string]types.YLeaf)
    perPrefix.EntityData.Leafs["topology-independent-lfa"] = types.YLeaf{"TopologyIndependentLfa", perPrefix.TopologyIndependentLfa}
    perPrefix.EntityData.Leafs["fast-reroute-use-candidate-only"] = types.YLeaf{"FastRerouteUseCandidateOnly", perPrefix.FastRerouteUseCandidateOnly}
    return &(perPrefix.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa
// Remote LFA configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable/Disable remote LFA computation. The type is OspfFrrRlfaTunnel.
    Tunnel interface{}

    // Maximum path cost to remote LFA. The type is interface{} with range:
    // 1..4294967295.
    MaximumCost interface{}
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_RemoteLfa) GetEntityData() *types.CommonEntityData {
    remoteLfa.EntityData.YFilter = remoteLfa.YFilter
    remoteLfa.EntityData.YangName = "remote-lfa"
    remoteLfa.EntityData.BundleName = "cisco_ios_xr"
    remoteLfa.EntityData.ParentYangName = "per-prefix"
    remoteLfa.EntityData.SegmentPath = "remote-lfa"
    remoteLfa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteLfa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteLfa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteLfa.EntityData.Children = make(map[string]types.YChild)
    remoteLfa.EntityData.Leafs = make(map[string]types.YLeaf)
    remoteLfa.EntityData.Leafs["tunnel"] = types.YLeaf{"Tunnel", remoteLfa.Tunnel}
    remoteLfa.EntityData.Leafs["maximum-cost"] = types.YLeaf{"MaximumCost", remoteLfa.MaximumCost}
    return &(remoteLfa.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers
// Fast-reroute tiebreakers configurations
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fast-reroute tiebreakers configuration. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker.
    Tiebreaker []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers) GetEntityData() *types.CommonEntityData {
    tiebreakers.EntityData.YFilter = tiebreakers.YFilter
    tiebreakers.EntityData.YangName = "tiebreakers"
    tiebreakers.EntityData.BundleName = "cisco_ios_xr"
    tiebreakers.EntityData.ParentYangName = "per-prefix"
    tiebreakers.EntityData.SegmentPath = "tiebreakers"
    tiebreakers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tiebreakers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tiebreakers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tiebreakers.EntityData.Children = make(map[string]types.YChild)
    tiebreakers.EntityData.Children["tiebreaker"] = types.YChild{"Tiebreaker", nil}
    for i := range tiebreakers.Tiebreaker {
        tiebreakers.EntityData.Children[types.GetSegmentPath(&tiebreakers.Tiebreaker[i])] = types.YChild{"Tiebreaker", &tiebreakers.Tiebreaker[i]}
    }
    tiebreakers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tiebreakers.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
// Fast-reroute tiebreakers configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Tiebreaker type. The type is
    // OspfFastRerouteTiebreakersIntf.
    TiebreakerType interface{}

    // Index value for a tiebreaker, 0 to disable. The type is interface{} with
    // range: 0..255. This attribute is mandatory.
    TiebreakerIndex interface{}
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetEntityData() *types.CommonEntityData {
    tiebreaker.EntityData.YFilter = tiebreaker.YFilter
    tiebreaker.EntityData.YangName = "tiebreaker"
    tiebreaker.EntityData.BundleName = "cisco_ios_xr"
    tiebreaker.EntityData.ParentYangName = "tiebreakers"
    tiebreaker.EntityData.SegmentPath = "tiebreaker" + "[tiebreaker-type='" + fmt.Sprintf("%v", tiebreaker.TiebreakerType) + "']"
    tiebreaker.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tiebreaker.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tiebreaker.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tiebreaker.EntityData.Children = make(map[string]types.YChild)
    tiebreaker.EntityData.Leafs = make(map[string]types.YLeaf)
    tiebreaker.EntityData.Leafs["tiebreaker-type"] = types.YLeaf{"TiebreakerType", tiebreaker.TiebreakerType}
    tiebreaker.EntityData.Leafs["tiebreaker-index"] = types.YLeaf{"TiebreakerIndex", tiebreaker.TiebreakerIndex}
    return &(tiebreaker.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetEntityData() *types.CommonEntityData {
    candidateInterfaces.EntityData.YFilter = candidateInterfaces.YFilter
    candidateInterfaces.EntityData.YangName = "candidate-interfaces"
    candidateInterfaces.EntityData.BundleName = "cisco_ios_xr"
    candidateInterfaces.EntityData.ParentYangName = "per-prefix"
    candidateInterfaces.EntityData.SegmentPath = "candidate-interfaces"
    candidateInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterfaces.EntityData.Children = make(map[string]types.YChild)
    candidateInterfaces.EntityData.Children["candidate-interface"] = types.YChild{"CandidateInterface", nil}
    for i := range candidateInterfaces.CandidateInterface {
        candidateInterfaces.EntityData.Children[types.GetSegmentPath(&candidateInterfaces.CandidateInterface[i])] = types.YChild{"CandidateInterface", &candidateInterfaces.CandidateInterface[i]}
    }
    candidateInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(candidateInterfaces.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetEntityData() *types.CommonEntityData {
    candidateInterface.EntityData.YFilter = candidateInterface.YFilter
    candidateInterface.EntityData.YangName = "candidate-interface"
    candidateInterface.EntityData.BundleName = "cisco_ios_xr"
    candidateInterface.EntityData.ParentYangName = "candidate-interfaces"
    candidateInterface.EntityData.SegmentPath = "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
    candidateInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterface.EntityData.Children = make(map[string]types.YChild)
    candidateInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    candidateInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", candidateInterface.InterfaceName}
    return &(candidateInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetEntityData() *types.CommonEntityData {
    excludeInterfaces.EntityData.YFilter = excludeInterfaces.YFilter
    excludeInterfaces.EntityData.YangName = "exclude-interfaces"
    excludeInterfaces.EntityData.BundleName = "cisco_ios_xr"
    excludeInterfaces.EntityData.ParentYangName = "per-prefix"
    excludeInterfaces.EntityData.SegmentPath = "exclude-interfaces"
    excludeInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterfaces.EntityData.Children = make(map[string]types.YChild)
    excludeInterfaces.EntityData.Children["exclude-interface"] = types.YChild{"ExcludeInterface", nil}
    for i := range excludeInterfaces.ExcludeInterface {
        excludeInterfaces.EntityData.Children[types.GetSegmentPath(&excludeInterfaces.ExcludeInterface[i])] = types.YChild{"ExcludeInterface", &excludeInterfaces.ExcludeInterface[i]}
    }
    excludeInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(excludeInterfaces.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetEntityData() *types.CommonEntityData {
    excludeInterface.EntityData.YFilter = excludeInterface.YFilter
    excludeInterface.EntityData.YangName = "exclude-interface"
    excludeInterface.EntityData.BundleName = "cisco_ios_xr"
    excludeInterface.EntityData.ParentYangName = "exclude-interfaces"
    excludeInterface.EntityData.SegmentPath = "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
    excludeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterface.EntityData.Children = make(map[string]types.YChild)
    excludeInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    excludeInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", excludeInterface.InterfaceName}
    return &(excludeInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback
// Interface fallback cost
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fallback cost of link. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Bandwidth threshold. The type is interface{} with range: 1..4294967.
    Threshold interface{}
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_CostFallback) GetEntityData() *types.CommonEntityData {
    costFallback.EntityData.YFilter = costFallback.YFilter
    costFallback.EntityData.YangName = "cost-fallback"
    costFallback.EntityData.BundleName = "cisco_ios_xr"
    costFallback.EntityData.ParentYangName = "area-scope"
    costFallback.EntityData.SegmentPath = "cost-fallback"
    costFallback.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    costFallback.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    costFallback.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    costFallback.EntityData.Children = make(map[string]types.YChild)
    costFallback.EntityData.Leafs = make(map[string]types.YLeaf)
    costFallback.EntityData.Leafs["cost"] = types.YLeaf{"Cost", costFallback.Cost}
    costFallback.EntityData.Leafs["threshold"] = types.YLeaf{"Threshold", costFallback.Threshold}
    return &(costFallback.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes
// Name scope configurations
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name scope configuration. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope.
    NameScope []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope
}

func (nameScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes) GetEntityData() *types.CommonEntityData {
    nameScopes.EntityData.YFilter = nameScopes.YFilter
    nameScopes.EntityData.YangName = "name-scopes"
    nameScopes.EntityData.BundleName = "cisco_ios_xr"
    nameScopes.EntityData.ParentYangName = "area-area-id"
    nameScopes.EntityData.SegmentPath = "name-scopes"
    nameScopes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nameScopes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nameScopes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nameScopes.EntityData.Children = make(map[string]types.YChild)
    nameScopes.EntityData.Children["name-scope"] = types.YChild{"NameScope", nil}
    for i := range nameScopes.NameScope {
        nameScopes.EntityData.Children[types.GetSegmentPath(&nameScopes.NameScope[i])] = types.YChild{"NameScope", &nameScopes.NameScope[i]}
    }
    nameScopes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(nameScopes.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope
// Name scope configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of Interface to configure. The type is string
    // with pattern: b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Enable/Disable prefix suppression for primary addresses. The type is bool.
    // The default value is false.
    PrefixSuppressionPrimary interface{}

    // Enable/Disable ignoring of MTU in DBD packets. The type is bool. The
    // default value is false.
    MtuIgnore interface{}

    // Enable/Disable MPLS LDP sync for igp-shortcuts. The type is bool.
    LdpSyncIgpShortcuts interface{}

    // Enable MPLS LDP Auto Config. The type is interface{}.
    LdpAutoConfig interface{}

    // Type of attached network. The type is OspfNetwork.
    NetworkType interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // Enable/Disable advertising loopback as a stub network. The type is bool.
    // The default value is false.
    LoopbackStubNetwork interface{}

    // Enable/Disable prefix suppression for secondary addresses. The type is
    // bool. The default value is false.
    PrefixSuppressionSecondary interface{}

    // Enable/Disable OSPF demand circuit. The type is bool. The default value is
    // false.
    DemandCircuit interface{}

    // When enabled, prevent sending HELLO packets over link. The type is bool.
    // The default value is false.
    Passive interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Customize size of OSPF packets upto MTU. The type is interface{} with
    // range: 576..10000.
    PacketSize interface{}

    // Enable/Disable MPLS LDP sync. The type is bool.
    LdpSync interface{}

    // Filter OSPF LSA during synchronization and flooding. The type is bool. The
    // default value is false.
    DatabaseFilter interface{}

    // Enable/Disable registration for early interface down notifications. The
    // type is bool. The default value is false.
    LinkDownFastDetect interface{}

    // segment-routing forwarding configuration Applicableonly in Default VRF. The
    // type is OspfSegmentRoutingForwarding.
    SegmentRoutingForwarding interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Router priority for DR and BDR election. The type is interface{} with
    // range: 0..255. The default value is 1.
    Priority interface{}

    // Enable/Disable OSPF flood reduction. The type is bool. The default value is
    // false.
    FloodReduction interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Prefix SID.
    PrefixSid Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid

    // Strict Prefix SID.
    PrefixSidStrict Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict

    // Filter networks intalled to RIB (disable as ACL name means filtering is
    // disabled).
    DistributeList Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList

    // BFD configuration.
    Bfd Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd

    // Authentication.
    Authentication Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication

    // Container class for security related configuration parameters.
    Security Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security

    // Neighbor router configuration information.
    Neighbors Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal

    // Fast-reroute configuration.
    FastReroute Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute

    // Interface fallback cost.
    CostFallback Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback
}

func (nameScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope) GetEntityData() *types.CommonEntityData {
    nameScope.EntityData.YFilter = nameScope.YFilter
    nameScope.EntityData.YangName = "name-scope"
    nameScope.EntityData.BundleName = "cisco_ios_xr"
    nameScope.EntityData.ParentYangName = "name-scopes"
    nameScope.EntityData.SegmentPath = "name-scope" + "[interface-name='" + fmt.Sprintf("%v", nameScope.InterfaceName) + "']"
    nameScope.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nameScope.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nameScope.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nameScope.EntityData.Children = make(map[string]types.YChild)
    nameScope.EntityData.Children["prefix-sid"] = types.YChild{"PrefixSid", &nameScope.PrefixSid}
    nameScope.EntityData.Children["prefix-sid-strict"] = types.YChild{"PrefixSidStrict", &nameScope.PrefixSidStrict}
    nameScope.EntityData.Children["distribute-list"] = types.YChild{"DistributeList", &nameScope.DistributeList}
    nameScope.EntityData.Children["bfd"] = types.YChild{"Bfd", &nameScope.Bfd}
    nameScope.EntityData.Children["authentication"] = types.YChild{"Authentication", &nameScope.Authentication}
    nameScope.EntityData.Children["security"] = types.YChild{"Security", &nameScope.Security}
    nameScope.EntityData.Children["neighbors"] = types.YChild{"Neighbors", &nameScope.Neighbors}
    nameScope.EntityData.Children["dead-interval-minimal"] = types.YChild{"DeadIntervalMinimal", &nameScope.DeadIntervalMinimal}
    nameScope.EntityData.Children["fast-reroute"] = types.YChild{"FastReroute", &nameScope.FastReroute}
    nameScope.EntityData.Children["cost-fallback"] = types.YChild{"CostFallback", &nameScope.CostFallback}
    nameScope.EntityData.Leafs = make(map[string]types.YLeaf)
    nameScope.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", nameScope.InterfaceName}
    nameScope.EntityData.Leafs["cost"] = types.YLeaf{"Cost", nameScope.Cost}
    nameScope.EntityData.Leafs["prefix-suppression-primary"] = types.YLeaf{"PrefixSuppressionPrimary", nameScope.PrefixSuppressionPrimary}
    nameScope.EntityData.Leafs["mtu-ignore"] = types.YLeaf{"MtuIgnore", nameScope.MtuIgnore}
    nameScope.EntityData.Leafs["ldp-sync-igp-shortcuts"] = types.YLeaf{"LdpSyncIgpShortcuts", nameScope.LdpSyncIgpShortcuts}
    nameScope.EntityData.Leafs["ldp-auto-config"] = types.YLeaf{"LdpAutoConfig", nameScope.LdpAutoConfig}
    nameScope.EntityData.Leafs["network-type"] = types.YLeaf{"NetworkType", nameScope.NetworkType}
    nameScope.EntityData.Leafs["hello-interval"] = types.YLeaf{"HelloInterval", nameScope.HelloInterval}
    nameScope.EntityData.Leafs["loopback-stub-network"] = types.YLeaf{"LoopbackStubNetwork", nameScope.LoopbackStubNetwork}
    nameScope.EntityData.Leafs["prefix-suppression-secondary"] = types.YLeaf{"PrefixSuppressionSecondary", nameScope.PrefixSuppressionSecondary}
    nameScope.EntityData.Leafs["demand-circuit"] = types.YLeaf{"DemandCircuit", nameScope.DemandCircuit}
    nameScope.EntityData.Leafs["passive"] = types.YLeaf{"Passive", nameScope.Passive}
    nameScope.EntityData.Leafs["transmit-delay"] = types.YLeaf{"TransmitDelay", nameScope.TransmitDelay}
    nameScope.EntityData.Leafs["packet-size"] = types.YLeaf{"PacketSize", nameScope.PacketSize}
    nameScope.EntityData.Leafs["ldp-sync"] = types.YLeaf{"LdpSync", nameScope.LdpSync}
    nameScope.EntityData.Leafs["database-filter"] = types.YLeaf{"DatabaseFilter", nameScope.DatabaseFilter}
    nameScope.EntityData.Leafs["link-down-fast-detect"] = types.YLeaf{"LinkDownFastDetect", nameScope.LinkDownFastDetect}
    nameScope.EntityData.Leafs["segment-routing-forwarding"] = types.YLeaf{"SegmentRoutingForwarding", nameScope.SegmentRoutingForwarding}
    nameScope.EntityData.Leafs["retransmit-interval"] = types.YLeaf{"RetransmitInterval", nameScope.RetransmitInterval}
    nameScope.EntityData.Leafs["priority"] = types.YLeaf{"Priority", nameScope.Priority}
    nameScope.EntityData.Leafs["flood-reduction"] = types.YLeaf{"FloodReduction", nameScope.FloodReduction}
    nameScope.EntityData.Leafs["running"] = types.YLeaf{"Running", nameScope.Running}
    return &(nameScope.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid
// Prefix SID
// This type is a presence type.
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SID value. The type is interface{} with range: 0..1048575. This attribute
    // is mandatory.
    SidValue interface{}

    // Force Penultimate Hop To Send Explicit-Null Label. The type is bool. The
    // default value is false.
    ExplicitNull interface{}

    // OSPF SID Type. The type is OspfSid. This attribute is mandatory.
    Type_ interface{}

    // Not a node SID. The type is bool. The default value is false.
    NFlagClear interface{}
}

func (prefixSid *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSid) GetEntityData() *types.CommonEntityData {
    prefixSid.EntityData.YFilter = prefixSid.YFilter
    prefixSid.EntityData.YangName = "prefix-sid"
    prefixSid.EntityData.BundleName = "cisco_ios_xr"
    prefixSid.EntityData.ParentYangName = "name-scope"
    prefixSid.EntityData.SegmentPath = "prefix-sid"
    prefixSid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixSid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixSid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixSid.EntityData.Children = make(map[string]types.YChild)
    prefixSid.EntityData.Leafs = make(map[string]types.YLeaf)
    prefixSid.EntityData.Leafs["sid-value"] = types.YLeaf{"SidValue", prefixSid.SidValue}
    prefixSid.EntityData.Leafs["explicit-null"] = types.YLeaf{"ExplicitNull", prefixSid.ExplicitNull}
    prefixSid.EntityData.Leafs["type"] = types.YLeaf{"Type_", prefixSid.Type_}
    prefixSid.EntityData.Leafs["n-flag-clear"] = types.YLeaf{"NFlagClear", prefixSid.NFlagClear}
    return &(prefixSid.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict
// Strict Prefix SID
// This type is a presence type.
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SID value. The type is interface{} with range: 0..1048575. This attribute
    // is mandatory.
    SidValue interface{}

    // Force Penultimate Hop To Send Explicit-Null Label. The type is bool. The
    // default value is false.
    ExplicitNull interface{}

    // OSPF SID Type. The type is OspfSid. This attribute is mandatory.
    Type_ interface{}

    // Not a node SID. The type is bool. The default value is false.
    NFlagClear interface{}
}

func (prefixSidStrict *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_PrefixSidStrict) GetEntityData() *types.CommonEntityData {
    prefixSidStrict.EntityData.YFilter = prefixSidStrict.YFilter
    prefixSidStrict.EntityData.YangName = "prefix-sid-strict"
    prefixSidStrict.EntityData.BundleName = "cisco_ios_xr"
    prefixSidStrict.EntityData.ParentYangName = "name-scope"
    prefixSidStrict.EntityData.SegmentPath = "prefix-sid-strict"
    prefixSidStrict.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixSidStrict.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixSidStrict.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixSidStrict.EntityData.Children = make(map[string]types.YChild)
    prefixSidStrict.EntityData.Leafs = make(map[string]types.YLeaf)
    prefixSidStrict.EntityData.Leafs["sid-value"] = types.YLeaf{"SidValue", prefixSidStrict.SidValue}
    prefixSidStrict.EntityData.Leafs["explicit-null"] = types.YLeaf{"ExplicitNull", prefixSidStrict.ExplicitNull}
    prefixSidStrict.EntityData.Leafs["type"] = types.YLeaf{"Type_", prefixSidStrict.Type_}
    prefixSidStrict.EntityData.Leafs["n-flag-clear"] = types.YLeaf{"NFlagClear", prefixSidStrict.NFlagClear}
    return &(prefixSidStrict.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList
// Filter networks intalled to RIB (disable as ACL
// name means filtering is disabled)
// This type is a presence type.
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Access Control List name. The type is string.
    AccessListName interface{}

    // Route Policy name. The type is string.
    RoutePolicyName interface{}
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DistributeList) GetEntityData() *types.CommonEntityData {
    distributeList.EntityData.YFilter = distributeList.YFilter
    distributeList.EntityData.YangName = "distribute-list"
    distributeList.EntityData.BundleName = "cisco_ios_xr"
    distributeList.EntityData.ParentYangName = "name-scope"
    distributeList.EntityData.SegmentPath = "distribute-list"
    distributeList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    distributeList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    distributeList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    distributeList.EntityData.Children = make(map[string]types.YChild)
    distributeList.EntityData.Leafs = make(map[string]types.YLeaf)
    distributeList.EntityData.Leafs["access-list-name"] = types.YLeaf{"AccessListName", distributeList.AccessListName}
    distributeList.EntityData.Leafs["route-policy-name"] = types.YLeaf{"RoutePolicyName", distributeList.RoutePolicyName}
    return &(distributeList.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd
// BFD configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Hello interval for BFD sessions created by OSPF. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    Interval interface{}

    // Detection multiplier for BFD sessions created by OSPF. The type is
    // interface{} with range: 2..50.
    DetectionMultiplier interface{}

    // use of Bidirectional Forwarding Detection. The type is BfdEnableMode.
    FastDetectMode interface{}
}

func (bfd *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Bfd) GetEntityData() *types.CommonEntityData {
    bfd.EntityData.YFilter = bfd.YFilter
    bfd.EntityData.YangName = "bfd"
    bfd.EntityData.BundleName = "cisco_ios_xr"
    bfd.EntityData.ParentYangName = "name-scope"
    bfd.EntityData.SegmentPath = "bfd"
    bfd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfd.EntityData.Children = make(map[string]types.YChild)
    bfd.EntityData.Leafs = make(map[string]types.YLeaf)
    bfd.EntityData.Leafs["interval"] = types.YLeaf{"Interval", bfd.Interval}
    bfd.EntityData.Leafs["detection-multiplier"] = types.YLeaf{"DetectionMultiplier", bfd.DetectionMultiplier}
    bfd.EntityData.Leafs["fast-detect-mode"] = types.YLeaf{"FastDetectMode", bfd.FastDetectMode}
    return &(bfd.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication
// Authentication
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // b'(!.+)|([^!].+)'.
    Key interface{}

    // Authentication type.
    Type_ Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "cisco_ios_xr"
    authentication.EntityData.ParentYangName = "name-scope"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authentication.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authentication.EntityData.Children = make(map[string]types.YChild)
    authentication.EntityData.Children["type"] = types.YChild{"Type_", &authentication.Type_}
    authentication.EntityData.Children["message-digest-keies"] = types.YChild{"MessageDigestKeies", &authentication.MessageDigestKeies}
    authentication.EntityData.Leafs = make(map[string]types.YLeaf)
    authentication.EntityData.Leafs["key"] = types.YLeaf{"Key", authentication.Key}
    return &(authentication.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_Type) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "type"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "authentication"
    self.EntityData.SegmentPath = "type"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    self.EntityData.Leafs["authen-type"] = types.YLeaf{"AuthenType", self.AuthenType}
    self.EntityData.Leafs["keychain-authen-type"] = types.YLeaf{"KeychainAuthenType", self.KeychainAuthenType}
    self.EntityData.Leafs["keychain-name"] = types.YLeaf{"KeychainName", self.KeychainName}
    return &(self.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies) GetEntityData() *types.CommonEntityData {
    messageDigestKeies.EntityData.YFilter = messageDigestKeies.YFilter
    messageDigestKeies.EntityData.YangName = "message-digest-keies"
    messageDigestKeies.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKeies.EntityData.ParentYangName = "authentication"
    messageDigestKeies.EntityData.SegmentPath = "message-digest-keies"
    messageDigestKeies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKeies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKeies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKeies.EntityData.Children = make(map[string]types.YChild)
    messageDigestKeies.EntityData.Children["message-digest-key"] = types.YChild{"MessageDigestKey", nil}
    for i := range messageDigestKeies.MessageDigestKey {
        messageDigestKeies.EntityData.Children[types.GetSegmentPath(&messageDigestKeies.MessageDigestKey[i])] = types.YChild{"MessageDigestKey", &messageDigestKeies.MessageDigestKey[i]}
    }
    messageDigestKeies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(messageDigestKeies.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: b'(!.+)|([^!].+)'. This
    // attribute is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Authentication_MessageDigestKeies_MessageDigestKey) GetEntityData() *types.CommonEntityData {
    messageDigestKey.EntityData.YFilter = messageDigestKey.YFilter
    messageDigestKey.EntityData.YangName = "message-digest-key"
    messageDigestKey.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKey.EntityData.ParentYangName = "message-digest-keies"
    messageDigestKey.EntityData.SegmentPath = "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
    messageDigestKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKey.EntityData.Children = make(map[string]types.YChild)
    messageDigestKey.EntityData.Leafs = make(map[string]types.YLeaf)
    messageDigestKey.EntityData.Leafs["key-id"] = types.YLeaf{"KeyId", messageDigestKey.KeyId}
    messageDigestKey.EntityData.Leafs["password"] = types.YLeaf{"Password", messageDigestKey.Password}
    return &(messageDigestKey.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security
// Container class for security related
// configuration parameters
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enabling turns on TTL security.
    Ttl Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl
}

func (security *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security) GetEntityData() *types.CommonEntityData {
    security.EntityData.YFilter = security.YFilter
    security.EntityData.YangName = "security"
    security.EntityData.BundleName = "cisco_ios_xr"
    security.EntityData.ParentYangName = "name-scope"
    security.EntityData.SegmentPath = "security"
    security.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    security.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    security.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    security.EntityData.Children = make(map[string]types.YChild)
    security.EntityData.Children["ttl"] = types.YChild{"Ttl", &security.Ttl}
    security.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(security.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl
// Enabling turns on TTL security
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable TTL security. The type is bool.
    Enable interface{}

    // Hop count. The type is interface{} with range: 1..254.
    HopCount interface{}
}

func (ttl *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Security_Ttl) GetEntityData() *types.CommonEntityData {
    ttl.EntityData.YFilter = ttl.YFilter
    ttl.EntityData.YangName = "ttl"
    ttl.EntityData.BundleName = "cisco_ios_xr"
    ttl.EntityData.ParentYangName = "security"
    ttl.EntityData.SegmentPath = "ttl"
    ttl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ttl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ttl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ttl.EntityData.Children = make(map[string]types.YChild)
    ttl.EntityData.Leafs = make(map[string]types.YLeaf)
    ttl.EntityData.Leafs["enable"] = types.YLeaf{"Enable", ttl.Enable}
    ttl.EntityData.Leafs["hop-count"] = types.YLeaf{"HopCount", ttl.HopCount}
    return &(ttl.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors
// Neighbor router configuration information
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Router configuration information for a particular neighbor. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor.
    Neighbor []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor
}

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "cisco_ios_xr"
    neighbors.EntityData.ParentYangName = "name-scope"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbors.EntityData.Children = make(map[string]types.YChild)
    neighbors.EntityData.Children["neighbor"] = types.YChild{"Neighbor", nil}
    for i := range neighbors.Neighbor {
        neighbors.EntityData.Children[types.GetSegmentPath(&neighbors.Neighbor[i])] = types.YChild{"Neighbor", &neighbors.Neighbor[i]}
    }
    neighbors.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(neighbors.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor
// Router configuration information for a
// particular neighbor
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Neighbor IP address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // OSPF priority of non-broadcast neighbor. The type is interface{} with
    // range: 0..255. The default value is 0.
    Priority interface{}

    // OSPF dead router poll-interval in seconds. The type is interface{} with
    // range: 0..65535. Units are second. The default value is 40.
    PollInterval interface{}

    // OSPF cost for point-to-multipoint neighbor. The type is interface{} with
    // range: 1..65535. The default value is 1.
    Cost interface{}

    // Database filter: Filter OSPF LSA during synchronization and flooding for
    // point-to-multipoint. The type is bool. The default value is false.
    DatabaseFilter interface{}
}

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_Neighbors_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "cisco_ios_xr"
    neighbor.EntityData.ParentYangName = "neighbors"
    neighbor.EntityData.SegmentPath = "neighbor" + "[neighbor-address='" + fmt.Sprintf("%v", neighbor.NeighborAddress) + "']"
    neighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbor.EntityData.Children = make(map[string]types.YChild)
    neighbor.EntityData.Leafs = make(map[string]types.YLeaf)
    neighbor.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", neighbor.NeighborAddress}
    neighbor.EntityData.Leafs["priority"] = types.YLeaf{"Priority", neighbor.Priority}
    neighbor.EntityData.Leafs["poll-interval"] = types.YLeaf{"PollInterval", neighbor.PollInterval}
    neighbor.EntityData.Leafs["cost"] = types.YLeaf{"Cost", neighbor.Cost}
    neighbor.EntityData.Leafs["database-filter"] = types.YLeaf{"DatabaseFilter", neighbor.DatabaseFilter}
    return &(neighbor.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_DeadIntervalMinimal) GetEntityData() *types.CommonEntityData {
    deadIntervalMinimal.EntityData.YFilter = deadIntervalMinimal.YFilter
    deadIntervalMinimal.EntityData.YangName = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.BundleName = "cisco_ios_xr"
    deadIntervalMinimal.EntityData.ParentYangName = "name-scope"
    deadIntervalMinimal.EntityData.SegmentPath = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    deadIntervalMinimal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    deadIntervalMinimal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    deadIntervalMinimal.EntityData.Children = make(map[string]types.YChild)
    deadIntervalMinimal.EntityData.Leafs = make(map[string]types.YLeaf)
    deadIntervalMinimal.EntityData.Leafs["interval"] = types.YLeaf{"Interval", deadIntervalMinimal.Interval}
    deadIntervalMinimal.EntityData.Leafs["multiplier"] = types.YLeaf{"Multiplier", deadIntervalMinimal.Multiplier}
    return &(deadIntervalMinimal.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute
// Fast-reroute configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // OspfFastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink

    // Fast-reroute per-prefix global configuration.
    PerPrefix Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute) GetEntityData() *types.CommonEntityData {
    fastReroute.EntityData.YFilter = fastReroute.YFilter
    fastReroute.EntityData.YangName = "fast-reroute"
    fastReroute.EntityData.BundleName = "cisco_ios_xr"
    fastReroute.EntityData.ParentYangName = "name-scope"
    fastReroute.EntityData.SegmentPath = "fast-reroute"
    fastReroute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fastReroute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fastReroute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fastReroute.EntityData.Children = make(map[string]types.YChild)
    fastReroute.EntityData.Children["per-link"] = types.YChild{"PerLink", &fastReroute.PerLink}
    fastReroute.EntityData.Children["per-prefix"] = types.YChild{"PerPrefix", &fastReroute.PerPrefix}
    fastReroute.EntityData.Leafs = make(map[string]types.YLeaf)
    fastReroute.EntityData.Leafs["fast-reroute-enable"] = types.YLeaf{"FastRerouteEnable", fastReroute.FastRerouteEnable}
    return &(fastReroute.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink) GetEntityData() *types.CommonEntityData {
    perLink.EntityData.YFilter = perLink.YFilter
    perLink.EntityData.YangName = "per-link"
    perLink.EntityData.BundleName = "cisco_ios_xr"
    perLink.EntityData.ParentYangName = "fast-reroute"
    perLink.EntityData.SegmentPath = "per-link"
    perLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perLink.EntityData.Children = make(map[string]types.YChild)
    perLink.EntityData.Children["candidate-interfaces"] = types.YChild{"CandidateInterfaces", &perLink.CandidateInterfaces}
    perLink.EntityData.Children["exclude-interfaces"] = types.YChild{"ExcludeInterfaces", &perLink.ExcludeInterfaces}
    perLink.EntityData.Leafs = make(map[string]types.YLeaf)
    perLink.EntityData.Leafs["fast-reroute-use-candidate-only"] = types.YLeaf{"FastRerouteUseCandidateOnly", perLink.FastRerouteUseCandidateOnly}
    return &(perLink.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces) GetEntityData() *types.CommonEntityData {
    candidateInterfaces.EntityData.YFilter = candidateInterfaces.YFilter
    candidateInterfaces.EntityData.YangName = "candidate-interfaces"
    candidateInterfaces.EntityData.BundleName = "cisco_ios_xr"
    candidateInterfaces.EntityData.ParentYangName = "per-link"
    candidateInterfaces.EntityData.SegmentPath = "candidate-interfaces"
    candidateInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterfaces.EntityData.Children = make(map[string]types.YChild)
    candidateInterfaces.EntityData.Children["candidate-interface"] = types.YChild{"CandidateInterface", nil}
    for i := range candidateInterfaces.CandidateInterface {
        candidateInterfaces.EntityData.Children[types.GetSegmentPath(&candidateInterfaces.CandidateInterface[i])] = types.YChild{"CandidateInterface", &candidateInterfaces.CandidateInterface[i]}
    }
    candidateInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(candidateInterfaces.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetEntityData() *types.CommonEntityData {
    candidateInterface.EntityData.YFilter = candidateInterface.YFilter
    candidateInterface.EntityData.YangName = "candidate-interface"
    candidateInterface.EntityData.BundleName = "cisco_ios_xr"
    candidateInterface.EntityData.ParentYangName = "candidate-interfaces"
    candidateInterface.EntityData.SegmentPath = "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
    candidateInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterface.EntityData.Children = make(map[string]types.YChild)
    candidateInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    candidateInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", candidateInterface.InterfaceName}
    return &(candidateInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces) GetEntityData() *types.CommonEntityData {
    excludeInterfaces.EntityData.YFilter = excludeInterfaces.YFilter
    excludeInterfaces.EntityData.YangName = "exclude-interfaces"
    excludeInterfaces.EntityData.BundleName = "cisco_ios_xr"
    excludeInterfaces.EntityData.ParentYangName = "per-link"
    excludeInterfaces.EntityData.SegmentPath = "exclude-interfaces"
    excludeInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterfaces.EntityData.Children = make(map[string]types.YChild)
    excludeInterfaces.EntityData.Children["exclude-interface"] = types.YChild{"ExcludeInterface", nil}
    for i := range excludeInterfaces.ExcludeInterface {
        excludeInterfaces.EntityData.Children[types.GetSegmentPath(&excludeInterfaces.ExcludeInterface[i])] = types.YChild{"ExcludeInterface", &excludeInterfaces.ExcludeInterface[i]}
    }
    excludeInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(excludeInterfaces.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetEntityData() *types.CommonEntityData {
    excludeInterface.EntityData.YFilter = excludeInterface.YFilter
    excludeInterface.EntityData.YangName = "exclude-interface"
    excludeInterface.EntityData.BundleName = "cisco_ios_xr"
    excludeInterface.EntityData.ParentYangName = "exclude-interfaces"
    excludeInterface.EntityData.SegmentPath = "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
    excludeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterface.EntityData.Children = make(map[string]types.YChild)
    excludeInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    excludeInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", excludeInterface.InterfaceName}
    return &(excludeInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix
// Fast-reroute per-prefix global configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology Independet LFA configuration. The type is bool.
    TopologyIndependentLfa interface{}

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Remote LFA configuration.
    RemoteLfa Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa

    // Fast-reroute tiebreakers configurations.
    Tiebreakers Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix) GetEntityData() *types.CommonEntityData {
    perPrefix.EntityData.YFilter = perPrefix.YFilter
    perPrefix.EntityData.YangName = "per-prefix"
    perPrefix.EntityData.BundleName = "cisco_ios_xr"
    perPrefix.EntityData.ParentYangName = "fast-reroute"
    perPrefix.EntityData.SegmentPath = "per-prefix"
    perPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perPrefix.EntityData.Children = make(map[string]types.YChild)
    perPrefix.EntityData.Children["remote-lfa"] = types.YChild{"RemoteLfa", &perPrefix.RemoteLfa}
    perPrefix.EntityData.Children["tiebreakers"] = types.YChild{"Tiebreakers", &perPrefix.Tiebreakers}
    perPrefix.EntityData.Children["candidate-interfaces"] = types.YChild{"CandidateInterfaces", &perPrefix.CandidateInterfaces}
    perPrefix.EntityData.Children["exclude-interfaces"] = types.YChild{"ExcludeInterfaces", &perPrefix.ExcludeInterfaces}
    perPrefix.EntityData.Leafs = make(map[string]types.YLeaf)
    perPrefix.EntityData.Leafs["topology-independent-lfa"] = types.YLeaf{"TopologyIndependentLfa", perPrefix.TopologyIndependentLfa}
    perPrefix.EntityData.Leafs["fast-reroute-use-candidate-only"] = types.YLeaf{"FastRerouteUseCandidateOnly", perPrefix.FastRerouteUseCandidateOnly}
    return &(perPrefix.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa
// Remote LFA configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable/Disable remote LFA computation. The type is OspfFrrRlfaTunnel.
    Tunnel interface{}

    // Maximum path cost to remote LFA. The type is interface{} with range:
    // 1..4294967295.
    MaximumCost interface{}
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_RemoteLfa) GetEntityData() *types.CommonEntityData {
    remoteLfa.EntityData.YFilter = remoteLfa.YFilter
    remoteLfa.EntityData.YangName = "remote-lfa"
    remoteLfa.EntityData.BundleName = "cisco_ios_xr"
    remoteLfa.EntityData.ParentYangName = "per-prefix"
    remoteLfa.EntityData.SegmentPath = "remote-lfa"
    remoteLfa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteLfa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteLfa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteLfa.EntityData.Children = make(map[string]types.YChild)
    remoteLfa.EntityData.Leafs = make(map[string]types.YLeaf)
    remoteLfa.EntityData.Leafs["tunnel"] = types.YLeaf{"Tunnel", remoteLfa.Tunnel}
    remoteLfa.EntityData.Leafs["maximum-cost"] = types.YLeaf{"MaximumCost", remoteLfa.MaximumCost}
    return &(remoteLfa.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers
// Fast-reroute tiebreakers configurations
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fast-reroute tiebreakers configuration. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker.
    Tiebreaker []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers) GetEntityData() *types.CommonEntityData {
    tiebreakers.EntityData.YFilter = tiebreakers.YFilter
    tiebreakers.EntityData.YangName = "tiebreakers"
    tiebreakers.EntityData.BundleName = "cisco_ios_xr"
    tiebreakers.EntityData.ParentYangName = "per-prefix"
    tiebreakers.EntityData.SegmentPath = "tiebreakers"
    tiebreakers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tiebreakers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tiebreakers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tiebreakers.EntityData.Children = make(map[string]types.YChild)
    tiebreakers.EntityData.Children["tiebreaker"] = types.YChild{"Tiebreaker", nil}
    for i := range tiebreakers.Tiebreaker {
        tiebreakers.EntityData.Children[types.GetSegmentPath(&tiebreakers.Tiebreaker[i])] = types.YChild{"Tiebreaker", &tiebreakers.Tiebreaker[i]}
    }
    tiebreakers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tiebreakers.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
// Fast-reroute tiebreakers configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Tiebreaker type. The type is
    // OspfFastRerouteTiebreakersIntf.
    TiebreakerType interface{}

    // Index value for a tiebreaker, 0 to disable. The type is interface{} with
    // range: 0..255. This attribute is mandatory.
    TiebreakerIndex interface{}
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetEntityData() *types.CommonEntityData {
    tiebreaker.EntityData.YFilter = tiebreaker.YFilter
    tiebreaker.EntityData.YangName = "tiebreaker"
    tiebreaker.EntityData.BundleName = "cisco_ios_xr"
    tiebreaker.EntityData.ParentYangName = "tiebreakers"
    tiebreaker.EntityData.SegmentPath = "tiebreaker" + "[tiebreaker-type='" + fmt.Sprintf("%v", tiebreaker.TiebreakerType) + "']"
    tiebreaker.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tiebreaker.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tiebreaker.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tiebreaker.EntityData.Children = make(map[string]types.YChild)
    tiebreaker.EntityData.Leafs = make(map[string]types.YLeaf)
    tiebreaker.EntityData.Leafs["tiebreaker-type"] = types.YLeaf{"TiebreakerType", tiebreaker.TiebreakerType}
    tiebreaker.EntityData.Leafs["tiebreaker-index"] = types.YLeaf{"TiebreakerIndex", tiebreaker.TiebreakerIndex}
    return &(tiebreaker.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces) GetEntityData() *types.CommonEntityData {
    candidateInterfaces.EntityData.YFilter = candidateInterfaces.YFilter
    candidateInterfaces.EntityData.YangName = "candidate-interfaces"
    candidateInterfaces.EntityData.BundleName = "cisco_ios_xr"
    candidateInterfaces.EntityData.ParentYangName = "per-prefix"
    candidateInterfaces.EntityData.SegmentPath = "candidate-interfaces"
    candidateInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterfaces.EntityData.Children = make(map[string]types.YChild)
    candidateInterfaces.EntityData.Children["candidate-interface"] = types.YChild{"CandidateInterface", nil}
    for i := range candidateInterfaces.CandidateInterface {
        candidateInterfaces.EntityData.Children[types.GetSegmentPath(&candidateInterfaces.CandidateInterface[i])] = types.YChild{"CandidateInterface", &candidateInterfaces.CandidateInterface[i]}
    }
    candidateInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(candidateInterfaces.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetEntityData() *types.CommonEntityData {
    candidateInterface.EntityData.YFilter = candidateInterface.YFilter
    candidateInterface.EntityData.YangName = "candidate-interface"
    candidateInterface.EntityData.BundleName = "cisco_ios_xr"
    candidateInterface.EntityData.ParentYangName = "candidate-interfaces"
    candidateInterface.EntityData.SegmentPath = "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
    candidateInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterface.EntityData.Children = make(map[string]types.YChild)
    candidateInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    candidateInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", candidateInterface.InterfaceName}
    return &(candidateInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces) GetEntityData() *types.CommonEntityData {
    excludeInterfaces.EntityData.YFilter = excludeInterfaces.YFilter
    excludeInterfaces.EntityData.YangName = "exclude-interfaces"
    excludeInterfaces.EntityData.BundleName = "cisco_ios_xr"
    excludeInterfaces.EntityData.ParentYangName = "per-prefix"
    excludeInterfaces.EntityData.SegmentPath = "exclude-interfaces"
    excludeInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterfaces.EntityData.Children = make(map[string]types.YChild)
    excludeInterfaces.EntityData.Children["exclude-interface"] = types.YChild{"ExcludeInterface", nil}
    for i := range excludeInterfaces.ExcludeInterface {
        excludeInterfaces.EntityData.Children[types.GetSegmentPath(&excludeInterfaces.ExcludeInterface[i])] = types.YChild{"ExcludeInterface", &excludeInterfaces.ExcludeInterface[i]}
    }
    excludeInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(excludeInterfaces.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetEntityData() *types.CommonEntityData {
    excludeInterface.EntityData.YFilter = excludeInterface.YFilter
    excludeInterface.EntityData.YangName = "exclude-interface"
    excludeInterface.EntityData.BundleName = "cisco_ios_xr"
    excludeInterface.EntityData.ParentYangName = "exclude-interfaces"
    excludeInterface.EntityData.SegmentPath = "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
    excludeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterface.EntityData.Children = make(map[string]types.YChild)
    excludeInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    excludeInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", excludeInterface.InterfaceName}
    return &(excludeInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback
// Interface fallback cost
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fallback cost of link. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Bandwidth threshold. The type is interface{} with range: 1..4294967.
    Threshold interface{}
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_NameScopes_NameScope_CostFallback) GetEntityData() *types.CommonEntityData {
    costFallback.EntityData.YFilter = costFallback.YFilter
    costFallback.EntityData.YangName = "cost-fallback"
    costFallback.EntityData.BundleName = "cisco_ios_xr"
    costFallback.EntityData.ParentYangName = "name-scope"
    costFallback.EntityData.SegmentPath = "cost-fallback"
    costFallback.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    costFallback.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    costFallback.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    costFallback.EntityData.Children = make(map[string]types.YChild)
    costFallback.EntityData.Leafs = make(map[string]types.YLeaf)
    costFallback.EntityData.Leafs["cost"] = types.YLeaf{"Cost", costFallback.Cost}
    costFallback.EntityData.Leafs["threshold"] = types.YLeaf{"Threshold", costFallback.Threshold}
    return &(costFallback.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes
// Multi Area Interface scope configurations
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Multi Area Interface configuration. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope.
    MultiAreaInterfaceScope []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope
}

func (multiAreaInterfaceScopes *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes) GetEntityData() *types.CommonEntityData {
    multiAreaInterfaceScopes.EntityData.YFilter = multiAreaInterfaceScopes.YFilter
    multiAreaInterfaceScopes.EntityData.YangName = "multi-area-interface-scopes"
    multiAreaInterfaceScopes.EntityData.BundleName = "cisco_ios_xr"
    multiAreaInterfaceScopes.EntityData.ParentYangName = "area-area-id"
    multiAreaInterfaceScopes.EntityData.SegmentPath = "multi-area-interface-scopes"
    multiAreaInterfaceScopes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multiAreaInterfaceScopes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multiAreaInterfaceScopes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multiAreaInterfaceScopes.EntityData.Children = make(map[string]types.YChild)
    multiAreaInterfaceScopes.EntityData.Children["multi-area-interface-scope"] = types.YChild{"MultiAreaInterfaceScope", nil}
    for i := range multiAreaInterfaceScopes.MultiAreaInterfaceScope {
        multiAreaInterfaceScopes.EntityData.Children[types.GetSegmentPath(&multiAreaInterfaceScopes.MultiAreaInterfaceScope[i])] = types.YChild{"MultiAreaInterfaceScope", &multiAreaInterfaceScopes.MultiAreaInterfaceScope[i]}
    }
    multiAreaInterfaceScopes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(multiAreaInterfaceScopes.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope
// Multi Area Interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of Multi Area Interface to configure. The
    // type is string with pattern: b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Enable/Disable ignoring of MTU in DBD packets. The type is bool. The
    // default value is false.
    MtuIgnore interface{}

    // Interval between HELLO packets in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    HelloInterval interface{}

    // When enabled, prevent sending HELLO packets over link. The type is bool.
    // The default value is false.
    Passive interface{}

    // Number of seconds to delay transmission of LSAs. The type is interface{}
    // with range: 1..65535. Units are second. The default value is 1.
    TransmitDelay interface{}

    // Customize size of OSPF packets upto MTU. The type is interface{} with
    // range: 576..10000.
    PacketSize interface{}

    // Filter OSPF LSA during synchronization and flooding. The type is bool. The
    // default value is false.
    DatabaseFilter interface{}

    // Time in seconds between retransmitting lost link state advertisements. The
    // type is interface{} with range: 1..65535. Units are second. The default
    // value is 5.
    RetransmitInterval interface{}

    // Enable routing on an IP network. The type is interface{}.
    Running interface{}

    // Filter networks intalled to RIB (disable as ACL name means filtering is
    // disabled).
    DistributeList Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList

    // Authentication.
    Authentication Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication

    // Neighbor router configuration information.
    Neighbors Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors

    // Interval after which a neighbor is declared dead.
    DeadIntervalMinimal Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal

    // Fast-reroute configuration.
    FastReroute Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute

    // Interface fallback cost.
    CostFallback Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback
}

func (multiAreaInterfaceScope *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope) GetEntityData() *types.CommonEntityData {
    multiAreaInterfaceScope.EntityData.YFilter = multiAreaInterfaceScope.YFilter
    multiAreaInterfaceScope.EntityData.YangName = "multi-area-interface-scope"
    multiAreaInterfaceScope.EntityData.BundleName = "cisco_ios_xr"
    multiAreaInterfaceScope.EntityData.ParentYangName = "multi-area-interface-scopes"
    multiAreaInterfaceScope.EntityData.SegmentPath = "multi-area-interface-scope" + "[interface-name='" + fmt.Sprintf("%v", multiAreaInterfaceScope.InterfaceName) + "']"
    multiAreaInterfaceScope.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    multiAreaInterfaceScope.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    multiAreaInterfaceScope.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    multiAreaInterfaceScope.EntityData.Children = make(map[string]types.YChild)
    multiAreaInterfaceScope.EntityData.Children["distribute-list"] = types.YChild{"DistributeList", &multiAreaInterfaceScope.DistributeList}
    multiAreaInterfaceScope.EntityData.Children["authentication"] = types.YChild{"Authentication", &multiAreaInterfaceScope.Authentication}
    multiAreaInterfaceScope.EntityData.Children["neighbors"] = types.YChild{"Neighbors", &multiAreaInterfaceScope.Neighbors}
    multiAreaInterfaceScope.EntityData.Children["dead-interval-minimal"] = types.YChild{"DeadIntervalMinimal", &multiAreaInterfaceScope.DeadIntervalMinimal}
    multiAreaInterfaceScope.EntityData.Children["fast-reroute"] = types.YChild{"FastReroute", &multiAreaInterfaceScope.FastReroute}
    multiAreaInterfaceScope.EntityData.Children["cost-fallback"] = types.YChild{"CostFallback", &multiAreaInterfaceScope.CostFallback}
    multiAreaInterfaceScope.EntityData.Leafs = make(map[string]types.YLeaf)
    multiAreaInterfaceScope.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", multiAreaInterfaceScope.InterfaceName}
    multiAreaInterfaceScope.EntityData.Leafs["cost"] = types.YLeaf{"Cost", multiAreaInterfaceScope.Cost}
    multiAreaInterfaceScope.EntityData.Leafs["mtu-ignore"] = types.YLeaf{"MtuIgnore", multiAreaInterfaceScope.MtuIgnore}
    multiAreaInterfaceScope.EntityData.Leafs["hello-interval"] = types.YLeaf{"HelloInterval", multiAreaInterfaceScope.HelloInterval}
    multiAreaInterfaceScope.EntityData.Leafs["passive"] = types.YLeaf{"Passive", multiAreaInterfaceScope.Passive}
    multiAreaInterfaceScope.EntityData.Leafs["transmit-delay"] = types.YLeaf{"TransmitDelay", multiAreaInterfaceScope.TransmitDelay}
    multiAreaInterfaceScope.EntityData.Leafs["packet-size"] = types.YLeaf{"PacketSize", multiAreaInterfaceScope.PacketSize}
    multiAreaInterfaceScope.EntityData.Leafs["database-filter"] = types.YLeaf{"DatabaseFilter", multiAreaInterfaceScope.DatabaseFilter}
    multiAreaInterfaceScope.EntityData.Leafs["retransmit-interval"] = types.YLeaf{"RetransmitInterval", multiAreaInterfaceScope.RetransmitInterval}
    multiAreaInterfaceScope.EntityData.Leafs["running"] = types.YLeaf{"Running", multiAreaInterfaceScope.Running}
    return &(multiAreaInterfaceScope.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList
// Filter networks intalled to RIB (disable as ACL
// name means filtering is disabled)
// This type is a presence type.
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Access Control List name. The type is string.
    AccessListName interface{}

    // Route Policy name. The type is string.
    RoutePolicyName interface{}
}

func (distributeList *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DistributeList) GetEntityData() *types.CommonEntityData {
    distributeList.EntityData.YFilter = distributeList.YFilter
    distributeList.EntityData.YangName = "distribute-list"
    distributeList.EntityData.BundleName = "cisco_ios_xr"
    distributeList.EntityData.ParentYangName = "multi-area-interface-scope"
    distributeList.EntityData.SegmentPath = "distribute-list"
    distributeList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    distributeList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    distributeList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    distributeList.EntityData.Children = make(map[string]types.YChild)
    distributeList.EntityData.Leafs = make(map[string]types.YLeaf)
    distributeList.EntityData.Leafs["access-list-name"] = types.YLeaf{"AccessListName", distributeList.AccessListName}
    distributeList.EntityData.Leafs["route-policy-name"] = types.YLeaf{"RoutePolicyName", distributeList.RoutePolicyName}
    return &(distributeList.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication
// Authentication
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication key configuration. The type is string with pattern:
    // b'(!.+)|([^!].+)'.
    Key interface{}

    // Authentication type.
    Type_ Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type

    // Message digest authentication password (key) configurations, first 16 chars
    // used.
    MessageDigestKeies Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies
}

func (authentication *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication) GetEntityData() *types.CommonEntityData {
    authentication.EntityData.YFilter = authentication.YFilter
    authentication.EntityData.YangName = "authentication"
    authentication.EntityData.BundleName = "cisco_ios_xr"
    authentication.EntityData.ParentYangName = "multi-area-interface-scope"
    authentication.EntityData.SegmentPath = "authentication"
    authentication.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authentication.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authentication.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authentication.EntityData.Children = make(map[string]types.YChild)
    authentication.EntityData.Children["type"] = types.YChild{"Type_", &authentication.Type_}
    authentication.EntityData.Children["message-digest-keies"] = types.YChild{"MessageDigestKeies", &authentication.MessageDigestKeies}
    authentication.EntityData.Leafs = make(map[string]types.YLeaf)
    authentication.EntityData.Leafs["key"] = types.YLeaf{"Key", authentication.Key}
    return &(authentication.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type
// Authentication type
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Authentication type code . The type is OspfAuthentication.
    AuthenType interface{}

    // Keychain authentication type. The type is OspfKeychainAuth.
    KeychainAuthenType interface{}

    // Keychain name. The type is string.
    KeychainName interface{}
}

func (self *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_Type) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "type"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "authentication"
    self.EntityData.SegmentPath = "type"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    self.EntityData.Leafs["authen-type"] = types.YLeaf{"AuthenType", self.AuthenType}
    self.EntityData.Leafs["keychain-authen-type"] = types.YLeaf{"KeychainAuthenType", self.KeychainAuthenType}
    self.EntityData.Leafs["keychain-name"] = types.YLeaf{"KeychainName", self.KeychainName}
    return &(self.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies
// Message digest authentication password (key)
// configurations, first 16 chars used
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Message digest authentication password (key) configuration. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey.
    MessageDigestKey []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey
}

func (messageDigestKeies *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies) GetEntityData() *types.CommonEntityData {
    messageDigestKeies.EntityData.YFilter = messageDigestKeies.YFilter
    messageDigestKeies.EntityData.YangName = "message-digest-keies"
    messageDigestKeies.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKeies.EntityData.ParentYangName = "authentication"
    messageDigestKeies.EntityData.SegmentPath = "message-digest-keies"
    messageDigestKeies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKeies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKeies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKeies.EntityData.Children = make(map[string]types.YChild)
    messageDigestKeies.EntityData.Children["message-digest-key"] = types.YChild{"MessageDigestKey", nil}
    for i := range messageDigestKeies.MessageDigestKey {
        messageDigestKeies.EntityData.Children[types.GetSegmentPath(&messageDigestKeies.MessageDigestKey[i])] = types.YChild{"MessageDigestKey", &messageDigestKeies.MessageDigestKey[i]}
    }
    messageDigestKeies.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(messageDigestKeies.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey
// Message digest authentication password (key)
// configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Key ID. The type is interface{} with range:
    // 1..255.
    KeyId interface{}

    // Password. The type is string with pattern: b'(!.+)|([^!].+)'. This
    // attribute is mandatory.
    Password interface{}
}

func (messageDigestKey *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Authentication_MessageDigestKeies_MessageDigestKey) GetEntityData() *types.CommonEntityData {
    messageDigestKey.EntityData.YFilter = messageDigestKey.YFilter
    messageDigestKey.EntityData.YangName = "message-digest-key"
    messageDigestKey.EntityData.BundleName = "cisco_ios_xr"
    messageDigestKey.EntityData.ParentYangName = "message-digest-keies"
    messageDigestKey.EntityData.SegmentPath = "message-digest-key" + "[key-id='" + fmt.Sprintf("%v", messageDigestKey.KeyId) + "']"
    messageDigestKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageDigestKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageDigestKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageDigestKey.EntityData.Children = make(map[string]types.YChild)
    messageDigestKey.EntityData.Leafs = make(map[string]types.YLeaf)
    messageDigestKey.EntityData.Leafs["key-id"] = types.YLeaf{"KeyId", messageDigestKey.KeyId}
    messageDigestKey.EntityData.Leafs["password"] = types.YLeaf{"Password", messageDigestKey.Password}
    return &(messageDigestKey.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors
// Neighbor router configuration information
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Router configuration information for a particular neighbor. The type is
    // slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor.
    Neighbor []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor
}

func (neighbors *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "cisco_ios_xr"
    neighbors.EntityData.ParentYangName = "multi-area-interface-scope"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbors.EntityData.Children = make(map[string]types.YChild)
    neighbors.EntityData.Children["neighbor"] = types.YChild{"Neighbor", nil}
    for i := range neighbors.Neighbor {
        neighbors.EntityData.Children[types.GetSegmentPath(&neighbors.Neighbor[i])] = types.YChild{"Neighbor", &neighbors.Neighbor[i]}
    }
    neighbors.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(neighbors.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor
// Router configuration information for a
// particular neighbor
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Neighbor IP address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // OSPF priority of non-broadcast neighbor. The type is interface{} with
    // range: 0..255. The default value is 0.
    Priority interface{}

    // OSPF dead router poll-interval in seconds. The type is interface{} with
    // range: 0..65535. Units are second. The default value is 40.
    PollInterval interface{}

    // OSPF cost for point-to-multipoint neighbor. The type is interface{} with
    // range: 1..65535. The default value is 1.
    Cost interface{}

    // Database filter: Filter OSPF LSA during synchronization and flooding for
    // point-to-multipoint. The type is bool. The default value is false.
    DatabaseFilter interface{}
}

func (neighbor *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_Neighbors_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "cisco_ios_xr"
    neighbor.EntityData.ParentYangName = "neighbors"
    neighbor.EntityData.SegmentPath = "neighbor" + "[neighbor-address='" + fmt.Sprintf("%v", neighbor.NeighborAddress) + "']"
    neighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbor.EntityData.Children = make(map[string]types.YChild)
    neighbor.EntityData.Leafs = make(map[string]types.YLeaf)
    neighbor.EntityData.Leafs["neighbor-address"] = types.YLeaf{"NeighborAddress", neighbor.NeighborAddress}
    neighbor.EntityData.Leafs["priority"] = types.YLeaf{"Priority", neighbor.Priority}
    neighbor.EntityData.Leafs["poll-interval"] = types.YLeaf{"PollInterval", neighbor.PollInterval}
    neighbor.EntityData.Leafs["cost"] = types.YLeaf{"Cost", neighbor.Cost}
    neighbor.EntityData.Leafs["database-filter"] = types.YLeaf{"DatabaseFilter", neighbor.DatabaseFilter}
    return &(neighbor.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal
// Interval after which a neighbor is declared dead
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interval size in seconds after which a neighbor is declared dead. The type
    // is interface{} with range: 1..65535. Units are second.
    Interval interface{}

    // Number of Hellos in one second. The type is interface{} with range: 3..20.
    Multiplier interface{}
}

func (deadIntervalMinimal *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_DeadIntervalMinimal) GetEntityData() *types.CommonEntityData {
    deadIntervalMinimal.EntityData.YFilter = deadIntervalMinimal.YFilter
    deadIntervalMinimal.EntityData.YangName = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.BundleName = "cisco_ios_xr"
    deadIntervalMinimal.EntityData.ParentYangName = "multi-area-interface-scope"
    deadIntervalMinimal.EntityData.SegmentPath = "dead-interval-minimal"
    deadIntervalMinimal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    deadIntervalMinimal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    deadIntervalMinimal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    deadIntervalMinimal.EntityData.Children = make(map[string]types.YChild)
    deadIntervalMinimal.EntityData.Leafs = make(map[string]types.YLeaf)
    deadIntervalMinimal.EntityData.Leafs["interval"] = types.YLeaf{"Interval", deadIntervalMinimal.Interval}
    deadIntervalMinimal.EntityData.Leafs["multiplier"] = types.YLeaf{"Multiplier", deadIntervalMinimal.Multiplier}
    return &(deadIntervalMinimal.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute
// Fast-reroute configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // OspfFastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink

    // Fast-reroute per-prefix global configuration.
    PerPrefix Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix
}

func (fastReroute *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute) GetEntityData() *types.CommonEntityData {
    fastReroute.EntityData.YFilter = fastReroute.YFilter
    fastReroute.EntityData.YangName = "fast-reroute"
    fastReroute.EntityData.BundleName = "cisco_ios_xr"
    fastReroute.EntityData.ParentYangName = "multi-area-interface-scope"
    fastReroute.EntityData.SegmentPath = "fast-reroute"
    fastReroute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fastReroute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fastReroute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fastReroute.EntityData.Children = make(map[string]types.YChild)
    fastReroute.EntityData.Children["per-link"] = types.YChild{"PerLink", &fastReroute.PerLink}
    fastReroute.EntityData.Children["per-prefix"] = types.YChild{"PerPrefix", &fastReroute.PerPrefix}
    fastReroute.EntityData.Leafs = make(map[string]types.YLeaf)
    fastReroute.EntityData.Leafs["fast-reroute-enable"] = types.YLeaf{"FastRerouteEnable", fastReroute.FastRerouteEnable}
    return &(fastReroute.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink) GetEntityData() *types.CommonEntityData {
    perLink.EntityData.YFilter = perLink.YFilter
    perLink.EntityData.YangName = "per-link"
    perLink.EntityData.BundleName = "cisco_ios_xr"
    perLink.EntityData.ParentYangName = "fast-reroute"
    perLink.EntityData.SegmentPath = "per-link"
    perLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perLink.EntityData.Children = make(map[string]types.YChild)
    perLink.EntityData.Children["candidate-interfaces"] = types.YChild{"CandidateInterfaces", &perLink.CandidateInterfaces}
    perLink.EntityData.Children["exclude-interfaces"] = types.YChild{"ExcludeInterfaces", &perLink.ExcludeInterfaces}
    perLink.EntityData.Leafs = make(map[string]types.YLeaf)
    perLink.EntityData.Leafs["fast-reroute-use-candidate-only"] = types.YLeaf{"FastRerouteUseCandidateOnly", perLink.FastRerouteUseCandidateOnly}
    return &(perLink.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces) GetEntityData() *types.CommonEntityData {
    candidateInterfaces.EntityData.YFilter = candidateInterfaces.YFilter
    candidateInterfaces.EntityData.YangName = "candidate-interfaces"
    candidateInterfaces.EntityData.BundleName = "cisco_ios_xr"
    candidateInterfaces.EntityData.ParentYangName = "per-link"
    candidateInterfaces.EntityData.SegmentPath = "candidate-interfaces"
    candidateInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterfaces.EntityData.Children = make(map[string]types.YChild)
    candidateInterfaces.EntityData.Children["candidate-interface"] = types.YChild{"CandidateInterface", nil}
    for i := range candidateInterfaces.CandidateInterface {
        candidateInterfaces.EntityData.Children[types.GetSegmentPath(&candidateInterfaces.CandidateInterface[i])] = types.YChild{"CandidateInterface", &candidateInterfaces.CandidateInterface[i]}
    }
    candidateInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(candidateInterfaces.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetEntityData() *types.CommonEntityData {
    candidateInterface.EntityData.YFilter = candidateInterface.YFilter
    candidateInterface.EntityData.YangName = "candidate-interface"
    candidateInterface.EntityData.BundleName = "cisco_ios_xr"
    candidateInterface.EntityData.ParentYangName = "candidate-interfaces"
    candidateInterface.EntityData.SegmentPath = "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
    candidateInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterface.EntityData.Children = make(map[string]types.YChild)
    candidateInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    candidateInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", candidateInterface.InterfaceName}
    return &(candidateInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces) GetEntityData() *types.CommonEntityData {
    excludeInterfaces.EntityData.YFilter = excludeInterfaces.YFilter
    excludeInterfaces.EntityData.YangName = "exclude-interfaces"
    excludeInterfaces.EntityData.BundleName = "cisco_ios_xr"
    excludeInterfaces.EntityData.ParentYangName = "per-link"
    excludeInterfaces.EntityData.SegmentPath = "exclude-interfaces"
    excludeInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterfaces.EntityData.Children = make(map[string]types.YChild)
    excludeInterfaces.EntityData.Children["exclude-interface"] = types.YChild{"ExcludeInterface", nil}
    for i := range excludeInterfaces.ExcludeInterface {
        excludeInterfaces.EntityData.Children[types.GetSegmentPath(&excludeInterfaces.ExcludeInterface[i])] = types.YChild{"ExcludeInterface", &excludeInterfaces.ExcludeInterface[i]}
    }
    excludeInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(excludeInterfaces.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetEntityData() *types.CommonEntityData {
    excludeInterface.EntityData.YFilter = excludeInterface.YFilter
    excludeInterface.EntityData.YangName = "exclude-interface"
    excludeInterface.EntityData.BundleName = "cisco_ios_xr"
    excludeInterface.EntityData.ParentYangName = "exclude-interfaces"
    excludeInterface.EntityData.SegmentPath = "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
    excludeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterface.EntityData.Children = make(map[string]types.YChild)
    excludeInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    excludeInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", excludeInterface.InterfaceName}
    return &(excludeInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix
// Fast-reroute per-prefix global configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology Independet LFA configuration. The type is bool.
    TopologyIndependentLfa interface{}

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Remote LFA configuration.
    RemoteLfa Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa

    // Fast-reroute tiebreakers configurations.
    Tiebreakers Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix or UCMP exclude interface configuration.
    ExcludeInterfaces Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix) GetEntityData() *types.CommonEntityData {
    perPrefix.EntityData.YFilter = perPrefix.YFilter
    perPrefix.EntityData.YangName = "per-prefix"
    perPrefix.EntityData.BundleName = "cisco_ios_xr"
    perPrefix.EntityData.ParentYangName = "fast-reroute"
    perPrefix.EntityData.SegmentPath = "per-prefix"
    perPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    perPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    perPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    perPrefix.EntityData.Children = make(map[string]types.YChild)
    perPrefix.EntityData.Children["remote-lfa"] = types.YChild{"RemoteLfa", &perPrefix.RemoteLfa}
    perPrefix.EntityData.Children["tiebreakers"] = types.YChild{"Tiebreakers", &perPrefix.Tiebreakers}
    perPrefix.EntityData.Children["candidate-interfaces"] = types.YChild{"CandidateInterfaces", &perPrefix.CandidateInterfaces}
    perPrefix.EntityData.Children["exclude-interfaces"] = types.YChild{"ExcludeInterfaces", &perPrefix.ExcludeInterfaces}
    perPrefix.EntityData.Leafs = make(map[string]types.YLeaf)
    perPrefix.EntityData.Leafs["topology-independent-lfa"] = types.YLeaf{"TopologyIndependentLfa", perPrefix.TopologyIndependentLfa}
    perPrefix.EntityData.Leafs["fast-reroute-use-candidate-only"] = types.YLeaf{"FastRerouteUseCandidateOnly", perPrefix.FastRerouteUseCandidateOnly}
    return &(perPrefix.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa
// Remote LFA configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable/Disable remote LFA computation. The type is OspfFrrRlfaTunnel.
    Tunnel interface{}

    // Maximum path cost to remote LFA. The type is interface{} with range:
    // 1..4294967295.
    MaximumCost interface{}
}

func (remoteLfa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_RemoteLfa) GetEntityData() *types.CommonEntityData {
    remoteLfa.EntityData.YFilter = remoteLfa.YFilter
    remoteLfa.EntityData.YangName = "remote-lfa"
    remoteLfa.EntityData.BundleName = "cisco_ios_xr"
    remoteLfa.EntityData.ParentYangName = "per-prefix"
    remoteLfa.EntityData.SegmentPath = "remote-lfa"
    remoteLfa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteLfa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteLfa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteLfa.EntityData.Children = make(map[string]types.YChild)
    remoteLfa.EntityData.Leafs = make(map[string]types.YLeaf)
    remoteLfa.EntityData.Leafs["tunnel"] = types.YLeaf{"Tunnel", remoteLfa.Tunnel}
    remoteLfa.EntityData.Leafs["maximum-cost"] = types.YLeaf{"MaximumCost", remoteLfa.MaximumCost}
    return &(remoteLfa.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers
// Fast-reroute tiebreakers configurations
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fast-reroute tiebreakers configuration. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker.
    Tiebreaker []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
}

func (tiebreakers *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers) GetEntityData() *types.CommonEntityData {
    tiebreakers.EntityData.YFilter = tiebreakers.YFilter
    tiebreakers.EntityData.YangName = "tiebreakers"
    tiebreakers.EntityData.BundleName = "cisco_ios_xr"
    tiebreakers.EntityData.ParentYangName = "per-prefix"
    tiebreakers.EntityData.SegmentPath = "tiebreakers"
    tiebreakers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tiebreakers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tiebreakers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tiebreakers.EntityData.Children = make(map[string]types.YChild)
    tiebreakers.EntityData.Children["tiebreaker"] = types.YChild{"Tiebreaker", nil}
    for i := range tiebreakers.Tiebreaker {
        tiebreakers.EntityData.Children[types.GetSegmentPath(&tiebreakers.Tiebreaker[i])] = types.YChild{"Tiebreaker", &tiebreakers.Tiebreaker[i]}
    }
    tiebreakers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tiebreakers.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
// Fast-reroute tiebreakers configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Tiebreaker type. The type is
    // OspfFastRerouteTiebreakersIntf.
    TiebreakerType interface{}

    // Index value for a tiebreaker, 0 to disable. The type is interface{} with
    // range: 0..255. This attribute is mandatory.
    TiebreakerIndex interface{}
}

func (tiebreaker *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetEntityData() *types.CommonEntityData {
    tiebreaker.EntityData.YFilter = tiebreaker.YFilter
    tiebreaker.EntityData.YangName = "tiebreaker"
    tiebreaker.EntityData.BundleName = "cisco_ios_xr"
    tiebreaker.EntityData.ParentYangName = "tiebreakers"
    tiebreaker.EntityData.SegmentPath = "tiebreaker" + "[tiebreaker-type='" + fmt.Sprintf("%v", tiebreaker.TiebreakerType) + "']"
    tiebreaker.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tiebreaker.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tiebreaker.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tiebreaker.EntityData.Children = make(map[string]types.YChild)
    tiebreaker.EntityData.Leafs = make(map[string]types.YLeaf)
    tiebreaker.EntityData.Leafs["tiebreaker-type"] = types.YLeaf{"TiebreakerType", tiebreaker.TiebreakerType}
    tiebreaker.EntityData.Leafs["tiebreaker-index"] = types.YLeaf{"TiebreakerIndex", tiebreaker.TiebreakerIndex}
    return &(tiebreaker.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces) GetEntityData() *types.CommonEntityData {
    candidateInterfaces.EntityData.YFilter = candidateInterfaces.YFilter
    candidateInterfaces.EntityData.YangName = "candidate-interfaces"
    candidateInterfaces.EntityData.BundleName = "cisco_ios_xr"
    candidateInterfaces.EntityData.ParentYangName = "per-prefix"
    candidateInterfaces.EntityData.SegmentPath = "candidate-interfaces"
    candidateInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterfaces.EntityData.Children = make(map[string]types.YChild)
    candidateInterfaces.EntityData.Children["candidate-interface"] = types.YChild{"CandidateInterface", nil}
    for i := range candidateInterfaces.CandidateInterface {
        candidateInterfaces.EntityData.Children[types.GetSegmentPath(&candidateInterfaces.CandidateInterface[i])] = types.YChild{"CandidateInterface", &candidateInterfaces.CandidateInterface[i]}
    }
    candidateInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(candidateInterfaces.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (candidateInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetEntityData() *types.CommonEntityData {
    candidateInterface.EntityData.YFilter = candidateInterface.YFilter
    candidateInterface.EntityData.YangName = "candidate-interface"
    candidateInterface.EntityData.BundleName = "cisco_ios_xr"
    candidateInterface.EntityData.ParentYangName = "candidate-interfaces"
    candidateInterface.EntityData.SegmentPath = "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
    candidateInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    candidateInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    candidateInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    candidateInterface.EntityData.Children = make(map[string]types.YChild)
    candidateInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    candidateInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", candidateInterface.InterfaceName}
    return &(candidateInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix or UCMP exclude
// interface configuration
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup or UCMP. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces) GetEntityData() *types.CommonEntityData {
    excludeInterfaces.EntityData.YFilter = excludeInterfaces.YFilter
    excludeInterfaces.EntityData.YangName = "exclude-interfaces"
    excludeInterfaces.EntityData.BundleName = "cisco_ios_xr"
    excludeInterfaces.EntityData.ParentYangName = "per-prefix"
    excludeInterfaces.EntityData.SegmentPath = "exclude-interfaces"
    excludeInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterfaces.EntityData.Children = make(map[string]types.YChild)
    excludeInterfaces.EntityData.Children["exclude-interface"] = types.YChild{"ExcludeInterface", nil}
    for i := range excludeInterfaces.ExcludeInterface {
        excludeInterfaces.EntityData.Children[types.GetSegmentPath(&excludeInterfaces.ExcludeInterface[i])] = types.YChild{"ExcludeInterface", &excludeInterfaces.ExcludeInterface[i]}
    }
    excludeInterfaces.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(excludeInterfaces.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup or
// UCMP
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}
}

func (excludeInterface *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetEntityData() *types.CommonEntityData {
    excludeInterface.EntityData.YFilter = excludeInterface.YFilter
    excludeInterface.EntityData.YangName = "exclude-interface"
    excludeInterface.EntityData.BundleName = "cisco_ios_xr"
    excludeInterface.EntityData.ParentYangName = "exclude-interfaces"
    excludeInterface.EntityData.SegmentPath = "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
    excludeInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    excludeInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    excludeInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    excludeInterface.EntityData.Children = make(map[string]types.YChild)
    excludeInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    excludeInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", excludeInterface.InterfaceName}
    return &(excludeInterface.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback
// Interface fallback cost
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fallback cost of link. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Bandwidth threshold. The type is interface{} with range: 1..4294967.
    Threshold interface{}
}

func (costFallback *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_MultiAreaInterfaceScopes_MultiAreaInterfaceScope_CostFallback) GetEntityData() *types.CommonEntityData {
    costFallback.EntityData.YFilter = costFallback.YFilter
    costFallback.EntityData.YangName = "cost-fallback"
    costFallback.EntityData.BundleName = "cisco_ios_xr"
    costFallback.EntityData.ParentYangName = "multi-area-interface-scope"
    costFallback.EntityData.SegmentPath = "cost-fallback"
    costFallback.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    costFallback.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    costFallback.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    costFallback.EntityData.Children = make(map[string]types.YChild)
    costFallback.EntityData.Leafs = make(map[string]types.YLeaf)
    costFallback.EntityData.Leafs["cost"] = types.YLeaf{"Cost", costFallback.Cost}
    costFallback.EntityData.Leafs["threshold"] = types.YLeaf{"Threshold", costFallback.Threshold}
    return &(costFallback.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges
// Summarize routes matching address/mask (border
// routers only)
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Ordering index. The type is slice of
    // Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange.
    AreaRange []Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange
}

func (areaRanges *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges) GetEntityData() *types.CommonEntityData {
    areaRanges.EntityData.YFilter = areaRanges.YFilter
    areaRanges.EntityData.YangName = "area-ranges"
    areaRanges.EntityData.BundleName = "cisco_ios_xr"
    areaRanges.EntityData.ParentYangName = "area-area-id"
    areaRanges.EntityData.SegmentPath = "area-ranges"
    areaRanges.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaRanges.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaRanges.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaRanges.EntityData.Children = make(map[string]types.YChild)
    areaRanges.EntityData.Children["area-range"] = types.YChild{"AreaRange", nil}
    for i := range areaRanges.AreaRange {
        areaRanges.EntityData.Children[types.GetSegmentPath(&areaRanges.AreaRange[i])] = types.YChild{"AreaRange", &areaRanges.AreaRange[i]}
    }
    areaRanges.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(areaRanges.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange
// Ordering index
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. IP address to match. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Address interface{}

    // This attribute is a key. IP netmask for address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Netmask interface{}

    // Do not advertise this range. The type is bool.
    NotAdvertise interface{}
}

func (areaRange *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaRanges_AreaRange) GetEntityData() *types.CommonEntityData {
    areaRange.EntityData.YFilter = areaRange.YFilter
    areaRange.EntityData.YangName = "area-range"
    areaRange.EntityData.BundleName = "cisco_ios_xr"
    areaRange.EntityData.ParentYangName = "area-ranges"
    areaRange.EntityData.SegmentPath = "area-range" + "[address='" + fmt.Sprintf("%v", areaRange.Address) + "']" + "[netmask='" + fmt.Sprintf("%v", areaRange.Netmask) + "']"
    areaRange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    areaRange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    areaRange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    areaRange.EntityData.Children = make(map[string]types.YChild)
    areaRange.EntityData.Leafs = make(map[string]types.YLeaf)
    areaRange.EntityData.Leafs["address"] = types.YLeaf{"Address", areaRange.Address}
    areaRange.EntityData.Leafs["netmask"] = types.YLeaf{"Netmask", areaRange.Netmask}
    areaRange.EntityData.Leafs["not-advertise"] = types.YLeaf{"NotAdvertise", areaRange.NotAdvertise}
    return &(areaRange.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa
// Specify area as a NSSA area
type Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // No redistribution into this NSSA area. The type is bool. The default value
    // is false.
    NoRedistribution interface{}

    // Originate Type 7 default into NSSA area. The type is bool. The default
    // value is false.
    DefaultInfoOriginate interface{}

    // Do not send summary LSA into NSSA. The type is bool. The default value is
    // false.
    NoSummary interface{}

    // OSPF default metric. The type is interface{} with range: 1..16777214.
    NssaDefMetric interface{}

    // OSPF External metric type. The type is OspfLinkStateMetric. The default
    // value is type2.
    MetricType interface{}
}

func (nssa *Ospf_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa) GetEntityData() *types.CommonEntityData {
    nssa.EntityData.YFilter = nssa.YFilter
    nssa.EntityData.YangName = "nssa"
    nssa.EntityData.BundleName = "cisco_ios_xr"
    nssa.EntityData.ParentYangName = "area-area-id"
    nssa.EntityData.SegmentPath = "nssa"
    nssa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nssa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nssa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nssa.EntityData.Children = make(map[string]types.YChild)
    nssa.EntityData.Leafs = make(map[string]types.YLeaf)
    nssa.EntityData.Leafs["no-redistribution"] = types.YLeaf{"NoRedistribution", nssa.NoRedistribution}
    nssa.EntityData.Leafs["default-info-originate"] = types.YLeaf{"DefaultInfoOriginate", nssa.DefaultInfoOriginate}
    nssa.EntityData.Leafs["no-summary"] = types.YLeaf{"NoSummary", nssa.NoSummary}
    nssa.EntityData.Leafs["nssa-def-metric"] = types.YLeaf{"NssaDefMetric", nssa.NssaDefMetric}
    nssa.EntityData.Leafs["metric-type"] = types.YLeaf{"MetricType", nssa.MetricType}
    return &(nssa.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Timers
// Adjust routing timers
type Ospf_Processes_Process_DefaultVrf_Timers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Seconds between group of LSAs being refreshed or maxaged. The type is
    // interface{} with range: 5..100. Units are second.
    LsaPacingFlood interface{}

    // Number of ms between end of SPF and start of IPFRR computation. The type is
    // interface{} with range: 50..600000. Units are millisecond. The default
    // value is 500.
    FastRerouteTimer interface{}

    // How often self-originated LSAs should be refreshed. The type is interface{}
    // with range: 1800..2700. Units are second. The default value is 1800.
    LsaRefresh interface{}

    // LSA group pacing timer (Seconds between group of LSAs being refreshed or
    // maxaged). The type is interface{} with range: 10..1800. Units are second.
    // The default value is 240.
    LsaGroupPacing interface{}

    // MinLSArrival timer (minimum interval in milliseconds between accepting the
    // same LSA). The type is interface{} with range: 0..600000. Units are
    // millisecond. The default value is 100.
    LsaMinArrival interface{}

    // OSPF SPF timers (in milliseconds).
    SpfTimer Ospf_Processes_Process_DefaultVrf_Timers_SpfTimer

    // OSPF LSA timers (in milliseconds).
    LsaGenerationTimer Ospf_Processes_Process_DefaultVrf_Timers_LsaGenerationTimer
}

func (timers *Ospf_Processes_Process_DefaultVrf_Timers) GetEntityData() *types.CommonEntityData {
    timers.EntityData.YFilter = timers.YFilter
    timers.EntityData.YangName = "timers"
    timers.EntityData.BundleName = "cisco_ios_xr"
    timers.EntityData.ParentYangName = "default-vrf"
    timers.EntityData.SegmentPath = "timers"
    timers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    timers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    timers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    timers.EntityData.Children = make(map[string]types.YChild)
    timers.EntityData.Children["spf-timer"] = types.YChild{"SpfTimer", &timers.SpfTimer}
    timers.EntityData.Children["lsa-generation-timer"] = types.YChild{"LsaGenerationTimer", &timers.LsaGenerationTimer}
    timers.EntityData.Leafs = make(map[string]types.YLeaf)
    timers.EntityData.Leafs["lsa-pacing-flood"] = types.YLeaf{"LsaPacingFlood", timers.LsaPacingFlood}
    timers.EntityData.Leafs["fast-reroute-timer"] = types.YLeaf{"FastRerouteTimer", timers.FastRerouteTimer}
    timers.EntityData.Leafs["lsa-refresh"] = types.YLeaf{"LsaRefresh", timers.LsaRefresh}
    timers.EntityData.Leafs["lsa-group-pacing"] = types.YLeaf{"LsaGroupPacing", timers.LsaGroupPacing}
    timers.EntityData.Leafs["lsa-min-arrival"] = types.YLeaf{"LsaMinArrival", timers.LsaMinArrival}
    return &(timers.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Timers_SpfTimer
// OSPF SPF timers (in milliseconds)
type Ospf_Processes_Process_DefaultVrf_Timers_SpfTimer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of milliseconds before first SPF run. The type is interface{} with
    // range: 1..600000. Units are millisecond. The default value is 5000.
    InitialDelay interface{}

    // Number of milliseconds delay between successive SPF runs. The type is
    // interface{} with range: 1..600000. Units are millisecond. The default value
    // is 10000.
    BackoffIncrement interface{}

    // Max number of milliseconds between consecutive SPF calculations. The type
    // is interface{} with range: 1..600000. Units are millisecond. The default
    // value is 10000.
    MaxDelay interface{}
}

func (spfTimer *Ospf_Processes_Process_DefaultVrf_Timers_SpfTimer) GetEntityData() *types.CommonEntityData {
    spfTimer.EntityData.YFilter = spfTimer.YFilter
    spfTimer.EntityData.YangName = "spf-timer"
    spfTimer.EntityData.BundleName = "cisco_ios_xr"
    spfTimer.EntityData.ParentYangName = "timers"
    spfTimer.EntityData.SegmentPath = "spf-timer"
    spfTimer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    spfTimer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    spfTimer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    spfTimer.EntityData.Children = make(map[string]types.YChild)
    spfTimer.EntityData.Leafs = make(map[string]types.YLeaf)
    spfTimer.EntityData.Leafs["initial-delay"] = types.YLeaf{"InitialDelay", spfTimer.InitialDelay}
    spfTimer.EntityData.Leafs["backoff-increment"] = types.YLeaf{"BackoffIncrement", spfTimer.BackoffIncrement}
    spfTimer.EntityData.Leafs["max-delay"] = types.YLeaf{"MaxDelay", spfTimer.MaxDelay}
    return &(spfTimer.EntityData)
}

// Ospf_Processes_Process_DefaultVrf_Timers_LsaGenerationTimer
// OSPF LSA timers (in milliseconds)
type Ospf_Processes_Process_DefaultVrf_Timers_LsaGenerationTimer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of milliseconds before generating first LSA. The type is interface{}
    // with range: 0..600000. Units are millisecond. The default value is 50.
    InitialDelay interface{}

    // Number of milliseconds delay between successive LSA builds. The type is
    // interface{} with range: 1..600000. Units are millisecond. The default value
    // is 200.
    BackoffIncrement interface{}

    // Max number of milliseconds between consecutive LSA builds . The type is
    // interface{} with range: 1..600000. Units are millisecond. The default value
    // is 200.
    MaxDelay interface{}
}

func (lsaGenerationTimer *Ospf_Processes_Process_DefaultVrf_Timers_LsaGenerationTimer) GetEntityData() *types.CommonEntityData {
    lsaGenerationTimer.EntityData.YFilter = lsaGenerationTimer.YFilter
    lsaGenerationTimer.EntityData.YangName = "lsa-generation-timer"
    lsaGenerationTimer.EntityData.BundleName = "cisco_ios_xr"
    lsaGenerationTimer.EntityData.ParentYangName = "timers"
    lsaGenerationTimer.EntityData.SegmentPath = "lsa-generation-timer"
    lsaGenerationTimer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lsaGenerationTimer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lsaGenerationTimer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lsaGenerationTimer.EntityData.Children = make(map[string]types.YChild)
    lsaGenerationTimer.EntityData.Leafs = make(map[string]types.YLeaf)
    lsaGenerationTimer.EntityData.Leafs["initial-delay"] = types.YLeaf{"InitialDelay", lsaGenerationTimer.InitialDelay}
    lsaGenerationTimer.EntityData.Leafs["backoff-increment"] = types.YLeaf{"BackoffIncrement", lsaGenerationTimer.BackoffIncrement}
    lsaGenerationTimer.EntityData.Leafs["max-delay"] = types.YLeaf{"MaxDelay", lsaGenerationTimer.MaxDelay}
    return &(lsaGenerationTimer.EntityData)
}

// Ospf_Global
// OSPF global configuration data
type Ospf_Global struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Display OSPF router ids as DNS names. The type is interface{}.
    DnsNameLookup interface{}
}

func (global *Ospf_Global) GetEntityData() *types.CommonEntityData {
    global.EntityData.YFilter = global.YFilter
    global.EntityData.YangName = "global"
    global.EntityData.BundleName = "cisco_ios_xr"
    global.EntityData.ParentYangName = "ospf"
    global.EntityData.SegmentPath = "global"
    global.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    global.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    global.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    global.EntityData.Children = make(map[string]types.YChild)
    global.EntityData.Leafs = make(map[string]types.YLeaf)
    global.EntityData.Leafs["dns-name-lookup"] = types.YLeaf{"DnsNameLookup", global.DnsNameLookup}
    return &(global.EntityData)
}

