// This module contains a collection of YANG definitions
// for Cisco IOS-XR ncs6k-acl package operational data.
// 
// This module contains definitions
// for the following management objects:
//   access-list-hardware: Root class of accesslist hardware
// 
// Copyright (c) 2013-2017 by Cisco Systems, Inc.
// All rights reserved.
package ncs6k_acl_oper

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package ncs6k_acl_oper"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ncs6k-acl-oper access-list-hardware}", reflect.TypeOf(AccessListHardware{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware", reflect.TypeOf(AccessListHardware{}))
}

// SsePfilterAddr represents Address types
type SsePfilterAddr string

const (
    // IPv4
    SsePfilterAddr_ipv4 SsePfilterAddr = "ipv4"

    // IPv6
    SsePfilterAddr_ipv6 SsePfilterAddr = "ipv6"
)

// SseGrant represents ACL grant
type SseGrant string

const (
    // Grant permit
    SseGrant_permit SseGrant = "permit"

    // Grant deny
    SseGrant_deny SseGrant = "deny"
)

// AccessListHardware
// Root class of accesslist hardware
type AccessListHardware struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Accesslist nodes.
    Nodes AccessListHardware_Nodes
}

func (accessListHardware *AccessListHardware) GetFilter() yfilter.YFilter { return accessListHardware.YFilter }

func (accessListHardware *AccessListHardware) SetFilter(yf yfilter.YFilter) { accessListHardware.YFilter = yf }

func (accessListHardware *AccessListHardware) GetGoName(yname string) string {
    if yname == "nodes" { return "Nodes" }
    return ""
}

func (accessListHardware *AccessListHardware) GetSegmentPath() string {
    return "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware"
}

func (accessListHardware *AccessListHardware) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nodes" {
        return &accessListHardware.Nodes
    }
    return nil
}

func (accessListHardware *AccessListHardware) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nodes"] = &accessListHardware.Nodes
    return children
}

func (accessListHardware *AccessListHardware) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (accessListHardware *AccessListHardware) GetBundleName() string { return "cisco_ios_xr" }

func (accessListHardware *AccessListHardware) GetYangName() string { return "access-list-hardware" }

func (accessListHardware *AccessListHardware) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accessListHardware *AccessListHardware) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accessListHardware *AccessListHardware) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accessListHardware *AccessListHardware) SetParent(parent types.Entity) { accessListHardware.parent = parent }

func (accessListHardware *AccessListHardware) GetParent() types.Entity { return accessListHardware.parent }

func (accessListHardware *AccessListHardware) GetParentYangName() string { return "Cisco-IOS-XR-ncs6k-acl-oper" }

// AccessListHardware_Nodes
// Accesslist nodes
type AccessListHardware_Nodes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Accesslist node. The type is slice of AccessListHardware_Nodes_Node.
    Node []AccessListHardware_Nodes_Node
}

func (nodes *AccessListHardware_Nodes) GetFilter() yfilter.YFilter { return nodes.YFilter }

func (nodes *AccessListHardware_Nodes) SetFilter(yf yfilter.YFilter) { nodes.YFilter = yf }

func (nodes *AccessListHardware_Nodes) GetGoName(yname string) string {
    if yname == "node" { return "Node" }
    return ""
}

func (nodes *AccessListHardware_Nodes) GetSegmentPath() string {
    return "nodes"
}

func (nodes *AccessListHardware_Nodes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "node" {
        for _, c := range nodes.Node {
            if nodes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node{}
        nodes.Node = append(nodes.Node, child)
        return &nodes.Node[len(nodes.Node)-1]
    }
    return nil
}

func (nodes *AccessListHardware_Nodes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nodes.Node {
        children[nodes.Node[i].GetSegmentPath()] = &nodes.Node[i]
    }
    return children
}

func (nodes *AccessListHardware_Nodes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nodes *AccessListHardware_Nodes) GetBundleName() string { return "cisco_ios_xr" }

func (nodes *AccessListHardware_Nodes) GetYangName() string { return "nodes" }

func (nodes *AccessListHardware_Nodes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodes *AccessListHardware_Nodes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodes *AccessListHardware_Nodes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodes *AccessListHardware_Nodes) SetParent(parent types.Entity) { nodes.parent = parent }

func (nodes *AccessListHardware_Nodes) GetParent() types.Entity { return nodes.parent }

func (nodes *AccessListHardware_Nodes) GetParentYangName() string { return "access-list-hardware" }

// AccessListHardware_Nodes_Node
// Accesslist node
type AccessListHardware_Nodes_Node struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Node name. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeName interface{}

    // Accesslist direction egress.
    Egress AccessListHardware_Nodes_Node_Egress

    // Accesslist direction ingress.
    Ingress AccessListHardware_Nodes_Node_Ingress
}

func (node *AccessListHardware_Nodes_Node) GetFilter() yfilter.YFilter { return node.YFilter }

func (node *AccessListHardware_Nodes_Node) SetFilter(yf yfilter.YFilter) { node.YFilter = yf }

func (node *AccessListHardware_Nodes_Node) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "egress" { return "Egress" }
    if yname == "ingress" { return "Ingress" }
    return ""
}

func (node *AccessListHardware_Nodes_Node) GetSegmentPath() string {
    return "node" + "[node-name='" + fmt.Sprintf("%v", node.NodeName) + "']"
}

func (node *AccessListHardware_Nodes_Node) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "egress" {
        return &node.Egress
    }
    if childYangName == "ingress" {
        return &node.Ingress
    }
    return nil
}

func (node *AccessListHardware_Nodes_Node) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["egress"] = &node.Egress
    children["ingress"] = &node.Ingress
    return children
}

func (node *AccessListHardware_Nodes_Node) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = node.NodeName
    return leafs
}

func (node *AccessListHardware_Nodes_Node) GetBundleName() string { return "cisco_ios_xr" }

func (node *AccessListHardware_Nodes_Node) GetYangName() string { return "node" }

func (node *AccessListHardware_Nodes_Node) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (node *AccessListHardware_Nodes_Node) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (node *AccessListHardware_Nodes_Node) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (node *AccessListHardware_Nodes_Node) SetParent(parent types.Entity) { node.parent = parent }

func (node *AccessListHardware_Nodes_Node) GetParent() types.Entity { return node.parent }

func (node *AccessListHardware_Nodes_Node) GetParentYangName() string { return "nodes" }

// AccessListHardware_Nodes_Node_Egress
// Accesslist direction egress
type AccessListHardware_Nodes_Node_Egress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Accesslist version IPv4.
    Ipv4 AccessListHardware_Nodes_Node_Egress_Ipv4

    // Accesslist version IPv6.
    Ipv6 AccessListHardware_Nodes_Node_Egress_Ipv6
}

func (egress *AccessListHardware_Nodes_Node_Egress) GetFilter() yfilter.YFilter { return egress.YFilter }

func (egress *AccessListHardware_Nodes_Node_Egress) SetFilter(yf yfilter.YFilter) { egress.YFilter = yf }

func (egress *AccessListHardware_Nodes_Node_Egress) GetGoName(yname string) string {
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (egress *AccessListHardware_Nodes_Node_Egress) GetSegmentPath() string {
    return "egress"
}

func (egress *AccessListHardware_Nodes_Node_Egress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4" {
        return &egress.Ipv4
    }
    if childYangName == "ipv6" {
        return &egress.Ipv6
    }
    return nil
}

func (egress *AccessListHardware_Nodes_Node_Egress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4"] = &egress.Ipv4
    children["ipv6"] = &egress.Ipv6
    return children
}

func (egress *AccessListHardware_Nodes_Node_Egress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (egress *AccessListHardware_Nodes_Node_Egress) GetBundleName() string { return "cisco_ios_xr" }

func (egress *AccessListHardware_Nodes_Node_Egress) GetYangName() string { return "egress" }

func (egress *AccessListHardware_Nodes_Node_Egress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (egress *AccessListHardware_Nodes_Node_Egress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (egress *AccessListHardware_Nodes_Node_Egress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (egress *AccessListHardware_Nodes_Node_Egress) SetParent(parent types.Entity) { egress.parent = parent }

func (egress *AccessListHardware_Nodes_Node_Egress) GetParent() types.Entity { return egress.parent }

func (egress *AccessListHardware_Nodes_Node_Egress) GetParentYangName() string { return "node" }

// AccessListHardware_Nodes_Node_Egress_Ipv4
// Accesslist version IPv4
type AccessListHardware_Nodes_Node_Egress_Ipv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table for access lists.
    Accesses AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses
}

func (ipv4 *AccessListHardware_Nodes_Node_Egress_Ipv4) GetFilter() yfilter.YFilter { return ipv4.YFilter }

func (ipv4 *AccessListHardware_Nodes_Node_Egress_Ipv4) SetFilter(yf yfilter.YFilter) { ipv4.YFilter = yf }

func (ipv4 *AccessListHardware_Nodes_Node_Egress_Ipv4) GetGoName(yname string) string {
    if yname == "accesses" { return "Accesses" }
    return ""
}

func (ipv4 *AccessListHardware_Nodes_Node_Egress_Ipv4) GetSegmentPath() string {
    return "ipv4"
}

func (ipv4 *AccessListHardware_Nodes_Node_Egress_Ipv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "accesses" {
        return &ipv4.Accesses
    }
    return nil
}

func (ipv4 *AccessListHardware_Nodes_Node_Egress_Ipv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["accesses"] = &ipv4.Accesses
    return children
}

func (ipv4 *AccessListHardware_Nodes_Node_Egress_Ipv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4 *AccessListHardware_Nodes_Node_Egress_Ipv4) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4 *AccessListHardware_Nodes_Node_Egress_Ipv4) GetYangName() string { return "ipv4" }

func (ipv4 *AccessListHardware_Nodes_Node_Egress_Ipv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4 *AccessListHardware_Nodes_Node_Egress_Ipv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4 *AccessListHardware_Nodes_Node_Egress_Ipv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4 *AccessListHardware_Nodes_Node_Egress_Ipv4) SetParent(parent types.Entity) { ipv4.parent = parent }

func (ipv4 *AccessListHardware_Nodes_Node_Egress_Ipv4) GetParent() types.Entity { return ipv4.parent }

func (ipv4 *AccessListHardware_Nodes_Node_Egress_Ipv4) GetParentYangName() string { return "egress" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses
// Table for access lists
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // List of ACLs. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access.
    Access []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access
}

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses) GetFilter() yfilter.YFilter { return accesses.YFilter }

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses) SetFilter(yf yfilter.YFilter) { accesses.YFilter = yf }

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses) GetGoName(yname string) string {
    if yname == "access" { return "Access" }
    return ""
}

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses) GetSegmentPath() string {
    return "accesses"
}

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "access" {
        for _, c := range accesses.Access {
            if accesses.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access{}
        accesses.Access = append(accesses.Access, child)
        return &accesses.Access[len(accesses.Access)-1]
    }
    return nil
}

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range accesses.Access {
        children[accesses.Access[i].GetSegmentPath()] = &accesses.Access[i]
    }
    return children
}

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses) GetBundleName() string { return "cisco_ios_xr" }

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses) GetYangName() string { return "accesses" }

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses) SetParent(parent types.Entity) { accesses.parent = parent }

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses) GetParent() types.Entity { return accesses.parent }

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses) GetParentYangName() string { return "ipv4" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access
// List of ACLs
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the access list. The type is string.
    AccessListName interface{}

    // Implicit ACL information.
    Implicit AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit

    // Table of all sequence numbers per ACL.
    SequenceDetails AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails

    // Table of all sequence numbers per ACL.
    SequenceBriefs AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs
}

func (access *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access) GetFilter() yfilter.YFilter { return access.YFilter }

func (access *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access) SetFilter(yf yfilter.YFilter) { access.YFilter = yf }

func (access *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access) GetGoName(yname string) string {
    if yname == "access-list-name" { return "AccessListName" }
    if yname == "implicit" { return "Implicit" }
    if yname == "sequence-details" { return "SequenceDetails" }
    if yname == "sequence-briefs" { return "SequenceBriefs" }
    return ""
}

func (access *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access) GetSegmentPath() string {
    return "access" + "[access-list-name='" + fmt.Sprintf("%v", access.AccessListName) + "']"
}

func (access *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "implicit" {
        return &access.Implicit
    }
    if childYangName == "sequence-details" {
        return &access.SequenceDetails
    }
    if childYangName == "sequence-briefs" {
        return &access.SequenceBriefs
    }
    return nil
}

func (access *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["implicit"] = &access.Implicit
    children["sequence-details"] = &access.SequenceDetails
    children["sequence-briefs"] = &access.SequenceBriefs
    return children
}

func (access *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["access-list-name"] = access.AccessListName
    return leafs
}

func (access *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access) GetBundleName() string { return "cisco_ios_xr" }

func (access *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access) GetYangName() string { return "access" }

func (access *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (access *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (access *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (access *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access) SetParent(parent types.Entity) { access.parent = parent }

func (access *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access) GetParent() types.Entity { return access.parent }

func (access *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access) GetParentYangName() string { return "accesses" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit
// Implicit ACL information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Implicit ACL Entries across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl.
    ImplicitAcl []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl
}

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit) GetFilter() yfilter.YFilter { return implicit.YFilter }

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit) SetFilter(yf yfilter.YFilter) { implicit.YFilter = yf }

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit) GetGoName(yname string) string {
    if yname == "implicit-acl" { return "ImplicitAcl" }
    return ""
}

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit) GetSegmentPath() string {
    return "implicit"
}

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "implicit-acl" {
        for _, c := range implicit.ImplicitAcl {
            if implicit.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl{}
        implicit.ImplicitAcl = append(implicit.ImplicitAcl, child)
        return &implicit.ImplicitAcl[len(implicit.ImplicitAcl)-1]
    }
    return nil
}

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range implicit.ImplicitAcl {
        children[implicit.ImplicitAcl[i].GetSegmentPath()] = &implicit.ImplicitAcl[i]
    }
    return children
}

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit) GetBundleName() string { return "cisco_ios_xr" }

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit) GetYangName() string { return "implicit" }

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit) SetParent(parent types.Entity) { implicit.parent = parent }

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit) GetParent() types.Entity { return implicit.parent }

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit) GetParentYangName() string { return "access" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl
// Implicit ACL Entries across Slices
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Common ACL Implicit Entries.
    CommonAclImplicit AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit

    // Interface ACL Implicit Entries.
    InterfaceAclImplicit AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit
}

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) GetFilter() yfilter.YFilter { return implicitAcl.YFilter }

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) SetFilter(yf yfilter.YFilter) { implicitAcl.YFilter = yf }

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) GetGoName(yname string) string {
    if yname == "common-acl-implicit" { return "CommonAclImplicit" }
    if yname == "interface-acl-implicit" { return "InterfaceAclImplicit" }
    return ""
}

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) GetSegmentPath() string {
    return "implicit-acl"
}

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "common-acl-implicit" {
        return &implicitAcl.CommonAclImplicit
    }
    if childYangName == "interface-acl-implicit" {
        return &implicitAcl.InterfaceAclImplicit
    }
    return nil
}

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["common-acl-implicit"] = &implicitAcl.CommonAclImplicit
    children["interface-acl-implicit"] = &implicitAcl.InterfaceAclImplicit
    return children
}

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) GetBundleName() string { return "cisco_ios_xr" }

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) GetYangName() string { return "implicit-acl" }

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) SetParent(parent types.Entity) { implicitAcl.parent = parent }

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) GetParent() types.Entity { return implicitAcl.parent }

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) GetParentYangName() string { return "implicit" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit
// Common ACL Implicit Entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Implicit NDNA permit.
    ImplicitNdnaPermit AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit

    // Implicit NDNS permit.
    ImplicitNdnsPermit AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit

    // Implicit deny.
    ImplicitDeny AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetFilter() yfilter.YFilter { return commonAclImplicit.YFilter }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) SetFilter(yf yfilter.YFilter) { commonAclImplicit.YFilter = yf }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetGoName(yname string) string {
    if yname == "implicit-ndna-permit" { return "ImplicitNdnaPermit" }
    if yname == "implicit-ndns-permit" { return "ImplicitNdnsPermit" }
    if yname == "implicit-deny" { return "ImplicitDeny" }
    return ""
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetSegmentPath() string {
    return "common-acl-implicit"
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "implicit-ndna-permit" {
        return &commonAclImplicit.ImplicitNdnaPermit
    }
    if childYangName == "implicit-ndns-permit" {
        return &commonAclImplicit.ImplicitNdnsPermit
    }
    if childYangName == "implicit-deny" {
        return &commonAclImplicit.ImplicitDeny
    }
    return nil
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["implicit-ndna-permit"] = &commonAclImplicit.ImplicitNdnaPermit
    children["implicit-ndns-permit"] = &commonAclImplicit.ImplicitNdnsPermit
    children["implicit-deny"] = &commonAclImplicit.ImplicitDeny
    return children
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetBundleName() string { return "cisco_ios_xr" }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetYangName() string { return "common-acl-implicit" }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) SetParent(parent types.Entity) { commonAclImplicit.parent = parent }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetParent() types.Entity { return commonAclImplicit.parent }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetParentYangName() string { return "implicit-acl" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit
// Implicit NDNA permit
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetFilter() yfilter.YFilter { return implicitNdnaPermit.YFilter }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) SetFilter(yf yfilter.YFilter) { implicitNdnaPermit.YFilter = yf }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetSegmentPath() string {
    return "implicit-ndna-permit"
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &implicitNdnaPermit.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range implicitNdnaPermit.AceDetail {
            if implicitNdnaPermit.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail{}
        implicitNdnaPermit.AceDetail = append(implicitNdnaPermit.AceDetail, child)
        return &implicitNdnaPermit.AceDetail[len(implicitNdnaPermit.AceDetail)-1]
    }
    return nil
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &implicitNdnaPermit.AceBrief
    for i := range implicitNdnaPermit.AceDetail {
        children[implicitNdnaPermit.AceDetail[i].GetSegmentPath()] = &implicitNdnaPermit.AceDetail[i]
    }
    return children
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetBundleName() string { return "cisco_ios_xr" }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetYangName() string { return "implicit-ndna-permit" }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) SetParent(parent types.Entity) { implicitNdnaPermit.parent = parent }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetParent() types.Entity { return implicitNdnaPermit.parent }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetParentYangName() string { return "common-acl-implicit" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetParentYangName() string { return "implicit-ndna-permit" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetParentYangName() string { return "implicit-ndna-permit" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit
// Implicit NDNS permit
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetFilter() yfilter.YFilter { return implicitNdnsPermit.YFilter }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) SetFilter(yf yfilter.YFilter) { implicitNdnsPermit.YFilter = yf }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetSegmentPath() string {
    return "implicit-ndns-permit"
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &implicitNdnsPermit.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range implicitNdnsPermit.AceDetail {
            if implicitNdnsPermit.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail{}
        implicitNdnsPermit.AceDetail = append(implicitNdnsPermit.AceDetail, child)
        return &implicitNdnsPermit.AceDetail[len(implicitNdnsPermit.AceDetail)-1]
    }
    return nil
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &implicitNdnsPermit.AceBrief
    for i := range implicitNdnsPermit.AceDetail {
        children[implicitNdnsPermit.AceDetail[i].GetSegmentPath()] = &implicitNdnsPermit.AceDetail[i]
    }
    return children
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetBundleName() string { return "cisco_ios_xr" }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetYangName() string { return "implicit-ndns-permit" }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) SetParent(parent types.Entity) { implicitNdnsPermit.parent = parent }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetParent() types.Entity { return implicitNdnsPermit.parent }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetParentYangName() string { return "common-acl-implicit" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetParentYangName() string { return "implicit-ndns-permit" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetParentYangName() string { return "implicit-ndns-permit" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny
// Implicit deny
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetFilter() yfilter.YFilter { return implicitDeny.YFilter }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) SetFilter(yf yfilter.YFilter) { implicitDeny.YFilter = yf }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetSegmentPath() string {
    return "implicit-deny"
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &implicitDeny.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range implicitDeny.AceDetail {
            if implicitDeny.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail{}
        implicitDeny.AceDetail = append(implicitDeny.AceDetail, child)
        return &implicitDeny.AceDetail[len(implicitDeny.AceDetail)-1]
    }
    return nil
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &implicitDeny.AceBrief
    for i := range implicitDeny.AceDetail {
        children[implicitDeny.AceDetail[i].GetSegmentPath()] = &implicitDeny.AceDetail[i]
    }
    return children
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetBundleName() string { return "cisco_ios_xr" }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetYangName() string { return "implicit-deny" }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) SetParent(parent types.Entity) { implicitDeny.parent = parent }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetParent() types.Entity { return implicitDeny.parent }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetParentYangName() string { return "common-acl-implicit" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetParentYangName() string { return "implicit-deny" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetParentYangName() string { return "implicit-deny" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit
// Interface ACL Implicit Entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Implicit NDNA permit.
    ImplicitNdnaPermit AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit

    // Implicit NDNS permit.
    ImplicitNdnsPermit AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit

    // Implicit deny.
    ImplicitDeny AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetFilter() yfilter.YFilter { return interfaceAclImplicit.YFilter }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) SetFilter(yf yfilter.YFilter) { interfaceAclImplicit.YFilter = yf }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetGoName(yname string) string {
    if yname == "implicit-ndna-permit" { return "ImplicitNdnaPermit" }
    if yname == "implicit-ndns-permit" { return "ImplicitNdnsPermit" }
    if yname == "implicit-deny" { return "ImplicitDeny" }
    return ""
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetSegmentPath() string {
    return "interface-acl-implicit"
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "implicit-ndna-permit" {
        return &interfaceAclImplicit.ImplicitNdnaPermit
    }
    if childYangName == "implicit-ndns-permit" {
        return &interfaceAclImplicit.ImplicitNdnsPermit
    }
    if childYangName == "implicit-deny" {
        return &interfaceAclImplicit.ImplicitDeny
    }
    return nil
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["implicit-ndna-permit"] = &interfaceAclImplicit.ImplicitNdnaPermit
    children["implicit-ndns-permit"] = &interfaceAclImplicit.ImplicitNdnsPermit
    children["implicit-deny"] = &interfaceAclImplicit.ImplicitDeny
    return children
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetYangName() string { return "interface-acl-implicit" }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) SetParent(parent types.Entity) { interfaceAclImplicit.parent = parent }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetParent() types.Entity { return interfaceAclImplicit.parent }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetParentYangName() string { return "implicit-acl" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit
// Implicit NDNA permit
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetFilter() yfilter.YFilter { return implicitNdnaPermit.YFilter }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) SetFilter(yf yfilter.YFilter) { implicitNdnaPermit.YFilter = yf }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetSegmentPath() string {
    return "implicit-ndna-permit"
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &implicitNdnaPermit.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range implicitNdnaPermit.AceDetail {
            if implicitNdnaPermit.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail{}
        implicitNdnaPermit.AceDetail = append(implicitNdnaPermit.AceDetail, child)
        return &implicitNdnaPermit.AceDetail[len(implicitNdnaPermit.AceDetail)-1]
    }
    return nil
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &implicitNdnaPermit.AceBrief
    for i := range implicitNdnaPermit.AceDetail {
        children[implicitNdnaPermit.AceDetail[i].GetSegmentPath()] = &implicitNdnaPermit.AceDetail[i]
    }
    return children
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetBundleName() string { return "cisco_ios_xr" }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetYangName() string { return "implicit-ndna-permit" }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) SetParent(parent types.Entity) { implicitNdnaPermit.parent = parent }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetParent() types.Entity { return implicitNdnaPermit.parent }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetParentYangName() string { return "interface-acl-implicit" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetParentYangName() string { return "implicit-ndna-permit" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetParentYangName() string { return "implicit-ndna-permit" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit
// Implicit NDNS permit
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetFilter() yfilter.YFilter { return implicitNdnsPermit.YFilter }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) SetFilter(yf yfilter.YFilter) { implicitNdnsPermit.YFilter = yf }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetSegmentPath() string {
    return "implicit-ndns-permit"
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &implicitNdnsPermit.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range implicitNdnsPermit.AceDetail {
            if implicitNdnsPermit.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail{}
        implicitNdnsPermit.AceDetail = append(implicitNdnsPermit.AceDetail, child)
        return &implicitNdnsPermit.AceDetail[len(implicitNdnsPermit.AceDetail)-1]
    }
    return nil
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &implicitNdnsPermit.AceBrief
    for i := range implicitNdnsPermit.AceDetail {
        children[implicitNdnsPermit.AceDetail[i].GetSegmentPath()] = &implicitNdnsPermit.AceDetail[i]
    }
    return children
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetBundleName() string { return "cisco_ios_xr" }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetYangName() string { return "implicit-ndns-permit" }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) SetParent(parent types.Entity) { implicitNdnsPermit.parent = parent }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetParent() types.Entity { return implicitNdnsPermit.parent }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetParentYangName() string { return "interface-acl-implicit" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetParentYangName() string { return "implicit-ndns-permit" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetParentYangName() string { return "implicit-ndns-permit" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny
// Implicit deny
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetFilter() yfilter.YFilter { return implicitDeny.YFilter }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) SetFilter(yf yfilter.YFilter) { implicitDeny.YFilter = yf }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetSegmentPath() string {
    return "implicit-deny"
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &implicitDeny.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range implicitDeny.AceDetail {
            if implicitDeny.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail{}
        implicitDeny.AceDetail = append(implicitDeny.AceDetail, child)
        return &implicitDeny.AceDetail[len(implicitDeny.AceDetail)-1]
    }
    return nil
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &implicitDeny.AceBrief
    for i := range implicitDeny.AceDetail {
        children[implicitDeny.AceDetail[i].GetSegmentPath()] = &implicitDeny.AceDetail[i]
    }
    return children
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetBundleName() string { return "cisco_ios_xr" }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetYangName() string { return "implicit-deny" }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) SetParent(parent types.Entity) { implicitDeny.parent = parent }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetParent() types.Entity { return implicitDeny.parent }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetParentYangName() string { return "interface-acl-implicit" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetParentYangName() string { return "implicit-deny" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetParentYangName() string { return "implicit-deny" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails
// Table of all sequence numbers per ACL
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detail ACL information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail.
    SequenceDetail []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails) GetFilter() yfilter.YFilter { return sequenceDetails.YFilter }

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails) SetFilter(yf yfilter.YFilter) { sequenceDetails.YFilter = yf }

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails) GetGoName(yname string) string {
    if yname == "sequence-detail" { return "SequenceDetail" }
    return ""
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails) GetSegmentPath() string {
    return "sequence-details"
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sequence-detail" {
        for _, c := range sequenceDetails.SequenceDetail {
            if sequenceDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail{}
        sequenceDetails.SequenceDetail = append(sequenceDetails.SequenceDetail, child)
        return &sequenceDetails.SequenceDetail[len(sequenceDetails.SequenceDetail)-1]
    }
    return nil
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sequenceDetails.SequenceDetail {
        children[sequenceDetails.SequenceDetail[i].GetSegmentPath()] = &sequenceDetails.SequenceDetail[i]
    }
    return children
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails) GetBundleName() string { return "cisco_ios_xr" }

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails) GetYangName() string { return "sequence-details" }

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails) SetParent(parent types.Entity) { sequenceDetails.parent = parent }

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails) GetParent() types.Entity { return sequenceDetails.parent }

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails) GetParentYangName() string { return "access" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail
// Detail ACL information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Detail ACL information for a particular sequence.
    // The type is interface{} with range: -2147483648..2147483647.
    SequenceNumber interface{}

    // Common ACL detail information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail.
    CommonAclDetail []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail

    // Interface ACL detail information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail.
    InterfaceAclDetail []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) GetFilter() yfilter.YFilter { return sequenceDetail.YFilter }

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) SetFilter(yf yfilter.YFilter) { sequenceDetail.YFilter = yf }

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) GetGoName(yname string) string {
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "common-acl-detail" { return "CommonAclDetail" }
    if yname == "interface-acl-detail" { return "InterfaceAclDetail" }
    return ""
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) GetSegmentPath() string {
    return "sequence-detail" + "[sequence-number='" + fmt.Sprintf("%v", sequenceDetail.SequenceNumber) + "']"
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "common-acl-detail" {
        for _, c := range sequenceDetail.CommonAclDetail {
            if sequenceDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail{}
        sequenceDetail.CommonAclDetail = append(sequenceDetail.CommonAclDetail, child)
        return &sequenceDetail.CommonAclDetail[len(sequenceDetail.CommonAclDetail)-1]
    }
    if childYangName == "interface-acl-detail" {
        for _, c := range sequenceDetail.InterfaceAclDetail {
            if sequenceDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail{}
        sequenceDetail.InterfaceAclDetail = append(sequenceDetail.InterfaceAclDetail, child)
        return &sequenceDetail.InterfaceAclDetail[len(sequenceDetail.InterfaceAclDetail)-1]
    }
    return nil
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sequenceDetail.CommonAclDetail {
        children[sequenceDetail.CommonAclDetail[i].GetSegmentPath()] = &sequenceDetail.CommonAclDetail[i]
    }
    for i := range sequenceDetail.InterfaceAclDetail {
        children[sequenceDetail.InterfaceAclDetail[i].GetSegmentPath()] = &sequenceDetail.InterfaceAclDetail[i]
    }
    return children
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sequence-number"] = sequenceDetail.SequenceNumber
    return leafs
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) GetYangName() string { return "sequence-detail" }

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) SetParent(parent types.Entity) { sequenceDetail.parent = parent }

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) GetParent() types.Entity { return sequenceDetail.parent }

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) GetParentYangName() string { return "sequence-details" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail
// Common ACL detail information across Slices
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetFilter() yfilter.YFilter { return commonAclDetail.YFilter }

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) SetFilter(yf yfilter.YFilter) { commonAclDetail.YFilter = yf }

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetSegmentPath() string {
    return "common-acl-detail"
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &commonAclDetail.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range commonAclDetail.AceDetail {
            if commonAclDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail{}
        commonAclDetail.AceDetail = append(commonAclDetail.AceDetail, child)
        return &commonAclDetail.AceDetail[len(commonAclDetail.AceDetail)-1]
    }
    return nil
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &commonAclDetail.AceBrief
    for i := range commonAclDetail.AceDetail {
        children[commonAclDetail.AceDetail[i].GetSegmentPath()] = &commonAclDetail.AceDetail[i]
    }
    return children
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetBundleName() string { return "cisco_ios_xr" }

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetYangName() string { return "common-acl-detail" }

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) SetParent(parent types.Entity) { commonAclDetail.parent = parent }

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetParent() types.Entity { return commonAclDetail.parent }

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetParentYangName() string { return "sequence-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetParentYangName() string { return "common-acl-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetParentYangName() string { return "common-acl-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail
// Interface ACL detail information across Slices
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetFilter() yfilter.YFilter { return interfaceAclDetail.YFilter }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) SetFilter(yf yfilter.YFilter) { interfaceAclDetail.YFilter = yf }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetSegmentPath() string {
    return "interface-acl-detail"
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &interfaceAclDetail.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range interfaceAclDetail.AceDetail {
            if interfaceAclDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail{}
        interfaceAclDetail.AceDetail = append(interfaceAclDetail.AceDetail, child)
        return &interfaceAclDetail.AceDetail[len(interfaceAclDetail.AceDetail)-1]
    }
    return nil
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &interfaceAclDetail.AceBrief
    for i := range interfaceAclDetail.AceDetail {
        children[interfaceAclDetail.AceDetail[i].GetSegmentPath()] = &interfaceAclDetail.AceDetail[i]
    }
    return children
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetYangName() string { return "interface-acl-detail" }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) SetParent(parent types.Entity) { interfaceAclDetail.parent = parent }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetParent() types.Entity { return interfaceAclDetail.parent }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetParentYangName() string { return "sequence-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetParentYangName() string { return "interface-acl-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetParentYangName() string { return "interface-acl-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs
// Table of all sequence numbers per ACL
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detail ACL information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief.
    SequenceBrief []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs) GetFilter() yfilter.YFilter { return sequenceBriefs.YFilter }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs) SetFilter(yf yfilter.YFilter) { sequenceBriefs.YFilter = yf }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs) GetGoName(yname string) string {
    if yname == "sequence-brief" { return "SequenceBrief" }
    return ""
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs) GetSegmentPath() string {
    return "sequence-briefs"
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sequence-brief" {
        for _, c := range sequenceBriefs.SequenceBrief {
            if sequenceBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief{}
        sequenceBriefs.SequenceBrief = append(sequenceBriefs.SequenceBrief, child)
        return &sequenceBriefs.SequenceBrief[len(sequenceBriefs.SequenceBrief)-1]
    }
    return nil
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sequenceBriefs.SequenceBrief {
        children[sequenceBriefs.SequenceBrief[i].GetSegmentPath()] = &sequenceBriefs.SequenceBrief[i]
    }
    return children
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs) GetYangName() string { return "sequence-briefs" }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs) SetParent(parent types.Entity) { sequenceBriefs.parent = parent }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs) GetParent() types.Entity { return sequenceBriefs.parent }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs) GetParentYangName() string { return "access" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief
// Detail ACL information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Brief ACL information for a particular sequence.
    // The type is interface{} with range: -2147483648..2147483647.
    SequenceNumber interface{}

    // Common ACL information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl.
    CommonAcl []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl

    // Interface ACL information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl.
    InterfaceAcl []AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) GetFilter() yfilter.YFilter { return sequenceBrief.YFilter }

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) SetFilter(yf yfilter.YFilter) { sequenceBrief.YFilter = yf }

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) GetGoName(yname string) string {
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "common-acl" { return "CommonAcl" }
    if yname == "interface-acl" { return "InterfaceAcl" }
    return ""
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) GetSegmentPath() string {
    return "sequence-brief" + "[sequence-number='" + fmt.Sprintf("%v", sequenceBrief.SequenceNumber) + "']"
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "common-acl" {
        for _, c := range sequenceBrief.CommonAcl {
            if sequenceBrief.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl{}
        sequenceBrief.CommonAcl = append(sequenceBrief.CommonAcl, child)
        return &sequenceBrief.CommonAcl[len(sequenceBrief.CommonAcl)-1]
    }
    if childYangName == "interface-acl" {
        for _, c := range sequenceBrief.InterfaceAcl {
            if sequenceBrief.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl{}
        sequenceBrief.InterfaceAcl = append(sequenceBrief.InterfaceAcl, child)
        return &sequenceBrief.InterfaceAcl[len(sequenceBrief.InterfaceAcl)-1]
    }
    return nil
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sequenceBrief.CommonAcl {
        children[sequenceBrief.CommonAcl[i].GetSegmentPath()] = &sequenceBrief.CommonAcl[i]
    }
    for i := range sequenceBrief.InterfaceAcl {
        children[sequenceBrief.InterfaceAcl[i].GetSegmentPath()] = &sequenceBrief.InterfaceAcl[i]
    }
    return children
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sequence-number"] = sequenceBrief.SequenceNumber
    return leafs
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) GetYangName() string { return "sequence-brief" }

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) SetParent(parent types.Entity) { sequenceBrief.parent = parent }

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) GetParent() types.Entity { return sequenceBrief.parent }

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) GetParentYangName() string { return "sequence-briefs" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl
// Common ACL information across Slices
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress
}

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetFilter() yfilter.YFilter { return commonAcl.YFilter }

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) SetFilter(yf yfilter.YFilter) { commonAcl.YFilter = yf }

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetSegmentPath() string {
    return "common-acl"
}

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &commonAcl.NextHopAddress
    }
    return nil
}

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &commonAcl.NextHopAddress
    return children
}

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = commonAcl.Grant
    leafs["logging-enabled"] = commonAcl.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = commonAcl.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = commonAcl.NextHopEnabled
    leafs["default-next-hop-enabled"] = commonAcl.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = commonAcl.TotalTcamEntries
    leafs["hits"] = commonAcl.Hits
    leafs["npu-id"] = commonAcl.NpuId
    return leafs
}

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetBundleName() string { return "cisco_ios_xr" }

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetYangName() string { return "common-acl" }

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) SetParent(parent types.Entity) { commonAcl.parent = parent }

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetParent() types.Entity { return commonAcl.parent }

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetParentYangName() string { return "sequence-brief" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetParentYangName() string { return "common-acl" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl
// Interface ACL information across Slices
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetFilter() yfilter.YFilter { return interfaceAcl.YFilter }

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) SetFilter(yf yfilter.YFilter) { interfaceAcl.YFilter = yf }

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetSegmentPath() string {
    return "interface-acl"
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &interfaceAcl.NextHopAddress
    }
    return nil
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &interfaceAcl.NextHopAddress
    return children
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = interfaceAcl.Grant
    leafs["logging-enabled"] = interfaceAcl.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = interfaceAcl.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = interfaceAcl.NextHopEnabled
    leafs["default-next-hop-enabled"] = interfaceAcl.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = interfaceAcl.TotalTcamEntries
    leafs["hits"] = interfaceAcl.Hits
    leafs["npu-id"] = interfaceAcl.NpuId
    return leafs
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetYangName() string { return "interface-acl" }

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) SetParent(parent types.Entity) { interfaceAcl.parent = parent }

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetParent() types.Entity { return interfaceAcl.parent }

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetParentYangName() string { return "sequence-brief" }

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetParentYangName() string { return "interface-acl" }

// AccessListHardware_Nodes_Node_Egress_Ipv6
// Accesslist version IPv6
type AccessListHardware_Nodes_Node_Egress_Ipv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table for access lists.
    Accesses AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses
}

func (ipv6 *AccessListHardware_Nodes_Node_Egress_Ipv6) GetFilter() yfilter.YFilter { return ipv6.YFilter }

func (ipv6 *AccessListHardware_Nodes_Node_Egress_Ipv6) SetFilter(yf yfilter.YFilter) { ipv6.YFilter = yf }

func (ipv6 *AccessListHardware_Nodes_Node_Egress_Ipv6) GetGoName(yname string) string {
    if yname == "accesses" { return "Accesses" }
    return ""
}

func (ipv6 *AccessListHardware_Nodes_Node_Egress_Ipv6) GetSegmentPath() string {
    return "ipv6"
}

func (ipv6 *AccessListHardware_Nodes_Node_Egress_Ipv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "accesses" {
        return &ipv6.Accesses
    }
    return nil
}

func (ipv6 *AccessListHardware_Nodes_Node_Egress_Ipv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["accesses"] = &ipv6.Accesses
    return children
}

func (ipv6 *AccessListHardware_Nodes_Node_Egress_Ipv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6 *AccessListHardware_Nodes_Node_Egress_Ipv6) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6 *AccessListHardware_Nodes_Node_Egress_Ipv6) GetYangName() string { return "ipv6" }

func (ipv6 *AccessListHardware_Nodes_Node_Egress_Ipv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6 *AccessListHardware_Nodes_Node_Egress_Ipv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6 *AccessListHardware_Nodes_Node_Egress_Ipv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6 *AccessListHardware_Nodes_Node_Egress_Ipv6) SetParent(parent types.Entity) { ipv6.parent = parent }

func (ipv6 *AccessListHardware_Nodes_Node_Egress_Ipv6) GetParent() types.Entity { return ipv6.parent }

func (ipv6 *AccessListHardware_Nodes_Node_Egress_Ipv6) GetParentYangName() string { return "egress" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses
// Table for access lists
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // List of ACLs. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access.
    Access []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access
}

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses) GetFilter() yfilter.YFilter { return accesses.YFilter }

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses) SetFilter(yf yfilter.YFilter) { accesses.YFilter = yf }

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses) GetGoName(yname string) string {
    if yname == "access" { return "Access" }
    return ""
}

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses) GetSegmentPath() string {
    return "accesses"
}

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "access" {
        for _, c := range accesses.Access {
            if accesses.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access{}
        accesses.Access = append(accesses.Access, child)
        return &accesses.Access[len(accesses.Access)-1]
    }
    return nil
}

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range accesses.Access {
        children[accesses.Access[i].GetSegmentPath()] = &accesses.Access[i]
    }
    return children
}

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses) GetBundleName() string { return "cisco_ios_xr" }

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses) GetYangName() string { return "accesses" }

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses) SetParent(parent types.Entity) { accesses.parent = parent }

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses) GetParent() types.Entity { return accesses.parent }

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses) GetParentYangName() string { return "ipv6" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access
// List of ACLs
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the access list. The type is string.
    AccessListName interface{}

    // Implicit ACL information.
    Implicit AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit

    // Table of all sequence numbers per ACL.
    SequenceDetails AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails

    // Table of all sequence numbers per ACL.
    SequenceBriefs AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs
}

func (access *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access) GetFilter() yfilter.YFilter { return access.YFilter }

func (access *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access) SetFilter(yf yfilter.YFilter) { access.YFilter = yf }

func (access *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access) GetGoName(yname string) string {
    if yname == "access-list-name" { return "AccessListName" }
    if yname == "implicit" { return "Implicit" }
    if yname == "sequence-details" { return "SequenceDetails" }
    if yname == "sequence-briefs" { return "SequenceBriefs" }
    return ""
}

func (access *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access) GetSegmentPath() string {
    return "access" + "[access-list-name='" + fmt.Sprintf("%v", access.AccessListName) + "']"
}

func (access *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "implicit" {
        return &access.Implicit
    }
    if childYangName == "sequence-details" {
        return &access.SequenceDetails
    }
    if childYangName == "sequence-briefs" {
        return &access.SequenceBriefs
    }
    return nil
}

func (access *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["implicit"] = &access.Implicit
    children["sequence-details"] = &access.SequenceDetails
    children["sequence-briefs"] = &access.SequenceBriefs
    return children
}

func (access *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["access-list-name"] = access.AccessListName
    return leafs
}

func (access *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access) GetBundleName() string { return "cisco_ios_xr" }

func (access *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access) GetYangName() string { return "access" }

func (access *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (access *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (access *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (access *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access) SetParent(parent types.Entity) { access.parent = parent }

func (access *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access) GetParent() types.Entity { return access.parent }

func (access *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access) GetParentYangName() string { return "accesses" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit
// Implicit ACL information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Implicit ACL Entries across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl.
    ImplicitAcl []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl
}

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit) GetFilter() yfilter.YFilter { return implicit.YFilter }

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit) SetFilter(yf yfilter.YFilter) { implicit.YFilter = yf }

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit) GetGoName(yname string) string {
    if yname == "implicit-acl" { return "ImplicitAcl" }
    return ""
}

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit) GetSegmentPath() string {
    return "implicit"
}

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "implicit-acl" {
        for _, c := range implicit.ImplicitAcl {
            if implicit.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl{}
        implicit.ImplicitAcl = append(implicit.ImplicitAcl, child)
        return &implicit.ImplicitAcl[len(implicit.ImplicitAcl)-1]
    }
    return nil
}

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range implicit.ImplicitAcl {
        children[implicit.ImplicitAcl[i].GetSegmentPath()] = &implicit.ImplicitAcl[i]
    }
    return children
}

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit) GetBundleName() string { return "cisco_ios_xr" }

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit) GetYangName() string { return "implicit" }

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit) SetParent(parent types.Entity) { implicit.parent = parent }

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit) GetParent() types.Entity { return implicit.parent }

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit) GetParentYangName() string { return "access" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl
// Implicit ACL Entries across Slices
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Common ACL Implicit Entries.
    CommonAclImplicit AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit

    // Interface ACL Implicit Entries.
    InterfaceAclImplicit AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit
}

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) GetFilter() yfilter.YFilter { return implicitAcl.YFilter }

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) SetFilter(yf yfilter.YFilter) { implicitAcl.YFilter = yf }

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) GetGoName(yname string) string {
    if yname == "common-acl-implicit" { return "CommonAclImplicit" }
    if yname == "interface-acl-implicit" { return "InterfaceAclImplicit" }
    return ""
}

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) GetSegmentPath() string {
    return "implicit-acl"
}

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "common-acl-implicit" {
        return &implicitAcl.CommonAclImplicit
    }
    if childYangName == "interface-acl-implicit" {
        return &implicitAcl.InterfaceAclImplicit
    }
    return nil
}

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["common-acl-implicit"] = &implicitAcl.CommonAclImplicit
    children["interface-acl-implicit"] = &implicitAcl.InterfaceAclImplicit
    return children
}

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) GetBundleName() string { return "cisco_ios_xr" }

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) GetYangName() string { return "implicit-acl" }

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) SetParent(parent types.Entity) { implicitAcl.parent = parent }

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) GetParent() types.Entity { return implicitAcl.parent }

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) GetParentYangName() string { return "implicit" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit
// Common ACL Implicit Entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Implicit NDNA permit.
    ImplicitNdnaPermit AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit

    // Implicit NDNS permit.
    ImplicitNdnsPermit AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit

    // Implicit deny.
    ImplicitDeny AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetFilter() yfilter.YFilter { return commonAclImplicit.YFilter }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) SetFilter(yf yfilter.YFilter) { commonAclImplicit.YFilter = yf }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetGoName(yname string) string {
    if yname == "implicit-ndna-permit" { return "ImplicitNdnaPermit" }
    if yname == "implicit-ndns-permit" { return "ImplicitNdnsPermit" }
    if yname == "implicit-deny" { return "ImplicitDeny" }
    return ""
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetSegmentPath() string {
    return "common-acl-implicit"
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "implicit-ndna-permit" {
        return &commonAclImplicit.ImplicitNdnaPermit
    }
    if childYangName == "implicit-ndns-permit" {
        return &commonAclImplicit.ImplicitNdnsPermit
    }
    if childYangName == "implicit-deny" {
        return &commonAclImplicit.ImplicitDeny
    }
    return nil
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["implicit-ndna-permit"] = &commonAclImplicit.ImplicitNdnaPermit
    children["implicit-ndns-permit"] = &commonAclImplicit.ImplicitNdnsPermit
    children["implicit-deny"] = &commonAclImplicit.ImplicitDeny
    return children
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetBundleName() string { return "cisco_ios_xr" }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetYangName() string { return "common-acl-implicit" }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) SetParent(parent types.Entity) { commonAclImplicit.parent = parent }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetParent() types.Entity { return commonAclImplicit.parent }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetParentYangName() string { return "implicit-acl" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit
// Implicit NDNA permit
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetFilter() yfilter.YFilter { return implicitNdnaPermit.YFilter }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) SetFilter(yf yfilter.YFilter) { implicitNdnaPermit.YFilter = yf }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetSegmentPath() string {
    return "implicit-ndna-permit"
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &implicitNdnaPermit.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range implicitNdnaPermit.AceDetail {
            if implicitNdnaPermit.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail{}
        implicitNdnaPermit.AceDetail = append(implicitNdnaPermit.AceDetail, child)
        return &implicitNdnaPermit.AceDetail[len(implicitNdnaPermit.AceDetail)-1]
    }
    return nil
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &implicitNdnaPermit.AceBrief
    for i := range implicitNdnaPermit.AceDetail {
        children[implicitNdnaPermit.AceDetail[i].GetSegmentPath()] = &implicitNdnaPermit.AceDetail[i]
    }
    return children
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetBundleName() string { return "cisco_ios_xr" }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetYangName() string { return "implicit-ndna-permit" }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) SetParent(parent types.Entity) { implicitNdnaPermit.parent = parent }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetParent() types.Entity { return implicitNdnaPermit.parent }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetParentYangName() string { return "common-acl-implicit" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetParentYangName() string { return "implicit-ndna-permit" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetParentYangName() string { return "implicit-ndna-permit" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit
// Implicit NDNS permit
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetFilter() yfilter.YFilter { return implicitNdnsPermit.YFilter }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) SetFilter(yf yfilter.YFilter) { implicitNdnsPermit.YFilter = yf }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetSegmentPath() string {
    return "implicit-ndns-permit"
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &implicitNdnsPermit.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range implicitNdnsPermit.AceDetail {
            if implicitNdnsPermit.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail{}
        implicitNdnsPermit.AceDetail = append(implicitNdnsPermit.AceDetail, child)
        return &implicitNdnsPermit.AceDetail[len(implicitNdnsPermit.AceDetail)-1]
    }
    return nil
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &implicitNdnsPermit.AceBrief
    for i := range implicitNdnsPermit.AceDetail {
        children[implicitNdnsPermit.AceDetail[i].GetSegmentPath()] = &implicitNdnsPermit.AceDetail[i]
    }
    return children
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetBundleName() string { return "cisco_ios_xr" }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetYangName() string { return "implicit-ndns-permit" }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) SetParent(parent types.Entity) { implicitNdnsPermit.parent = parent }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetParent() types.Entity { return implicitNdnsPermit.parent }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetParentYangName() string { return "common-acl-implicit" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetParentYangName() string { return "implicit-ndns-permit" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetParentYangName() string { return "implicit-ndns-permit" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny
// Implicit deny
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetFilter() yfilter.YFilter { return implicitDeny.YFilter }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) SetFilter(yf yfilter.YFilter) { implicitDeny.YFilter = yf }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetSegmentPath() string {
    return "implicit-deny"
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &implicitDeny.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range implicitDeny.AceDetail {
            if implicitDeny.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail{}
        implicitDeny.AceDetail = append(implicitDeny.AceDetail, child)
        return &implicitDeny.AceDetail[len(implicitDeny.AceDetail)-1]
    }
    return nil
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &implicitDeny.AceBrief
    for i := range implicitDeny.AceDetail {
        children[implicitDeny.AceDetail[i].GetSegmentPath()] = &implicitDeny.AceDetail[i]
    }
    return children
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetBundleName() string { return "cisco_ios_xr" }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetYangName() string { return "implicit-deny" }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) SetParent(parent types.Entity) { implicitDeny.parent = parent }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetParent() types.Entity { return implicitDeny.parent }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetParentYangName() string { return "common-acl-implicit" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetParentYangName() string { return "implicit-deny" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetParentYangName() string { return "implicit-deny" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit
// Interface ACL Implicit Entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Implicit NDNA permit.
    ImplicitNdnaPermit AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit

    // Implicit NDNS permit.
    ImplicitNdnsPermit AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit

    // Implicit deny.
    ImplicitDeny AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetFilter() yfilter.YFilter { return interfaceAclImplicit.YFilter }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) SetFilter(yf yfilter.YFilter) { interfaceAclImplicit.YFilter = yf }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetGoName(yname string) string {
    if yname == "implicit-ndna-permit" { return "ImplicitNdnaPermit" }
    if yname == "implicit-ndns-permit" { return "ImplicitNdnsPermit" }
    if yname == "implicit-deny" { return "ImplicitDeny" }
    return ""
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetSegmentPath() string {
    return "interface-acl-implicit"
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "implicit-ndna-permit" {
        return &interfaceAclImplicit.ImplicitNdnaPermit
    }
    if childYangName == "implicit-ndns-permit" {
        return &interfaceAclImplicit.ImplicitNdnsPermit
    }
    if childYangName == "implicit-deny" {
        return &interfaceAclImplicit.ImplicitDeny
    }
    return nil
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["implicit-ndna-permit"] = &interfaceAclImplicit.ImplicitNdnaPermit
    children["implicit-ndns-permit"] = &interfaceAclImplicit.ImplicitNdnsPermit
    children["implicit-deny"] = &interfaceAclImplicit.ImplicitDeny
    return children
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetYangName() string { return "interface-acl-implicit" }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) SetParent(parent types.Entity) { interfaceAclImplicit.parent = parent }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetParent() types.Entity { return interfaceAclImplicit.parent }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetParentYangName() string { return "implicit-acl" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit
// Implicit NDNA permit
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetFilter() yfilter.YFilter { return implicitNdnaPermit.YFilter }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) SetFilter(yf yfilter.YFilter) { implicitNdnaPermit.YFilter = yf }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetSegmentPath() string {
    return "implicit-ndna-permit"
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &implicitNdnaPermit.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range implicitNdnaPermit.AceDetail {
            if implicitNdnaPermit.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail{}
        implicitNdnaPermit.AceDetail = append(implicitNdnaPermit.AceDetail, child)
        return &implicitNdnaPermit.AceDetail[len(implicitNdnaPermit.AceDetail)-1]
    }
    return nil
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &implicitNdnaPermit.AceBrief
    for i := range implicitNdnaPermit.AceDetail {
        children[implicitNdnaPermit.AceDetail[i].GetSegmentPath()] = &implicitNdnaPermit.AceDetail[i]
    }
    return children
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetBundleName() string { return "cisco_ios_xr" }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetYangName() string { return "implicit-ndna-permit" }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) SetParent(parent types.Entity) { implicitNdnaPermit.parent = parent }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetParent() types.Entity { return implicitNdnaPermit.parent }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetParentYangName() string { return "interface-acl-implicit" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetParentYangName() string { return "implicit-ndna-permit" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetParentYangName() string { return "implicit-ndna-permit" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit
// Implicit NDNS permit
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetFilter() yfilter.YFilter { return implicitNdnsPermit.YFilter }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) SetFilter(yf yfilter.YFilter) { implicitNdnsPermit.YFilter = yf }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetSegmentPath() string {
    return "implicit-ndns-permit"
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &implicitNdnsPermit.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range implicitNdnsPermit.AceDetail {
            if implicitNdnsPermit.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail{}
        implicitNdnsPermit.AceDetail = append(implicitNdnsPermit.AceDetail, child)
        return &implicitNdnsPermit.AceDetail[len(implicitNdnsPermit.AceDetail)-1]
    }
    return nil
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &implicitNdnsPermit.AceBrief
    for i := range implicitNdnsPermit.AceDetail {
        children[implicitNdnsPermit.AceDetail[i].GetSegmentPath()] = &implicitNdnsPermit.AceDetail[i]
    }
    return children
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetBundleName() string { return "cisco_ios_xr" }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetYangName() string { return "implicit-ndns-permit" }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) SetParent(parent types.Entity) { implicitNdnsPermit.parent = parent }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetParent() types.Entity { return implicitNdnsPermit.parent }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetParentYangName() string { return "interface-acl-implicit" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetParentYangName() string { return "implicit-ndns-permit" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetParentYangName() string { return "implicit-ndns-permit" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny
// Implicit deny
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetFilter() yfilter.YFilter { return implicitDeny.YFilter }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) SetFilter(yf yfilter.YFilter) { implicitDeny.YFilter = yf }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetSegmentPath() string {
    return "implicit-deny"
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &implicitDeny.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range implicitDeny.AceDetail {
            if implicitDeny.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail{}
        implicitDeny.AceDetail = append(implicitDeny.AceDetail, child)
        return &implicitDeny.AceDetail[len(implicitDeny.AceDetail)-1]
    }
    return nil
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &implicitDeny.AceBrief
    for i := range implicitDeny.AceDetail {
        children[implicitDeny.AceDetail[i].GetSegmentPath()] = &implicitDeny.AceDetail[i]
    }
    return children
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetBundleName() string { return "cisco_ios_xr" }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetYangName() string { return "implicit-deny" }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) SetParent(parent types.Entity) { implicitDeny.parent = parent }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetParent() types.Entity { return implicitDeny.parent }

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetParentYangName() string { return "interface-acl-implicit" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetParentYangName() string { return "implicit-deny" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetParentYangName() string { return "implicit-deny" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails
// Table of all sequence numbers per ACL
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detail ACL information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail.
    SequenceDetail []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails) GetFilter() yfilter.YFilter { return sequenceDetails.YFilter }

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails) SetFilter(yf yfilter.YFilter) { sequenceDetails.YFilter = yf }

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails) GetGoName(yname string) string {
    if yname == "sequence-detail" { return "SequenceDetail" }
    return ""
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails) GetSegmentPath() string {
    return "sequence-details"
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sequence-detail" {
        for _, c := range sequenceDetails.SequenceDetail {
            if sequenceDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail{}
        sequenceDetails.SequenceDetail = append(sequenceDetails.SequenceDetail, child)
        return &sequenceDetails.SequenceDetail[len(sequenceDetails.SequenceDetail)-1]
    }
    return nil
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sequenceDetails.SequenceDetail {
        children[sequenceDetails.SequenceDetail[i].GetSegmentPath()] = &sequenceDetails.SequenceDetail[i]
    }
    return children
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails) GetBundleName() string { return "cisco_ios_xr" }

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails) GetYangName() string { return "sequence-details" }

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails) SetParent(parent types.Entity) { sequenceDetails.parent = parent }

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails) GetParent() types.Entity { return sequenceDetails.parent }

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails) GetParentYangName() string { return "access" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail
// Detail ACL information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Detail ACL information for a particular sequence.
    // The type is interface{} with range: -2147483648..2147483647.
    SequenceNumber interface{}

    // Common ACL detail information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail.
    CommonAclDetail []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail

    // Interface ACL detail information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail.
    InterfaceAclDetail []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) GetFilter() yfilter.YFilter { return sequenceDetail.YFilter }

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) SetFilter(yf yfilter.YFilter) { sequenceDetail.YFilter = yf }

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) GetGoName(yname string) string {
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "common-acl-detail" { return "CommonAclDetail" }
    if yname == "interface-acl-detail" { return "InterfaceAclDetail" }
    return ""
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) GetSegmentPath() string {
    return "sequence-detail" + "[sequence-number='" + fmt.Sprintf("%v", sequenceDetail.SequenceNumber) + "']"
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "common-acl-detail" {
        for _, c := range sequenceDetail.CommonAclDetail {
            if sequenceDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail{}
        sequenceDetail.CommonAclDetail = append(sequenceDetail.CommonAclDetail, child)
        return &sequenceDetail.CommonAclDetail[len(sequenceDetail.CommonAclDetail)-1]
    }
    if childYangName == "interface-acl-detail" {
        for _, c := range sequenceDetail.InterfaceAclDetail {
            if sequenceDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail{}
        sequenceDetail.InterfaceAclDetail = append(sequenceDetail.InterfaceAclDetail, child)
        return &sequenceDetail.InterfaceAclDetail[len(sequenceDetail.InterfaceAclDetail)-1]
    }
    return nil
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sequenceDetail.CommonAclDetail {
        children[sequenceDetail.CommonAclDetail[i].GetSegmentPath()] = &sequenceDetail.CommonAclDetail[i]
    }
    for i := range sequenceDetail.InterfaceAclDetail {
        children[sequenceDetail.InterfaceAclDetail[i].GetSegmentPath()] = &sequenceDetail.InterfaceAclDetail[i]
    }
    return children
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sequence-number"] = sequenceDetail.SequenceNumber
    return leafs
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) GetYangName() string { return "sequence-detail" }

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) SetParent(parent types.Entity) { sequenceDetail.parent = parent }

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) GetParent() types.Entity { return sequenceDetail.parent }

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) GetParentYangName() string { return "sequence-details" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail
// Common ACL detail information across Slices
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetFilter() yfilter.YFilter { return commonAclDetail.YFilter }

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) SetFilter(yf yfilter.YFilter) { commonAclDetail.YFilter = yf }

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetSegmentPath() string {
    return "common-acl-detail"
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &commonAclDetail.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range commonAclDetail.AceDetail {
            if commonAclDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail{}
        commonAclDetail.AceDetail = append(commonAclDetail.AceDetail, child)
        return &commonAclDetail.AceDetail[len(commonAclDetail.AceDetail)-1]
    }
    return nil
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &commonAclDetail.AceBrief
    for i := range commonAclDetail.AceDetail {
        children[commonAclDetail.AceDetail[i].GetSegmentPath()] = &commonAclDetail.AceDetail[i]
    }
    return children
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetBundleName() string { return "cisco_ios_xr" }

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetYangName() string { return "common-acl-detail" }

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) SetParent(parent types.Entity) { commonAclDetail.parent = parent }

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetParent() types.Entity { return commonAclDetail.parent }

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetParentYangName() string { return "sequence-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetParentYangName() string { return "common-acl-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetParentYangName() string { return "common-acl-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail
// Interface ACL detail information across Slices
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetFilter() yfilter.YFilter { return interfaceAclDetail.YFilter }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) SetFilter(yf yfilter.YFilter) { interfaceAclDetail.YFilter = yf }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetSegmentPath() string {
    return "interface-acl-detail"
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &interfaceAclDetail.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range interfaceAclDetail.AceDetail {
            if interfaceAclDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail{}
        interfaceAclDetail.AceDetail = append(interfaceAclDetail.AceDetail, child)
        return &interfaceAclDetail.AceDetail[len(interfaceAclDetail.AceDetail)-1]
    }
    return nil
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &interfaceAclDetail.AceBrief
    for i := range interfaceAclDetail.AceDetail {
        children[interfaceAclDetail.AceDetail[i].GetSegmentPath()] = &interfaceAclDetail.AceDetail[i]
    }
    return children
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetYangName() string { return "interface-acl-detail" }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) SetParent(parent types.Entity) { interfaceAclDetail.parent = parent }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetParent() types.Entity { return interfaceAclDetail.parent }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetParentYangName() string { return "sequence-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetParentYangName() string { return "interface-acl-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetParentYangName() string { return "interface-acl-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs
// Table of all sequence numbers per ACL
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detail ACL information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief.
    SequenceBrief []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs) GetFilter() yfilter.YFilter { return sequenceBriefs.YFilter }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs) SetFilter(yf yfilter.YFilter) { sequenceBriefs.YFilter = yf }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs) GetGoName(yname string) string {
    if yname == "sequence-brief" { return "SequenceBrief" }
    return ""
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs) GetSegmentPath() string {
    return "sequence-briefs"
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sequence-brief" {
        for _, c := range sequenceBriefs.SequenceBrief {
            if sequenceBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief{}
        sequenceBriefs.SequenceBrief = append(sequenceBriefs.SequenceBrief, child)
        return &sequenceBriefs.SequenceBrief[len(sequenceBriefs.SequenceBrief)-1]
    }
    return nil
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sequenceBriefs.SequenceBrief {
        children[sequenceBriefs.SequenceBrief[i].GetSegmentPath()] = &sequenceBriefs.SequenceBrief[i]
    }
    return children
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs) GetYangName() string { return "sequence-briefs" }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs) SetParent(parent types.Entity) { sequenceBriefs.parent = parent }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs) GetParent() types.Entity { return sequenceBriefs.parent }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs) GetParentYangName() string { return "access" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief
// Detail ACL information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Brief ACL information for a particular sequence.
    // The type is interface{} with range: -2147483648..2147483647.
    SequenceNumber interface{}

    // Common ACL information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl.
    CommonAcl []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl

    // Interface ACL information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl.
    InterfaceAcl []AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) GetFilter() yfilter.YFilter { return sequenceBrief.YFilter }

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) SetFilter(yf yfilter.YFilter) { sequenceBrief.YFilter = yf }

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) GetGoName(yname string) string {
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "common-acl" { return "CommonAcl" }
    if yname == "interface-acl" { return "InterfaceAcl" }
    return ""
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) GetSegmentPath() string {
    return "sequence-brief" + "[sequence-number='" + fmt.Sprintf("%v", sequenceBrief.SequenceNumber) + "']"
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "common-acl" {
        for _, c := range sequenceBrief.CommonAcl {
            if sequenceBrief.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl{}
        sequenceBrief.CommonAcl = append(sequenceBrief.CommonAcl, child)
        return &sequenceBrief.CommonAcl[len(sequenceBrief.CommonAcl)-1]
    }
    if childYangName == "interface-acl" {
        for _, c := range sequenceBrief.InterfaceAcl {
            if sequenceBrief.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl{}
        sequenceBrief.InterfaceAcl = append(sequenceBrief.InterfaceAcl, child)
        return &sequenceBrief.InterfaceAcl[len(sequenceBrief.InterfaceAcl)-1]
    }
    return nil
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sequenceBrief.CommonAcl {
        children[sequenceBrief.CommonAcl[i].GetSegmentPath()] = &sequenceBrief.CommonAcl[i]
    }
    for i := range sequenceBrief.InterfaceAcl {
        children[sequenceBrief.InterfaceAcl[i].GetSegmentPath()] = &sequenceBrief.InterfaceAcl[i]
    }
    return children
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sequence-number"] = sequenceBrief.SequenceNumber
    return leafs
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) GetYangName() string { return "sequence-brief" }

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) SetParent(parent types.Entity) { sequenceBrief.parent = parent }

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) GetParent() types.Entity { return sequenceBrief.parent }

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) GetParentYangName() string { return "sequence-briefs" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl
// Common ACL information across Slices
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress
}

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetFilter() yfilter.YFilter { return commonAcl.YFilter }

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) SetFilter(yf yfilter.YFilter) { commonAcl.YFilter = yf }

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetSegmentPath() string {
    return "common-acl"
}

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &commonAcl.NextHopAddress
    }
    return nil
}

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &commonAcl.NextHopAddress
    return children
}

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = commonAcl.Grant
    leafs["logging-enabled"] = commonAcl.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = commonAcl.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = commonAcl.NextHopEnabled
    leafs["default-next-hop-enabled"] = commonAcl.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = commonAcl.TotalTcamEntries
    leafs["hits"] = commonAcl.Hits
    leafs["npu-id"] = commonAcl.NpuId
    return leafs
}

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetBundleName() string { return "cisco_ios_xr" }

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetYangName() string { return "common-acl" }

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) SetParent(parent types.Entity) { commonAcl.parent = parent }

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetParent() types.Entity { return commonAcl.parent }

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetParentYangName() string { return "sequence-brief" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetParentYangName() string { return "common-acl" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl
// Interface ACL information across Slices
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetFilter() yfilter.YFilter { return interfaceAcl.YFilter }

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) SetFilter(yf yfilter.YFilter) { interfaceAcl.YFilter = yf }

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetSegmentPath() string {
    return "interface-acl"
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &interfaceAcl.NextHopAddress
    }
    return nil
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &interfaceAcl.NextHopAddress
    return children
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = interfaceAcl.Grant
    leafs["logging-enabled"] = interfaceAcl.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = interfaceAcl.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = interfaceAcl.NextHopEnabled
    leafs["default-next-hop-enabled"] = interfaceAcl.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = interfaceAcl.TotalTcamEntries
    leafs["hits"] = interfaceAcl.Hits
    leafs["npu-id"] = interfaceAcl.NpuId
    return leafs
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetYangName() string { return "interface-acl" }

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) SetParent(parent types.Entity) { interfaceAcl.parent = parent }

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetParent() types.Entity { return interfaceAcl.parent }

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetParentYangName() string { return "sequence-brief" }

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetParentYangName() string { return "interface-acl" }

// AccessListHardware_Nodes_Node_Ingress
// Accesslist direction ingress
type AccessListHardware_Nodes_Node_Ingress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Accesslist version IPv4.
    Ipv4 AccessListHardware_Nodes_Node_Ingress_Ipv4

    // Accesslist version IPv6.
    Ipv6 AccessListHardware_Nodes_Node_Ingress_Ipv6
}

func (ingress *AccessListHardware_Nodes_Node_Ingress) GetFilter() yfilter.YFilter { return ingress.YFilter }

func (ingress *AccessListHardware_Nodes_Node_Ingress) SetFilter(yf yfilter.YFilter) { ingress.YFilter = yf }

func (ingress *AccessListHardware_Nodes_Node_Ingress) GetGoName(yname string) string {
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (ingress *AccessListHardware_Nodes_Node_Ingress) GetSegmentPath() string {
    return "ingress"
}

func (ingress *AccessListHardware_Nodes_Node_Ingress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4" {
        return &ingress.Ipv4
    }
    if childYangName == "ipv6" {
        return &ingress.Ipv6
    }
    return nil
}

func (ingress *AccessListHardware_Nodes_Node_Ingress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4"] = &ingress.Ipv4
    children["ipv6"] = &ingress.Ipv6
    return children
}

func (ingress *AccessListHardware_Nodes_Node_Ingress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ingress *AccessListHardware_Nodes_Node_Ingress) GetBundleName() string { return "cisco_ios_xr" }

func (ingress *AccessListHardware_Nodes_Node_Ingress) GetYangName() string { return "ingress" }

func (ingress *AccessListHardware_Nodes_Node_Ingress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ingress *AccessListHardware_Nodes_Node_Ingress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ingress *AccessListHardware_Nodes_Node_Ingress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ingress *AccessListHardware_Nodes_Node_Ingress) SetParent(parent types.Entity) { ingress.parent = parent }

func (ingress *AccessListHardware_Nodes_Node_Ingress) GetParent() types.Entity { return ingress.parent }

func (ingress *AccessListHardware_Nodes_Node_Ingress) GetParentYangName() string { return "node" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4
// Accesslist version IPv4
type AccessListHardware_Nodes_Node_Ingress_Ipv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table for access lists.
    Accesses AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses
}

func (ipv4 *AccessListHardware_Nodes_Node_Ingress_Ipv4) GetFilter() yfilter.YFilter { return ipv4.YFilter }

func (ipv4 *AccessListHardware_Nodes_Node_Ingress_Ipv4) SetFilter(yf yfilter.YFilter) { ipv4.YFilter = yf }

func (ipv4 *AccessListHardware_Nodes_Node_Ingress_Ipv4) GetGoName(yname string) string {
    if yname == "accesses" { return "Accesses" }
    return ""
}

func (ipv4 *AccessListHardware_Nodes_Node_Ingress_Ipv4) GetSegmentPath() string {
    return "ipv4"
}

func (ipv4 *AccessListHardware_Nodes_Node_Ingress_Ipv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "accesses" {
        return &ipv4.Accesses
    }
    return nil
}

func (ipv4 *AccessListHardware_Nodes_Node_Ingress_Ipv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["accesses"] = &ipv4.Accesses
    return children
}

func (ipv4 *AccessListHardware_Nodes_Node_Ingress_Ipv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4 *AccessListHardware_Nodes_Node_Ingress_Ipv4) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4 *AccessListHardware_Nodes_Node_Ingress_Ipv4) GetYangName() string { return "ipv4" }

func (ipv4 *AccessListHardware_Nodes_Node_Ingress_Ipv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4 *AccessListHardware_Nodes_Node_Ingress_Ipv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4 *AccessListHardware_Nodes_Node_Ingress_Ipv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4 *AccessListHardware_Nodes_Node_Ingress_Ipv4) SetParent(parent types.Entity) { ipv4.parent = parent }

func (ipv4 *AccessListHardware_Nodes_Node_Ingress_Ipv4) GetParent() types.Entity { return ipv4.parent }

func (ipv4 *AccessListHardware_Nodes_Node_Ingress_Ipv4) GetParentYangName() string { return "ingress" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses
// Table for access lists
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // List of ACLs. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access.
    Access []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access
}

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses) GetFilter() yfilter.YFilter { return accesses.YFilter }

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses) SetFilter(yf yfilter.YFilter) { accesses.YFilter = yf }

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses) GetGoName(yname string) string {
    if yname == "access" { return "Access" }
    return ""
}

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses) GetSegmentPath() string {
    return "accesses"
}

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "access" {
        for _, c := range accesses.Access {
            if accesses.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access{}
        accesses.Access = append(accesses.Access, child)
        return &accesses.Access[len(accesses.Access)-1]
    }
    return nil
}

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range accesses.Access {
        children[accesses.Access[i].GetSegmentPath()] = &accesses.Access[i]
    }
    return children
}

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses) GetBundleName() string { return "cisco_ios_xr" }

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses) GetYangName() string { return "accesses" }

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses) SetParent(parent types.Entity) { accesses.parent = parent }

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses) GetParent() types.Entity { return accesses.parent }

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses) GetParentYangName() string { return "ipv4" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access
// List of ACLs
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the access list. The type is string.
    AccessListName interface{}

    // Implicit ACL information.
    Implicit AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit

    // Table of all sequence numbers per ACL.
    SequenceDetails AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails

    // Table of all sequence numbers per ACL.
    SequenceBriefs AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs
}

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access) GetFilter() yfilter.YFilter { return access.YFilter }

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access) SetFilter(yf yfilter.YFilter) { access.YFilter = yf }

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access) GetGoName(yname string) string {
    if yname == "access-list-name" { return "AccessListName" }
    if yname == "implicit" { return "Implicit" }
    if yname == "sequence-details" { return "SequenceDetails" }
    if yname == "sequence-briefs" { return "SequenceBriefs" }
    return ""
}

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access) GetSegmentPath() string {
    return "access" + "[access-list-name='" + fmt.Sprintf("%v", access.AccessListName) + "']"
}

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "implicit" {
        return &access.Implicit
    }
    if childYangName == "sequence-details" {
        return &access.SequenceDetails
    }
    if childYangName == "sequence-briefs" {
        return &access.SequenceBriefs
    }
    return nil
}

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["implicit"] = &access.Implicit
    children["sequence-details"] = &access.SequenceDetails
    children["sequence-briefs"] = &access.SequenceBriefs
    return children
}

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["access-list-name"] = access.AccessListName
    return leafs
}

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access) GetBundleName() string { return "cisco_ios_xr" }

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access) GetYangName() string { return "access" }

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access) SetParent(parent types.Entity) { access.parent = parent }

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access) GetParent() types.Entity { return access.parent }

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access) GetParentYangName() string { return "accesses" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit
// Implicit ACL information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Implicit ACL Entries across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl.
    ImplicitAcl []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl
}

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit) GetFilter() yfilter.YFilter { return implicit.YFilter }

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit) SetFilter(yf yfilter.YFilter) { implicit.YFilter = yf }

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit) GetGoName(yname string) string {
    if yname == "implicit-acl" { return "ImplicitAcl" }
    return ""
}

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit) GetSegmentPath() string {
    return "implicit"
}

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "implicit-acl" {
        for _, c := range implicit.ImplicitAcl {
            if implicit.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl{}
        implicit.ImplicitAcl = append(implicit.ImplicitAcl, child)
        return &implicit.ImplicitAcl[len(implicit.ImplicitAcl)-1]
    }
    return nil
}

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range implicit.ImplicitAcl {
        children[implicit.ImplicitAcl[i].GetSegmentPath()] = &implicit.ImplicitAcl[i]
    }
    return children
}

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit) GetBundleName() string { return "cisco_ios_xr" }

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit) GetYangName() string { return "implicit" }

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit) SetParent(parent types.Entity) { implicit.parent = parent }

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit) GetParent() types.Entity { return implicit.parent }

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit) GetParentYangName() string { return "access" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl
// Implicit ACL Entries across Slices
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Common ACL Implicit Entries.
    CommonAclImplicit AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit

    // Interface ACL Implicit Entries.
    InterfaceAclImplicit AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit
}

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) GetFilter() yfilter.YFilter { return implicitAcl.YFilter }

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) SetFilter(yf yfilter.YFilter) { implicitAcl.YFilter = yf }

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) GetGoName(yname string) string {
    if yname == "common-acl-implicit" { return "CommonAclImplicit" }
    if yname == "interface-acl-implicit" { return "InterfaceAclImplicit" }
    return ""
}

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) GetSegmentPath() string {
    return "implicit-acl"
}

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "common-acl-implicit" {
        return &implicitAcl.CommonAclImplicit
    }
    if childYangName == "interface-acl-implicit" {
        return &implicitAcl.InterfaceAclImplicit
    }
    return nil
}

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["common-acl-implicit"] = &implicitAcl.CommonAclImplicit
    children["interface-acl-implicit"] = &implicitAcl.InterfaceAclImplicit
    return children
}

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) GetBundleName() string { return "cisco_ios_xr" }

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) GetYangName() string { return "implicit-acl" }

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) SetParent(parent types.Entity) { implicitAcl.parent = parent }

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) GetParent() types.Entity { return implicitAcl.parent }

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) GetParentYangName() string { return "implicit" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit
// Common ACL Implicit Entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Implicit NDNA permit.
    ImplicitNdnaPermit AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit

    // Implicit NDNS permit.
    ImplicitNdnsPermit AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit

    // Implicit deny.
    ImplicitDeny AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetFilter() yfilter.YFilter { return commonAclImplicit.YFilter }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) SetFilter(yf yfilter.YFilter) { commonAclImplicit.YFilter = yf }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetGoName(yname string) string {
    if yname == "implicit-ndna-permit" { return "ImplicitNdnaPermit" }
    if yname == "implicit-ndns-permit" { return "ImplicitNdnsPermit" }
    if yname == "implicit-deny" { return "ImplicitDeny" }
    return ""
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetSegmentPath() string {
    return "common-acl-implicit"
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "implicit-ndna-permit" {
        return &commonAclImplicit.ImplicitNdnaPermit
    }
    if childYangName == "implicit-ndns-permit" {
        return &commonAclImplicit.ImplicitNdnsPermit
    }
    if childYangName == "implicit-deny" {
        return &commonAclImplicit.ImplicitDeny
    }
    return nil
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["implicit-ndna-permit"] = &commonAclImplicit.ImplicitNdnaPermit
    children["implicit-ndns-permit"] = &commonAclImplicit.ImplicitNdnsPermit
    children["implicit-deny"] = &commonAclImplicit.ImplicitDeny
    return children
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetBundleName() string { return "cisco_ios_xr" }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetYangName() string { return "common-acl-implicit" }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) SetParent(parent types.Entity) { commonAclImplicit.parent = parent }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetParent() types.Entity { return commonAclImplicit.parent }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetParentYangName() string { return "implicit-acl" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit
// Implicit NDNA permit
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetFilter() yfilter.YFilter { return implicitNdnaPermit.YFilter }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) SetFilter(yf yfilter.YFilter) { implicitNdnaPermit.YFilter = yf }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetSegmentPath() string {
    return "implicit-ndna-permit"
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &implicitNdnaPermit.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range implicitNdnaPermit.AceDetail {
            if implicitNdnaPermit.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail{}
        implicitNdnaPermit.AceDetail = append(implicitNdnaPermit.AceDetail, child)
        return &implicitNdnaPermit.AceDetail[len(implicitNdnaPermit.AceDetail)-1]
    }
    return nil
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &implicitNdnaPermit.AceBrief
    for i := range implicitNdnaPermit.AceDetail {
        children[implicitNdnaPermit.AceDetail[i].GetSegmentPath()] = &implicitNdnaPermit.AceDetail[i]
    }
    return children
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetBundleName() string { return "cisco_ios_xr" }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetYangName() string { return "implicit-ndna-permit" }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) SetParent(parent types.Entity) { implicitNdnaPermit.parent = parent }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetParent() types.Entity { return implicitNdnaPermit.parent }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetParentYangName() string { return "common-acl-implicit" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetParentYangName() string { return "implicit-ndna-permit" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetParentYangName() string { return "implicit-ndna-permit" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit
// Implicit NDNS permit
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetFilter() yfilter.YFilter { return implicitNdnsPermit.YFilter }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) SetFilter(yf yfilter.YFilter) { implicitNdnsPermit.YFilter = yf }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetSegmentPath() string {
    return "implicit-ndns-permit"
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &implicitNdnsPermit.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range implicitNdnsPermit.AceDetail {
            if implicitNdnsPermit.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail{}
        implicitNdnsPermit.AceDetail = append(implicitNdnsPermit.AceDetail, child)
        return &implicitNdnsPermit.AceDetail[len(implicitNdnsPermit.AceDetail)-1]
    }
    return nil
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &implicitNdnsPermit.AceBrief
    for i := range implicitNdnsPermit.AceDetail {
        children[implicitNdnsPermit.AceDetail[i].GetSegmentPath()] = &implicitNdnsPermit.AceDetail[i]
    }
    return children
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetBundleName() string { return "cisco_ios_xr" }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetYangName() string { return "implicit-ndns-permit" }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) SetParent(parent types.Entity) { implicitNdnsPermit.parent = parent }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetParent() types.Entity { return implicitNdnsPermit.parent }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetParentYangName() string { return "common-acl-implicit" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetParentYangName() string { return "implicit-ndns-permit" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetParentYangName() string { return "implicit-ndns-permit" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny
// Implicit deny
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetFilter() yfilter.YFilter { return implicitDeny.YFilter }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) SetFilter(yf yfilter.YFilter) { implicitDeny.YFilter = yf }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetSegmentPath() string {
    return "implicit-deny"
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &implicitDeny.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range implicitDeny.AceDetail {
            if implicitDeny.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail{}
        implicitDeny.AceDetail = append(implicitDeny.AceDetail, child)
        return &implicitDeny.AceDetail[len(implicitDeny.AceDetail)-1]
    }
    return nil
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &implicitDeny.AceBrief
    for i := range implicitDeny.AceDetail {
        children[implicitDeny.AceDetail[i].GetSegmentPath()] = &implicitDeny.AceDetail[i]
    }
    return children
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetBundleName() string { return "cisco_ios_xr" }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetYangName() string { return "implicit-deny" }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) SetParent(parent types.Entity) { implicitDeny.parent = parent }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetParent() types.Entity { return implicitDeny.parent }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetParentYangName() string { return "common-acl-implicit" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetParentYangName() string { return "implicit-deny" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetParentYangName() string { return "implicit-deny" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit
// Interface ACL Implicit Entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Implicit NDNA permit.
    ImplicitNdnaPermit AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit

    // Implicit NDNS permit.
    ImplicitNdnsPermit AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit

    // Implicit deny.
    ImplicitDeny AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetFilter() yfilter.YFilter { return interfaceAclImplicit.YFilter }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) SetFilter(yf yfilter.YFilter) { interfaceAclImplicit.YFilter = yf }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetGoName(yname string) string {
    if yname == "implicit-ndna-permit" { return "ImplicitNdnaPermit" }
    if yname == "implicit-ndns-permit" { return "ImplicitNdnsPermit" }
    if yname == "implicit-deny" { return "ImplicitDeny" }
    return ""
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetSegmentPath() string {
    return "interface-acl-implicit"
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "implicit-ndna-permit" {
        return &interfaceAclImplicit.ImplicitNdnaPermit
    }
    if childYangName == "implicit-ndns-permit" {
        return &interfaceAclImplicit.ImplicitNdnsPermit
    }
    if childYangName == "implicit-deny" {
        return &interfaceAclImplicit.ImplicitDeny
    }
    return nil
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["implicit-ndna-permit"] = &interfaceAclImplicit.ImplicitNdnaPermit
    children["implicit-ndns-permit"] = &interfaceAclImplicit.ImplicitNdnsPermit
    children["implicit-deny"] = &interfaceAclImplicit.ImplicitDeny
    return children
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetYangName() string { return "interface-acl-implicit" }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) SetParent(parent types.Entity) { interfaceAclImplicit.parent = parent }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetParent() types.Entity { return interfaceAclImplicit.parent }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetParentYangName() string { return "implicit-acl" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit
// Implicit NDNA permit
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetFilter() yfilter.YFilter { return implicitNdnaPermit.YFilter }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) SetFilter(yf yfilter.YFilter) { implicitNdnaPermit.YFilter = yf }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetSegmentPath() string {
    return "implicit-ndna-permit"
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &implicitNdnaPermit.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range implicitNdnaPermit.AceDetail {
            if implicitNdnaPermit.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail{}
        implicitNdnaPermit.AceDetail = append(implicitNdnaPermit.AceDetail, child)
        return &implicitNdnaPermit.AceDetail[len(implicitNdnaPermit.AceDetail)-1]
    }
    return nil
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &implicitNdnaPermit.AceBrief
    for i := range implicitNdnaPermit.AceDetail {
        children[implicitNdnaPermit.AceDetail[i].GetSegmentPath()] = &implicitNdnaPermit.AceDetail[i]
    }
    return children
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetBundleName() string { return "cisco_ios_xr" }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetYangName() string { return "implicit-ndna-permit" }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) SetParent(parent types.Entity) { implicitNdnaPermit.parent = parent }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetParent() types.Entity { return implicitNdnaPermit.parent }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetParentYangName() string { return "interface-acl-implicit" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetParentYangName() string { return "implicit-ndna-permit" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetParentYangName() string { return "implicit-ndna-permit" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit
// Implicit NDNS permit
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetFilter() yfilter.YFilter { return implicitNdnsPermit.YFilter }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) SetFilter(yf yfilter.YFilter) { implicitNdnsPermit.YFilter = yf }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetSegmentPath() string {
    return "implicit-ndns-permit"
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &implicitNdnsPermit.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range implicitNdnsPermit.AceDetail {
            if implicitNdnsPermit.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail{}
        implicitNdnsPermit.AceDetail = append(implicitNdnsPermit.AceDetail, child)
        return &implicitNdnsPermit.AceDetail[len(implicitNdnsPermit.AceDetail)-1]
    }
    return nil
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &implicitNdnsPermit.AceBrief
    for i := range implicitNdnsPermit.AceDetail {
        children[implicitNdnsPermit.AceDetail[i].GetSegmentPath()] = &implicitNdnsPermit.AceDetail[i]
    }
    return children
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetBundleName() string { return "cisco_ios_xr" }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetYangName() string { return "implicit-ndns-permit" }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) SetParent(parent types.Entity) { implicitNdnsPermit.parent = parent }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetParent() types.Entity { return implicitNdnsPermit.parent }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetParentYangName() string { return "interface-acl-implicit" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetParentYangName() string { return "implicit-ndns-permit" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetParentYangName() string { return "implicit-ndns-permit" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny
// Implicit deny
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetFilter() yfilter.YFilter { return implicitDeny.YFilter }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) SetFilter(yf yfilter.YFilter) { implicitDeny.YFilter = yf }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetSegmentPath() string {
    return "implicit-deny"
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &implicitDeny.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range implicitDeny.AceDetail {
            if implicitDeny.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail{}
        implicitDeny.AceDetail = append(implicitDeny.AceDetail, child)
        return &implicitDeny.AceDetail[len(implicitDeny.AceDetail)-1]
    }
    return nil
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &implicitDeny.AceBrief
    for i := range implicitDeny.AceDetail {
        children[implicitDeny.AceDetail[i].GetSegmentPath()] = &implicitDeny.AceDetail[i]
    }
    return children
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetBundleName() string { return "cisco_ios_xr" }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetYangName() string { return "implicit-deny" }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) SetParent(parent types.Entity) { implicitDeny.parent = parent }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetParent() types.Entity { return implicitDeny.parent }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetParentYangName() string { return "interface-acl-implicit" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetParentYangName() string { return "implicit-deny" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetParentYangName() string { return "implicit-deny" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails
// Table of all sequence numbers per ACL
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detail ACL information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail.
    SequenceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails) GetFilter() yfilter.YFilter { return sequenceDetails.YFilter }

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails) SetFilter(yf yfilter.YFilter) { sequenceDetails.YFilter = yf }

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails) GetGoName(yname string) string {
    if yname == "sequence-detail" { return "SequenceDetail" }
    return ""
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails) GetSegmentPath() string {
    return "sequence-details"
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sequence-detail" {
        for _, c := range sequenceDetails.SequenceDetail {
            if sequenceDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail{}
        sequenceDetails.SequenceDetail = append(sequenceDetails.SequenceDetail, child)
        return &sequenceDetails.SequenceDetail[len(sequenceDetails.SequenceDetail)-1]
    }
    return nil
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sequenceDetails.SequenceDetail {
        children[sequenceDetails.SequenceDetail[i].GetSegmentPath()] = &sequenceDetails.SequenceDetail[i]
    }
    return children
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails) GetBundleName() string { return "cisco_ios_xr" }

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails) GetYangName() string { return "sequence-details" }

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails) SetParent(parent types.Entity) { sequenceDetails.parent = parent }

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails) GetParent() types.Entity { return sequenceDetails.parent }

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails) GetParentYangName() string { return "access" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail
// Detail ACL information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Detail ACL information for a particular sequence.
    // The type is interface{} with range: -2147483648..2147483647.
    SequenceNumber interface{}

    // Common ACL detail information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail.
    CommonAclDetail []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail

    // Interface ACL detail information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail.
    InterfaceAclDetail []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) GetFilter() yfilter.YFilter { return sequenceDetail.YFilter }

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) SetFilter(yf yfilter.YFilter) { sequenceDetail.YFilter = yf }

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) GetGoName(yname string) string {
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "common-acl-detail" { return "CommonAclDetail" }
    if yname == "interface-acl-detail" { return "InterfaceAclDetail" }
    return ""
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) GetSegmentPath() string {
    return "sequence-detail" + "[sequence-number='" + fmt.Sprintf("%v", sequenceDetail.SequenceNumber) + "']"
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "common-acl-detail" {
        for _, c := range sequenceDetail.CommonAclDetail {
            if sequenceDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail{}
        sequenceDetail.CommonAclDetail = append(sequenceDetail.CommonAclDetail, child)
        return &sequenceDetail.CommonAclDetail[len(sequenceDetail.CommonAclDetail)-1]
    }
    if childYangName == "interface-acl-detail" {
        for _, c := range sequenceDetail.InterfaceAclDetail {
            if sequenceDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail{}
        sequenceDetail.InterfaceAclDetail = append(sequenceDetail.InterfaceAclDetail, child)
        return &sequenceDetail.InterfaceAclDetail[len(sequenceDetail.InterfaceAclDetail)-1]
    }
    return nil
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sequenceDetail.CommonAclDetail {
        children[sequenceDetail.CommonAclDetail[i].GetSegmentPath()] = &sequenceDetail.CommonAclDetail[i]
    }
    for i := range sequenceDetail.InterfaceAclDetail {
        children[sequenceDetail.InterfaceAclDetail[i].GetSegmentPath()] = &sequenceDetail.InterfaceAclDetail[i]
    }
    return children
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sequence-number"] = sequenceDetail.SequenceNumber
    return leafs
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) GetYangName() string { return "sequence-detail" }

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) SetParent(parent types.Entity) { sequenceDetail.parent = parent }

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) GetParent() types.Entity { return sequenceDetail.parent }

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) GetParentYangName() string { return "sequence-details" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail
// Common ACL detail information across Slices
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetFilter() yfilter.YFilter { return commonAclDetail.YFilter }

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) SetFilter(yf yfilter.YFilter) { commonAclDetail.YFilter = yf }

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetSegmentPath() string {
    return "common-acl-detail"
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &commonAclDetail.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range commonAclDetail.AceDetail {
            if commonAclDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail{}
        commonAclDetail.AceDetail = append(commonAclDetail.AceDetail, child)
        return &commonAclDetail.AceDetail[len(commonAclDetail.AceDetail)-1]
    }
    return nil
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &commonAclDetail.AceBrief
    for i := range commonAclDetail.AceDetail {
        children[commonAclDetail.AceDetail[i].GetSegmentPath()] = &commonAclDetail.AceDetail[i]
    }
    return children
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetBundleName() string { return "cisco_ios_xr" }

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetYangName() string { return "common-acl-detail" }

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) SetParent(parent types.Entity) { commonAclDetail.parent = parent }

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetParent() types.Entity { return commonAclDetail.parent }

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetParentYangName() string { return "sequence-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetParentYangName() string { return "common-acl-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetParentYangName() string { return "common-acl-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail
// Interface ACL detail information across Slices
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetFilter() yfilter.YFilter { return interfaceAclDetail.YFilter }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) SetFilter(yf yfilter.YFilter) { interfaceAclDetail.YFilter = yf }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetSegmentPath() string {
    return "interface-acl-detail"
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &interfaceAclDetail.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range interfaceAclDetail.AceDetail {
            if interfaceAclDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail{}
        interfaceAclDetail.AceDetail = append(interfaceAclDetail.AceDetail, child)
        return &interfaceAclDetail.AceDetail[len(interfaceAclDetail.AceDetail)-1]
    }
    return nil
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &interfaceAclDetail.AceBrief
    for i := range interfaceAclDetail.AceDetail {
        children[interfaceAclDetail.AceDetail[i].GetSegmentPath()] = &interfaceAclDetail.AceDetail[i]
    }
    return children
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetYangName() string { return "interface-acl-detail" }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) SetParent(parent types.Entity) { interfaceAclDetail.parent = parent }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetParent() types.Entity { return interfaceAclDetail.parent }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetParentYangName() string { return "sequence-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetParentYangName() string { return "interface-acl-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetParentYangName() string { return "interface-acl-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs
// Table of all sequence numbers per ACL
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detail ACL information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief.
    SequenceBrief []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs) GetFilter() yfilter.YFilter { return sequenceBriefs.YFilter }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs) SetFilter(yf yfilter.YFilter) { sequenceBriefs.YFilter = yf }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs) GetGoName(yname string) string {
    if yname == "sequence-brief" { return "SequenceBrief" }
    return ""
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs) GetSegmentPath() string {
    return "sequence-briefs"
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sequence-brief" {
        for _, c := range sequenceBriefs.SequenceBrief {
            if sequenceBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief{}
        sequenceBriefs.SequenceBrief = append(sequenceBriefs.SequenceBrief, child)
        return &sequenceBriefs.SequenceBrief[len(sequenceBriefs.SequenceBrief)-1]
    }
    return nil
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sequenceBriefs.SequenceBrief {
        children[sequenceBriefs.SequenceBrief[i].GetSegmentPath()] = &sequenceBriefs.SequenceBrief[i]
    }
    return children
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs) GetYangName() string { return "sequence-briefs" }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs) SetParent(parent types.Entity) { sequenceBriefs.parent = parent }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs) GetParent() types.Entity { return sequenceBriefs.parent }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs) GetParentYangName() string { return "access" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief
// Detail ACL information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Brief ACL information for a particular sequence.
    // The type is interface{} with range: -2147483648..2147483647.
    SequenceNumber interface{}

    // Common ACL information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl.
    CommonAcl []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl

    // Interface ACL information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl.
    InterfaceAcl []AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) GetFilter() yfilter.YFilter { return sequenceBrief.YFilter }

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) SetFilter(yf yfilter.YFilter) { sequenceBrief.YFilter = yf }

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) GetGoName(yname string) string {
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "common-acl" { return "CommonAcl" }
    if yname == "interface-acl" { return "InterfaceAcl" }
    return ""
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) GetSegmentPath() string {
    return "sequence-brief" + "[sequence-number='" + fmt.Sprintf("%v", sequenceBrief.SequenceNumber) + "']"
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "common-acl" {
        for _, c := range sequenceBrief.CommonAcl {
            if sequenceBrief.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl{}
        sequenceBrief.CommonAcl = append(sequenceBrief.CommonAcl, child)
        return &sequenceBrief.CommonAcl[len(sequenceBrief.CommonAcl)-1]
    }
    if childYangName == "interface-acl" {
        for _, c := range sequenceBrief.InterfaceAcl {
            if sequenceBrief.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl{}
        sequenceBrief.InterfaceAcl = append(sequenceBrief.InterfaceAcl, child)
        return &sequenceBrief.InterfaceAcl[len(sequenceBrief.InterfaceAcl)-1]
    }
    return nil
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sequenceBrief.CommonAcl {
        children[sequenceBrief.CommonAcl[i].GetSegmentPath()] = &sequenceBrief.CommonAcl[i]
    }
    for i := range sequenceBrief.InterfaceAcl {
        children[sequenceBrief.InterfaceAcl[i].GetSegmentPath()] = &sequenceBrief.InterfaceAcl[i]
    }
    return children
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sequence-number"] = sequenceBrief.SequenceNumber
    return leafs
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) GetYangName() string { return "sequence-brief" }

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) SetParent(parent types.Entity) { sequenceBrief.parent = parent }

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) GetParent() types.Entity { return sequenceBrief.parent }

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) GetParentYangName() string { return "sequence-briefs" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl
// Common ACL information across Slices
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress
}

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetFilter() yfilter.YFilter { return commonAcl.YFilter }

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) SetFilter(yf yfilter.YFilter) { commonAcl.YFilter = yf }

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetSegmentPath() string {
    return "common-acl"
}

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &commonAcl.NextHopAddress
    }
    return nil
}

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &commonAcl.NextHopAddress
    return children
}

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = commonAcl.Grant
    leafs["logging-enabled"] = commonAcl.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = commonAcl.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = commonAcl.NextHopEnabled
    leafs["default-next-hop-enabled"] = commonAcl.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = commonAcl.TotalTcamEntries
    leafs["hits"] = commonAcl.Hits
    leafs["npu-id"] = commonAcl.NpuId
    return leafs
}

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetBundleName() string { return "cisco_ios_xr" }

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetYangName() string { return "common-acl" }

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) SetParent(parent types.Entity) { commonAcl.parent = parent }

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetParent() types.Entity { return commonAcl.parent }

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetParentYangName() string { return "sequence-brief" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetParentYangName() string { return "common-acl" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl
// Interface ACL information across Slices
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetFilter() yfilter.YFilter { return interfaceAcl.YFilter }

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) SetFilter(yf yfilter.YFilter) { interfaceAcl.YFilter = yf }

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetSegmentPath() string {
    return "interface-acl"
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &interfaceAcl.NextHopAddress
    }
    return nil
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &interfaceAcl.NextHopAddress
    return children
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = interfaceAcl.Grant
    leafs["logging-enabled"] = interfaceAcl.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = interfaceAcl.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = interfaceAcl.NextHopEnabled
    leafs["default-next-hop-enabled"] = interfaceAcl.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = interfaceAcl.TotalTcamEntries
    leafs["hits"] = interfaceAcl.Hits
    leafs["npu-id"] = interfaceAcl.NpuId
    return leafs
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetYangName() string { return "interface-acl" }

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) SetParent(parent types.Entity) { interfaceAcl.parent = parent }

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetParent() types.Entity { return interfaceAcl.parent }

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetParentYangName() string { return "sequence-brief" }

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetParentYangName() string { return "interface-acl" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6
// Accesslist version IPv6
type AccessListHardware_Nodes_Node_Ingress_Ipv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table for access lists.
    Accesses AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses
}

func (ipv6 *AccessListHardware_Nodes_Node_Ingress_Ipv6) GetFilter() yfilter.YFilter { return ipv6.YFilter }

func (ipv6 *AccessListHardware_Nodes_Node_Ingress_Ipv6) SetFilter(yf yfilter.YFilter) { ipv6.YFilter = yf }

func (ipv6 *AccessListHardware_Nodes_Node_Ingress_Ipv6) GetGoName(yname string) string {
    if yname == "accesses" { return "Accesses" }
    return ""
}

func (ipv6 *AccessListHardware_Nodes_Node_Ingress_Ipv6) GetSegmentPath() string {
    return "ipv6"
}

func (ipv6 *AccessListHardware_Nodes_Node_Ingress_Ipv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "accesses" {
        return &ipv6.Accesses
    }
    return nil
}

func (ipv6 *AccessListHardware_Nodes_Node_Ingress_Ipv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["accesses"] = &ipv6.Accesses
    return children
}

func (ipv6 *AccessListHardware_Nodes_Node_Ingress_Ipv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6 *AccessListHardware_Nodes_Node_Ingress_Ipv6) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6 *AccessListHardware_Nodes_Node_Ingress_Ipv6) GetYangName() string { return "ipv6" }

func (ipv6 *AccessListHardware_Nodes_Node_Ingress_Ipv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6 *AccessListHardware_Nodes_Node_Ingress_Ipv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6 *AccessListHardware_Nodes_Node_Ingress_Ipv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6 *AccessListHardware_Nodes_Node_Ingress_Ipv6) SetParent(parent types.Entity) { ipv6.parent = parent }

func (ipv6 *AccessListHardware_Nodes_Node_Ingress_Ipv6) GetParent() types.Entity { return ipv6.parent }

func (ipv6 *AccessListHardware_Nodes_Node_Ingress_Ipv6) GetParentYangName() string { return "ingress" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses
// Table for access lists
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // List of ACLs. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access.
    Access []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access
}

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses) GetFilter() yfilter.YFilter { return accesses.YFilter }

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses) SetFilter(yf yfilter.YFilter) { accesses.YFilter = yf }

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses) GetGoName(yname string) string {
    if yname == "access" { return "Access" }
    return ""
}

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses) GetSegmentPath() string {
    return "accesses"
}

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "access" {
        for _, c := range accesses.Access {
            if accesses.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access{}
        accesses.Access = append(accesses.Access, child)
        return &accesses.Access[len(accesses.Access)-1]
    }
    return nil
}

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range accesses.Access {
        children[accesses.Access[i].GetSegmentPath()] = &accesses.Access[i]
    }
    return children
}

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses) GetBundleName() string { return "cisco_ios_xr" }

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses) GetYangName() string { return "accesses" }

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses) SetParent(parent types.Entity) { accesses.parent = parent }

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses) GetParent() types.Entity { return accesses.parent }

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses) GetParentYangName() string { return "ipv6" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access
// List of ACLs
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the access list. The type is string.
    AccessListName interface{}

    // Implicit ACL information.
    Implicit AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit

    // Table of all sequence numbers per ACL.
    SequenceDetails AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails

    // Table of all sequence numbers per ACL.
    SequenceBriefs AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs
}

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access) GetFilter() yfilter.YFilter { return access.YFilter }

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access) SetFilter(yf yfilter.YFilter) { access.YFilter = yf }

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access) GetGoName(yname string) string {
    if yname == "access-list-name" { return "AccessListName" }
    if yname == "implicit" { return "Implicit" }
    if yname == "sequence-details" { return "SequenceDetails" }
    if yname == "sequence-briefs" { return "SequenceBriefs" }
    return ""
}

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access) GetSegmentPath() string {
    return "access" + "[access-list-name='" + fmt.Sprintf("%v", access.AccessListName) + "']"
}

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "implicit" {
        return &access.Implicit
    }
    if childYangName == "sequence-details" {
        return &access.SequenceDetails
    }
    if childYangName == "sequence-briefs" {
        return &access.SequenceBriefs
    }
    return nil
}

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["implicit"] = &access.Implicit
    children["sequence-details"] = &access.SequenceDetails
    children["sequence-briefs"] = &access.SequenceBriefs
    return children
}

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["access-list-name"] = access.AccessListName
    return leafs
}

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access) GetBundleName() string { return "cisco_ios_xr" }

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access) GetYangName() string { return "access" }

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access) SetParent(parent types.Entity) { access.parent = parent }

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access) GetParent() types.Entity { return access.parent }

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access) GetParentYangName() string { return "accesses" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit
// Implicit ACL information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Implicit ACL Entries across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl.
    ImplicitAcl []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl
}

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit) GetFilter() yfilter.YFilter { return implicit.YFilter }

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit) SetFilter(yf yfilter.YFilter) { implicit.YFilter = yf }

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit) GetGoName(yname string) string {
    if yname == "implicit-acl" { return "ImplicitAcl" }
    return ""
}

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit) GetSegmentPath() string {
    return "implicit"
}

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "implicit-acl" {
        for _, c := range implicit.ImplicitAcl {
            if implicit.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl{}
        implicit.ImplicitAcl = append(implicit.ImplicitAcl, child)
        return &implicit.ImplicitAcl[len(implicit.ImplicitAcl)-1]
    }
    return nil
}

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range implicit.ImplicitAcl {
        children[implicit.ImplicitAcl[i].GetSegmentPath()] = &implicit.ImplicitAcl[i]
    }
    return children
}

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit) GetBundleName() string { return "cisco_ios_xr" }

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit) GetYangName() string { return "implicit" }

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit) SetParent(parent types.Entity) { implicit.parent = parent }

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit) GetParent() types.Entity { return implicit.parent }

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit) GetParentYangName() string { return "access" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl
// Implicit ACL Entries across Slices
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Common ACL Implicit Entries.
    CommonAclImplicit AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit

    // Interface ACL Implicit Entries.
    InterfaceAclImplicit AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit
}

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) GetFilter() yfilter.YFilter { return implicitAcl.YFilter }

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) SetFilter(yf yfilter.YFilter) { implicitAcl.YFilter = yf }

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) GetGoName(yname string) string {
    if yname == "common-acl-implicit" { return "CommonAclImplicit" }
    if yname == "interface-acl-implicit" { return "InterfaceAclImplicit" }
    return ""
}

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) GetSegmentPath() string {
    return "implicit-acl"
}

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "common-acl-implicit" {
        return &implicitAcl.CommonAclImplicit
    }
    if childYangName == "interface-acl-implicit" {
        return &implicitAcl.InterfaceAclImplicit
    }
    return nil
}

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["common-acl-implicit"] = &implicitAcl.CommonAclImplicit
    children["interface-acl-implicit"] = &implicitAcl.InterfaceAclImplicit
    return children
}

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) GetBundleName() string { return "cisco_ios_xr" }

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) GetYangName() string { return "implicit-acl" }

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) SetParent(parent types.Entity) { implicitAcl.parent = parent }

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) GetParent() types.Entity { return implicitAcl.parent }

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) GetParentYangName() string { return "implicit" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit
// Common ACL Implicit Entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Implicit NDNA permit.
    ImplicitNdnaPermit AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit

    // Implicit NDNS permit.
    ImplicitNdnsPermit AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit

    // Implicit deny.
    ImplicitDeny AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetFilter() yfilter.YFilter { return commonAclImplicit.YFilter }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) SetFilter(yf yfilter.YFilter) { commonAclImplicit.YFilter = yf }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetGoName(yname string) string {
    if yname == "implicit-ndna-permit" { return "ImplicitNdnaPermit" }
    if yname == "implicit-ndns-permit" { return "ImplicitNdnsPermit" }
    if yname == "implicit-deny" { return "ImplicitDeny" }
    return ""
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetSegmentPath() string {
    return "common-acl-implicit"
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "implicit-ndna-permit" {
        return &commonAclImplicit.ImplicitNdnaPermit
    }
    if childYangName == "implicit-ndns-permit" {
        return &commonAclImplicit.ImplicitNdnsPermit
    }
    if childYangName == "implicit-deny" {
        return &commonAclImplicit.ImplicitDeny
    }
    return nil
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["implicit-ndna-permit"] = &commonAclImplicit.ImplicitNdnaPermit
    children["implicit-ndns-permit"] = &commonAclImplicit.ImplicitNdnsPermit
    children["implicit-deny"] = &commonAclImplicit.ImplicitDeny
    return children
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetBundleName() string { return "cisco_ios_xr" }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetYangName() string { return "common-acl-implicit" }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) SetParent(parent types.Entity) { commonAclImplicit.parent = parent }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetParent() types.Entity { return commonAclImplicit.parent }

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetParentYangName() string { return "implicit-acl" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit
// Implicit NDNA permit
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetFilter() yfilter.YFilter { return implicitNdnaPermit.YFilter }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) SetFilter(yf yfilter.YFilter) { implicitNdnaPermit.YFilter = yf }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetSegmentPath() string {
    return "implicit-ndna-permit"
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &implicitNdnaPermit.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range implicitNdnaPermit.AceDetail {
            if implicitNdnaPermit.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail{}
        implicitNdnaPermit.AceDetail = append(implicitNdnaPermit.AceDetail, child)
        return &implicitNdnaPermit.AceDetail[len(implicitNdnaPermit.AceDetail)-1]
    }
    return nil
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &implicitNdnaPermit.AceBrief
    for i := range implicitNdnaPermit.AceDetail {
        children[implicitNdnaPermit.AceDetail[i].GetSegmentPath()] = &implicitNdnaPermit.AceDetail[i]
    }
    return children
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetBundleName() string { return "cisco_ios_xr" }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetYangName() string { return "implicit-ndna-permit" }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) SetParent(parent types.Entity) { implicitNdnaPermit.parent = parent }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetParent() types.Entity { return implicitNdnaPermit.parent }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetParentYangName() string { return "common-acl-implicit" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetParentYangName() string { return "implicit-ndna-permit" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetParentYangName() string { return "implicit-ndna-permit" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit
// Implicit NDNS permit
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetFilter() yfilter.YFilter { return implicitNdnsPermit.YFilter }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) SetFilter(yf yfilter.YFilter) { implicitNdnsPermit.YFilter = yf }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetSegmentPath() string {
    return "implicit-ndns-permit"
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &implicitNdnsPermit.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range implicitNdnsPermit.AceDetail {
            if implicitNdnsPermit.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail{}
        implicitNdnsPermit.AceDetail = append(implicitNdnsPermit.AceDetail, child)
        return &implicitNdnsPermit.AceDetail[len(implicitNdnsPermit.AceDetail)-1]
    }
    return nil
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &implicitNdnsPermit.AceBrief
    for i := range implicitNdnsPermit.AceDetail {
        children[implicitNdnsPermit.AceDetail[i].GetSegmentPath()] = &implicitNdnsPermit.AceDetail[i]
    }
    return children
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetBundleName() string { return "cisco_ios_xr" }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetYangName() string { return "implicit-ndns-permit" }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) SetParent(parent types.Entity) { implicitNdnsPermit.parent = parent }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetParent() types.Entity { return implicitNdnsPermit.parent }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetParentYangName() string { return "common-acl-implicit" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetParentYangName() string { return "implicit-ndns-permit" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetParentYangName() string { return "implicit-ndns-permit" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny
// Implicit deny
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetFilter() yfilter.YFilter { return implicitDeny.YFilter }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) SetFilter(yf yfilter.YFilter) { implicitDeny.YFilter = yf }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetSegmentPath() string {
    return "implicit-deny"
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &implicitDeny.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range implicitDeny.AceDetail {
            if implicitDeny.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail{}
        implicitDeny.AceDetail = append(implicitDeny.AceDetail, child)
        return &implicitDeny.AceDetail[len(implicitDeny.AceDetail)-1]
    }
    return nil
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &implicitDeny.AceBrief
    for i := range implicitDeny.AceDetail {
        children[implicitDeny.AceDetail[i].GetSegmentPath()] = &implicitDeny.AceDetail[i]
    }
    return children
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetBundleName() string { return "cisco_ios_xr" }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetYangName() string { return "implicit-deny" }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) SetParent(parent types.Entity) { implicitDeny.parent = parent }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetParent() types.Entity { return implicitDeny.parent }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetParentYangName() string { return "common-acl-implicit" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetParentYangName() string { return "implicit-deny" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetParentYangName() string { return "implicit-deny" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit
// Interface ACL Implicit Entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Implicit NDNA permit.
    ImplicitNdnaPermit AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit

    // Implicit NDNS permit.
    ImplicitNdnsPermit AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit

    // Implicit deny.
    ImplicitDeny AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetFilter() yfilter.YFilter { return interfaceAclImplicit.YFilter }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) SetFilter(yf yfilter.YFilter) { interfaceAclImplicit.YFilter = yf }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetGoName(yname string) string {
    if yname == "implicit-ndna-permit" { return "ImplicitNdnaPermit" }
    if yname == "implicit-ndns-permit" { return "ImplicitNdnsPermit" }
    if yname == "implicit-deny" { return "ImplicitDeny" }
    return ""
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetSegmentPath() string {
    return "interface-acl-implicit"
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "implicit-ndna-permit" {
        return &interfaceAclImplicit.ImplicitNdnaPermit
    }
    if childYangName == "implicit-ndns-permit" {
        return &interfaceAclImplicit.ImplicitNdnsPermit
    }
    if childYangName == "implicit-deny" {
        return &interfaceAclImplicit.ImplicitDeny
    }
    return nil
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["implicit-ndna-permit"] = &interfaceAclImplicit.ImplicitNdnaPermit
    children["implicit-ndns-permit"] = &interfaceAclImplicit.ImplicitNdnsPermit
    children["implicit-deny"] = &interfaceAclImplicit.ImplicitDeny
    return children
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetYangName() string { return "interface-acl-implicit" }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) SetParent(parent types.Entity) { interfaceAclImplicit.parent = parent }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetParent() types.Entity { return interfaceAclImplicit.parent }

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetParentYangName() string { return "implicit-acl" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit
// Implicit NDNA permit
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetFilter() yfilter.YFilter { return implicitNdnaPermit.YFilter }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) SetFilter(yf yfilter.YFilter) { implicitNdnaPermit.YFilter = yf }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetSegmentPath() string {
    return "implicit-ndna-permit"
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &implicitNdnaPermit.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range implicitNdnaPermit.AceDetail {
            if implicitNdnaPermit.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail{}
        implicitNdnaPermit.AceDetail = append(implicitNdnaPermit.AceDetail, child)
        return &implicitNdnaPermit.AceDetail[len(implicitNdnaPermit.AceDetail)-1]
    }
    return nil
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &implicitNdnaPermit.AceBrief
    for i := range implicitNdnaPermit.AceDetail {
        children[implicitNdnaPermit.AceDetail[i].GetSegmentPath()] = &implicitNdnaPermit.AceDetail[i]
    }
    return children
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetBundleName() string { return "cisco_ios_xr" }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetYangName() string { return "implicit-ndna-permit" }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) SetParent(parent types.Entity) { implicitNdnaPermit.parent = parent }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetParent() types.Entity { return implicitNdnaPermit.parent }

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetParentYangName() string { return "interface-acl-implicit" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetParentYangName() string { return "implicit-ndna-permit" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetParentYangName() string { return "implicit-ndna-permit" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit
// Implicit NDNS permit
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetFilter() yfilter.YFilter { return implicitNdnsPermit.YFilter }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) SetFilter(yf yfilter.YFilter) { implicitNdnsPermit.YFilter = yf }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetSegmentPath() string {
    return "implicit-ndns-permit"
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &implicitNdnsPermit.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range implicitNdnsPermit.AceDetail {
            if implicitNdnsPermit.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail{}
        implicitNdnsPermit.AceDetail = append(implicitNdnsPermit.AceDetail, child)
        return &implicitNdnsPermit.AceDetail[len(implicitNdnsPermit.AceDetail)-1]
    }
    return nil
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &implicitNdnsPermit.AceBrief
    for i := range implicitNdnsPermit.AceDetail {
        children[implicitNdnsPermit.AceDetail[i].GetSegmentPath()] = &implicitNdnsPermit.AceDetail[i]
    }
    return children
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetBundleName() string { return "cisco_ios_xr" }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetYangName() string { return "implicit-ndns-permit" }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) SetParent(parent types.Entity) { implicitNdnsPermit.parent = parent }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetParent() types.Entity { return implicitNdnsPermit.parent }

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetParentYangName() string { return "interface-acl-implicit" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetParentYangName() string { return "implicit-ndns-permit" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetParentYangName() string { return "implicit-ndns-permit" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny
// Implicit deny
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetFilter() yfilter.YFilter { return implicitDeny.YFilter }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) SetFilter(yf yfilter.YFilter) { implicitDeny.YFilter = yf }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetSegmentPath() string {
    return "implicit-deny"
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &implicitDeny.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range implicitDeny.AceDetail {
            if implicitDeny.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail{}
        implicitDeny.AceDetail = append(implicitDeny.AceDetail, child)
        return &implicitDeny.AceDetail[len(implicitDeny.AceDetail)-1]
    }
    return nil
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &implicitDeny.AceBrief
    for i := range implicitDeny.AceDetail {
        children[implicitDeny.AceDetail[i].GetSegmentPath()] = &implicitDeny.AceDetail[i]
    }
    return children
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetBundleName() string { return "cisco_ios_xr" }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetYangName() string { return "implicit-deny" }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) SetParent(parent types.Entity) { implicitDeny.parent = parent }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetParent() types.Entity { return implicitDeny.parent }

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetParentYangName() string { return "interface-acl-implicit" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetParentYangName() string { return "implicit-deny" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetParentYangName() string { return "implicit-deny" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails
// Table of all sequence numbers per ACL
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detail ACL information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail.
    SequenceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails) GetFilter() yfilter.YFilter { return sequenceDetails.YFilter }

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails) SetFilter(yf yfilter.YFilter) { sequenceDetails.YFilter = yf }

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails) GetGoName(yname string) string {
    if yname == "sequence-detail" { return "SequenceDetail" }
    return ""
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails) GetSegmentPath() string {
    return "sequence-details"
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sequence-detail" {
        for _, c := range sequenceDetails.SequenceDetail {
            if sequenceDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail{}
        sequenceDetails.SequenceDetail = append(sequenceDetails.SequenceDetail, child)
        return &sequenceDetails.SequenceDetail[len(sequenceDetails.SequenceDetail)-1]
    }
    return nil
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sequenceDetails.SequenceDetail {
        children[sequenceDetails.SequenceDetail[i].GetSegmentPath()] = &sequenceDetails.SequenceDetail[i]
    }
    return children
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails) GetBundleName() string { return "cisco_ios_xr" }

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails) GetYangName() string { return "sequence-details" }

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails) SetParent(parent types.Entity) { sequenceDetails.parent = parent }

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails) GetParent() types.Entity { return sequenceDetails.parent }

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails) GetParentYangName() string { return "access" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail
// Detail ACL information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Detail ACL information for a particular sequence.
    // The type is interface{} with range: -2147483648..2147483647.
    SequenceNumber interface{}

    // Common ACL detail information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail.
    CommonAclDetail []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail

    // Interface ACL detail information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail.
    InterfaceAclDetail []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) GetFilter() yfilter.YFilter { return sequenceDetail.YFilter }

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) SetFilter(yf yfilter.YFilter) { sequenceDetail.YFilter = yf }

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) GetGoName(yname string) string {
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "common-acl-detail" { return "CommonAclDetail" }
    if yname == "interface-acl-detail" { return "InterfaceAclDetail" }
    return ""
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) GetSegmentPath() string {
    return "sequence-detail" + "[sequence-number='" + fmt.Sprintf("%v", sequenceDetail.SequenceNumber) + "']"
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "common-acl-detail" {
        for _, c := range sequenceDetail.CommonAclDetail {
            if sequenceDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail{}
        sequenceDetail.CommonAclDetail = append(sequenceDetail.CommonAclDetail, child)
        return &sequenceDetail.CommonAclDetail[len(sequenceDetail.CommonAclDetail)-1]
    }
    if childYangName == "interface-acl-detail" {
        for _, c := range sequenceDetail.InterfaceAclDetail {
            if sequenceDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail{}
        sequenceDetail.InterfaceAclDetail = append(sequenceDetail.InterfaceAclDetail, child)
        return &sequenceDetail.InterfaceAclDetail[len(sequenceDetail.InterfaceAclDetail)-1]
    }
    return nil
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sequenceDetail.CommonAclDetail {
        children[sequenceDetail.CommonAclDetail[i].GetSegmentPath()] = &sequenceDetail.CommonAclDetail[i]
    }
    for i := range sequenceDetail.InterfaceAclDetail {
        children[sequenceDetail.InterfaceAclDetail[i].GetSegmentPath()] = &sequenceDetail.InterfaceAclDetail[i]
    }
    return children
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sequence-number"] = sequenceDetail.SequenceNumber
    return leafs
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) GetYangName() string { return "sequence-detail" }

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) SetParent(parent types.Entity) { sequenceDetail.parent = parent }

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) GetParent() types.Entity { return sequenceDetail.parent }

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) GetParentYangName() string { return "sequence-details" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail
// Common ACL detail information across Slices
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetFilter() yfilter.YFilter { return commonAclDetail.YFilter }

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) SetFilter(yf yfilter.YFilter) { commonAclDetail.YFilter = yf }

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetSegmentPath() string {
    return "common-acl-detail"
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &commonAclDetail.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range commonAclDetail.AceDetail {
            if commonAclDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail{}
        commonAclDetail.AceDetail = append(commonAclDetail.AceDetail, child)
        return &commonAclDetail.AceDetail[len(commonAclDetail.AceDetail)-1]
    }
    return nil
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &commonAclDetail.AceBrief
    for i := range commonAclDetail.AceDetail {
        children[commonAclDetail.AceDetail[i].GetSegmentPath()] = &commonAclDetail.AceDetail[i]
    }
    return children
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetBundleName() string { return "cisco_ios_xr" }

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetYangName() string { return "common-acl-detail" }

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) SetParent(parent types.Entity) { commonAclDetail.parent = parent }

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetParent() types.Entity { return commonAclDetail.parent }

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetParentYangName() string { return "sequence-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetParentYangName() string { return "common-acl-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetParentYangName() string { return "common-acl-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail
// Interface ACL detail information across Slices
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail.
    AceDetail []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetFilter() yfilter.YFilter { return interfaceAclDetail.YFilter }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) SetFilter(yf yfilter.YFilter) { interfaceAclDetail.YFilter = yf }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetGoName(yname string) string {
    if yname == "ace-brief" { return "AceBrief" }
    if yname == "ace-detail" { return "AceDetail" }
    return ""
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetSegmentPath() string {
    return "interface-acl-detail"
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ace-brief" {
        return &interfaceAclDetail.AceBrief
    }
    if childYangName == "ace-detail" {
        for _, c := range interfaceAclDetail.AceDetail {
            if interfaceAclDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail{}
        interfaceAclDetail.AceDetail = append(interfaceAclDetail.AceDetail, child)
        return &interfaceAclDetail.AceDetail[len(interfaceAclDetail.AceDetail)-1]
    }
    return nil
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ace-brief"] = &interfaceAclDetail.AceBrief
    for i := range interfaceAclDetail.AceDetail {
        children[interfaceAclDetail.AceDetail[i].GetSegmentPath()] = &interfaceAclDetail.AceDetail[i]
    }
    return children
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetYangName() string { return "interface-acl-detail" }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) SetParent(parent types.Entity) { interfaceAclDetail.parent = parent }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetParent() types.Entity { return interfaceAclDetail.parent }

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetParentYangName() string { return "sequence-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetFilter() yfilter.YFilter { return aceBrief.YFilter }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) SetFilter(yf yfilter.YFilter) { aceBrief.YFilter = yf }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetSegmentPath() string {
    return "ace-brief"
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &aceBrief.NextHopAddress
    }
    return nil
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &aceBrief.NextHopAddress
    return children
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = aceBrief.Grant
    leafs["logging-enabled"] = aceBrief.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = aceBrief.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = aceBrief.NextHopEnabled
    leafs["default-next-hop-enabled"] = aceBrief.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = aceBrief.TotalTcamEntries
    leafs["hits"] = aceBrief.Hits
    leafs["npu-id"] = aceBrief.NpuId
    return leafs
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetYangName() string { return "ace-brief" }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) SetParent(parent types.Entity) { aceBrief.parent = parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetParent() types.Entity { return aceBrief.parent }

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetParentYangName() string { return "interface-acl-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetParentYangName() string { return "ace-brief" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam

    // IPv6 TCAM entries.
    Ipv6Tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetFilter() yfilter.YFilter { return aceDetail.YFilter }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) SetFilter(yf yfilter.YFilter) { aceDetail.YFilter = yf }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetGoName(yname string) string {
    if yname == "entry-id" { return "EntryId" }
    if yname == "ipv4tcam" { return "Ipv4Tcam" }
    if yname == "ipv6tcam" { return "Ipv6Tcam" }
    return ""
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetSegmentPath() string {
    return "ace-detail"
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4tcam" {
        return &aceDetail.Ipv4Tcam
    }
    if childYangName == "ipv6tcam" {
        return &aceDetail.Ipv6Tcam
    }
    return nil
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4tcam"] = &aceDetail.Ipv4Tcam
    children["ipv6tcam"] = &aceDetail.Ipv6Tcam
    return children
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry-id"] = aceDetail.EntryId
    return leafs
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetYangName() string { return "ace-detail" }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) SetParent(parent types.Entity) { aceDetail.parent = parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetParent() types.Entity { return aceDetail.parent }

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetParentYangName() string { return "interface-acl-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetFilter() yfilter.YFilter { return ipv4Tcam.YFilter }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) SetFilter(yf yfilter.YFilter) { ipv4Tcam.YFilter = yf }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetSegmentPath() string {
    return "ipv4tcam"
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv4Tcam.TcamEntry
    }
    return nil
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv4Tcam.TcamEntry
    return children
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetYangName() string { return "ipv4tcam" }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) SetParent(parent types.Entity) { ipv4Tcam.parent = parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetParent() types.Entity { return ipv4Tcam.parent }

func (ipv4Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry) GetParentYangName() string { return "ipv4tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["source-address"] = value.SourceAddress
    leafs["protocol"] = value.Protocol
    leafs["fragment"] = value.Fragment
    leafs["dscp"] = value.Dscp
    leafs["ttl"] = value.Ttl
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["destination-address"] = value.DestinationAddress
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["source-address"] = mask.SourceAddress
    leafs["protocol"] = mask.Protocol
    leafs["fragment"] = mask.Fragment
    leafs["dscp"] = mask.Dscp
    leafs["ttl"] = mask.Ttl
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["destination-address"] = mask.DestinationAddress
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "fragment" { return "Fragment" }
    if yname == "dscp" { return "Dscp" }
    if yname == "ttl" { return "Ttl" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["source-address"] = result.SourceAddress
    leafs["protocol"] = result.Protocol
    leafs["fragment"] = result.Fragment
    leafs["dscp"] = result.Dscp
    leafs["ttl"] = result.Ttl
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["destination-address"] = result.DestinationAddress
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetFilter() yfilter.YFilter { return ipv6Tcam.YFilter }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) SetFilter(yf yfilter.YFilter) { ipv6Tcam.YFilter = yf }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetGoName(yname string) string {
    if yname == "tcam-entry" { return "TcamEntry" }
    return ""
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetSegmentPath() string {
    return "ipv6tcam"
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcam-entry" {
        return &ipv6Tcam.TcamEntry
    }
    return nil
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcam-entry"] = &ipv6Tcam.TcamEntry
    return children
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetYangName() string { return "ipv6tcam" }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) SetParent(parent types.Entity) { ipv6Tcam.parent = parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetParent() types.Entity { return ipv6Tcam.parent }

func (ipv6Tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam) GetParentYangName() string { return "ace-detail" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetFilter() yfilter.YFilter { return tcamEntry.YFilter }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) SetFilter(yf yfilter.YFilter) { tcamEntry.YFilter = yf }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-address-mask" { return "SourceAddressMask" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-address-mask" { return "DestinationAddressMask" }
    if yname == "value" { return "Value" }
    if yname == "mask" { return "Mask" }
    if yname == "result" { return "Result" }
    return ""
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetSegmentPath() string {
    return "tcam-entry"
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "value" {
        return &tcamEntry.Value
    }
    if childYangName == "mask" {
        return &tcamEntry.Mask
    }
    if childYangName == "result" {
        return &tcamEntry.Result
    }
    return nil
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["value"] = &tcamEntry.Value
    children["mask"] = &tcamEntry.Mask
    children["result"] = &tcamEntry.Result
    return children
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = tcamEntry.SourceAddress
    leafs["source-address-mask"] = tcamEntry.SourceAddressMask
    leafs["destination-address"] = tcamEntry.DestinationAddress
    leafs["destination-address-mask"] = tcamEntry.DestinationAddressMask
    return leafs
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetBundleName() string { return "cisco_ios_xr" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetYangName() string { return "tcam-entry" }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) SetParent(parent types.Entity) { tcamEntry.parent = parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetParent() types.Entity { return tcamEntry.parent }

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry) GetParentYangName() string { return "ipv6tcam" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetFilter() yfilter.YFilter { return value.YFilter }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) SetFilter(yf yfilter.YFilter) { value.YFilter = yf }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetSegmentPath() string {
    return "value"
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &value.TcpFlags
    }
    return nil
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &value.TcpFlags
    return children
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = value.AclId
    leafs["protocol"] = value.Protocol
    leafs["layer4-source-port"] = value.Layer4SourcePort
    leafs["layer4-destination-port"] = value.Layer4DestinationPort
    leafs["source-range-id"] = value.SourceRangeId
    leafs["destination-range-id"] = value.DestinationRangeId
    leafs["destination-header"] = value.DestinationHeader
    leafs["receive-transition-gap-header"] = value.ReceiveTransitionGapHeader
    leafs["authentication-header"] = value.AuthenticationHeader
    leafs["fragment"] = value.Fragment
    leafs["tos"] = value.Tos
    leafs["packet-length-range"] = value.PacketLengthRange
    return leafs
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleName() string { return "cisco_ios_xr" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetYangName() string { return "value" }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) SetParent(parent types.Entity) { value.parent = parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParent() types.Entity { return value.parent }

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Value_TcpFlags) GetParentYangName() string { return "value" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetFilter() yfilter.YFilter { return mask.YFilter }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetFilter(yf yfilter.YFilter) { mask.YFilter = yf }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetSegmentPath() string {
    return "mask"
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &mask.TcpFlags
    }
    return nil
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &mask.TcpFlags
    return children
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = mask.AclId
    leafs["protocol"] = mask.Protocol
    leafs["layer4-source-port"] = mask.Layer4SourcePort
    leafs["layer4-destination-port"] = mask.Layer4DestinationPort
    leafs["source-range-id"] = mask.SourceRangeId
    leafs["destination-range-id"] = mask.DestinationRangeId
    leafs["destination-header"] = mask.DestinationHeader
    leafs["receive-transition-gap-header"] = mask.ReceiveTransitionGapHeader
    leafs["authentication-header"] = mask.AuthenticationHeader
    leafs["fragment"] = mask.Fragment
    leafs["tos"] = mask.Tos
    leafs["packet-length-range"] = mask.PacketLengthRange
    return leafs
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleName() string { return "cisco_ios_xr" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetYangName() string { return "mask" }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) SetParent(parent types.Entity) { mask.parent = parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParent() types.Entity { return mask.parent }

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Mask_TcpFlags) GetParentYangName() string { return "mask" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetFilter() yfilter.YFilter { return result.YFilter }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) SetFilter(yf yfilter.YFilter) { result.YFilter = yf }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetGoName(yname string) string {
    if yname == "acl-id" { return "AclId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "layer4-source-port" { return "Layer4SourcePort" }
    if yname == "layer4-destination-port" { return "Layer4DestinationPort" }
    if yname == "source-range-id" { return "SourceRangeId" }
    if yname == "destination-range-id" { return "DestinationRangeId" }
    if yname == "destination-header" { return "DestinationHeader" }
    if yname == "receive-transition-gap-header" { return "ReceiveTransitionGapHeader" }
    if yname == "authentication-header" { return "AuthenticationHeader" }
    if yname == "fragment" { return "Fragment" }
    if yname == "tos" { return "Tos" }
    if yname == "packet-length-range" { return "PacketLengthRange" }
    if yname == "tcp-flags" { return "TcpFlags" }
    return ""
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetSegmentPath() string {
    return "result"
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tcp-flags" {
        return &result.TcpFlags
    }
    return nil
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tcp-flags"] = &result.TcpFlags
    return children
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["acl-id"] = result.AclId
    leafs["protocol"] = result.Protocol
    leafs["layer4-source-port"] = result.Layer4SourcePort
    leafs["layer4-destination-port"] = result.Layer4DestinationPort
    leafs["source-range-id"] = result.SourceRangeId
    leafs["destination-range-id"] = result.DestinationRangeId
    leafs["destination-header"] = result.DestinationHeader
    leafs["receive-transition-gap-header"] = result.ReceiveTransitionGapHeader
    leafs["authentication-header"] = result.AuthenticationHeader
    leafs["fragment"] = result.Fragment
    leafs["tos"] = result.Tos
    leafs["packet-length-range"] = result.PacketLengthRange
    return leafs
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleName() string { return "cisco_ios_xr" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetYangName() string { return "result" }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) SetParent(parent types.Entity) { result.parent = parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParent() types.Entity { return result.parent }

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result) GetParentYangName() string { return "tcam-entry" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetFilter() yfilter.YFilter { return tcpFlags.YFilter }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetFilter(yf yfilter.YFilter) { tcpFlags.YFilter = yf }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetGoName(yname string) string {
    if yname == "urgent" { return "Urgent" }
    if yname == "acknowledge" { return "Acknowledge" }
    if yname == "push" { return "Push" }
    if yname == "reset" { return "Reset" }
    if yname == "synchronization" { return "Synchronization" }
    if yname == "finish" { return "Finish" }
    return ""
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetSegmentPath() string {
    return "tcp-flags"
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["urgent"] = tcpFlags.Urgent
    leafs["acknowledge"] = tcpFlags.Acknowledge
    leafs["push"] = tcpFlags.Push
    leafs["reset"] = tcpFlags.Reset
    leafs["synchronization"] = tcpFlags.Synchronization
    leafs["finish"] = tcpFlags.Finish
    return leafs
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleName() string { return "cisco_ios_xr" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetYangName() string { return "tcp-flags" }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) SetParent(parent types.Entity) { tcpFlags.parent = parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParent() types.Entity { return tcpFlags.parent }

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6Tcam_TcamEntry_Result_TcpFlags) GetParentYangName() string { return "result" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs
// Table of all sequence numbers per ACL
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detail ACL information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief.
    SequenceBrief []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs) GetFilter() yfilter.YFilter { return sequenceBriefs.YFilter }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs) SetFilter(yf yfilter.YFilter) { sequenceBriefs.YFilter = yf }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs) GetGoName(yname string) string {
    if yname == "sequence-brief" { return "SequenceBrief" }
    return ""
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs) GetSegmentPath() string {
    return "sequence-briefs"
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sequence-brief" {
        for _, c := range sequenceBriefs.SequenceBrief {
            if sequenceBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief{}
        sequenceBriefs.SequenceBrief = append(sequenceBriefs.SequenceBrief, child)
        return &sequenceBriefs.SequenceBrief[len(sequenceBriefs.SequenceBrief)-1]
    }
    return nil
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sequenceBriefs.SequenceBrief {
        children[sequenceBriefs.SequenceBrief[i].GetSegmentPath()] = &sequenceBriefs.SequenceBrief[i]
    }
    return children
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs) GetYangName() string { return "sequence-briefs" }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs) SetParent(parent types.Entity) { sequenceBriefs.parent = parent }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs) GetParent() types.Entity { return sequenceBriefs.parent }

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs) GetParentYangName() string { return "access" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief
// Detail ACL information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Brief ACL information for a particular sequence.
    // The type is interface{} with range: -2147483648..2147483647.
    SequenceNumber interface{}

    // Common ACL information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl.
    CommonAcl []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl

    // Interface ACL information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl.
    InterfaceAcl []AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) GetFilter() yfilter.YFilter { return sequenceBrief.YFilter }

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) SetFilter(yf yfilter.YFilter) { sequenceBrief.YFilter = yf }

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) GetGoName(yname string) string {
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "common-acl" { return "CommonAcl" }
    if yname == "interface-acl" { return "InterfaceAcl" }
    return ""
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) GetSegmentPath() string {
    return "sequence-brief" + "[sequence-number='" + fmt.Sprintf("%v", sequenceBrief.SequenceNumber) + "']"
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "common-acl" {
        for _, c := range sequenceBrief.CommonAcl {
            if sequenceBrief.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl{}
        sequenceBrief.CommonAcl = append(sequenceBrief.CommonAcl, child)
        return &sequenceBrief.CommonAcl[len(sequenceBrief.CommonAcl)-1]
    }
    if childYangName == "interface-acl" {
        for _, c := range sequenceBrief.InterfaceAcl {
            if sequenceBrief.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl{}
        sequenceBrief.InterfaceAcl = append(sequenceBrief.InterfaceAcl, child)
        return &sequenceBrief.InterfaceAcl[len(sequenceBrief.InterfaceAcl)-1]
    }
    return nil
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sequenceBrief.CommonAcl {
        children[sequenceBrief.CommonAcl[i].GetSegmentPath()] = &sequenceBrief.CommonAcl[i]
    }
    for i := range sequenceBrief.InterfaceAcl {
        children[sequenceBrief.InterfaceAcl[i].GetSegmentPath()] = &sequenceBrief.InterfaceAcl[i]
    }
    return children
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sequence-number"] = sequenceBrief.SequenceNumber
    return leafs
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) GetYangName() string { return "sequence-brief" }

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) SetParent(parent types.Entity) { sequenceBrief.parent = parent }

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) GetParent() types.Entity { return sequenceBrief.parent }

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) GetParentYangName() string { return "sequence-briefs" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl
// Common ACL information across Slices
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress
}

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetFilter() yfilter.YFilter { return commonAcl.YFilter }

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) SetFilter(yf yfilter.YFilter) { commonAcl.YFilter = yf }

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetSegmentPath() string {
    return "common-acl"
}

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &commonAcl.NextHopAddress
    }
    return nil
}

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &commonAcl.NextHopAddress
    return children
}

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = commonAcl.Grant
    leafs["logging-enabled"] = commonAcl.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = commonAcl.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = commonAcl.NextHopEnabled
    leafs["default-next-hop-enabled"] = commonAcl.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = commonAcl.TotalTcamEntries
    leafs["hits"] = commonAcl.Hits
    leafs["npu-id"] = commonAcl.NpuId
    return leafs
}

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetBundleName() string { return "cisco_ios_xr" }

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetYangName() string { return "common-acl" }

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) SetParent(parent types.Entity) { commonAcl.parent = parent }

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetParent() types.Entity { return commonAcl.parent }

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetParentYangName() string { return "sequence-brief" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetParentYangName() string { return "common-acl" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl
// Interface ACL information across Slices
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetFilter() yfilter.YFilter { return interfaceAcl.YFilter }

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) SetFilter(yf yfilter.YFilter) { interfaceAcl.YFilter = yf }

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetGoName(yname string) string {
    if yname == "grant" { return "Grant" }
    if yname == "logging-enabled" { return "LoggingEnabled" }
    if yname == "per-ace-icmp-enabled" { return "PerAceIcmpEnabled" }
    if yname == "next-hop-enabled" { return "NextHopEnabled" }
    if yname == "default-next-hop-enabled" { return "DefaultNextHopEnabled" }
    if yname == "total-tcam-entries" { return "TotalTcamEntries" }
    if yname == "hits" { return "Hits" }
    if yname == "npu-id" { return "NpuId" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetSegmentPath() string {
    return "interface-acl"
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "next-hop-address" {
        return &interfaceAcl.NextHopAddress
    }
    return nil
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["next-hop-address"] = &interfaceAcl.NextHopAddress
    return children
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grant"] = interfaceAcl.Grant
    leafs["logging-enabled"] = interfaceAcl.LoggingEnabled
    leafs["per-ace-icmp-enabled"] = interfaceAcl.PerAceIcmpEnabled
    leafs["next-hop-enabled"] = interfaceAcl.NextHopEnabled
    leafs["default-next-hop-enabled"] = interfaceAcl.DefaultNextHopEnabled
    leafs["total-tcam-entries"] = interfaceAcl.TotalTcamEntries
    leafs["hits"] = interfaceAcl.Hits
    leafs["npu-id"] = interfaceAcl.NpuId
    return leafs
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetYangName() string { return "interface-acl" }

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) SetParent(parent types.Entity) { interfaceAcl.parent = parent }

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetParent() types.Entity { return interfaceAcl.parent }

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetParentYangName() string { return "sequence-brief" }

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetFilter() yfilter.YFilter { return nextHopAddress.YFilter }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) SetFilter(yf yfilter.YFilter) { nextHopAddress.YFilter = yf }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetGoName(yname string) string {
    if yname == "address-type" { return "AddressType" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    if yname == "ipv6-address" { return "Ipv6Address" }
    return ""
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetSegmentPath() string {
    return "next-hop-address"
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address-type"] = nextHopAddress.AddressType
    leafs["ipv4-address"] = nextHopAddress.Ipv4Address
    leafs["ipv6-address"] = nextHopAddress.Ipv6Address
    return leafs
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetYangName() string { return "next-hop-address" }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) SetParent(parent types.Entity) { nextHopAddress.parent = parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetParent() types.Entity { return nextHopAddress.parent }

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetParentYangName() string { return "interface-acl" }

