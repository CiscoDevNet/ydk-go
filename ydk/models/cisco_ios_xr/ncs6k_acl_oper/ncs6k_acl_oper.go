// This module contains a collection of YANG definitions
// for Cisco IOS-XR ncs6k-acl package operational data.
// 
// This module contains definitions
// for the following management objects:
//   access-list-hardware: Root class of accesslist hardware
// 
// Copyright (c) 2013-2018 by Cisco Systems, Inc.
// All rights reserved.
package ncs6k_acl_oper

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package ncs6k_acl_oper"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ncs6k-acl-oper access-list-hardware}", reflect.TypeOf(AccessListHardware{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware", reflect.TypeOf(AccessListHardware{}))
}

// SsePfilterAddr represents Address types
type SsePfilterAddr string

const (
    // IPv4
    SsePfilterAddr_ipv4 SsePfilterAddr = "ipv4"

    // IPv6
    SsePfilterAddr_ipv6 SsePfilterAddr = "ipv6"
)

// SseGrant represents ACL grant
type SseGrant string

const (
    // Grant permit
    SseGrant_permit SseGrant = "permit"

    // Grant deny
    SseGrant_deny SseGrant = "deny"
)

// AccessListHardware
// Root class of accesslist hardware
type AccessListHardware struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Accesslist nodes.
    Nodes AccessListHardware_Nodes
}

func (accessListHardware *AccessListHardware) GetEntityData() *types.CommonEntityData {
    accessListHardware.EntityData.YFilter = accessListHardware.YFilter
    accessListHardware.EntityData.YangName = "access-list-hardware"
    accessListHardware.EntityData.BundleName = "cisco_ios_xr"
    accessListHardware.EntityData.ParentYangName = "Cisco-IOS-XR-ncs6k-acl-oper"
    accessListHardware.EntityData.SegmentPath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware"
    accessListHardware.EntityData.AbsolutePath = accessListHardware.EntityData.SegmentPath
    accessListHardware.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    accessListHardware.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    accessListHardware.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    accessListHardware.EntityData.Children = types.NewOrderedMap()
    accessListHardware.EntityData.Children.Append("nodes", types.YChild{"Nodes", &accessListHardware.Nodes})
    accessListHardware.EntityData.Leafs = types.NewOrderedMap()

    accessListHardware.EntityData.YListKeys = []string {}

    return &(accessListHardware.EntityData)
}

// AccessListHardware_Nodes
// Accesslist nodes
type AccessListHardware_Nodes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Accesslist node. The type is slice of AccessListHardware_Nodes_Node.
    Node []*AccessListHardware_Nodes_Node
}

func (nodes *AccessListHardware_Nodes) GetEntityData() *types.CommonEntityData {
    nodes.EntityData.YFilter = nodes.YFilter
    nodes.EntityData.YangName = "nodes"
    nodes.EntityData.BundleName = "cisco_ios_xr"
    nodes.EntityData.ParentYangName = "access-list-hardware"
    nodes.EntityData.SegmentPath = "nodes"
    nodes.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/" + nodes.EntityData.SegmentPath
    nodes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodes.EntityData.Children = types.NewOrderedMap()
    nodes.EntityData.Children.Append("node", types.YChild{"Node", nil})
    for i := range nodes.Node {
        nodes.EntityData.Children.Append(types.GetSegmentPath(nodes.Node[i]), types.YChild{"Node", nodes.Node[i]})
    }
    nodes.EntityData.Leafs = types.NewOrderedMap()

    nodes.EntityData.YListKeys = []string {}

    return &(nodes.EntityData)
}

// AccessListHardware_Nodes_Node
// Accesslist node
type AccessListHardware_Nodes_Node struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Node name. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeName interface{}

    // Accesslist direction egress.
    Egress AccessListHardware_Nodes_Node_Egress

    // Accesslist direction ingress.
    Ingress AccessListHardware_Nodes_Node_Ingress
}

func (node *AccessListHardware_Nodes_Node) GetEntityData() *types.CommonEntityData {
    node.EntityData.YFilter = node.YFilter
    node.EntityData.YangName = "node"
    node.EntityData.BundleName = "cisco_ios_xr"
    node.EntityData.ParentYangName = "nodes"
    node.EntityData.SegmentPath = "node" + types.AddKeyToken(node.NodeName, "node-name")
    node.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/" + node.EntityData.SegmentPath
    node.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    node.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    node.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    node.EntityData.Children = types.NewOrderedMap()
    node.EntityData.Children.Append("egress", types.YChild{"Egress", &node.Egress})
    node.EntityData.Children.Append("ingress", types.YChild{"Ingress", &node.Ingress})
    node.EntityData.Leafs = types.NewOrderedMap()
    node.EntityData.Leafs.Append("node-name", types.YLeaf{"NodeName", node.NodeName})

    node.EntityData.YListKeys = []string {"NodeName"}

    return &(node.EntityData)
}

// AccessListHardware_Nodes_Node_Egress
// Accesslist direction egress
type AccessListHardware_Nodes_Node_Egress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Accesslist version IPv4.
    Ipv4 AccessListHardware_Nodes_Node_Egress_Ipv4

    // Accesslist version IPv6.
    Ipv6 AccessListHardware_Nodes_Node_Egress_Ipv6
}

func (egress *AccessListHardware_Nodes_Node_Egress) GetEntityData() *types.CommonEntityData {
    egress.EntityData.YFilter = egress.YFilter
    egress.EntityData.YangName = "egress"
    egress.EntityData.BundleName = "cisco_ios_xr"
    egress.EntityData.ParentYangName = "node"
    egress.EntityData.SegmentPath = "egress"
    egress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/" + egress.EntityData.SegmentPath
    egress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    egress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    egress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    egress.EntityData.Children = types.NewOrderedMap()
    egress.EntityData.Children.Append("ipv4", types.YChild{"Ipv4", &egress.Ipv4})
    egress.EntityData.Children.Append("ipv6", types.YChild{"Ipv6", &egress.Ipv6})
    egress.EntityData.Leafs = types.NewOrderedMap()

    egress.EntityData.YListKeys = []string {}

    return &(egress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4
// Accesslist version IPv4
type AccessListHardware_Nodes_Node_Egress_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table for access lists.
    Accesses AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses
}

func (ipv4 *AccessListHardware_Nodes_Node_Egress_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "egress"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/" + ipv4.EntityData.SegmentPath
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = types.NewOrderedMap()
    ipv4.EntityData.Children.Append("accesses", types.YChild{"Accesses", &ipv4.Accesses})
    ipv4.EntityData.Leafs = types.NewOrderedMap()

    ipv4.EntityData.YListKeys = []string {}

    return &(ipv4.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses
// Table for access lists
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of ACLs. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access.
    Access []*AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access
}

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses) GetEntityData() *types.CommonEntityData {
    accesses.EntityData.YFilter = accesses.YFilter
    accesses.EntityData.YangName = "accesses"
    accesses.EntityData.BundleName = "cisco_ios_xr"
    accesses.EntityData.ParentYangName = "ipv4"
    accesses.EntityData.SegmentPath = "accesses"
    accesses.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/" + accesses.EntityData.SegmentPath
    accesses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    accesses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    accesses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    accesses.EntityData.Children = types.NewOrderedMap()
    accesses.EntityData.Children.Append("access", types.YChild{"Access", nil})
    for i := range accesses.Access {
        accesses.EntityData.Children.Append(types.GetSegmentPath(accesses.Access[i]), types.YChild{"Access", accesses.Access[i]})
    }
    accesses.EntityData.Leafs = types.NewOrderedMap()

    accesses.EntityData.YListKeys = []string {}

    return &(accesses.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access
// List of ACLs
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of the access list. The type is string.
    AccessListName interface{}

    // Implicit ACL information.
    Implicit AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit

    // Table of all sequence numbers per ACL.
    SequenceDetails AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails

    // Table of all sequence numbers per ACL.
    SequenceBriefs AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs
}

func (access *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access) GetEntityData() *types.CommonEntityData {
    access.EntityData.YFilter = access.YFilter
    access.EntityData.YangName = "access"
    access.EntityData.BundleName = "cisco_ios_xr"
    access.EntityData.ParentYangName = "accesses"
    access.EntityData.SegmentPath = "access" + types.AddKeyToken(access.AccessListName, "access-list-name")
    access.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/" + access.EntityData.SegmentPath
    access.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    access.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    access.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    access.EntityData.Children = types.NewOrderedMap()
    access.EntityData.Children.Append("implicit", types.YChild{"Implicit", &access.Implicit})
    access.EntityData.Children.Append("sequence-details", types.YChild{"SequenceDetails", &access.SequenceDetails})
    access.EntityData.Children.Append("sequence-briefs", types.YChild{"SequenceBriefs", &access.SequenceBriefs})
    access.EntityData.Leafs = types.NewOrderedMap()
    access.EntityData.Leafs.Append("access-list-name", types.YLeaf{"AccessListName", access.AccessListName})

    access.EntityData.YListKeys = []string {"AccessListName"}

    return &(access.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit
// Implicit ACL information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Implicit ACL Entries across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl.
    ImplicitAcl []*AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl
}

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit) GetEntityData() *types.CommonEntityData {
    implicit.EntityData.YFilter = implicit.YFilter
    implicit.EntityData.YangName = "implicit"
    implicit.EntityData.BundleName = "cisco_ios_xr"
    implicit.EntityData.ParentYangName = "access"
    implicit.EntityData.SegmentPath = "implicit"
    implicit.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/" + implicit.EntityData.SegmentPath
    implicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicit.EntityData.Children = types.NewOrderedMap()
    implicit.EntityData.Children.Append("implicit-acl", types.YChild{"ImplicitAcl", nil})
    for i := range implicit.ImplicitAcl {
        types.SetYListKey(implicit.ImplicitAcl[i], i)
        implicit.EntityData.Children.Append(types.GetSegmentPath(implicit.ImplicitAcl[i]), types.YChild{"ImplicitAcl", implicit.ImplicitAcl[i]})
    }
    implicit.EntityData.Leafs = types.NewOrderedMap()

    implicit.EntityData.YListKeys = []string {}

    return &(implicit.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl
// Implicit ACL Entries across Slices
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Common ACL Implicit Entries.
    CommonAclImplicit AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit

    // Interface ACL Implicit Entries.
    InterfaceAclImplicit AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit
}

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) GetEntityData() *types.CommonEntityData {
    implicitAcl.EntityData.YFilter = implicitAcl.YFilter
    implicitAcl.EntityData.YangName = "implicit-acl"
    implicitAcl.EntityData.BundleName = "cisco_ios_xr"
    implicitAcl.EntityData.ParentYangName = "implicit"
    implicitAcl.EntityData.SegmentPath = "implicit-acl" + types.AddNoKeyToken(implicitAcl)
    implicitAcl.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/" + implicitAcl.EntityData.SegmentPath
    implicitAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitAcl.EntityData.Children = types.NewOrderedMap()
    implicitAcl.EntityData.Children.Append("common-acl-implicit", types.YChild{"CommonAclImplicit", &implicitAcl.CommonAclImplicit})
    implicitAcl.EntityData.Children.Append("interface-acl-implicit", types.YChild{"InterfaceAclImplicit", &implicitAcl.InterfaceAclImplicit})
    implicitAcl.EntityData.Leafs = types.NewOrderedMap()

    implicitAcl.EntityData.YListKeys = []string {}

    return &(implicitAcl.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit
// Common ACL Implicit Entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Implicit NDNA permit.
    ImplicitNdnaPermit AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit

    // Implicit NDNS permit.
    ImplicitNdnsPermit AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit

    // Implicit deny.
    ImplicitDeny AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetEntityData() *types.CommonEntityData {
    commonAclImplicit.EntityData.YFilter = commonAclImplicit.YFilter
    commonAclImplicit.EntityData.YangName = "common-acl-implicit"
    commonAclImplicit.EntityData.BundleName = "cisco_ios_xr"
    commonAclImplicit.EntityData.ParentYangName = "implicit-acl"
    commonAclImplicit.EntityData.SegmentPath = "common-acl-implicit"
    commonAclImplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/" + commonAclImplicit.EntityData.SegmentPath
    commonAclImplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    commonAclImplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    commonAclImplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    commonAclImplicit.EntityData.Children = types.NewOrderedMap()
    commonAclImplicit.EntityData.Children.Append("implicit-ndna-permit", types.YChild{"ImplicitNdnaPermit", &commonAclImplicit.ImplicitNdnaPermit})
    commonAclImplicit.EntityData.Children.Append("implicit-ndns-permit", types.YChild{"ImplicitNdnsPermit", &commonAclImplicit.ImplicitNdnsPermit})
    commonAclImplicit.EntityData.Children.Append("implicit-deny", types.YChild{"ImplicitDeny", &commonAclImplicit.ImplicitDeny})
    commonAclImplicit.EntityData.Leafs = types.NewOrderedMap()

    commonAclImplicit.EntityData.YListKeys = []string {}

    return &(commonAclImplicit.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit
// Implicit NDNA permit
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnaPermit.EntityData.YFilter = implicitNdnaPermit.YFilter
    implicitNdnaPermit.EntityData.YangName = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnaPermit.EntityData.ParentYangName = "common-acl-implicit"
    implicitNdnaPermit.EntityData.SegmentPath = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/" + implicitNdnaPermit.EntityData.SegmentPath
    implicitNdnaPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnaPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnaPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnaPermit.EntityData.Children = types.NewOrderedMap()
    implicitNdnaPermit.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &implicitNdnaPermit.AceBrief})
    implicitNdnaPermit.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range implicitNdnaPermit.AceDetail {
        types.SetYListKey(implicitNdnaPermit.AceDetail[i], i)
        implicitNdnaPermit.EntityData.Children.Append(types.GetSegmentPath(implicitNdnaPermit.AceDetail[i]), types.YChild{"AceDetail", implicitNdnaPermit.AceDetail[i]})
    }
    implicitNdnaPermit.EntityData.Leafs = types.NewOrderedMap()

    implicitNdnaPermit.EntityData.YListKeys = []string {}

    return &(implicitNdnaPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndna-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndna-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit
// Implicit NDNS permit
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnsPermit.EntityData.YFilter = implicitNdnsPermit.YFilter
    implicitNdnsPermit.EntityData.YangName = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnsPermit.EntityData.ParentYangName = "common-acl-implicit"
    implicitNdnsPermit.EntityData.SegmentPath = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/" + implicitNdnsPermit.EntityData.SegmentPath
    implicitNdnsPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnsPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnsPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnsPermit.EntityData.Children = types.NewOrderedMap()
    implicitNdnsPermit.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &implicitNdnsPermit.AceBrief})
    implicitNdnsPermit.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range implicitNdnsPermit.AceDetail {
        types.SetYListKey(implicitNdnsPermit.AceDetail[i], i)
        implicitNdnsPermit.EntityData.Children.Append(types.GetSegmentPath(implicitNdnsPermit.AceDetail[i]), types.YChild{"AceDetail", implicitNdnsPermit.AceDetail[i]})
    }
    implicitNdnsPermit.EntityData.Leafs = types.NewOrderedMap()

    implicitNdnsPermit.EntityData.YListKeys = []string {}

    return &(implicitNdnsPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndns-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndns-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny
// Implicit deny
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetEntityData() *types.CommonEntityData {
    implicitDeny.EntityData.YFilter = implicitDeny.YFilter
    implicitDeny.EntityData.YangName = "implicit-deny"
    implicitDeny.EntityData.BundleName = "cisco_ios_xr"
    implicitDeny.EntityData.ParentYangName = "common-acl-implicit"
    implicitDeny.EntityData.SegmentPath = "implicit-deny"
    implicitDeny.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/" + implicitDeny.EntityData.SegmentPath
    implicitDeny.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitDeny.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitDeny.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitDeny.EntityData.Children = types.NewOrderedMap()
    implicitDeny.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &implicitDeny.AceBrief})
    implicitDeny.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range implicitDeny.AceDetail {
        types.SetYListKey(implicitDeny.AceDetail[i], i)
        implicitDeny.EntityData.Children.Append(types.GetSegmentPath(implicitDeny.AceDetail[i]), types.YChild{"AceDetail", implicitDeny.AceDetail[i]})
    }
    implicitDeny.EntityData.Leafs = types.NewOrderedMap()

    implicitDeny.EntityData.YListKeys = []string {}

    return &(implicitDeny.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-deny"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-deny"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit
// Interface ACL Implicit Entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Implicit NDNA permit.
    ImplicitNdnaPermit AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit

    // Implicit NDNS permit.
    ImplicitNdnsPermit AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit

    // Implicit deny.
    ImplicitDeny AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetEntityData() *types.CommonEntityData {
    interfaceAclImplicit.EntityData.YFilter = interfaceAclImplicit.YFilter
    interfaceAclImplicit.EntityData.YangName = "interface-acl-implicit"
    interfaceAclImplicit.EntityData.BundleName = "cisco_ios_xr"
    interfaceAclImplicit.EntityData.ParentYangName = "implicit-acl"
    interfaceAclImplicit.EntityData.SegmentPath = "interface-acl-implicit"
    interfaceAclImplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/" + interfaceAclImplicit.EntityData.SegmentPath
    interfaceAclImplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAclImplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAclImplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAclImplicit.EntityData.Children = types.NewOrderedMap()
    interfaceAclImplicit.EntityData.Children.Append("implicit-ndna-permit", types.YChild{"ImplicitNdnaPermit", &interfaceAclImplicit.ImplicitNdnaPermit})
    interfaceAclImplicit.EntityData.Children.Append("implicit-ndns-permit", types.YChild{"ImplicitNdnsPermit", &interfaceAclImplicit.ImplicitNdnsPermit})
    interfaceAclImplicit.EntityData.Children.Append("implicit-deny", types.YChild{"ImplicitDeny", &interfaceAclImplicit.ImplicitDeny})
    interfaceAclImplicit.EntityData.Leafs = types.NewOrderedMap()

    interfaceAclImplicit.EntityData.YListKeys = []string {}

    return &(interfaceAclImplicit.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit
// Implicit NDNA permit
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnaPermit.EntityData.YFilter = implicitNdnaPermit.YFilter
    implicitNdnaPermit.EntityData.YangName = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnaPermit.EntityData.ParentYangName = "interface-acl-implicit"
    implicitNdnaPermit.EntityData.SegmentPath = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/" + implicitNdnaPermit.EntityData.SegmentPath
    implicitNdnaPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnaPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnaPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnaPermit.EntityData.Children = types.NewOrderedMap()
    implicitNdnaPermit.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &implicitNdnaPermit.AceBrief})
    implicitNdnaPermit.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range implicitNdnaPermit.AceDetail {
        types.SetYListKey(implicitNdnaPermit.AceDetail[i], i)
        implicitNdnaPermit.EntityData.Children.Append(types.GetSegmentPath(implicitNdnaPermit.AceDetail[i]), types.YChild{"AceDetail", implicitNdnaPermit.AceDetail[i]})
    }
    implicitNdnaPermit.EntityData.Leafs = types.NewOrderedMap()

    implicitNdnaPermit.EntityData.YListKeys = []string {}

    return &(implicitNdnaPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndna-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndna-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit
// Implicit NDNS permit
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnsPermit.EntityData.YFilter = implicitNdnsPermit.YFilter
    implicitNdnsPermit.EntityData.YangName = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnsPermit.EntityData.ParentYangName = "interface-acl-implicit"
    implicitNdnsPermit.EntityData.SegmentPath = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/" + implicitNdnsPermit.EntityData.SegmentPath
    implicitNdnsPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnsPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnsPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnsPermit.EntityData.Children = types.NewOrderedMap()
    implicitNdnsPermit.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &implicitNdnsPermit.AceBrief})
    implicitNdnsPermit.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range implicitNdnsPermit.AceDetail {
        types.SetYListKey(implicitNdnsPermit.AceDetail[i], i)
        implicitNdnsPermit.EntityData.Children.Append(types.GetSegmentPath(implicitNdnsPermit.AceDetail[i]), types.YChild{"AceDetail", implicitNdnsPermit.AceDetail[i]})
    }
    implicitNdnsPermit.EntityData.Leafs = types.NewOrderedMap()

    implicitNdnsPermit.EntityData.YListKeys = []string {}

    return &(implicitNdnsPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndns-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndns-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny
// Implicit deny
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetEntityData() *types.CommonEntityData {
    implicitDeny.EntityData.YFilter = implicitDeny.YFilter
    implicitDeny.EntityData.YangName = "implicit-deny"
    implicitDeny.EntityData.BundleName = "cisco_ios_xr"
    implicitDeny.EntityData.ParentYangName = "interface-acl-implicit"
    implicitDeny.EntityData.SegmentPath = "implicit-deny"
    implicitDeny.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/" + implicitDeny.EntityData.SegmentPath
    implicitDeny.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitDeny.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitDeny.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitDeny.EntityData.Children = types.NewOrderedMap()
    implicitDeny.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &implicitDeny.AceBrief})
    implicitDeny.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range implicitDeny.AceDetail {
        types.SetYListKey(implicitDeny.AceDetail[i], i)
        implicitDeny.EntityData.Children.Append(types.GetSegmentPath(implicitDeny.AceDetail[i]), types.YChild{"AceDetail", implicitDeny.AceDetail[i]})
    }
    implicitDeny.EntityData.Leafs = types.NewOrderedMap()

    implicitDeny.EntityData.YListKeys = []string {}

    return &(implicitDeny.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-deny"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-deny"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails
// Table of all sequence numbers per ACL
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detail ACL information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail.
    SequenceDetail []*AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails) GetEntityData() *types.CommonEntityData {
    sequenceDetails.EntityData.YFilter = sequenceDetails.YFilter
    sequenceDetails.EntityData.YangName = "sequence-details"
    sequenceDetails.EntityData.BundleName = "cisco_ios_xr"
    sequenceDetails.EntityData.ParentYangName = "access"
    sequenceDetails.EntityData.SegmentPath = "sequence-details"
    sequenceDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/" + sequenceDetails.EntityData.SegmentPath
    sequenceDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceDetails.EntityData.Children = types.NewOrderedMap()
    sequenceDetails.EntityData.Children.Append("sequence-detail", types.YChild{"SequenceDetail", nil})
    for i := range sequenceDetails.SequenceDetail {
        sequenceDetails.EntityData.Children.Append(types.GetSegmentPath(sequenceDetails.SequenceDetail[i]), types.YChild{"SequenceDetail", sequenceDetails.SequenceDetail[i]})
    }
    sequenceDetails.EntityData.Leafs = types.NewOrderedMap()

    sequenceDetails.EntityData.YListKeys = []string {}

    return &(sequenceDetails.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail
// Detail ACL information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Detail ACL information for a particular sequence.
    // The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Common ACL detail information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail.
    CommonAclDetail []*AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail

    // Interface ACL detail information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail.
    InterfaceAclDetail []*AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) GetEntityData() *types.CommonEntityData {
    sequenceDetail.EntityData.YFilter = sequenceDetail.YFilter
    sequenceDetail.EntityData.YangName = "sequence-detail"
    sequenceDetail.EntityData.BundleName = "cisco_ios_xr"
    sequenceDetail.EntityData.ParentYangName = "sequence-details"
    sequenceDetail.EntityData.SegmentPath = "sequence-detail" + types.AddKeyToken(sequenceDetail.SequenceNumber, "sequence-number")
    sequenceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/" + sequenceDetail.EntityData.SegmentPath
    sequenceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceDetail.EntityData.Children = types.NewOrderedMap()
    sequenceDetail.EntityData.Children.Append("common-acl-detail", types.YChild{"CommonAclDetail", nil})
    for i := range sequenceDetail.CommonAclDetail {
        types.SetYListKey(sequenceDetail.CommonAclDetail[i], i)
        sequenceDetail.EntityData.Children.Append(types.GetSegmentPath(sequenceDetail.CommonAclDetail[i]), types.YChild{"CommonAclDetail", sequenceDetail.CommonAclDetail[i]})
    }
    sequenceDetail.EntityData.Children.Append("interface-acl-detail", types.YChild{"InterfaceAclDetail", nil})
    for i := range sequenceDetail.InterfaceAclDetail {
        types.SetYListKey(sequenceDetail.InterfaceAclDetail[i], i)
        sequenceDetail.EntityData.Children.Append(types.GetSegmentPath(sequenceDetail.InterfaceAclDetail[i]), types.YChild{"InterfaceAclDetail", sequenceDetail.InterfaceAclDetail[i]})
    }
    sequenceDetail.EntityData.Leafs = types.NewOrderedMap()
    sequenceDetail.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", sequenceDetail.SequenceNumber})

    sequenceDetail.EntityData.YListKeys = []string {"SequenceNumber"}

    return &(sequenceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail
// Common ACL detail information across Slices
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetEntityData() *types.CommonEntityData {
    commonAclDetail.EntityData.YFilter = commonAclDetail.YFilter
    commonAclDetail.EntityData.YangName = "common-acl-detail"
    commonAclDetail.EntityData.BundleName = "cisco_ios_xr"
    commonAclDetail.EntityData.ParentYangName = "sequence-detail"
    commonAclDetail.EntityData.SegmentPath = "common-acl-detail" + types.AddNoKeyToken(commonAclDetail)
    commonAclDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/" + commonAclDetail.EntityData.SegmentPath
    commonAclDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    commonAclDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    commonAclDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    commonAclDetail.EntityData.Children = types.NewOrderedMap()
    commonAclDetail.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &commonAclDetail.AceBrief})
    commonAclDetail.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range commonAclDetail.AceDetail {
        types.SetYListKey(commonAclDetail.AceDetail[i], i)
        commonAclDetail.EntityData.Children.Append(types.GetSegmentPath(commonAclDetail.AceDetail[i]), types.YChild{"AceDetail", commonAclDetail.AceDetail[i]})
    }
    commonAclDetail.EntityData.Leafs = types.NewOrderedMap()

    commonAclDetail.EntityData.YListKeys = []string {}

    return &(commonAclDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "common-acl-detail"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "common-acl-detail"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail
// Interface ACL detail information across Slices
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetEntityData() *types.CommonEntityData {
    interfaceAclDetail.EntityData.YFilter = interfaceAclDetail.YFilter
    interfaceAclDetail.EntityData.YangName = "interface-acl-detail"
    interfaceAclDetail.EntityData.BundleName = "cisco_ios_xr"
    interfaceAclDetail.EntityData.ParentYangName = "sequence-detail"
    interfaceAclDetail.EntityData.SegmentPath = "interface-acl-detail" + types.AddNoKeyToken(interfaceAclDetail)
    interfaceAclDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/" + interfaceAclDetail.EntityData.SegmentPath
    interfaceAclDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAclDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAclDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAclDetail.EntityData.Children = types.NewOrderedMap()
    interfaceAclDetail.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &interfaceAclDetail.AceBrief})
    interfaceAclDetail.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range interfaceAclDetail.AceDetail {
        types.SetYListKey(interfaceAclDetail.AceDetail[i], i)
        interfaceAclDetail.EntityData.Children.Append(types.GetSegmentPath(interfaceAclDetail.AceDetail[i]), types.YChild{"AceDetail", interfaceAclDetail.AceDetail[i]})
    }
    interfaceAclDetail.EntityData.Leafs = types.NewOrderedMap()

    interfaceAclDetail.EntityData.YListKeys = []string {}

    return &(interfaceAclDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "interface-acl-detail"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "interface-acl-detail"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs
// Table of all sequence numbers per ACL
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detail ACL information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief.
    SequenceBrief []*AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs) GetEntityData() *types.CommonEntityData {
    sequenceBriefs.EntityData.YFilter = sequenceBriefs.YFilter
    sequenceBriefs.EntityData.YangName = "sequence-briefs"
    sequenceBriefs.EntityData.BundleName = "cisco_ios_xr"
    sequenceBriefs.EntityData.ParentYangName = "access"
    sequenceBriefs.EntityData.SegmentPath = "sequence-briefs"
    sequenceBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/" + sequenceBriefs.EntityData.SegmentPath
    sequenceBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceBriefs.EntityData.Children = types.NewOrderedMap()
    sequenceBriefs.EntityData.Children.Append("sequence-brief", types.YChild{"SequenceBrief", nil})
    for i := range sequenceBriefs.SequenceBrief {
        sequenceBriefs.EntityData.Children.Append(types.GetSegmentPath(sequenceBriefs.SequenceBrief[i]), types.YChild{"SequenceBrief", sequenceBriefs.SequenceBrief[i]})
    }
    sequenceBriefs.EntityData.Leafs = types.NewOrderedMap()

    sequenceBriefs.EntityData.YListKeys = []string {}

    return &(sequenceBriefs.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief
// Detail ACL information
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Brief ACL information for a particular sequence.
    // The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Common ACL information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl.
    CommonAcl []*AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl

    // Interface ACL information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl.
    InterfaceAcl []*AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) GetEntityData() *types.CommonEntityData {
    sequenceBrief.EntityData.YFilter = sequenceBrief.YFilter
    sequenceBrief.EntityData.YangName = "sequence-brief"
    sequenceBrief.EntityData.BundleName = "cisco_ios_xr"
    sequenceBrief.EntityData.ParentYangName = "sequence-briefs"
    sequenceBrief.EntityData.SegmentPath = "sequence-brief" + types.AddKeyToken(sequenceBrief.SequenceNumber, "sequence-number")
    sequenceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-briefs/" + sequenceBrief.EntityData.SegmentPath
    sequenceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceBrief.EntityData.Children = types.NewOrderedMap()
    sequenceBrief.EntityData.Children.Append("common-acl", types.YChild{"CommonAcl", nil})
    for i := range sequenceBrief.CommonAcl {
        types.SetYListKey(sequenceBrief.CommonAcl[i], i)
        sequenceBrief.EntityData.Children.Append(types.GetSegmentPath(sequenceBrief.CommonAcl[i]), types.YChild{"CommonAcl", sequenceBrief.CommonAcl[i]})
    }
    sequenceBrief.EntityData.Children.Append("interface-acl", types.YChild{"InterfaceAcl", nil})
    for i := range sequenceBrief.InterfaceAcl {
        types.SetYListKey(sequenceBrief.InterfaceAcl[i], i)
        sequenceBrief.EntityData.Children.Append(types.GetSegmentPath(sequenceBrief.InterfaceAcl[i]), types.YChild{"InterfaceAcl", sequenceBrief.InterfaceAcl[i]})
    }
    sequenceBrief.EntityData.Leafs = types.NewOrderedMap()
    sequenceBrief.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", sequenceBrief.SequenceNumber})

    sequenceBrief.EntityData.YListKeys = []string {"SequenceNumber"}

    return &(sequenceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl
// Common ACL information across Slices
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress
}

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetEntityData() *types.CommonEntityData {
    commonAcl.EntityData.YFilter = commonAcl.YFilter
    commonAcl.EntityData.YangName = "common-acl"
    commonAcl.EntityData.BundleName = "cisco_ios_xr"
    commonAcl.EntityData.ParentYangName = "sequence-brief"
    commonAcl.EntityData.SegmentPath = "common-acl" + types.AddNoKeyToken(commonAcl)
    commonAcl.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-briefs/sequence-brief/" + commonAcl.EntityData.SegmentPath
    commonAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    commonAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    commonAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    commonAcl.EntityData.Children = types.NewOrderedMap()
    commonAcl.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &commonAcl.NextHopAddress})
    commonAcl.EntityData.Leafs = types.NewOrderedMap()
    commonAcl.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", commonAcl.Grant})
    commonAcl.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", commonAcl.LoggingEnabled})
    commonAcl.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", commonAcl.PerAceIcmpEnabled})
    commonAcl.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", commonAcl.NextHopEnabled})
    commonAcl.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", commonAcl.DefaultNextHopEnabled})
    commonAcl.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", commonAcl.TotalTcamEntries})
    commonAcl.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", commonAcl.Hits})
    commonAcl.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", commonAcl.NpuId})

    commonAcl.EntityData.YListKeys = []string {}

    return &(commonAcl.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "common-acl"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-briefs/sequence-brief/common-acl/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl
// Interface ACL information across Slices
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetEntityData() *types.CommonEntityData {
    interfaceAcl.EntityData.YFilter = interfaceAcl.YFilter
    interfaceAcl.EntityData.YangName = "interface-acl"
    interfaceAcl.EntityData.BundleName = "cisco_ios_xr"
    interfaceAcl.EntityData.ParentYangName = "sequence-brief"
    interfaceAcl.EntityData.SegmentPath = "interface-acl" + types.AddNoKeyToken(interfaceAcl)
    interfaceAcl.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-briefs/sequence-brief/" + interfaceAcl.EntityData.SegmentPath
    interfaceAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAcl.EntityData.Children = types.NewOrderedMap()
    interfaceAcl.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &interfaceAcl.NextHopAddress})
    interfaceAcl.EntityData.Leafs = types.NewOrderedMap()
    interfaceAcl.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", interfaceAcl.Grant})
    interfaceAcl.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", interfaceAcl.LoggingEnabled})
    interfaceAcl.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", interfaceAcl.PerAceIcmpEnabled})
    interfaceAcl.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", interfaceAcl.NextHopEnabled})
    interfaceAcl.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", interfaceAcl.DefaultNextHopEnabled})
    interfaceAcl.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", interfaceAcl.TotalTcamEntries})
    interfaceAcl.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", interfaceAcl.Hits})
    interfaceAcl.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", interfaceAcl.NpuId})

    interfaceAcl.EntityData.YListKeys = []string {}

    return &(interfaceAcl.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "interface-acl"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv4/accesses/access/sequence-briefs/sequence-brief/interface-acl/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6
// Accesslist version IPv6
type AccessListHardware_Nodes_Node_Egress_Ipv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table for access lists.
    Accesses AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses
}

func (ipv6 *AccessListHardware_Nodes_Node_Egress_Ipv6) GetEntityData() *types.CommonEntityData {
    ipv6.EntityData.YFilter = ipv6.YFilter
    ipv6.EntityData.YangName = "ipv6"
    ipv6.EntityData.BundleName = "cisco_ios_xr"
    ipv6.EntityData.ParentYangName = "egress"
    ipv6.EntityData.SegmentPath = "ipv6"
    ipv6.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/" + ipv6.EntityData.SegmentPath
    ipv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6.EntityData.Children = types.NewOrderedMap()
    ipv6.EntityData.Children.Append("accesses", types.YChild{"Accesses", &ipv6.Accesses})
    ipv6.EntityData.Leafs = types.NewOrderedMap()

    ipv6.EntityData.YListKeys = []string {}

    return &(ipv6.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses
// Table for access lists
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of ACLs. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access.
    Access []*AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access
}

func (accesses *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses) GetEntityData() *types.CommonEntityData {
    accesses.EntityData.YFilter = accesses.YFilter
    accesses.EntityData.YangName = "accesses"
    accesses.EntityData.BundleName = "cisco_ios_xr"
    accesses.EntityData.ParentYangName = "ipv6"
    accesses.EntityData.SegmentPath = "accesses"
    accesses.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/" + accesses.EntityData.SegmentPath
    accesses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    accesses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    accesses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    accesses.EntityData.Children = types.NewOrderedMap()
    accesses.EntityData.Children.Append("access", types.YChild{"Access", nil})
    for i := range accesses.Access {
        accesses.EntityData.Children.Append(types.GetSegmentPath(accesses.Access[i]), types.YChild{"Access", accesses.Access[i]})
    }
    accesses.EntityData.Leafs = types.NewOrderedMap()

    accesses.EntityData.YListKeys = []string {}

    return &(accesses.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access
// List of ACLs
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of the access list. The type is string.
    AccessListName interface{}

    // Implicit ACL information.
    Implicit AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit

    // Table of all sequence numbers per ACL.
    SequenceDetails AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails

    // Table of all sequence numbers per ACL.
    SequenceBriefs AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs
}

func (access *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access) GetEntityData() *types.CommonEntityData {
    access.EntityData.YFilter = access.YFilter
    access.EntityData.YangName = "access"
    access.EntityData.BundleName = "cisco_ios_xr"
    access.EntityData.ParentYangName = "accesses"
    access.EntityData.SegmentPath = "access" + types.AddKeyToken(access.AccessListName, "access-list-name")
    access.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/" + access.EntityData.SegmentPath
    access.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    access.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    access.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    access.EntityData.Children = types.NewOrderedMap()
    access.EntityData.Children.Append("implicit", types.YChild{"Implicit", &access.Implicit})
    access.EntityData.Children.Append("sequence-details", types.YChild{"SequenceDetails", &access.SequenceDetails})
    access.EntityData.Children.Append("sequence-briefs", types.YChild{"SequenceBriefs", &access.SequenceBriefs})
    access.EntityData.Leafs = types.NewOrderedMap()
    access.EntityData.Leafs.Append("access-list-name", types.YLeaf{"AccessListName", access.AccessListName})

    access.EntityData.YListKeys = []string {"AccessListName"}

    return &(access.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit
// Implicit ACL information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Implicit ACL Entries across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl.
    ImplicitAcl []*AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl
}

func (implicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit) GetEntityData() *types.CommonEntityData {
    implicit.EntityData.YFilter = implicit.YFilter
    implicit.EntityData.YangName = "implicit"
    implicit.EntityData.BundleName = "cisco_ios_xr"
    implicit.EntityData.ParentYangName = "access"
    implicit.EntityData.SegmentPath = "implicit"
    implicit.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/" + implicit.EntityData.SegmentPath
    implicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicit.EntityData.Children = types.NewOrderedMap()
    implicit.EntityData.Children.Append("implicit-acl", types.YChild{"ImplicitAcl", nil})
    for i := range implicit.ImplicitAcl {
        types.SetYListKey(implicit.ImplicitAcl[i], i)
        implicit.EntityData.Children.Append(types.GetSegmentPath(implicit.ImplicitAcl[i]), types.YChild{"ImplicitAcl", implicit.ImplicitAcl[i]})
    }
    implicit.EntityData.Leafs = types.NewOrderedMap()

    implicit.EntityData.YListKeys = []string {}

    return &(implicit.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl
// Implicit ACL Entries across Slices
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Common ACL Implicit Entries.
    CommonAclImplicit AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit

    // Interface ACL Implicit Entries.
    InterfaceAclImplicit AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit
}

func (implicitAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) GetEntityData() *types.CommonEntityData {
    implicitAcl.EntityData.YFilter = implicitAcl.YFilter
    implicitAcl.EntityData.YangName = "implicit-acl"
    implicitAcl.EntityData.BundleName = "cisco_ios_xr"
    implicitAcl.EntityData.ParentYangName = "implicit"
    implicitAcl.EntityData.SegmentPath = "implicit-acl" + types.AddNoKeyToken(implicitAcl)
    implicitAcl.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/" + implicitAcl.EntityData.SegmentPath
    implicitAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitAcl.EntityData.Children = types.NewOrderedMap()
    implicitAcl.EntityData.Children.Append("common-acl-implicit", types.YChild{"CommonAclImplicit", &implicitAcl.CommonAclImplicit})
    implicitAcl.EntityData.Children.Append("interface-acl-implicit", types.YChild{"InterfaceAclImplicit", &implicitAcl.InterfaceAclImplicit})
    implicitAcl.EntityData.Leafs = types.NewOrderedMap()

    implicitAcl.EntityData.YListKeys = []string {}

    return &(implicitAcl.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit
// Common ACL Implicit Entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Implicit NDNA permit.
    ImplicitNdnaPermit AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit

    // Implicit NDNS permit.
    ImplicitNdnsPermit AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit

    // Implicit deny.
    ImplicitDeny AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetEntityData() *types.CommonEntityData {
    commonAclImplicit.EntityData.YFilter = commonAclImplicit.YFilter
    commonAclImplicit.EntityData.YangName = "common-acl-implicit"
    commonAclImplicit.EntityData.BundleName = "cisco_ios_xr"
    commonAclImplicit.EntityData.ParentYangName = "implicit-acl"
    commonAclImplicit.EntityData.SegmentPath = "common-acl-implicit"
    commonAclImplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/" + commonAclImplicit.EntityData.SegmentPath
    commonAclImplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    commonAclImplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    commonAclImplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    commonAclImplicit.EntityData.Children = types.NewOrderedMap()
    commonAclImplicit.EntityData.Children.Append("implicit-ndna-permit", types.YChild{"ImplicitNdnaPermit", &commonAclImplicit.ImplicitNdnaPermit})
    commonAclImplicit.EntityData.Children.Append("implicit-ndns-permit", types.YChild{"ImplicitNdnsPermit", &commonAclImplicit.ImplicitNdnsPermit})
    commonAclImplicit.EntityData.Children.Append("implicit-deny", types.YChild{"ImplicitDeny", &commonAclImplicit.ImplicitDeny})
    commonAclImplicit.EntityData.Leafs = types.NewOrderedMap()

    commonAclImplicit.EntityData.YListKeys = []string {}

    return &(commonAclImplicit.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit
// Implicit NDNA permit
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnaPermit.EntityData.YFilter = implicitNdnaPermit.YFilter
    implicitNdnaPermit.EntityData.YangName = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnaPermit.EntityData.ParentYangName = "common-acl-implicit"
    implicitNdnaPermit.EntityData.SegmentPath = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/" + implicitNdnaPermit.EntityData.SegmentPath
    implicitNdnaPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnaPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnaPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnaPermit.EntityData.Children = types.NewOrderedMap()
    implicitNdnaPermit.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &implicitNdnaPermit.AceBrief})
    implicitNdnaPermit.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range implicitNdnaPermit.AceDetail {
        types.SetYListKey(implicitNdnaPermit.AceDetail[i], i)
        implicitNdnaPermit.EntityData.Children.Append(types.GetSegmentPath(implicitNdnaPermit.AceDetail[i]), types.YChild{"AceDetail", implicitNdnaPermit.AceDetail[i]})
    }
    implicitNdnaPermit.EntityData.Leafs = types.NewOrderedMap()

    implicitNdnaPermit.EntityData.YListKeys = []string {}

    return &(implicitNdnaPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndna-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndna-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit
// Implicit NDNS permit
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnsPermit.EntityData.YFilter = implicitNdnsPermit.YFilter
    implicitNdnsPermit.EntityData.YangName = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnsPermit.EntityData.ParentYangName = "common-acl-implicit"
    implicitNdnsPermit.EntityData.SegmentPath = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/" + implicitNdnsPermit.EntityData.SegmentPath
    implicitNdnsPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnsPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnsPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnsPermit.EntityData.Children = types.NewOrderedMap()
    implicitNdnsPermit.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &implicitNdnsPermit.AceBrief})
    implicitNdnsPermit.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range implicitNdnsPermit.AceDetail {
        types.SetYListKey(implicitNdnsPermit.AceDetail[i], i)
        implicitNdnsPermit.EntityData.Children.Append(types.GetSegmentPath(implicitNdnsPermit.AceDetail[i]), types.YChild{"AceDetail", implicitNdnsPermit.AceDetail[i]})
    }
    implicitNdnsPermit.EntityData.Leafs = types.NewOrderedMap()

    implicitNdnsPermit.EntityData.YListKeys = []string {}

    return &(implicitNdnsPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndns-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndns-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny
// Implicit deny
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetEntityData() *types.CommonEntityData {
    implicitDeny.EntityData.YFilter = implicitDeny.YFilter
    implicitDeny.EntityData.YangName = "implicit-deny"
    implicitDeny.EntityData.BundleName = "cisco_ios_xr"
    implicitDeny.EntityData.ParentYangName = "common-acl-implicit"
    implicitDeny.EntityData.SegmentPath = "implicit-deny"
    implicitDeny.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/" + implicitDeny.EntityData.SegmentPath
    implicitDeny.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitDeny.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitDeny.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitDeny.EntityData.Children = types.NewOrderedMap()
    implicitDeny.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &implicitDeny.AceBrief})
    implicitDeny.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range implicitDeny.AceDetail {
        types.SetYListKey(implicitDeny.AceDetail[i], i)
        implicitDeny.EntityData.Children.Append(types.GetSegmentPath(implicitDeny.AceDetail[i]), types.YChild{"AceDetail", implicitDeny.AceDetail[i]})
    }
    implicitDeny.EntityData.Leafs = types.NewOrderedMap()

    implicitDeny.EntityData.YListKeys = []string {}

    return &(implicitDeny.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-deny"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-deny"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit
// Interface ACL Implicit Entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Implicit NDNA permit.
    ImplicitNdnaPermit AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit

    // Implicit NDNS permit.
    ImplicitNdnsPermit AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit

    // Implicit deny.
    ImplicitDeny AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetEntityData() *types.CommonEntityData {
    interfaceAclImplicit.EntityData.YFilter = interfaceAclImplicit.YFilter
    interfaceAclImplicit.EntityData.YangName = "interface-acl-implicit"
    interfaceAclImplicit.EntityData.BundleName = "cisco_ios_xr"
    interfaceAclImplicit.EntityData.ParentYangName = "implicit-acl"
    interfaceAclImplicit.EntityData.SegmentPath = "interface-acl-implicit"
    interfaceAclImplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/" + interfaceAclImplicit.EntityData.SegmentPath
    interfaceAclImplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAclImplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAclImplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAclImplicit.EntityData.Children = types.NewOrderedMap()
    interfaceAclImplicit.EntityData.Children.Append("implicit-ndna-permit", types.YChild{"ImplicitNdnaPermit", &interfaceAclImplicit.ImplicitNdnaPermit})
    interfaceAclImplicit.EntityData.Children.Append("implicit-ndns-permit", types.YChild{"ImplicitNdnsPermit", &interfaceAclImplicit.ImplicitNdnsPermit})
    interfaceAclImplicit.EntityData.Children.Append("implicit-deny", types.YChild{"ImplicitDeny", &interfaceAclImplicit.ImplicitDeny})
    interfaceAclImplicit.EntityData.Leafs = types.NewOrderedMap()

    interfaceAclImplicit.EntityData.YListKeys = []string {}

    return &(interfaceAclImplicit.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit
// Implicit NDNA permit
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnaPermit.EntityData.YFilter = implicitNdnaPermit.YFilter
    implicitNdnaPermit.EntityData.YangName = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnaPermit.EntityData.ParentYangName = "interface-acl-implicit"
    implicitNdnaPermit.EntityData.SegmentPath = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/" + implicitNdnaPermit.EntityData.SegmentPath
    implicitNdnaPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnaPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnaPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnaPermit.EntityData.Children = types.NewOrderedMap()
    implicitNdnaPermit.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &implicitNdnaPermit.AceBrief})
    implicitNdnaPermit.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range implicitNdnaPermit.AceDetail {
        types.SetYListKey(implicitNdnaPermit.AceDetail[i], i)
        implicitNdnaPermit.EntityData.Children.Append(types.GetSegmentPath(implicitNdnaPermit.AceDetail[i]), types.YChild{"AceDetail", implicitNdnaPermit.AceDetail[i]})
    }
    implicitNdnaPermit.EntityData.Leafs = types.NewOrderedMap()

    implicitNdnaPermit.EntityData.YListKeys = []string {}

    return &(implicitNdnaPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndna-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndna-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit
// Implicit NDNS permit
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnsPermit.EntityData.YFilter = implicitNdnsPermit.YFilter
    implicitNdnsPermit.EntityData.YangName = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnsPermit.EntityData.ParentYangName = "interface-acl-implicit"
    implicitNdnsPermit.EntityData.SegmentPath = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/" + implicitNdnsPermit.EntityData.SegmentPath
    implicitNdnsPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnsPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnsPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnsPermit.EntityData.Children = types.NewOrderedMap()
    implicitNdnsPermit.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &implicitNdnsPermit.AceBrief})
    implicitNdnsPermit.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range implicitNdnsPermit.AceDetail {
        types.SetYListKey(implicitNdnsPermit.AceDetail[i], i)
        implicitNdnsPermit.EntityData.Children.Append(types.GetSegmentPath(implicitNdnsPermit.AceDetail[i]), types.YChild{"AceDetail", implicitNdnsPermit.AceDetail[i]})
    }
    implicitNdnsPermit.EntityData.Leafs = types.NewOrderedMap()

    implicitNdnsPermit.EntityData.YListKeys = []string {}

    return &(implicitNdnsPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndns-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndns-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny
// Implicit deny
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail
}

func (implicitDeny *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetEntityData() *types.CommonEntityData {
    implicitDeny.EntityData.YFilter = implicitDeny.YFilter
    implicitDeny.EntityData.YangName = "implicit-deny"
    implicitDeny.EntityData.BundleName = "cisco_ios_xr"
    implicitDeny.EntityData.ParentYangName = "interface-acl-implicit"
    implicitDeny.EntityData.SegmentPath = "implicit-deny"
    implicitDeny.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/" + implicitDeny.EntityData.SegmentPath
    implicitDeny.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitDeny.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitDeny.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitDeny.EntityData.Children = types.NewOrderedMap()
    implicitDeny.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &implicitDeny.AceBrief})
    implicitDeny.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range implicitDeny.AceDetail {
        types.SetYListKey(implicitDeny.AceDetail[i], i)
        implicitDeny.EntityData.Children.Append(types.GetSegmentPath(implicitDeny.AceDetail[i]), types.YChild{"AceDetail", implicitDeny.AceDetail[i]})
    }
    implicitDeny.EntityData.Leafs = types.NewOrderedMap()

    implicitDeny.EntityData.YListKeys = []string {}

    return &(implicitDeny.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-deny"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-deny"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails
// Table of all sequence numbers per ACL
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detail ACL information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail.
    SequenceDetail []*AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails) GetEntityData() *types.CommonEntityData {
    sequenceDetails.EntityData.YFilter = sequenceDetails.YFilter
    sequenceDetails.EntityData.YangName = "sequence-details"
    sequenceDetails.EntityData.BundleName = "cisco_ios_xr"
    sequenceDetails.EntityData.ParentYangName = "access"
    sequenceDetails.EntityData.SegmentPath = "sequence-details"
    sequenceDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/" + sequenceDetails.EntityData.SegmentPath
    sequenceDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceDetails.EntityData.Children = types.NewOrderedMap()
    sequenceDetails.EntityData.Children.Append("sequence-detail", types.YChild{"SequenceDetail", nil})
    for i := range sequenceDetails.SequenceDetail {
        sequenceDetails.EntityData.Children.Append(types.GetSegmentPath(sequenceDetails.SequenceDetail[i]), types.YChild{"SequenceDetail", sequenceDetails.SequenceDetail[i]})
    }
    sequenceDetails.EntityData.Leafs = types.NewOrderedMap()

    sequenceDetails.EntityData.YListKeys = []string {}

    return &(sequenceDetails.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail
// Detail ACL information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Detail ACL information for a particular sequence.
    // The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Common ACL detail information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail.
    CommonAclDetail []*AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail

    // Interface ACL detail information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail.
    InterfaceAclDetail []*AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) GetEntityData() *types.CommonEntityData {
    sequenceDetail.EntityData.YFilter = sequenceDetail.YFilter
    sequenceDetail.EntityData.YangName = "sequence-detail"
    sequenceDetail.EntityData.BundleName = "cisco_ios_xr"
    sequenceDetail.EntityData.ParentYangName = "sequence-details"
    sequenceDetail.EntityData.SegmentPath = "sequence-detail" + types.AddKeyToken(sequenceDetail.SequenceNumber, "sequence-number")
    sequenceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/" + sequenceDetail.EntityData.SegmentPath
    sequenceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceDetail.EntityData.Children = types.NewOrderedMap()
    sequenceDetail.EntityData.Children.Append("common-acl-detail", types.YChild{"CommonAclDetail", nil})
    for i := range sequenceDetail.CommonAclDetail {
        types.SetYListKey(sequenceDetail.CommonAclDetail[i], i)
        sequenceDetail.EntityData.Children.Append(types.GetSegmentPath(sequenceDetail.CommonAclDetail[i]), types.YChild{"CommonAclDetail", sequenceDetail.CommonAclDetail[i]})
    }
    sequenceDetail.EntityData.Children.Append("interface-acl-detail", types.YChild{"InterfaceAclDetail", nil})
    for i := range sequenceDetail.InterfaceAclDetail {
        types.SetYListKey(sequenceDetail.InterfaceAclDetail[i], i)
        sequenceDetail.EntityData.Children.Append(types.GetSegmentPath(sequenceDetail.InterfaceAclDetail[i]), types.YChild{"InterfaceAclDetail", sequenceDetail.InterfaceAclDetail[i]})
    }
    sequenceDetail.EntityData.Leafs = types.NewOrderedMap()
    sequenceDetail.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", sequenceDetail.SequenceNumber})

    sequenceDetail.EntityData.YListKeys = []string {"SequenceNumber"}

    return &(sequenceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail
// Common ACL detail information across Slices
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetEntityData() *types.CommonEntityData {
    commonAclDetail.EntityData.YFilter = commonAclDetail.YFilter
    commonAclDetail.EntityData.YangName = "common-acl-detail"
    commonAclDetail.EntityData.BundleName = "cisco_ios_xr"
    commonAclDetail.EntityData.ParentYangName = "sequence-detail"
    commonAclDetail.EntityData.SegmentPath = "common-acl-detail" + types.AddNoKeyToken(commonAclDetail)
    commonAclDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/" + commonAclDetail.EntityData.SegmentPath
    commonAclDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    commonAclDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    commonAclDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    commonAclDetail.EntityData.Children = types.NewOrderedMap()
    commonAclDetail.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &commonAclDetail.AceBrief})
    commonAclDetail.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range commonAclDetail.AceDetail {
        types.SetYListKey(commonAclDetail.AceDetail[i], i)
        commonAclDetail.EntityData.Children.Append(types.GetSegmentPath(commonAclDetail.AceDetail[i]), types.YChild{"AceDetail", commonAclDetail.AceDetail[i]})
    }
    commonAclDetail.EntityData.Leafs = types.NewOrderedMap()

    commonAclDetail.EntityData.YListKeys = []string {}

    return &(commonAclDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "common-acl-detail"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "common-acl-detail"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail
// Interface ACL detail information across Slices
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetEntityData() *types.CommonEntityData {
    interfaceAclDetail.EntityData.YFilter = interfaceAclDetail.YFilter
    interfaceAclDetail.EntityData.YangName = "interface-acl-detail"
    interfaceAclDetail.EntityData.BundleName = "cisco_ios_xr"
    interfaceAclDetail.EntityData.ParentYangName = "sequence-detail"
    interfaceAclDetail.EntityData.SegmentPath = "interface-acl-detail" + types.AddNoKeyToken(interfaceAclDetail)
    interfaceAclDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/" + interfaceAclDetail.EntityData.SegmentPath
    interfaceAclDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAclDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAclDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAclDetail.EntityData.Children = types.NewOrderedMap()
    interfaceAclDetail.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &interfaceAclDetail.AceBrief})
    interfaceAclDetail.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range interfaceAclDetail.AceDetail {
        types.SetYListKey(interfaceAclDetail.AceDetail[i], i)
        interfaceAclDetail.EntityData.Children.Append(types.GetSegmentPath(interfaceAclDetail.AceDetail[i]), types.YChild{"AceDetail", interfaceAclDetail.AceDetail[i]})
    }
    interfaceAclDetail.EntityData.Leafs = types.NewOrderedMap()

    interfaceAclDetail.EntityData.YListKeys = []string {}

    return &(interfaceAclDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "interface-acl-detail"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "interface-acl-detail"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs
// Table of all sequence numbers per ACL
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detail ACL information. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief.
    SequenceBrief []*AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs) GetEntityData() *types.CommonEntityData {
    sequenceBriefs.EntityData.YFilter = sequenceBriefs.YFilter
    sequenceBriefs.EntityData.YangName = "sequence-briefs"
    sequenceBriefs.EntityData.BundleName = "cisco_ios_xr"
    sequenceBriefs.EntityData.ParentYangName = "access"
    sequenceBriefs.EntityData.SegmentPath = "sequence-briefs"
    sequenceBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/" + sequenceBriefs.EntityData.SegmentPath
    sequenceBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceBriefs.EntityData.Children = types.NewOrderedMap()
    sequenceBriefs.EntityData.Children.Append("sequence-brief", types.YChild{"SequenceBrief", nil})
    for i := range sequenceBriefs.SequenceBrief {
        sequenceBriefs.EntityData.Children.Append(types.GetSegmentPath(sequenceBriefs.SequenceBrief[i]), types.YChild{"SequenceBrief", sequenceBriefs.SequenceBrief[i]})
    }
    sequenceBriefs.EntityData.Leafs = types.NewOrderedMap()

    sequenceBriefs.EntityData.YListKeys = []string {}

    return &(sequenceBriefs.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief
// Detail ACL information
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Brief ACL information for a particular sequence.
    // The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Common ACL information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl.
    CommonAcl []*AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl

    // Interface ACL information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl.
    InterfaceAcl []*AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) GetEntityData() *types.CommonEntityData {
    sequenceBrief.EntityData.YFilter = sequenceBrief.YFilter
    sequenceBrief.EntityData.YangName = "sequence-brief"
    sequenceBrief.EntityData.BundleName = "cisco_ios_xr"
    sequenceBrief.EntityData.ParentYangName = "sequence-briefs"
    sequenceBrief.EntityData.SegmentPath = "sequence-brief" + types.AddKeyToken(sequenceBrief.SequenceNumber, "sequence-number")
    sequenceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-briefs/" + sequenceBrief.EntityData.SegmentPath
    sequenceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceBrief.EntityData.Children = types.NewOrderedMap()
    sequenceBrief.EntityData.Children.Append("common-acl", types.YChild{"CommonAcl", nil})
    for i := range sequenceBrief.CommonAcl {
        types.SetYListKey(sequenceBrief.CommonAcl[i], i)
        sequenceBrief.EntityData.Children.Append(types.GetSegmentPath(sequenceBrief.CommonAcl[i]), types.YChild{"CommonAcl", sequenceBrief.CommonAcl[i]})
    }
    sequenceBrief.EntityData.Children.Append("interface-acl", types.YChild{"InterfaceAcl", nil})
    for i := range sequenceBrief.InterfaceAcl {
        types.SetYListKey(sequenceBrief.InterfaceAcl[i], i)
        sequenceBrief.EntityData.Children.Append(types.GetSegmentPath(sequenceBrief.InterfaceAcl[i]), types.YChild{"InterfaceAcl", sequenceBrief.InterfaceAcl[i]})
    }
    sequenceBrief.EntityData.Leafs = types.NewOrderedMap()
    sequenceBrief.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", sequenceBrief.SequenceNumber})

    sequenceBrief.EntityData.YListKeys = []string {"SequenceNumber"}

    return &(sequenceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl
// Common ACL information across Slices
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress
}

func (commonAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetEntityData() *types.CommonEntityData {
    commonAcl.EntityData.YFilter = commonAcl.YFilter
    commonAcl.EntityData.YangName = "common-acl"
    commonAcl.EntityData.BundleName = "cisco_ios_xr"
    commonAcl.EntityData.ParentYangName = "sequence-brief"
    commonAcl.EntityData.SegmentPath = "common-acl" + types.AddNoKeyToken(commonAcl)
    commonAcl.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-briefs/sequence-brief/" + commonAcl.EntityData.SegmentPath
    commonAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    commonAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    commonAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    commonAcl.EntityData.Children = types.NewOrderedMap()
    commonAcl.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &commonAcl.NextHopAddress})
    commonAcl.EntityData.Leafs = types.NewOrderedMap()
    commonAcl.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", commonAcl.Grant})
    commonAcl.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", commonAcl.LoggingEnabled})
    commonAcl.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", commonAcl.PerAceIcmpEnabled})
    commonAcl.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", commonAcl.NextHopEnabled})
    commonAcl.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", commonAcl.DefaultNextHopEnabled})
    commonAcl.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", commonAcl.TotalTcamEntries})
    commonAcl.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", commonAcl.Hits})
    commonAcl.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", commonAcl.NpuId})

    commonAcl.EntityData.YListKeys = []string {}

    return &(commonAcl.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "common-acl"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-briefs/sequence-brief/common-acl/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl
// Interface ACL information across Slices
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetEntityData() *types.CommonEntityData {
    interfaceAcl.EntityData.YFilter = interfaceAcl.YFilter
    interfaceAcl.EntityData.YangName = "interface-acl"
    interfaceAcl.EntityData.BundleName = "cisco_ios_xr"
    interfaceAcl.EntityData.ParentYangName = "sequence-brief"
    interfaceAcl.EntityData.SegmentPath = "interface-acl" + types.AddNoKeyToken(interfaceAcl)
    interfaceAcl.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-briefs/sequence-brief/" + interfaceAcl.EntityData.SegmentPath
    interfaceAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAcl.EntityData.Children = types.NewOrderedMap()
    interfaceAcl.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &interfaceAcl.NextHopAddress})
    interfaceAcl.EntityData.Leafs = types.NewOrderedMap()
    interfaceAcl.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", interfaceAcl.Grant})
    interfaceAcl.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", interfaceAcl.LoggingEnabled})
    interfaceAcl.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", interfaceAcl.PerAceIcmpEnabled})
    interfaceAcl.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", interfaceAcl.NextHopEnabled})
    interfaceAcl.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", interfaceAcl.DefaultNextHopEnabled})
    interfaceAcl.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", interfaceAcl.TotalTcamEntries})
    interfaceAcl.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", interfaceAcl.Hits})
    interfaceAcl.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", interfaceAcl.NpuId})

    interfaceAcl.EntityData.YListKeys = []string {}

    return &(interfaceAcl.EntityData)
}

// AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Egress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "interface-acl"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/egress/ipv6/accesses/access/sequence-briefs/sequence-brief/interface-acl/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress
// Accesslist direction ingress
type AccessListHardware_Nodes_Node_Ingress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Accesslist version IPv4.
    Ipv4 AccessListHardware_Nodes_Node_Ingress_Ipv4

    // Accesslist version IPv6.
    Ipv6 AccessListHardware_Nodes_Node_Ingress_Ipv6
}

func (ingress *AccessListHardware_Nodes_Node_Ingress) GetEntityData() *types.CommonEntityData {
    ingress.EntityData.YFilter = ingress.YFilter
    ingress.EntityData.YangName = "ingress"
    ingress.EntityData.BundleName = "cisco_ios_xr"
    ingress.EntityData.ParentYangName = "node"
    ingress.EntityData.SegmentPath = "ingress"
    ingress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/" + ingress.EntityData.SegmentPath
    ingress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ingress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ingress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ingress.EntityData.Children = types.NewOrderedMap()
    ingress.EntityData.Children.Append("ipv4", types.YChild{"Ipv4", &ingress.Ipv4})
    ingress.EntityData.Children.Append("ipv6", types.YChild{"Ipv6", &ingress.Ipv6})
    ingress.EntityData.Leafs = types.NewOrderedMap()

    ingress.EntityData.YListKeys = []string {}

    return &(ingress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4
// Accesslist version IPv4
type AccessListHardware_Nodes_Node_Ingress_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table for access lists.
    Accesses AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses
}

func (ipv4 *AccessListHardware_Nodes_Node_Ingress_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "ingress"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/" + ipv4.EntityData.SegmentPath
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = types.NewOrderedMap()
    ipv4.EntityData.Children.Append("accesses", types.YChild{"Accesses", &ipv4.Accesses})
    ipv4.EntityData.Leafs = types.NewOrderedMap()

    ipv4.EntityData.YListKeys = []string {}

    return &(ipv4.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses
// Table for access lists
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of ACLs. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access.
    Access []*AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access
}

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses) GetEntityData() *types.CommonEntityData {
    accesses.EntityData.YFilter = accesses.YFilter
    accesses.EntityData.YangName = "accesses"
    accesses.EntityData.BundleName = "cisco_ios_xr"
    accesses.EntityData.ParentYangName = "ipv4"
    accesses.EntityData.SegmentPath = "accesses"
    accesses.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/" + accesses.EntityData.SegmentPath
    accesses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    accesses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    accesses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    accesses.EntityData.Children = types.NewOrderedMap()
    accesses.EntityData.Children.Append("access", types.YChild{"Access", nil})
    for i := range accesses.Access {
        accesses.EntityData.Children.Append(types.GetSegmentPath(accesses.Access[i]), types.YChild{"Access", accesses.Access[i]})
    }
    accesses.EntityData.Leafs = types.NewOrderedMap()

    accesses.EntityData.YListKeys = []string {}

    return &(accesses.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access
// List of ACLs
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of the access list. The type is string.
    AccessListName interface{}

    // Implicit ACL information.
    Implicit AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit

    // Table of all sequence numbers per ACL.
    SequenceDetails AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails

    // Table of all sequence numbers per ACL.
    SequenceBriefs AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs
}

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access) GetEntityData() *types.CommonEntityData {
    access.EntityData.YFilter = access.YFilter
    access.EntityData.YangName = "access"
    access.EntityData.BundleName = "cisco_ios_xr"
    access.EntityData.ParentYangName = "accesses"
    access.EntityData.SegmentPath = "access" + types.AddKeyToken(access.AccessListName, "access-list-name")
    access.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/" + access.EntityData.SegmentPath
    access.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    access.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    access.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    access.EntityData.Children = types.NewOrderedMap()
    access.EntityData.Children.Append("implicit", types.YChild{"Implicit", &access.Implicit})
    access.EntityData.Children.Append("sequence-details", types.YChild{"SequenceDetails", &access.SequenceDetails})
    access.EntityData.Children.Append("sequence-briefs", types.YChild{"SequenceBriefs", &access.SequenceBriefs})
    access.EntityData.Leafs = types.NewOrderedMap()
    access.EntityData.Leafs.Append("access-list-name", types.YLeaf{"AccessListName", access.AccessListName})

    access.EntityData.YListKeys = []string {"AccessListName"}

    return &(access.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit
// Implicit ACL information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Implicit ACL Entries across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl.
    ImplicitAcl []*AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl
}

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit) GetEntityData() *types.CommonEntityData {
    implicit.EntityData.YFilter = implicit.YFilter
    implicit.EntityData.YangName = "implicit"
    implicit.EntityData.BundleName = "cisco_ios_xr"
    implicit.EntityData.ParentYangName = "access"
    implicit.EntityData.SegmentPath = "implicit"
    implicit.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/" + implicit.EntityData.SegmentPath
    implicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicit.EntityData.Children = types.NewOrderedMap()
    implicit.EntityData.Children.Append("implicit-acl", types.YChild{"ImplicitAcl", nil})
    for i := range implicit.ImplicitAcl {
        types.SetYListKey(implicit.ImplicitAcl[i], i)
        implicit.EntityData.Children.Append(types.GetSegmentPath(implicit.ImplicitAcl[i]), types.YChild{"ImplicitAcl", implicit.ImplicitAcl[i]})
    }
    implicit.EntityData.Leafs = types.NewOrderedMap()

    implicit.EntityData.YListKeys = []string {}

    return &(implicit.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl
// Implicit ACL Entries across Slices
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Common ACL Implicit Entries.
    CommonAclImplicit AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit

    // Interface ACL Implicit Entries.
    InterfaceAclImplicit AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit
}

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl) GetEntityData() *types.CommonEntityData {
    implicitAcl.EntityData.YFilter = implicitAcl.YFilter
    implicitAcl.EntityData.YangName = "implicit-acl"
    implicitAcl.EntityData.BundleName = "cisco_ios_xr"
    implicitAcl.EntityData.ParentYangName = "implicit"
    implicitAcl.EntityData.SegmentPath = "implicit-acl" + types.AddNoKeyToken(implicitAcl)
    implicitAcl.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/" + implicitAcl.EntityData.SegmentPath
    implicitAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitAcl.EntityData.Children = types.NewOrderedMap()
    implicitAcl.EntityData.Children.Append("common-acl-implicit", types.YChild{"CommonAclImplicit", &implicitAcl.CommonAclImplicit})
    implicitAcl.EntityData.Children.Append("interface-acl-implicit", types.YChild{"InterfaceAclImplicit", &implicitAcl.InterfaceAclImplicit})
    implicitAcl.EntityData.Leafs = types.NewOrderedMap()

    implicitAcl.EntityData.YListKeys = []string {}

    return &(implicitAcl.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit
// Common ACL Implicit Entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Implicit NDNA permit.
    ImplicitNdnaPermit AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit

    // Implicit NDNS permit.
    ImplicitNdnsPermit AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit

    // Implicit deny.
    ImplicitDeny AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetEntityData() *types.CommonEntityData {
    commonAclImplicit.EntityData.YFilter = commonAclImplicit.YFilter
    commonAclImplicit.EntityData.YangName = "common-acl-implicit"
    commonAclImplicit.EntityData.BundleName = "cisco_ios_xr"
    commonAclImplicit.EntityData.ParentYangName = "implicit-acl"
    commonAclImplicit.EntityData.SegmentPath = "common-acl-implicit"
    commonAclImplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/" + commonAclImplicit.EntityData.SegmentPath
    commonAclImplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    commonAclImplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    commonAclImplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    commonAclImplicit.EntityData.Children = types.NewOrderedMap()
    commonAclImplicit.EntityData.Children.Append("implicit-ndna-permit", types.YChild{"ImplicitNdnaPermit", &commonAclImplicit.ImplicitNdnaPermit})
    commonAclImplicit.EntityData.Children.Append("implicit-ndns-permit", types.YChild{"ImplicitNdnsPermit", &commonAclImplicit.ImplicitNdnsPermit})
    commonAclImplicit.EntityData.Children.Append("implicit-deny", types.YChild{"ImplicitDeny", &commonAclImplicit.ImplicitDeny})
    commonAclImplicit.EntityData.Leafs = types.NewOrderedMap()

    commonAclImplicit.EntityData.YListKeys = []string {}

    return &(commonAclImplicit.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit
// Implicit NDNA permit
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnaPermit.EntityData.YFilter = implicitNdnaPermit.YFilter
    implicitNdnaPermit.EntityData.YangName = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnaPermit.EntityData.ParentYangName = "common-acl-implicit"
    implicitNdnaPermit.EntityData.SegmentPath = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/" + implicitNdnaPermit.EntityData.SegmentPath
    implicitNdnaPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnaPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnaPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnaPermit.EntityData.Children = types.NewOrderedMap()
    implicitNdnaPermit.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &implicitNdnaPermit.AceBrief})
    implicitNdnaPermit.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range implicitNdnaPermit.AceDetail {
        types.SetYListKey(implicitNdnaPermit.AceDetail[i], i)
        implicitNdnaPermit.EntityData.Children.Append(types.GetSegmentPath(implicitNdnaPermit.AceDetail[i]), types.YChild{"AceDetail", implicitNdnaPermit.AceDetail[i]})
    }
    implicitNdnaPermit.EntityData.Leafs = types.NewOrderedMap()

    implicitNdnaPermit.EntityData.YListKeys = []string {}

    return &(implicitNdnaPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndna-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndna-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit
// Implicit NDNS permit
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnsPermit.EntityData.YFilter = implicitNdnsPermit.YFilter
    implicitNdnsPermit.EntityData.YangName = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnsPermit.EntityData.ParentYangName = "common-acl-implicit"
    implicitNdnsPermit.EntityData.SegmentPath = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/" + implicitNdnsPermit.EntityData.SegmentPath
    implicitNdnsPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnsPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnsPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnsPermit.EntityData.Children = types.NewOrderedMap()
    implicitNdnsPermit.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &implicitNdnsPermit.AceBrief})
    implicitNdnsPermit.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range implicitNdnsPermit.AceDetail {
        types.SetYListKey(implicitNdnsPermit.AceDetail[i], i)
        implicitNdnsPermit.EntityData.Children.Append(types.GetSegmentPath(implicitNdnsPermit.AceDetail[i]), types.YChild{"AceDetail", implicitNdnsPermit.AceDetail[i]})
    }
    implicitNdnsPermit.EntityData.Leafs = types.NewOrderedMap()

    implicitNdnsPermit.EntityData.YListKeys = []string {}

    return &(implicitNdnsPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndns-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndns-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny
// Implicit deny
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetEntityData() *types.CommonEntityData {
    implicitDeny.EntityData.YFilter = implicitDeny.YFilter
    implicitDeny.EntityData.YangName = "implicit-deny"
    implicitDeny.EntityData.BundleName = "cisco_ios_xr"
    implicitDeny.EntityData.ParentYangName = "common-acl-implicit"
    implicitDeny.EntityData.SegmentPath = "implicit-deny"
    implicitDeny.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/" + implicitDeny.EntityData.SegmentPath
    implicitDeny.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitDeny.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitDeny.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitDeny.EntityData.Children = types.NewOrderedMap()
    implicitDeny.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &implicitDeny.AceBrief})
    implicitDeny.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range implicitDeny.AceDetail {
        types.SetYListKey(implicitDeny.AceDetail[i], i)
        implicitDeny.EntityData.Children.Append(types.GetSegmentPath(implicitDeny.AceDetail[i]), types.YChild{"AceDetail", implicitDeny.AceDetail[i]})
    }
    implicitDeny.EntityData.Leafs = types.NewOrderedMap()

    implicitDeny.EntityData.YListKeys = []string {}

    return &(implicitDeny.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-deny"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-deny"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit
// Interface ACL Implicit Entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Implicit NDNA permit.
    ImplicitNdnaPermit AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit

    // Implicit NDNS permit.
    ImplicitNdnsPermit AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit

    // Implicit deny.
    ImplicitDeny AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetEntityData() *types.CommonEntityData {
    interfaceAclImplicit.EntityData.YFilter = interfaceAclImplicit.YFilter
    interfaceAclImplicit.EntityData.YangName = "interface-acl-implicit"
    interfaceAclImplicit.EntityData.BundleName = "cisco_ios_xr"
    interfaceAclImplicit.EntityData.ParentYangName = "implicit-acl"
    interfaceAclImplicit.EntityData.SegmentPath = "interface-acl-implicit"
    interfaceAclImplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/" + interfaceAclImplicit.EntityData.SegmentPath
    interfaceAclImplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAclImplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAclImplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAclImplicit.EntityData.Children = types.NewOrderedMap()
    interfaceAclImplicit.EntityData.Children.Append("implicit-ndna-permit", types.YChild{"ImplicitNdnaPermit", &interfaceAclImplicit.ImplicitNdnaPermit})
    interfaceAclImplicit.EntityData.Children.Append("implicit-ndns-permit", types.YChild{"ImplicitNdnsPermit", &interfaceAclImplicit.ImplicitNdnsPermit})
    interfaceAclImplicit.EntityData.Children.Append("implicit-deny", types.YChild{"ImplicitDeny", &interfaceAclImplicit.ImplicitDeny})
    interfaceAclImplicit.EntityData.Leafs = types.NewOrderedMap()

    interfaceAclImplicit.EntityData.YListKeys = []string {}

    return &(interfaceAclImplicit.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit
// Implicit NDNA permit
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnaPermit.EntityData.YFilter = implicitNdnaPermit.YFilter
    implicitNdnaPermit.EntityData.YangName = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnaPermit.EntityData.ParentYangName = "interface-acl-implicit"
    implicitNdnaPermit.EntityData.SegmentPath = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/" + implicitNdnaPermit.EntityData.SegmentPath
    implicitNdnaPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnaPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnaPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnaPermit.EntityData.Children = types.NewOrderedMap()
    implicitNdnaPermit.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &implicitNdnaPermit.AceBrief})
    implicitNdnaPermit.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range implicitNdnaPermit.AceDetail {
        types.SetYListKey(implicitNdnaPermit.AceDetail[i], i)
        implicitNdnaPermit.EntityData.Children.Append(types.GetSegmentPath(implicitNdnaPermit.AceDetail[i]), types.YChild{"AceDetail", implicitNdnaPermit.AceDetail[i]})
    }
    implicitNdnaPermit.EntityData.Leafs = types.NewOrderedMap()

    implicitNdnaPermit.EntityData.YListKeys = []string {}

    return &(implicitNdnaPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndna-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndna-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit
// Implicit NDNS permit
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnsPermit.EntityData.YFilter = implicitNdnsPermit.YFilter
    implicitNdnsPermit.EntityData.YangName = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnsPermit.EntityData.ParentYangName = "interface-acl-implicit"
    implicitNdnsPermit.EntityData.SegmentPath = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/" + implicitNdnsPermit.EntityData.SegmentPath
    implicitNdnsPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnsPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnsPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnsPermit.EntityData.Children = types.NewOrderedMap()
    implicitNdnsPermit.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &implicitNdnsPermit.AceBrief})
    implicitNdnsPermit.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range implicitNdnsPermit.AceDetail {
        types.SetYListKey(implicitNdnsPermit.AceDetail[i], i)
        implicitNdnsPermit.EntityData.Children.Append(types.GetSegmentPath(implicitNdnsPermit.AceDetail[i]), types.YChild{"AceDetail", implicitNdnsPermit.AceDetail[i]})
    }
    implicitNdnsPermit.EntityData.Leafs = types.NewOrderedMap()

    implicitNdnsPermit.EntityData.YListKeys = []string {}

    return &(implicitNdnsPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndns-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndns-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny
// Implicit deny
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetEntityData() *types.CommonEntityData {
    implicitDeny.EntityData.YFilter = implicitDeny.YFilter
    implicitDeny.EntityData.YangName = "implicit-deny"
    implicitDeny.EntityData.BundleName = "cisco_ios_xr"
    implicitDeny.EntityData.ParentYangName = "interface-acl-implicit"
    implicitDeny.EntityData.SegmentPath = "implicit-deny"
    implicitDeny.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/" + implicitDeny.EntityData.SegmentPath
    implicitDeny.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitDeny.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitDeny.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitDeny.EntityData.Children = types.NewOrderedMap()
    implicitDeny.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &implicitDeny.AceBrief})
    implicitDeny.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range implicitDeny.AceDetail {
        types.SetYListKey(implicitDeny.AceDetail[i], i)
        implicitDeny.EntityData.Children.Append(types.GetSegmentPath(implicitDeny.AceDetail[i]), types.YChild{"AceDetail", implicitDeny.AceDetail[i]})
    }
    implicitDeny.EntityData.Leafs = types.NewOrderedMap()

    implicitDeny.EntityData.YListKeys = []string {}

    return &(implicitDeny.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-deny"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-deny"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails
// Table of all sequence numbers per ACL
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detail ACL information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail.
    SequenceDetail []*AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails) GetEntityData() *types.CommonEntityData {
    sequenceDetails.EntityData.YFilter = sequenceDetails.YFilter
    sequenceDetails.EntityData.YangName = "sequence-details"
    sequenceDetails.EntityData.BundleName = "cisco_ios_xr"
    sequenceDetails.EntityData.ParentYangName = "access"
    sequenceDetails.EntityData.SegmentPath = "sequence-details"
    sequenceDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/" + sequenceDetails.EntityData.SegmentPath
    sequenceDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceDetails.EntityData.Children = types.NewOrderedMap()
    sequenceDetails.EntityData.Children.Append("sequence-detail", types.YChild{"SequenceDetail", nil})
    for i := range sequenceDetails.SequenceDetail {
        sequenceDetails.EntityData.Children.Append(types.GetSegmentPath(sequenceDetails.SequenceDetail[i]), types.YChild{"SequenceDetail", sequenceDetails.SequenceDetail[i]})
    }
    sequenceDetails.EntityData.Leafs = types.NewOrderedMap()

    sequenceDetails.EntityData.YListKeys = []string {}

    return &(sequenceDetails.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail
// Detail ACL information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Detail ACL information for a particular sequence.
    // The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Common ACL detail information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail.
    CommonAclDetail []*AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail

    // Interface ACL detail information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail.
    InterfaceAclDetail []*AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail) GetEntityData() *types.CommonEntityData {
    sequenceDetail.EntityData.YFilter = sequenceDetail.YFilter
    sequenceDetail.EntityData.YangName = "sequence-detail"
    sequenceDetail.EntityData.BundleName = "cisco_ios_xr"
    sequenceDetail.EntityData.ParentYangName = "sequence-details"
    sequenceDetail.EntityData.SegmentPath = "sequence-detail" + types.AddKeyToken(sequenceDetail.SequenceNumber, "sequence-number")
    sequenceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/" + sequenceDetail.EntityData.SegmentPath
    sequenceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceDetail.EntityData.Children = types.NewOrderedMap()
    sequenceDetail.EntityData.Children.Append("common-acl-detail", types.YChild{"CommonAclDetail", nil})
    for i := range sequenceDetail.CommonAclDetail {
        types.SetYListKey(sequenceDetail.CommonAclDetail[i], i)
        sequenceDetail.EntityData.Children.Append(types.GetSegmentPath(sequenceDetail.CommonAclDetail[i]), types.YChild{"CommonAclDetail", sequenceDetail.CommonAclDetail[i]})
    }
    sequenceDetail.EntityData.Children.Append("interface-acl-detail", types.YChild{"InterfaceAclDetail", nil})
    for i := range sequenceDetail.InterfaceAclDetail {
        types.SetYListKey(sequenceDetail.InterfaceAclDetail[i], i)
        sequenceDetail.EntityData.Children.Append(types.GetSegmentPath(sequenceDetail.InterfaceAclDetail[i]), types.YChild{"InterfaceAclDetail", sequenceDetail.InterfaceAclDetail[i]})
    }
    sequenceDetail.EntityData.Leafs = types.NewOrderedMap()
    sequenceDetail.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", sequenceDetail.SequenceNumber})

    sequenceDetail.EntityData.YListKeys = []string {"SequenceNumber"}

    return &(sequenceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail
// Common ACL detail information across Slices
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetEntityData() *types.CommonEntityData {
    commonAclDetail.EntityData.YFilter = commonAclDetail.YFilter
    commonAclDetail.EntityData.YangName = "common-acl-detail"
    commonAclDetail.EntityData.BundleName = "cisco_ios_xr"
    commonAclDetail.EntityData.ParentYangName = "sequence-detail"
    commonAclDetail.EntityData.SegmentPath = "common-acl-detail" + types.AddNoKeyToken(commonAclDetail)
    commonAclDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/" + commonAclDetail.EntityData.SegmentPath
    commonAclDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    commonAclDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    commonAclDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    commonAclDetail.EntityData.Children = types.NewOrderedMap()
    commonAclDetail.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &commonAclDetail.AceBrief})
    commonAclDetail.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range commonAclDetail.AceDetail {
        types.SetYListKey(commonAclDetail.AceDetail[i], i)
        commonAclDetail.EntityData.Children.Append(types.GetSegmentPath(commonAclDetail.AceDetail[i]), types.YChild{"AceDetail", commonAclDetail.AceDetail[i]})
    }
    commonAclDetail.EntityData.Leafs = types.NewOrderedMap()

    commonAclDetail.EntityData.YListKeys = []string {}

    return &(commonAclDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "common-acl-detail"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "common-acl-detail"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail
// Interface ACL detail information across Slices
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetEntityData() *types.CommonEntityData {
    interfaceAclDetail.EntityData.YFilter = interfaceAclDetail.YFilter
    interfaceAclDetail.EntityData.YangName = "interface-acl-detail"
    interfaceAclDetail.EntityData.BundleName = "cisco_ios_xr"
    interfaceAclDetail.EntityData.ParentYangName = "sequence-detail"
    interfaceAclDetail.EntityData.SegmentPath = "interface-acl-detail" + types.AddNoKeyToken(interfaceAclDetail)
    interfaceAclDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/" + interfaceAclDetail.EntityData.SegmentPath
    interfaceAclDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAclDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAclDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAclDetail.EntityData.Children = types.NewOrderedMap()
    interfaceAclDetail.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &interfaceAclDetail.AceBrief})
    interfaceAclDetail.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range interfaceAclDetail.AceDetail {
        types.SetYListKey(interfaceAclDetail.AceDetail[i], i)
        interfaceAclDetail.EntityData.Children.Append(types.GetSegmentPath(interfaceAclDetail.AceDetail[i]), types.YChild{"AceDetail", interfaceAclDetail.AceDetail[i]})
    }
    interfaceAclDetail.EntityData.Leafs = types.NewOrderedMap()

    interfaceAclDetail.EntityData.YListKeys = []string {}

    return &(interfaceAclDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "interface-acl-detail"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "interface-acl-detail"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs
// Table of all sequence numbers per ACL
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detail ACL information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief.
    SequenceBrief []*AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs) GetEntityData() *types.CommonEntityData {
    sequenceBriefs.EntityData.YFilter = sequenceBriefs.YFilter
    sequenceBriefs.EntityData.YangName = "sequence-briefs"
    sequenceBriefs.EntityData.BundleName = "cisco_ios_xr"
    sequenceBriefs.EntityData.ParentYangName = "access"
    sequenceBriefs.EntityData.SegmentPath = "sequence-briefs"
    sequenceBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/" + sequenceBriefs.EntityData.SegmentPath
    sequenceBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceBriefs.EntityData.Children = types.NewOrderedMap()
    sequenceBriefs.EntityData.Children.Append("sequence-brief", types.YChild{"SequenceBrief", nil})
    for i := range sequenceBriefs.SequenceBrief {
        sequenceBriefs.EntityData.Children.Append(types.GetSegmentPath(sequenceBriefs.SequenceBrief[i]), types.YChild{"SequenceBrief", sequenceBriefs.SequenceBrief[i]})
    }
    sequenceBriefs.EntityData.Leafs = types.NewOrderedMap()

    sequenceBriefs.EntityData.YListKeys = []string {}

    return &(sequenceBriefs.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief
// Detail ACL information
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Brief ACL information for a particular sequence.
    // The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Common ACL information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl.
    CommonAcl []*AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl

    // Interface ACL information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl.
    InterfaceAcl []*AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief) GetEntityData() *types.CommonEntityData {
    sequenceBrief.EntityData.YFilter = sequenceBrief.YFilter
    sequenceBrief.EntityData.YangName = "sequence-brief"
    sequenceBrief.EntityData.BundleName = "cisco_ios_xr"
    sequenceBrief.EntityData.ParentYangName = "sequence-briefs"
    sequenceBrief.EntityData.SegmentPath = "sequence-brief" + types.AddKeyToken(sequenceBrief.SequenceNumber, "sequence-number")
    sequenceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-briefs/" + sequenceBrief.EntityData.SegmentPath
    sequenceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceBrief.EntityData.Children = types.NewOrderedMap()
    sequenceBrief.EntityData.Children.Append("common-acl", types.YChild{"CommonAcl", nil})
    for i := range sequenceBrief.CommonAcl {
        types.SetYListKey(sequenceBrief.CommonAcl[i], i)
        sequenceBrief.EntityData.Children.Append(types.GetSegmentPath(sequenceBrief.CommonAcl[i]), types.YChild{"CommonAcl", sequenceBrief.CommonAcl[i]})
    }
    sequenceBrief.EntityData.Children.Append("interface-acl", types.YChild{"InterfaceAcl", nil})
    for i := range sequenceBrief.InterfaceAcl {
        types.SetYListKey(sequenceBrief.InterfaceAcl[i], i)
        sequenceBrief.EntityData.Children.Append(types.GetSegmentPath(sequenceBrief.InterfaceAcl[i]), types.YChild{"InterfaceAcl", sequenceBrief.InterfaceAcl[i]})
    }
    sequenceBrief.EntityData.Leafs = types.NewOrderedMap()
    sequenceBrief.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", sequenceBrief.SequenceNumber})

    sequenceBrief.EntityData.YListKeys = []string {"SequenceNumber"}

    return &(sequenceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl
// Common ACL information across Slices
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress
}

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetEntityData() *types.CommonEntityData {
    commonAcl.EntityData.YFilter = commonAcl.YFilter
    commonAcl.EntityData.YangName = "common-acl"
    commonAcl.EntityData.BundleName = "cisco_ios_xr"
    commonAcl.EntityData.ParentYangName = "sequence-brief"
    commonAcl.EntityData.SegmentPath = "common-acl" + types.AddNoKeyToken(commonAcl)
    commonAcl.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-briefs/sequence-brief/" + commonAcl.EntityData.SegmentPath
    commonAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    commonAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    commonAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    commonAcl.EntityData.Children = types.NewOrderedMap()
    commonAcl.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &commonAcl.NextHopAddress})
    commonAcl.EntityData.Leafs = types.NewOrderedMap()
    commonAcl.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", commonAcl.Grant})
    commonAcl.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", commonAcl.LoggingEnabled})
    commonAcl.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", commonAcl.PerAceIcmpEnabled})
    commonAcl.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", commonAcl.NextHopEnabled})
    commonAcl.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", commonAcl.DefaultNextHopEnabled})
    commonAcl.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", commonAcl.TotalTcamEntries})
    commonAcl.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", commonAcl.Hits})
    commonAcl.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", commonAcl.NpuId})

    commonAcl.EntityData.YListKeys = []string {}

    return &(commonAcl.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "common-acl"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-briefs/sequence-brief/common-acl/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl
// Interface ACL information across Slices
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetEntityData() *types.CommonEntityData {
    interfaceAcl.EntityData.YFilter = interfaceAcl.YFilter
    interfaceAcl.EntityData.YangName = "interface-acl"
    interfaceAcl.EntityData.BundleName = "cisco_ios_xr"
    interfaceAcl.EntityData.ParentYangName = "sequence-brief"
    interfaceAcl.EntityData.SegmentPath = "interface-acl" + types.AddNoKeyToken(interfaceAcl)
    interfaceAcl.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-briefs/sequence-brief/" + interfaceAcl.EntityData.SegmentPath
    interfaceAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAcl.EntityData.Children = types.NewOrderedMap()
    interfaceAcl.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &interfaceAcl.NextHopAddress})
    interfaceAcl.EntityData.Leafs = types.NewOrderedMap()
    interfaceAcl.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", interfaceAcl.Grant})
    interfaceAcl.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", interfaceAcl.LoggingEnabled})
    interfaceAcl.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", interfaceAcl.PerAceIcmpEnabled})
    interfaceAcl.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", interfaceAcl.NextHopEnabled})
    interfaceAcl.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", interfaceAcl.DefaultNextHopEnabled})
    interfaceAcl.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", interfaceAcl.TotalTcamEntries})
    interfaceAcl.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", interfaceAcl.Hits})
    interfaceAcl.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", interfaceAcl.NpuId})

    interfaceAcl.EntityData.YListKeys = []string {}

    return &(interfaceAcl.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv4_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "interface-acl"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv4/accesses/access/sequence-briefs/sequence-brief/interface-acl/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6
// Accesslist version IPv6
type AccessListHardware_Nodes_Node_Ingress_Ipv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table for access lists.
    Accesses AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses
}

func (ipv6 *AccessListHardware_Nodes_Node_Ingress_Ipv6) GetEntityData() *types.CommonEntityData {
    ipv6.EntityData.YFilter = ipv6.YFilter
    ipv6.EntityData.YangName = "ipv6"
    ipv6.EntityData.BundleName = "cisco_ios_xr"
    ipv6.EntityData.ParentYangName = "ingress"
    ipv6.EntityData.SegmentPath = "ipv6"
    ipv6.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/" + ipv6.EntityData.SegmentPath
    ipv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6.EntityData.Children = types.NewOrderedMap()
    ipv6.EntityData.Children.Append("accesses", types.YChild{"Accesses", &ipv6.Accesses})
    ipv6.EntityData.Leafs = types.NewOrderedMap()

    ipv6.EntityData.YListKeys = []string {}

    return &(ipv6.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses
// Table for access lists
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of ACLs. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access.
    Access []*AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access
}

func (accesses *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses) GetEntityData() *types.CommonEntityData {
    accesses.EntityData.YFilter = accesses.YFilter
    accesses.EntityData.YangName = "accesses"
    accesses.EntityData.BundleName = "cisco_ios_xr"
    accesses.EntityData.ParentYangName = "ipv6"
    accesses.EntityData.SegmentPath = "accesses"
    accesses.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/" + accesses.EntityData.SegmentPath
    accesses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    accesses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    accesses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    accesses.EntityData.Children = types.NewOrderedMap()
    accesses.EntityData.Children.Append("access", types.YChild{"Access", nil})
    for i := range accesses.Access {
        accesses.EntityData.Children.Append(types.GetSegmentPath(accesses.Access[i]), types.YChild{"Access", accesses.Access[i]})
    }
    accesses.EntityData.Leafs = types.NewOrderedMap()

    accesses.EntityData.YListKeys = []string {}

    return &(accesses.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access
// List of ACLs
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of the access list. The type is string.
    AccessListName interface{}

    // Implicit ACL information.
    Implicit AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit

    // Table of all sequence numbers per ACL.
    SequenceDetails AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails

    // Table of all sequence numbers per ACL.
    SequenceBriefs AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs
}

func (access *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access) GetEntityData() *types.CommonEntityData {
    access.EntityData.YFilter = access.YFilter
    access.EntityData.YangName = "access"
    access.EntityData.BundleName = "cisco_ios_xr"
    access.EntityData.ParentYangName = "accesses"
    access.EntityData.SegmentPath = "access" + types.AddKeyToken(access.AccessListName, "access-list-name")
    access.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/" + access.EntityData.SegmentPath
    access.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    access.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    access.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    access.EntityData.Children = types.NewOrderedMap()
    access.EntityData.Children.Append("implicit", types.YChild{"Implicit", &access.Implicit})
    access.EntityData.Children.Append("sequence-details", types.YChild{"SequenceDetails", &access.SequenceDetails})
    access.EntityData.Children.Append("sequence-briefs", types.YChild{"SequenceBriefs", &access.SequenceBriefs})
    access.EntityData.Leafs = types.NewOrderedMap()
    access.EntityData.Leafs.Append("access-list-name", types.YLeaf{"AccessListName", access.AccessListName})

    access.EntityData.YListKeys = []string {"AccessListName"}

    return &(access.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit
// Implicit ACL information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Implicit ACL Entries across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl.
    ImplicitAcl []*AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl
}

func (implicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit) GetEntityData() *types.CommonEntityData {
    implicit.EntityData.YFilter = implicit.YFilter
    implicit.EntityData.YangName = "implicit"
    implicit.EntityData.BundleName = "cisco_ios_xr"
    implicit.EntityData.ParentYangName = "access"
    implicit.EntityData.SegmentPath = "implicit"
    implicit.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/" + implicit.EntityData.SegmentPath
    implicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicit.EntityData.Children = types.NewOrderedMap()
    implicit.EntityData.Children.Append("implicit-acl", types.YChild{"ImplicitAcl", nil})
    for i := range implicit.ImplicitAcl {
        types.SetYListKey(implicit.ImplicitAcl[i], i)
        implicit.EntityData.Children.Append(types.GetSegmentPath(implicit.ImplicitAcl[i]), types.YChild{"ImplicitAcl", implicit.ImplicitAcl[i]})
    }
    implicit.EntityData.Leafs = types.NewOrderedMap()

    implicit.EntityData.YListKeys = []string {}

    return &(implicit.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl
// Implicit ACL Entries across Slices
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Common ACL Implicit Entries.
    CommonAclImplicit AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit

    // Interface ACL Implicit Entries.
    InterfaceAclImplicit AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit
}

func (implicitAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl) GetEntityData() *types.CommonEntityData {
    implicitAcl.EntityData.YFilter = implicitAcl.YFilter
    implicitAcl.EntityData.YangName = "implicit-acl"
    implicitAcl.EntityData.BundleName = "cisco_ios_xr"
    implicitAcl.EntityData.ParentYangName = "implicit"
    implicitAcl.EntityData.SegmentPath = "implicit-acl" + types.AddNoKeyToken(implicitAcl)
    implicitAcl.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/" + implicitAcl.EntityData.SegmentPath
    implicitAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitAcl.EntityData.Children = types.NewOrderedMap()
    implicitAcl.EntityData.Children.Append("common-acl-implicit", types.YChild{"CommonAclImplicit", &implicitAcl.CommonAclImplicit})
    implicitAcl.EntityData.Children.Append("interface-acl-implicit", types.YChild{"InterfaceAclImplicit", &implicitAcl.InterfaceAclImplicit})
    implicitAcl.EntityData.Leafs = types.NewOrderedMap()

    implicitAcl.EntityData.YListKeys = []string {}

    return &(implicitAcl.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit
// Common ACL Implicit Entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Implicit NDNA permit.
    ImplicitNdnaPermit AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit

    // Implicit NDNS permit.
    ImplicitNdnsPermit AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit

    // Implicit deny.
    ImplicitDeny AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny
}

func (commonAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit) GetEntityData() *types.CommonEntityData {
    commonAclImplicit.EntityData.YFilter = commonAclImplicit.YFilter
    commonAclImplicit.EntityData.YangName = "common-acl-implicit"
    commonAclImplicit.EntityData.BundleName = "cisco_ios_xr"
    commonAclImplicit.EntityData.ParentYangName = "implicit-acl"
    commonAclImplicit.EntityData.SegmentPath = "common-acl-implicit"
    commonAclImplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/" + commonAclImplicit.EntityData.SegmentPath
    commonAclImplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    commonAclImplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    commonAclImplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    commonAclImplicit.EntityData.Children = types.NewOrderedMap()
    commonAclImplicit.EntityData.Children.Append("implicit-ndna-permit", types.YChild{"ImplicitNdnaPermit", &commonAclImplicit.ImplicitNdnaPermit})
    commonAclImplicit.EntityData.Children.Append("implicit-ndns-permit", types.YChild{"ImplicitNdnsPermit", &commonAclImplicit.ImplicitNdnsPermit})
    commonAclImplicit.EntityData.Children.Append("implicit-deny", types.YChild{"ImplicitDeny", &commonAclImplicit.ImplicitDeny})
    commonAclImplicit.EntityData.Leafs = types.NewOrderedMap()

    commonAclImplicit.EntityData.YListKeys = []string {}

    return &(commonAclImplicit.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit
// Implicit NDNA permit
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnaPermit.EntityData.YFilter = implicitNdnaPermit.YFilter
    implicitNdnaPermit.EntityData.YangName = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnaPermit.EntityData.ParentYangName = "common-acl-implicit"
    implicitNdnaPermit.EntityData.SegmentPath = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/" + implicitNdnaPermit.EntityData.SegmentPath
    implicitNdnaPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnaPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnaPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnaPermit.EntityData.Children = types.NewOrderedMap()
    implicitNdnaPermit.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &implicitNdnaPermit.AceBrief})
    implicitNdnaPermit.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range implicitNdnaPermit.AceDetail {
        types.SetYListKey(implicitNdnaPermit.AceDetail[i], i)
        implicitNdnaPermit.EntityData.Children.Append(types.GetSegmentPath(implicitNdnaPermit.AceDetail[i]), types.YChild{"AceDetail", implicitNdnaPermit.AceDetail[i]})
    }
    implicitNdnaPermit.EntityData.Leafs = types.NewOrderedMap()

    implicitNdnaPermit.EntityData.YListKeys = []string {}

    return &(implicitNdnaPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndna-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndna-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit
// Implicit NDNS permit
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnsPermit.EntityData.YFilter = implicitNdnsPermit.YFilter
    implicitNdnsPermit.EntityData.YangName = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnsPermit.EntityData.ParentYangName = "common-acl-implicit"
    implicitNdnsPermit.EntityData.SegmentPath = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/" + implicitNdnsPermit.EntityData.SegmentPath
    implicitNdnsPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnsPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnsPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnsPermit.EntityData.Children = types.NewOrderedMap()
    implicitNdnsPermit.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &implicitNdnsPermit.AceBrief})
    implicitNdnsPermit.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range implicitNdnsPermit.AceDetail {
        types.SetYListKey(implicitNdnsPermit.AceDetail[i], i)
        implicitNdnsPermit.EntityData.Children.Append(types.GetSegmentPath(implicitNdnsPermit.AceDetail[i]), types.YChild{"AceDetail", implicitNdnsPermit.AceDetail[i]})
    }
    implicitNdnsPermit.EntityData.Leafs = types.NewOrderedMap()

    implicitNdnsPermit.EntityData.YListKeys = []string {}

    return &(implicitNdnsPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndns-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndns-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny
// Implicit deny
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny) GetEntityData() *types.CommonEntityData {
    implicitDeny.EntityData.YFilter = implicitDeny.YFilter
    implicitDeny.EntityData.YangName = "implicit-deny"
    implicitDeny.EntityData.BundleName = "cisco_ios_xr"
    implicitDeny.EntityData.ParentYangName = "common-acl-implicit"
    implicitDeny.EntityData.SegmentPath = "implicit-deny"
    implicitDeny.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/" + implicitDeny.EntityData.SegmentPath
    implicitDeny.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitDeny.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitDeny.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitDeny.EntityData.Children = types.NewOrderedMap()
    implicitDeny.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &implicitDeny.AceBrief})
    implicitDeny.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range implicitDeny.AceDetail {
        types.SetYListKey(implicitDeny.AceDetail[i], i)
        implicitDeny.EntityData.Children.Append(types.GetSegmentPath(implicitDeny.AceDetail[i]), types.YChild{"AceDetail", implicitDeny.AceDetail[i]})
    }
    implicitDeny.EntityData.Leafs = types.NewOrderedMap()

    implicitDeny.EntityData.YListKeys = []string {}

    return &(implicitDeny.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-deny"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-deny"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_CommonAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/common-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit
// Interface ACL Implicit Entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Implicit NDNA permit.
    ImplicitNdnaPermit AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit

    // Implicit NDNS permit.
    ImplicitNdnsPermit AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit

    // Implicit deny.
    ImplicitDeny AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny
}

func (interfaceAclImplicit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit) GetEntityData() *types.CommonEntityData {
    interfaceAclImplicit.EntityData.YFilter = interfaceAclImplicit.YFilter
    interfaceAclImplicit.EntityData.YangName = "interface-acl-implicit"
    interfaceAclImplicit.EntityData.BundleName = "cisco_ios_xr"
    interfaceAclImplicit.EntityData.ParentYangName = "implicit-acl"
    interfaceAclImplicit.EntityData.SegmentPath = "interface-acl-implicit"
    interfaceAclImplicit.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/" + interfaceAclImplicit.EntityData.SegmentPath
    interfaceAclImplicit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAclImplicit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAclImplicit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAclImplicit.EntityData.Children = types.NewOrderedMap()
    interfaceAclImplicit.EntityData.Children.Append("implicit-ndna-permit", types.YChild{"ImplicitNdnaPermit", &interfaceAclImplicit.ImplicitNdnaPermit})
    interfaceAclImplicit.EntityData.Children.Append("implicit-ndns-permit", types.YChild{"ImplicitNdnsPermit", &interfaceAclImplicit.ImplicitNdnsPermit})
    interfaceAclImplicit.EntityData.Children.Append("implicit-deny", types.YChild{"ImplicitDeny", &interfaceAclImplicit.ImplicitDeny})
    interfaceAclImplicit.EntityData.Leafs = types.NewOrderedMap()

    interfaceAclImplicit.EntityData.YListKeys = []string {}

    return &(interfaceAclImplicit.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit
// Implicit NDNA permit
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail
}

func (implicitNdnaPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnaPermit.EntityData.YFilter = implicitNdnaPermit.YFilter
    implicitNdnaPermit.EntityData.YangName = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnaPermit.EntityData.ParentYangName = "interface-acl-implicit"
    implicitNdnaPermit.EntityData.SegmentPath = "implicit-ndna-permit"
    implicitNdnaPermit.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/" + implicitNdnaPermit.EntityData.SegmentPath
    implicitNdnaPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnaPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnaPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnaPermit.EntityData.Children = types.NewOrderedMap()
    implicitNdnaPermit.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &implicitNdnaPermit.AceBrief})
    implicitNdnaPermit.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range implicitNdnaPermit.AceDetail {
        types.SetYListKey(implicitNdnaPermit.AceDetail[i], i)
        implicitNdnaPermit.EntityData.Children.Append(types.GetSegmentPath(implicitNdnaPermit.AceDetail[i]), types.YChild{"AceDetail", implicitNdnaPermit.AceDetail[i]})
    }
    implicitNdnaPermit.EntityData.Leafs = types.NewOrderedMap()

    implicitNdnaPermit.EntityData.YListKeys = []string {}

    return &(implicitNdnaPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndna-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndna-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnaPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndna-permit/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit
// Implicit NDNS permit
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail
}

func (implicitNdnsPermit *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit) GetEntityData() *types.CommonEntityData {
    implicitNdnsPermit.EntityData.YFilter = implicitNdnsPermit.YFilter
    implicitNdnsPermit.EntityData.YangName = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.BundleName = "cisco_ios_xr"
    implicitNdnsPermit.EntityData.ParentYangName = "interface-acl-implicit"
    implicitNdnsPermit.EntityData.SegmentPath = "implicit-ndns-permit"
    implicitNdnsPermit.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/" + implicitNdnsPermit.EntityData.SegmentPath
    implicitNdnsPermit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitNdnsPermit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitNdnsPermit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitNdnsPermit.EntityData.Children = types.NewOrderedMap()
    implicitNdnsPermit.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &implicitNdnsPermit.AceBrief})
    implicitNdnsPermit.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range implicitNdnsPermit.AceDetail {
        types.SetYListKey(implicitNdnsPermit.AceDetail[i], i)
        implicitNdnsPermit.EntityData.Children.Append(types.GetSegmentPath(implicitNdnsPermit.AceDetail[i]), types.YChild{"AceDetail", implicitNdnsPermit.AceDetail[i]})
    }
    implicitNdnsPermit.EntityData.Leafs = types.NewOrderedMap()

    implicitNdnsPermit.EntityData.YListKeys = []string {}

    return &(implicitNdnsPermit.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-ndns-permit"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-ndns-permit"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitNdnsPermit_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-ndns-permit/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny
// Implicit deny
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail
}

func (implicitDeny *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny) GetEntityData() *types.CommonEntityData {
    implicitDeny.EntityData.YFilter = implicitDeny.YFilter
    implicitDeny.EntityData.YangName = "implicit-deny"
    implicitDeny.EntityData.BundleName = "cisco_ios_xr"
    implicitDeny.EntityData.ParentYangName = "interface-acl-implicit"
    implicitDeny.EntityData.SegmentPath = "implicit-deny"
    implicitDeny.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/" + implicitDeny.EntityData.SegmentPath
    implicitDeny.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    implicitDeny.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    implicitDeny.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    implicitDeny.EntityData.Children = types.NewOrderedMap()
    implicitDeny.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &implicitDeny.AceBrief})
    implicitDeny.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range implicitDeny.AceDetail {
        types.SetYListKey(implicitDeny.AceDetail[i], i)
        implicitDeny.EntityData.Children.Append(types.GetSegmentPath(implicitDeny.AceDetail[i]), types.YChild{"AceDetail", implicitDeny.AceDetail[i]})
    }
    implicitDeny.EntityData.Leafs = types.NewOrderedMap()

    implicitDeny.EntityData.YListKeys = []string {}

    return &(implicitDeny.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "implicit-deny"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "implicit-deny"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_Implicit_ImplicitAcl_InterfaceAclImplicit_ImplicitDeny_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/implicit/implicit-acl/interface-acl-implicit/implicit-deny/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails
// Table of all sequence numbers per ACL
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detail ACL information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail.
    SequenceDetail []*AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail
}

func (sequenceDetails *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails) GetEntityData() *types.CommonEntityData {
    sequenceDetails.EntityData.YFilter = sequenceDetails.YFilter
    sequenceDetails.EntityData.YangName = "sequence-details"
    sequenceDetails.EntityData.BundleName = "cisco_ios_xr"
    sequenceDetails.EntityData.ParentYangName = "access"
    sequenceDetails.EntityData.SegmentPath = "sequence-details"
    sequenceDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/" + sequenceDetails.EntityData.SegmentPath
    sequenceDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceDetails.EntityData.Children = types.NewOrderedMap()
    sequenceDetails.EntityData.Children.Append("sequence-detail", types.YChild{"SequenceDetail", nil})
    for i := range sequenceDetails.SequenceDetail {
        sequenceDetails.EntityData.Children.Append(types.GetSegmentPath(sequenceDetails.SequenceDetail[i]), types.YChild{"SequenceDetail", sequenceDetails.SequenceDetail[i]})
    }
    sequenceDetails.EntityData.Leafs = types.NewOrderedMap()

    sequenceDetails.EntityData.YListKeys = []string {}

    return &(sequenceDetails.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail
// Detail ACL information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Detail ACL information for a particular sequence.
    // The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Common ACL detail information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail.
    CommonAclDetail []*AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail

    // Interface ACL detail information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail.
    InterfaceAclDetail []*AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail
}

func (sequenceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail) GetEntityData() *types.CommonEntityData {
    sequenceDetail.EntityData.YFilter = sequenceDetail.YFilter
    sequenceDetail.EntityData.YangName = "sequence-detail"
    sequenceDetail.EntityData.BundleName = "cisco_ios_xr"
    sequenceDetail.EntityData.ParentYangName = "sequence-details"
    sequenceDetail.EntityData.SegmentPath = "sequence-detail" + types.AddKeyToken(sequenceDetail.SequenceNumber, "sequence-number")
    sequenceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/" + sequenceDetail.EntityData.SegmentPath
    sequenceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceDetail.EntityData.Children = types.NewOrderedMap()
    sequenceDetail.EntityData.Children.Append("common-acl-detail", types.YChild{"CommonAclDetail", nil})
    for i := range sequenceDetail.CommonAclDetail {
        types.SetYListKey(sequenceDetail.CommonAclDetail[i], i)
        sequenceDetail.EntityData.Children.Append(types.GetSegmentPath(sequenceDetail.CommonAclDetail[i]), types.YChild{"CommonAclDetail", sequenceDetail.CommonAclDetail[i]})
    }
    sequenceDetail.EntityData.Children.Append("interface-acl-detail", types.YChild{"InterfaceAclDetail", nil})
    for i := range sequenceDetail.InterfaceAclDetail {
        types.SetYListKey(sequenceDetail.InterfaceAclDetail[i], i)
        sequenceDetail.EntityData.Children.Append(types.GetSegmentPath(sequenceDetail.InterfaceAclDetail[i]), types.YChild{"InterfaceAclDetail", sequenceDetail.InterfaceAclDetail[i]})
    }
    sequenceDetail.EntityData.Leafs = types.NewOrderedMap()
    sequenceDetail.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", sequenceDetail.SequenceNumber})

    sequenceDetail.EntityData.YListKeys = []string {"SequenceNumber"}

    return &(sequenceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail
// Common ACL detail information across Slices
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail
}

func (commonAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail) GetEntityData() *types.CommonEntityData {
    commonAclDetail.EntityData.YFilter = commonAclDetail.YFilter
    commonAclDetail.EntityData.YangName = "common-acl-detail"
    commonAclDetail.EntityData.BundleName = "cisco_ios_xr"
    commonAclDetail.EntityData.ParentYangName = "sequence-detail"
    commonAclDetail.EntityData.SegmentPath = "common-acl-detail" + types.AddNoKeyToken(commonAclDetail)
    commonAclDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/" + commonAclDetail.EntityData.SegmentPath
    commonAclDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    commonAclDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    commonAclDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    commonAclDetail.EntityData.Children = types.NewOrderedMap()
    commonAclDetail.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &commonAclDetail.AceBrief})
    commonAclDetail.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range commonAclDetail.AceDetail {
        types.SetYListKey(commonAclDetail.AceDetail[i], i)
        commonAclDetail.EntityData.Children.Append(types.GetSegmentPath(commonAclDetail.AceDetail[i]), types.YChild{"AceDetail", commonAclDetail.AceDetail[i]})
    }
    commonAclDetail.EntityData.Leafs = types.NewOrderedMap()

    commonAclDetail.EntityData.YListKeys = []string {}

    return &(commonAclDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "common-acl-detail"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "common-acl-detail"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_CommonAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/common-acl-detail/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail
// Interface ACL detail information across Slices
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ACE brief information.
    AceBrief AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief

    // ACE detail information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail.
    AceDetail []*AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail
}

func (interfaceAclDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail) GetEntityData() *types.CommonEntityData {
    interfaceAclDetail.EntityData.YFilter = interfaceAclDetail.YFilter
    interfaceAclDetail.EntityData.YangName = "interface-acl-detail"
    interfaceAclDetail.EntityData.BundleName = "cisco_ios_xr"
    interfaceAclDetail.EntityData.ParentYangName = "sequence-detail"
    interfaceAclDetail.EntityData.SegmentPath = "interface-acl-detail" + types.AddNoKeyToken(interfaceAclDetail)
    interfaceAclDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/" + interfaceAclDetail.EntityData.SegmentPath
    interfaceAclDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAclDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAclDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAclDetail.EntityData.Children = types.NewOrderedMap()
    interfaceAclDetail.EntityData.Children.Append("ace-brief", types.YChild{"AceBrief", &interfaceAclDetail.AceBrief})
    interfaceAclDetail.EntityData.Children.Append("ace-detail", types.YChild{"AceDetail", nil})
    for i := range interfaceAclDetail.AceDetail {
        types.SetYListKey(interfaceAclDetail.AceDetail[i], i)
        interfaceAclDetail.EntityData.Children.Append(types.GetSegmentPath(interfaceAclDetail.AceDetail[i]), types.YChild{"AceDetail", interfaceAclDetail.AceDetail[i]})
    }
    interfaceAclDetail.EntityData.Leafs = types.NewOrderedMap()

    interfaceAclDetail.EntityData.YListKeys = []string {}

    return &(interfaceAclDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief
// ACE brief information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress
}

func (aceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief) GetEntityData() *types.CommonEntityData {
    aceBrief.EntityData.YFilter = aceBrief.YFilter
    aceBrief.EntityData.YangName = "ace-brief"
    aceBrief.EntityData.BundleName = "cisco_ios_xr"
    aceBrief.EntityData.ParentYangName = "interface-acl-detail"
    aceBrief.EntityData.SegmentPath = "ace-brief"
    aceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/" + aceBrief.EntityData.SegmentPath
    aceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceBrief.EntityData.Children = types.NewOrderedMap()
    aceBrief.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &aceBrief.NextHopAddress})
    aceBrief.EntityData.Leafs = types.NewOrderedMap()
    aceBrief.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", aceBrief.Grant})
    aceBrief.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", aceBrief.LoggingEnabled})
    aceBrief.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", aceBrief.PerAceIcmpEnabled})
    aceBrief.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", aceBrief.NextHopEnabled})
    aceBrief.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", aceBrief.DefaultNextHopEnabled})
    aceBrief.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", aceBrief.TotalTcamEntries})
    aceBrief.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", aceBrief.Hits})
    aceBrief.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", aceBrief.NpuId})

    aceBrief.EntityData.YListKeys = []string {}

    return &(aceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceBrief_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "ace-brief"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-brief/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail
// ACE detail information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry ID. The type is interface{} with range: -2147483648..2147483647.
    EntryId interface{}

    // IPv4 TCAM entries.
    Ipv4tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam

    // IPv6 TCAM entries.
    Ipv6tcam AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam
}

func (aceDetail *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail) GetEntityData() *types.CommonEntityData {
    aceDetail.EntityData.YFilter = aceDetail.YFilter
    aceDetail.EntityData.YangName = "ace-detail"
    aceDetail.EntityData.BundleName = "cisco_ios_xr"
    aceDetail.EntityData.ParentYangName = "interface-acl-detail"
    aceDetail.EntityData.SegmentPath = "ace-detail" + types.AddNoKeyToken(aceDetail)
    aceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/" + aceDetail.EntityData.SegmentPath
    aceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aceDetail.EntityData.Children = types.NewOrderedMap()
    aceDetail.EntityData.Children.Append("ipv4tcam", types.YChild{"Ipv4tcam", &aceDetail.Ipv4tcam})
    aceDetail.EntityData.Children.Append("ipv6tcam", types.YChild{"Ipv6tcam", &aceDetail.Ipv6tcam})
    aceDetail.EntityData.Leafs = types.NewOrderedMap()
    aceDetail.EntityData.Leafs.Append("entry-id", types.YLeaf{"EntryId", aceDetail.EntryId})

    aceDetail.EntityData.YListKeys = []string {}

    return &(aceDetail.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam
// IPv4 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry
}

func (ipv4tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam) GetEntityData() *types.CommonEntityData {
    ipv4tcam.EntityData.YFilter = ipv4tcam.YFilter
    ipv4tcam.EntityData.YangName = "ipv4tcam"
    ipv4tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv4tcam.EntityData.ParentYangName = "ace-detail"
    ipv4tcam.EntityData.SegmentPath = "ipv4tcam"
    ipv4tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/" + ipv4tcam.EntityData.SegmentPath
    ipv4tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4tcam.EntityData.Children = types.NewOrderedMap()
    ipv4tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv4tcam.TcamEntry})
    ipv4tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv4tcam.EntityData.YListKeys = []string {}

    return &(ipv4tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pfilter IPv4 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value

    // Pfilter IPv4 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask

    // Pfilter IPv4 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv4tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv4tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value
// Pfilter IPv4 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv4tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", value.SourceAddress})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", value.Dscp})
    value.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", value.Ttl})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", value.DestinationAddress})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv4tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask
// Pfilter IPv4 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv4tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", mask.SourceAddress})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", mask.Dscp})
    mask.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", mask.Ttl})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", mask.DestinationAddress})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv4tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result
// Pfilter IPv4 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // Source range ID. The type is interface{} with range: 0..65535.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..65535.
    DestinationRangeId interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Fragment. The type is interface{} with range: 0..65535.
    Fragment interface{}

    // DSCP. The type is interface{} with range: 0..255.
    Dscp interface{}

    // TTL. The type is interface{} with range: 0..4294967295.
    Ttl interface{}

    // Layer 4 source port. The type is interface{} with range: 0..65535.
    Layer4SourcePort interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Packet length range ID. The type is interface{} with range: 0..255.
    PacketLengthRange interface{}

    // TCP flag value.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv4tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", result.SourceAddress})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("dscp", types.YLeaf{"Dscp", result.Dscp})
    result.EntityData.Leafs.Append("ttl", types.YLeaf{"Ttl", result.Ttl})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", result.DestinationAddress})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags
// TCP flag value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv4tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv4tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam
// IPv6 TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCAM entries.
    TcamEntry AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry
}

func (ipv6tcam *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam) GetEntityData() *types.CommonEntityData {
    ipv6tcam.EntityData.YFilter = ipv6tcam.YFilter
    ipv6tcam.EntityData.YangName = "ipv6tcam"
    ipv6tcam.EntityData.BundleName = "cisco_ios_xr"
    ipv6tcam.EntityData.ParentYangName = "ace-detail"
    ipv6tcam.EntityData.SegmentPath = "ipv6tcam"
    ipv6tcam.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/" + ipv6tcam.EntityData.SegmentPath
    ipv6tcam.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6tcam.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6tcam.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6tcam.EntityData.Children = types.NewOrderedMap()
    ipv6tcam.EntityData.Children.Append("tcam-entry", types.YChild{"TcamEntry", &ipv6tcam.TcamEntry})
    ipv6tcam.EntityData.Leafs = types.NewOrderedMap()

    ipv6tcam.EntityData.YListKeys = []string {}

    return &(ipv6tcam.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry
// TCAM entries
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddressMask interface{}

    // Destination address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination address mask. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddressMask interface{}

    // IPv6 TCAM value.
    Value AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value

    // IPv6 TCAM mask.
    Mask AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask

    // IPv6 TCAM result.
    Result AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result
}

func (tcamEntry *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry) GetEntityData() *types.CommonEntityData {
    tcamEntry.EntityData.YFilter = tcamEntry.YFilter
    tcamEntry.EntityData.YangName = "tcam-entry"
    tcamEntry.EntityData.BundleName = "cisco_ios_xr"
    tcamEntry.EntityData.ParentYangName = "ipv6tcam"
    tcamEntry.EntityData.SegmentPath = "tcam-entry"
    tcamEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv6tcam/" + tcamEntry.EntityData.SegmentPath
    tcamEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcamEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcamEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcamEntry.EntityData.Children = types.NewOrderedMap()
    tcamEntry.EntityData.Children.Append("value", types.YChild{"Value", &tcamEntry.Value})
    tcamEntry.EntityData.Children.Append("mask", types.YChild{"Mask", &tcamEntry.Mask})
    tcamEntry.EntityData.Children.Append("result", types.YChild{"Result", &tcamEntry.Result})
    tcamEntry.EntityData.Leafs = types.NewOrderedMap()
    tcamEntry.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", tcamEntry.SourceAddress})
    tcamEntry.EntityData.Leafs.Append("source-address-mask", types.YLeaf{"SourceAddressMask", tcamEntry.SourceAddressMask})
    tcamEntry.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", tcamEntry.DestinationAddress})
    tcamEntry.EntityData.Leafs.Append("destination-address-mask", types.YLeaf{"DestinationAddressMask", tcamEntry.DestinationAddressMask})

    tcamEntry.EntityData.YListKeys = []string {}

    return &(tcamEntry.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value
// IPv6 TCAM value
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
}

func (value *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "tcam-entry"
    value.EntityData.SegmentPath = "value"
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv6tcam/tcam-entry/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &value.TcpFlags})
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", value.AclId})
    value.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", value.Protocol})
    value.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", value.Layer4SourcePort})
    value.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", value.Layer4DestinationPort})
    value.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", value.SourceRangeId})
    value.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", value.DestinationRangeId})
    value.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", value.DestinationHeader})
    value.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", value.ReceiveTransitionGapHeader})
    value.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", value.AuthenticationHeader})
    value.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", value.Fragment})
    value.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", value.Tos})
    value.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", value.PacketLengthRange})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Value_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "value"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv6tcam/tcam-entry/value/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask
// IPv6 TCAM mask
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
}

func (mask *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask) GetEntityData() *types.CommonEntityData {
    mask.EntityData.YFilter = mask.YFilter
    mask.EntityData.YangName = "mask"
    mask.EntityData.BundleName = "cisco_ios_xr"
    mask.EntityData.ParentYangName = "tcam-entry"
    mask.EntityData.SegmentPath = "mask"
    mask.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv6tcam/tcam-entry/" + mask.EntityData.SegmentPath
    mask.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mask.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mask.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mask.EntityData.Children = types.NewOrderedMap()
    mask.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &mask.TcpFlags})
    mask.EntityData.Leafs = types.NewOrderedMap()
    mask.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", mask.AclId})
    mask.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", mask.Protocol})
    mask.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", mask.Layer4SourcePort})
    mask.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", mask.Layer4DestinationPort})
    mask.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", mask.SourceRangeId})
    mask.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", mask.DestinationRangeId})
    mask.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", mask.DestinationHeader})
    mask.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", mask.ReceiveTransitionGapHeader})
    mask.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", mask.AuthenticationHeader})
    mask.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", mask.Fragment})
    mask.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", mask.Tos})
    mask.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", mask.PacketLengthRange})

    mask.EntityData.YListKeys = []string {}

    return &(mask.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Mask_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "mask"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv6tcam/tcam-entry/mask/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result
// IPv6 TCAM result
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ACL ID. The type is interface{} with range: 0..65535.
    AclId interface{}

    // protocol flags. The type is interface{} with range: 0..255.
    Protocol interface{}

    // Layer 4 source port. The type is interface{} with range: 0..4294967295.
    Layer4SourcePort interface{}

    // Layer 4 destination port. The type is interface{} with range: 0..65535.
    Layer4DestinationPort interface{}

    // Source range. The type is interface{} with range: 0..4294967295.
    SourceRangeId interface{}

    // Destination range ID. The type is interface{} with range: 0..4294967295.
    DestinationRangeId interface{}

    // Destination header. The type is interface{} with range: 0..255.
    DestinationHeader interface{}

    // Receive/transmit transition gap header. The type is interface{} with range:
    // 0..255.
    ReceiveTransitionGapHeader interface{}

    // Authentication header. The type is interface{} with range: 0..255.
    AuthenticationHeader interface{}

    // Fragment. The type is interface{} with range: 0..255.
    Fragment interface{}

    // TOS. The type is interface{} with range: 0..255.
    Tos interface{}

    // Packet length range ID. The type is interface{} with range: 0..4294967295.
    PacketLengthRange interface{}

    // TCP flags.
    TcpFlags AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
}

func (result *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result) GetEntityData() *types.CommonEntityData {
    result.EntityData.YFilter = result.YFilter
    result.EntityData.YangName = "result"
    result.EntityData.BundleName = "cisco_ios_xr"
    result.EntityData.ParentYangName = "tcam-entry"
    result.EntityData.SegmentPath = "result"
    result.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv6tcam/tcam-entry/" + result.EntityData.SegmentPath
    result.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    result.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    result.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    result.EntityData.Children = types.NewOrderedMap()
    result.EntityData.Children.Append("tcp-flags", types.YChild{"TcpFlags", &result.TcpFlags})
    result.EntityData.Leafs = types.NewOrderedMap()
    result.EntityData.Leafs.Append("acl-id", types.YLeaf{"AclId", result.AclId})
    result.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", result.Protocol})
    result.EntityData.Leafs.Append("layer4-source-port", types.YLeaf{"Layer4SourcePort", result.Layer4SourcePort})
    result.EntityData.Leafs.Append("layer4-destination-port", types.YLeaf{"Layer4DestinationPort", result.Layer4DestinationPort})
    result.EntityData.Leafs.Append("source-range-id", types.YLeaf{"SourceRangeId", result.SourceRangeId})
    result.EntityData.Leafs.Append("destination-range-id", types.YLeaf{"DestinationRangeId", result.DestinationRangeId})
    result.EntityData.Leafs.Append("destination-header", types.YLeaf{"DestinationHeader", result.DestinationHeader})
    result.EntityData.Leafs.Append("receive-transition-gap-header", types.YLeaf{"ReceiveTransitionGapHeader", result.ReceiveTransitionGapHeader})
    result.EntityData.Leafs.Append("authentication-header", types.YLeaf{"AuthenticationHeader", result.AuthenticationHeader})
    result.EntityData.Leafs.Append("fragment", types.YLeaf{"Fragment", result.Fragment})
    result.EntityData.Leafs.Append("tos", types.YLeaf{"Tos", result.Tos})
    result.EntityData.Leafs.Append("packet-length-range", types.YLeaf{"PacketLengthRange", result.PacketLengthRange})

    result.EntityData.YListKeys = []string {}

    return &(result.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags
// TCP flags
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TCP urgent flag. The type is interface{} with range: 0..255.
    Urgent interface{}

    // TCP acknowledge flag. The type is interface{} with range: 0..255.
    Acknowledge interface{}

    // TCP push flag. The type is interface{} with range: 0..255.
    Push interface{}

    // TCP reset flag. The type is interface{} with range: 0..255.
    Reset interface{}

    // TCP synchronization flag. The type is interface{} with range: 0..255.
    Synchronization interface{}

    // TCP finish flag. The type is interface{} with range: 0..255.
    Finish interface{}
}

func (tcpFlags *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceDetails_SequenceDetail_InterfaceAclDetail_AceDetail_Ipv6tcam_TcamEntry_Result_TcpFlags) GetEntityData() *types.CommonEntityData {
    tcpFlags.EntityData.YFilter = tcpFlags.YFilter
    tcpFlags.EntityData.YangName = "tcp-flags"
    tcpFlags.EntityData.BundleName = "cisco_ios_xr"
    tcpFlags.EntityData.ParentYangName = "result"
    tcpFlags.EntityData.SegmentPath = "tcp-flags"
    tcpFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-details/sequence-detail/interface-acl-detail/ace-detail/ipv6tcam/tcam-entry/result/" + tcpFlags.EntityData.SegmentPath
    tcpFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpFlags.EntityData.Children = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs = types.NewOrderedMap()
    tcpFlags.EntityData.Leafs.Append("urgent", types.YLeaf{"Urgent", tcpFlags.Urgent})
    tcpFlags.EntityData.Leafs.Append("acknowledge", types.YLeaf{"Acknowledge", tcpFlags.Acknowledge})
    tcpFlags.EntityData.Leafs.Append("push", types.YLeaf{"Push", tcpFlags.Push})
    tcpFlags.EntityData.Leafs.Append("reset", types.YLeaf{"Reset", tcpFlags.Reset})
    tcpFlags.EntityData.Leafs.Append("synchronization", types.YLeaf{"Synchronization", tcpFlags.Synchronization})
    tcpFlags.EntityData.Leafs.Append("finish", types.YLeaf{"Finish", tcpFlags.Finish})

    tcpFlags.EntityData.YListKeys = []string {}

    return &(tcpFlags.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs
// Table of all sequence numbers per ACL
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detail ACL information. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief.
    SequenceBrief []*AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief
}

func (sequenceBriefs *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs) GetEntityData() *types.CommonEntityData {
    sequenceBriefs.EntityData.YFilter = sequenceBriefs.YFilter
    sequenceBriefs.EntityData.YangName = "sequence-briefs"
    sequenceBriefs.EntityData.BundleName = "cisco_ios_xr"
    sequenceBriefs.EntityData.ParentYangName = "access"
    sequenceBriefs.EntityData.SegmentPath = "sequence-briefs"
    sequenceBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/" + sequenceBriefs.EntityData.SegmentPath
    sequenceBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceBriefs.EntityData.Children = types.NewOrderedMap()
    sequenceBriefs.EntityData.Children.Append("sequence-brief", types.YChild{"SequenceBrief", nil})
    for i := range sequenceBriefs.SequenceBrief {
        sequenceBriefs.EntityData.Children.Append(types.GetSegmentPath(sequenceBriefs.SequenceBrief[i]), types.YChild{"SequenceBrief", sequenceBriefs.SequenceBrief[i]})
    }
    sequenceBriefs.EntityData.Leafs = types.NewOrderedMap()

    sequenceBriefs.EntityData.YListKeys = []string {}

    return &(sequenceBriefs.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief
// Detail ACL information
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Brief ACL information for a particular sequence.
    // The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Common ACL information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl.
    CommonAcl []*AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl

    // Interface ACL information across Slices. The type is slice of
    // AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl.
    InterfaceAcl []*AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl
}

func (sequenceBrief *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief) GetEntityData() *types.CommonEntityData {
    sequenceBrief.EntityData.YFilter = sequenceBrief.YFilter
    sequenceBrief.EntityData.YangName = "sequence-brief"
    sequenceBrief.EntityData.BundleName = "cisco_ios_xr"
    sequenceBrief.EntityData.ParentYangName = "sequence-briefs"
    sequenceBrief.EntityData.SegmentPath = "sequence-brief" + types.AddKeyToken(sequenceBrief.SequenceNumber, "sequence-number")
    sequenceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-briefs/" + sequenceBrief.EntityData.SegmentPath
    sequenceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceBrief.EntityData.Children = types.NewOrderedMap()
    sequenceBrief.EntityData.Children.Append("common-acl", types.YChild{"CommonAcl", nil})
    for i := range sequenceBrief.CommonAcl {
        types.SetYListKey(sequenceBrief.CommonAcl[i], i)
        sequenceBrief.EntityData.Children.Append(types.GetSegmentPath(sequenceBrief.CommonAcl[i]), types.YChild{"CommonAcl", sequenceBrief.CommonAcl[i]})
    }
    sequenceBrief.EntityData.Children.Append("interface-acl", types.YChild{"InterfaceAcl", nil})
    for i := range sequenceBrief.InterfaceAcl {
        types.SetYListKey(sequenceBrief.InterfaceAcl[i], i)
        sequenceBrief.EntityData.Children.Append(types.GetSegmentPath(sequenceBrief.InterfaceAcl[i]), types.YChild{"InterfaceAcl", sequenceBrief.InterfaceAcl[i]})
    }
    sequenceBrief.EntityData.Leafs = types.NewOrderedMap()
    sequenceBrief.EntityData.Leafs.Append("sequence-number", types.YLeaf{"SequenceNumber", sequenceBrief.SequenceNumber})

    sequenceBrief.EntityData.YListKeys = []string {"SequenceNumber"}

    return &(sequenceBrief.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl
// Common ACL information across Slices
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress
}

func (commonAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl) GetEntityData() *types.CommonEntityData {
    commonAcl.EntityData.YFilter = commonAcl.YFilter
    commonAcl.EntityData.YangName = "common-acl"
    commonAcl.EntityData.BundleName = "cisco_ios_xr"
    commonAcl.EntityData.ParentYangName = "sequence-brief"
    commonAcl.EntityData.SegmentPath = "common-acl" + types.AddNoKeyToken(commonAcl)
    commonAcl.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-briefs/sequence-brief/" + commonAcl.EntityData.SegmentPath
    commonAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    commonAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    commonAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    commonAcl.EntityData.Children = types.NewOrderedMap()
    commonAcl.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &commonAcl.NextHopAddress})
    commonAcl.EntityData.Leafs = types.NewOrderedMap()
    commonAcl.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", commonAcl.Grant})
    commonAcl.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", commonAcl.LoggingEnabled})
    commonAcl.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", commonAcl.PerAceIcmpEnabled})
    commonAcl.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", commonAcl.NextHopEnabled})
    commonAcl.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", commonAcl.DefaultNextHopEnabled})
    commonAcl.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", commonAcl.TotalTcamEntries})
    commonAcl.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", commonAcl.Hits})
    commonAcl.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", commonAcl.NpuId})

    commonAcl.EntityData.YListKeys = []string {}

    return &(commonAcl.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_CommonAcl_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "common-acl"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-briefs/sequence-brief/common-acl/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl
// Interface ACL information across Slices
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Either permit or deny. The type is SseGrant.
    Grant interface{}

    // Logging enabled/disabled. The type is bool.
    LoggingEnabled interface{}

    // Per ACE ICMP enabled/disabled. The type is bool.
    PerAceIcmpEnabled interface{}

    // Next hop enabled/disabled. The type is bool.
    NextHopEnabled interface{}

    // Default next hop enabled/disabled. The type is bool.
    DefaultNextHopEnabled interface{}

    // Number of TCAM entries. The type is interface{} with range: 0..4294967295.
    TotalTcamEntries interface{}

    // Number of TCAM hits. The type is interface{} with range:
    // 0..18446744073709551615.
    Hits interface{}

    // NPU Id. The type is interface{} with range: 0..255.
    NpuId interface{}

    // Next hop address.
    NextHopAddress AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress
}

func (interfaceAcl *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl) GetEntityData() *types.CommonEntityData {
    interfaceAcl.EntityData.YFilter = interfaceAcl.YFilter
    interfaceAcl.EntityData.YangName = "interface-acl"
    interfaceAcl.EntityData.BundleName = "cisco_ios_xr"
    interfaceAcl.EntityData.ParentYangName = "sequence-brief"
    interfaceAcl.EntityData.SegmentPath = "interface-acl" + types.AddNoKeyToken(interfaceAcl)
    interfaceAcl.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-briefs/sequence-brief/" + interfaceAcl.EntityData.SegmentPath
    interfaceAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceAcl.EntityData.Children = types.NewOrderedMap()
    interfaceAcl.EntityData.Children.Append("next-hop-address", types.YChild{"NextHopAddress", &interfaceAcl.NextHopAddress})
    interfaceAcl.EntityData.Leafs = types.NewOrderedMap()
    interfaceAcl.EntityData.Leafs.Append("grant", types.YLeaf{"Grant", interfaceAcl.Grant})
    interfaceAcl.EntityData.Leafs.Append("logging-enabled", types.YLeaf{"LoggingEnabled", interfaceAcl.LoggingEnabled})
    interfaceAcl.EntityData.Leafs.Append("per-ace-icmp-enabled", types.YLeaf{"PerAceIcmpEnabled", interfaceAcl.PerAceIcmpEnabled})
    interfaceAcl.EntityData.Leafs.Append("next-hop-enabled", types.YLeaf{"NextHopEnabled", interfaceAcl.NextHopEnabled})
    interfaceAcl.EntityData.Leafs.Append("default-next-hop-enabled", types.YLeaf{"DefaultNextHopEnabled", interfaceAcl.DefaultNextHopEnabled})
    interfaceAcl.EntityData.Leafs.Append("total-tcam-entries", types.YLeaf{"TotalTcamEntries", interfaceAcl.TotalTcamEntries})
    interfaceAcl.EntityData.Leafs.Append("hits", types.YLeaf{"Hits", interfaceAcl.Hits})
    interfaceAcl.EntityData.Leafs.Append("npu-id", types.YLeaf{"NpuId", interfaceAcl.NpuId})

    interfaceAcl.EntityData.YListKeys = []string {}

    return &(interfaceAcl.EntityData)
}

// AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress
// Next hop address
type AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AddressType. The type is SsePfilterAddr.
    AddressType interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4Address interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6Address interface{}
}

func (nextHopAddress *AccessListHardware_Nodes_Node_Ingress_Ipv6_Accesses_Access_SequenceBriefs_SequenceBrief_InterfaceAcl_NextHopAddress) GetEntityData() *types.CommonEntityData {
    nextHopAddress.EntityData.YFilter = nextHopAddress.YFilter
    nextHopAddress.EntityData.YangName = "next-hop-address"
    nextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    nextHopAddress.EntityData.ParentYangName = "interface-acl"
    nextHopAddress.EntityData.SegmentPath = "next-hop-address"
    nextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ncs6k-acl-oper:access-list-hardware/nodes/node/ingress/ipv6/accesses/access/sequence-briefs/sequence-brief/interface-acl/" + nextHopAddress.EntityData.SegmentPath
    nextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopAddress.EntityData.Children = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    nextHopAddress.EntityData.Leafs.Append("address-type", types.YLeaf{"AddressType", nextHopAddress.AddressType})
    nextHopAddress.EntityData.Leafs.Append("ipv4-address", types.YLeaf{"Ipv4Address", nextHopAddress.Ipv4Address})
    nextHopAddress.EntityData.Leafs.Append("ipv6-address", types.YLeaf{"Ipv6Address", nextHopAddress.Ipv6Address})

    nextHopAddress.EntityData.YListKeys = []string {}

    return &(nextHopAddress.EntityData)
}

